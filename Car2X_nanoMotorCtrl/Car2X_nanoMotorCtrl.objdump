
Car2X_nanoMotorCtrl.elf:     file format elf32-littlenios2
Car2X_nanoMotorCtrl.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x020001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x0001c080 memsz 0x0001c080 flags r-x
    LOAD off    0x0001d0a0 vaddr 0x0201c0a0 paddr 0x0201dc28 align 2**12
         filesz 0x00001b88 memsz 0x00001b88 flags rw-
    LOAD off    0x0001f7b0 vaddr 0x0201f7b0 paddr 0x0201f7b0 align 2**12
         filesz 0x00000000 memsz 0x00000b3c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001b674  020001b8  020001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000874  0201b82c  0201b82c  0001c82c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b88  0201c0a0  0201dc28  0001d0a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000b3c  0201f7b0  0201f7b0  0001f7b0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0001ec28  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001320  00000000  00000000  0001ec50  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00004518  00000000  00000000  0001ff70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0003ef35  00000000  00000000  00024488  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000e1ca  00000000  00000000  000633bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0002069c  00000000  00000000  00071587  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000436c  00000000  00000000  00091c24  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000047f4  00000000  00000000  00095f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00011b1d  00000000  00000000  0009a784  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  000ac2a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000e10  00000000  00000000  000ac2e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000b53b3  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000b53b6  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  000b53b9  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  000b53ba  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  000b53be  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  000b53c2  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  000b53c6  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  000b53cf  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  000b53d8  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 0000000d  00000000  00000000  000b53e1  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000052  00000000  00000000  000b53ee  2**0
                  CONTENTS, READONLY
 28 .jdi          0000b10d  00000000  00000000  000b5440  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000b562c  00000000  00000000  000c054d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
020001b8 l    d  .text	00000000 .text
0201b82c l    d  .rodata	00000000 .rodata
0201c0a0 l    d  .rwdata	00000000 .rwdata
0201f7b0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
020001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 utility.cpp
00000000 l    df *ABS*	00000000 accelerometer_interface.cpp
00000000 l    df *ABS*	00000000 adc_interface.cpp
00000000 l    df *ABS*	00000000 eth_uart.cpp
00000000 l    df *ABS*	00000000 motor_pwm.cpp
00000000 l    df *ABS*	00000000 ultrasound_interface.cpp
00000000 l    df *ABS*	00000000 main.cpp
0201f81c l     O .bss	00000018 alarm
00000000 l    df *ABS*	00000000 pidcontroller.cpp
00000000 l    df *ABS*	00000000 I2C.cpp
00000000 l    df *ABS*	00000000 accelerometer_adxl345_spi.cpp
00000000 l    df *ABS*	00000000 adc_spi_read.cpp
00000000 l    df *ABS*	00000000 terasic_spi.cpp
00000000 l    df *ABS*	00000000 ADCInfoMessage.cpp
00000000 l    df *ABS*	00000000 ADCValuesMessage.cpp
00000000 l    df *ABS*	00000000 AccelerationValuesMessage.cpp
00000000 l    df *ABS*	00000000 CControlMessage.cpp
00000000 l    df *ABS*	00000000 CEmergencyBrakeMessage.cpp
00000000 l    df *ABS*	00000000 CInfoSensorMessage.cpp
00000000 l    df *ABS*	00000000 CInfoStateMessage.cpp
00000000 l    df *ABS*	00000000 CRemoteControlMessage.cpp
00000000 l    df *ABS*	00000000 CarMessage.cpp
00000000 l    df *ABS*	00000000 CarProtocol.cpp
00000000 l    df *ABS*	00000000 MotorMeasurementMessage.cpp
00000000 l    df *ABS*	00000000 MotorVelocityMessage.cpp
00000000 l    df *ABS*	00000000 UltrasoundDistanceMessage.cpp
00000000 l    df *ABS*	00000000 WelcomeMessage.cpp
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 eh_personality.cc
0200b25c l     F .text	00000030 _Z12read_uleb128PKhPj
0200b28c l     F .text	00000054 _Z12read_sleb128PKhPi
0200b2e0 l     F .text	0000009c _Z16get_adjusted_ptrPKSt9type_infoS1_PPv
0200b37c l     F .text	000001d4 _Z28read_encoded_value_with_basehjPKhPj
0200b550 l     F .text	00000090 _Z21base_of_encoded_valuehP15_Unwind_Context
0200b5e0 l     F .text	00000100 _Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
0200b6e0 l     F .text	00000084 _Z15get_ttype_entryP16lsda_header_infoj
0200b764 l     F .text	00000084 _Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 eh_throw.cc
0200c22c l     F .text	00000060 _Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
0201f834 l     O .bss	00000800 emergency_buffer
0201f7d4 l     O .bss	00000004 emergency_used
00000000 l    df *ABS*	00000000 new_op.cc
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 new_handler.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
0201f7dc l     O .bss	00000008 eh_globals
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0200cf80 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
0201f7e4 l     O .bss	00000004 fc_static
0200d1c4 l     F .text	00000100 _Unwind_ForcedUnwind_Phase2
0200d2dc l     F .text	000000cc _Unwind_RaiseException_Phase2
0200d3a8 l     F .text	00000028 uw_install_context
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0200e3c4 l     F .text	00000058 __sprint_r
0201bebe l     O .rodata	00000010 blanks.3452
0201beae l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
02010440 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
02011e68 l     F .text	00000058 std
02011f74 l     F .text	00000008 __fp_lock
02011f7c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0201c4a8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0201dbf4 l     O .rwdata	00000004 charset
0201bef4 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0201c03c l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
02015ae0 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
02017518 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
02017578 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
020175a4 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
020176dc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
02017820 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
020179c0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
02017aa0 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
02017c00 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
02017e30 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0201dc10 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
020182bc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0201ca5c l     O .rwdata	000000c8 epcs
0201cb24 l     O .rwdata	00001060 jtag_uart
0201db84 l     O .rwdata	0000002c uart_0
020183c0 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_epcs_flash_controller.c
02018484 l     F .text	00000288 alt_epcs_flash_query
0201844c l     F .text	00000038 alt_flash_device_register
0201870c l     F .text	00000108 alt_epcs_flash_memcmp
02018b94 l     F .text	00000094 alt_epcs_test_address
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
02018fdc l     F .text	0000022c altera_avalon_jtag_uart_irq
02019208 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
02019884 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 epcs_commands.c
02019e70 l     F .text	00000038 epcs_await_wip_released
02019ea8 l     F .text	00000038 epcs_test_wip
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0201a618 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0201a8c0 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0201abd0 l     F .text	000000f8 alt_file_locked
0201ae54 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0201b4f0 l     F .text	00000004 register_fini
02008e54 g     F .text	00000138 _ZN24CMotorMeasurementMessage12parseMessageEPhi
0200c4ac g     F .text	00000040 __cxa_free_exception
020073e8 g     F .text	00000050 _ZN11CCarMessageD1Ev
020036f4 g     F .text	00000178 _ZN15CADCInfoMessage13answerMessageEhPhS0_
0200c45c g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
02000c58 g     F .text	000000c0 _Z12measureSpeedv
02013480 g     F .text	00000094 _mprec_log10
0200bf3c g     F .text	00000018 _ZSt10unexpectedv
02018a94 g     F .text	00000090 alt_epcs_flash_get_info
02006968 g     F .text	00000028 _ZN21CRemoteControlMessage8getBytesEPh
0201b9e4  w    O .rodata	00000015 _ZTS18CInfoSensorMessage
0201356c g     F .text	00000088 __any_on
02014cb4 g     F .text	00000070 _isatty_r
0201baa0  w    O .rodata	0000000e _ZTS11CCarMessage
0201c014 g     O .rodata	00000028 __mprec_tinytens
02017c60 g     F .text	0000006c alt_main
0200386c g     F .text	00000024 _ZN15CADCInfoMessage9getLengthEv
02006a8c g     F .text	00000058 _ZN21CRemoteControlMessageD1Ev
020098e8 g     F .text	0000015c _ZN21CMotorVelocityMessageC1EPhi
0200dedc g     F .text	000000a0 _puts_r
020069b4 g     F .text	00000080 _ZN21CRemoteControlMessage12parseMessageEPhi
0202005c g     O .bss	00000100 alt_irq
02005db4 g     F .text	00000128 _ZN22CEmergencyBrakeMessageC1EPhi
02004c18 g     F .text	000000f8 _ZN26CAccelerationValuesMessage12parseMessageEPhi
02014d24 g     F .text	00000078 _lseek_r
02006244 g     F .text	00000128 _ZN18CInfoSensorMessageC1EPhi
0201b9fc  w    O .rodata	0000000c _ZTI18CInfoSensorMessage
0200d174 g     F .text	00000014 _Unwind_GetIPInfo
0201dc28 g       *ABS*	00000000 __flash_rwdata_start
02006924 g     F .text	00000024 _ZN21CRemoteControlMessage13answerMessageEb
0201bb48  w    O .rodata	0000000c _ZTI21CMotorVelocityMessage
02016600 g     F .text	00000088 __eqdf2
0200c868 g     F .text	00000718 __divdi3
0200c144 g     F .text	00000074 __cxa_rethrow
0201ba78  w    O .rodata	0000000c _ZTI21CRemoteControlMessage
02006048 g     F .text	00000028 _ZN18CInfoSensorMessage8getBytesEPh
0200d114 g     F .text	0000000c _Unwind_SjLj_Unregister
0200be5c g     F .text	00000014 _ZSt14set_unexpectedPFvvE
02005c2c g     F .text	00000058 _ZN22CEmergencyBrakeMessageD0Ev
020065fc g     F .text	00000058 _ZN17CInfoStateMessageD2Ev
0200d164 g     F .text	00000010 _Unwind_GetIP
020202ec g       *ABS*	00000000 __alt_heap_start
0200e2dc g     F .text	00000074 _kill_r
02007048 g     F .text	00000064 _ZN11CCarMessage9setHeaderEhhb
0200c848 g     F .text	00000010 _ZNSt9bad_allocD2Ev
0200de64 g     F .text	00000044 printf
02006494 g     F .text	00000024 _ZN17CInfoStateMessage13answerMessageEb
0200c358 g     F .text	00000034 _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_
0200e21c g     F .text	000000a0 _signal_r
0201dbbc  w    O .rwdata	00000008 _ZTI12CCarProtocol
0201476c g     F .text	00000068 __sseek
02011ed0 g     F .text	000000a4 __sinit
0200962c g     F .text	00000020 _ZN21CMotorVelocityMessage8doActionEv
020057e4 g     F .text	00000058 _ZN15CControlMessageD2Ev
020045b0 g     F .text	00000058 _ZN17CADCValuesMessageD2Ev
0201ba84  w    O .rodata	0000001c _ZTV11CCarMessage
0200c348 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
02012bdc g     F .text	00000084 _setlocale_r
0201bc60  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
02011fd0 g     F .text	0000009c __sfmoreglue
02017cec g     F .text	00000020 __malloc_unlock
02019bb4 g     F .text	00000090 alt_up_rs232_read_fd
02005edc g     F .text	00000128 _ZN22CEmergencyBrakeMessageC2EPhi
02007438 g     F .text	00000050 _ZN11CCarMessageD2Ev
0201bb30  w    O .rodata	00000018 _ZTS21CMotorVelocityMessage
02007104 g     F .text	00000058 _ZN11CCarMessageC2Ehhb
02009890 g     F .text	00000058 _ZN21CMotorVelocityMessageD2Ev
0200bf5c g     F .text	00000020 _ZSt18uncaught_exceptionv
02006500 g     F .text	00000024 _ZN17CInfoStateMessage9getLengthEv
02008d20 g     F .text	00000134 _ZN24CMotorMeasurementMessage8getBytesEPh
020070ac g     F .text	00000058 _ZN11CCarMessageC1Ehhb
02002078 g     F .text	00000070 _ZN13CPIControllerC2Ellll
02007488 g     F .text	000000c0 _ZN12CCarProtocolC2EtPP11CCarMessagem
020067fc g     F .text	00000128 _ZN17CInfoStateMessageC2EPhi
02005d34 g     F .text	00000040 _ZN22CEmergencyBrakeMessageC1Ev
0201bab0  w    O .rodata	00000010 _ZTV12CCarProtocol
02006f04 g     F .text	0000009c _ZN11CCarMessage8getBytesEPh
02012f94 g     F .text	000000e0 memmove
020016f0 g     F .text	00000128 _Z12controlSpeedv
0200c750 g     F .text	00000010 _ZNSt9exceptionD2Ev
02011fc0 g     F .text	00000010 _cleanup
020135f4 g     F .text	000000bc _Balloc
02000684 g     F .text	000000d4 _ZN16CEth_UART_Socket16ReceiveImmediateEPhm
02002f84 g     F .text	000000cc _Z20ADXL345_SPI_XYZ_ReadmPt
0200a438 g     F .text	00000150 _ZN26CUltrasoundDistanceMessageC1Ev
02002490 g     F .text	00000154 _Z8i2c_readmmPhb
0201ba08  w    O .rodata	0000001c _ZTV17CInfoStateMessage
0201b900  w    O .rodata	0000001c _ZTV26CAccelerationValuesMessage
020036d4 g     F .text	00000020 _ZN15CADCInfoMessage8doActionEv
02016710 g     F .text	00000088 __gtdf2
0201bcc4  w    O .rodata	00000014 _ZTVSt13bad_exception
0201bb14  w    O .rodata	0000001c _ZTV21CMotorVelocityMessage
00000000  w      *UND*	00000000 __errno
02019d78 g     F .text	000000f8 epcs_sector_erase
02009cf8 g     F .text	00000158 _ZN21CMotorVelocityMessageC2Es
02000000 g     F .entry	0000000c __reset
0200d1a4 g     F .text	00000008 _Unwind_GetRegionStart
02009ee4 g     F .text	00000094 _ZN26CUltrasoundDistanceMessage12parseMessageEPhi
020043ec g     F .text	00000114 _ZN17CADCValuesMessage8getBytesEPh
02000020 g       *ABS*	00000000 __flash_exceptions_start
02014c40 g     F .text	00000074 _fstat_r
02004608 g     F .text	0000015c _ZN17CADCValuesMessageC1EPhi
020066d4 g     F .text	00000128 _ZN17CInfoStateMessageC1EPhi
0200c620 g     F .text	00000100 _Znwm
0201f7f4 g     O .bss	00000004 errno
0201f7c0 g     O .bss	00000004 uiMaxSpeed
02007bb8 g     F .text	00000120 _ZN12CCarProtocolD2Ev
0201f7b4 g     O .bss	00000004 uiAvailableOperations
0200d574 g     F .text	00000080 _Unwind_Backtrace
0200964c g     F .text	00000024 _ZN21CMotorVelocityMessage9getLengthEv
02008fe4 g     F .text	00000058 _ZN24CMotorMeasurementMessageD1Ev
0201f808 g     O .bss	00000004 alt_argv
02025bb0 g       *ABS*	00000000 _gp
02018168 g     F .text	00000030 usleep
0201773c g     F .text	00000020 getpid
0200b7e8 g     F .text	00000180 __cxa_call_unexpected
0200bf54 g     F .text	00000008 __cxa_get_exception_ptr
02007608 g     F .text	0000002c _ZN12CCarProtocol7isValidEv
0201c8dc g     O .rwdata	00000180 alt_fd_list
020058bc g     F .text	0000015c _ZN15CControlMessageC1EPhi
0200578c g     F .text	00000058 _ZN15CControlMessageD1Ev
0200d524 g     F .text	00000050 _Unwind_SjLj_ForcedUnwind
0201a07c g     F .text	00000064 epcs_write_status_register
0200d138 g     F .text	00000014 _Unwind_GetCFA
0200be48 g     F .text	00000014 _ZSt13set_terminatePFvvE
02003ce4 g     F .text	0000015c _ZN15CADCInfoMessageC1EPhi
0201a740 g     F .text	00000094 alt_find_dev
02012ef4 g     F .text	000000a0 memcpy
0201bb70  w    O .rodata	0000001d _ZTS26CUltrasoundDistanceMessage
02011fb4 g     F .text	0000000c _cleanup_r
020168a8 g     F .text	000000f8 __floatsidf
0201a998 g     F .text	00000078 alt_io_redirect
02016820 g     F .text	00000088 __ltdf2
0201b82c g       *ABS*	00000000 __DTOR_END__
0200b160 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
0200a71c g     F .text	000000d4 _ZN15CWelcomeMessage12parseMessageEPhi
02019b40 g     F .text	00000074 alt_up_rs232_read_data
0200df7c g     F .text	00000014 puts
0201aeb4 g     F .text	00000020 altera_nios2_irq_init
02018c28 g     F .text	0000011c alt_epcs_flash_write_block
020133d0 g     F .text	000000b0 __ratio
02003050 g     F .text	000000d0 _Z16ADXL345_SPI_Initm
02006204 g     F .text	00000040 _ZN18CInfoSensorMessageC2Ev
02000618 g     F .text	00000020 _ZN16CEth_UART_SocketD2Ev
02019420 g     F .text	00000224 altera_avalon_jtag_uart_read
0200d678 g     F .text	00000014 malloc
0200dea8 g     F .text	00000034 _printf_r
02001328 g     F .text	000003c8 _Z17waitForNextPacketv
0200d0bc g     F .text	00000008 __udivsi3
0201775c g     F .text	000000c4 isatty
0200e000 g     F .text	000000cc _raise_r
0201bf24 g     O .rodata	000000c8 __mprec_tens
0201bbb8  w    O .rodata	00000012 _ZTS15CWelcomeMessage
02012bb8 g     F .text	00000008 __locale_charset
020025e4 g     F .text	00000120 _Z9i2c_writemmh
0201f7e8 g     O .bss	00000004 __malloc_top_pad
020034e0 g     F .text	00000048 _Z8SPI_ReadmhPh
0200e2d8 g     F .text	00000004 _getpid_r
02000658 g     F .text	0000002c _ZN16CEth_UART_Socket5ResetEv
0200a180 g     F .text	0000015c _ZN26CUltrasoundDistanceMessageC1EPhi
0201dbf0 g     O .rwdata	00000004 __mb_cur_max
0200636c g     F .text	00000128 _ZN18CInfoSensorMessageC2EPhi
02012bc0 g     F .text	0000000c _localeconv_r
02013d58 g     F .text	0000003c __i2b
0201259c g     F .text	0000049c __sfvwrite_r
0200b180 g     F .text	00000060 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
0200e154 g     F .text	000000b4 __sigtramp_r
02008f8c g     F .text	00000058 _ZN24CMotorMeasurementMessageD0Ev
02003c34 g     F .text	00000058 _ZN15CADCInfoMessageD1Ev
020031f8 g     F .text	00000118 _Z8ADC_Readh
02006d18 g     F .text	0000015c _ZN21CRemoteControlMessageC2EPhi
0201b91c  w    O .rodata	0000001d _ZTS26CAccelerationValuesMessage
0200df90 g     F .text	00000070 _sbrk_r
0201ba60  w    O .rodata	00000018 _ZTS21CRemoteControlMessage
0201bb90  w    O .rodata	0000000c _ZTI26CUltrasoundDistanceMessage
0200a588 g     F .text	00000150 _ZN26CUltrasoundDistanceMessageC2Ev
0201bc94  w    O .rodata	00000020 _ZTVSt9type_info
02014d9c g     F .text	00000078 _read_r
0200c720 g     F .text	00000010 _ZNKSt9exception4whatEv
02004558 g     F .text	00000058 _ZN17CADCValuesMessageD1Ev
0201c8a8 g     O .rwdata	0000000c __lc_ctype
0201dc08 g     O .rwdata	00000004 alt_max_fd
02019aa8 g     F .text	00000050 alt_up_rs232_check_parity
020170c4 g     F .text	00000138 __unpack_d
02014b1c g     F .text	00000110 _fclose_r
0201bd40  w    O .rodata	0000000c _ZTISt9bad_alloc
02011e34 g     F .text	00000034 fflush
0201f7ec g     O .bss	00000004 __malloc_max_sbrked_mem
02008c90 g     F .text	00000090 _ZN24CMotorMeasurementMessage13answerMessageEstsss
0201aa10 g     F .text	000001c0 alt_irq_register
02005b74 g     F .text	00000024 _ZN22CEmergencyBrakeMessage13answerMessageEb
0200368c g     F .text	00000048 _Z9SPI_Writemhh
0200a078 g     F .text	00000058 _ZN26CUltrasoundDistanceMessageD0Ev
02002178 g     F .text	00000020 _ZN13CPIControllerD1Ev
02015f70 g     F .text	00000074 __adddf3
0200934c g     F .text	00000170 _ZN24CMotorMeasurementMessageC1Ev
0201bc34  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
02018b24 g     F .text	00000070 alt_epcs_flash_erase_block
020132b0 g     F .text	00000120 __b2d
02015480 g     F .text	00000660 __umoddi3
02017b0c g     F .text	000000f4 lseek
0200b1e0 g     F .text	00000030 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
0200c138 g     F .text	0000000c _ZdlPv
0201dbec g     O .rwdata	00000004 _global_impure_ptr
0200583c g     F .text	00000040 _ZN15CControlMessageC1Ev
020055c0 g     F .text	00000024 _ZN15CControlMessage13answerMessageEb
0201b93c  w    O .rodata	0000000c _ZTI26CAccelerationValuesMessage
0201a394 g     F .text	00000058 epcs_exit_4_bytes_mode
02014100 g     F .text	000005f4 _realloc_r
02004284 g     F .text	00000064 _ZN17CADCValuesMessage13answerMessageEPhPt
02009094 g     F .text	0000015c _ZN24CMotorMeasurementMessageC1EPhi
020202ec g       *ABS*	00000000 __bss_end
02004b78 g     F .text	0000007c _ZN26CAccelerationValuesMessage13answerMessageEsssh
0201805c g     F .text	0000010c alt_tick
0201bb08  w    O .rodata	0000000c _ZTI24CMotorMeasurementMessage
0200d104 g     F .text	00000010 _Unwind_SjLj_Register
02004a1c g     F .text	0000015c _ZN17CADCValuesMessageC2EPh
02001818 g     F .text	000004b4 _Z11sendWelcomev
02014e14 g     F .text	0000066c __udivdi3
0201bfec g     O .rodata	00000028 __mprec_bigtens
02013fe0 g     F .text	00000120 __s2b
0200d64c g     F .text	00000018 abort
02016a78 g     F .text	00000194 __floatunsidf
0201b984  w    O .rodata	0000001c _ZTV22CEmergencyBrakeMessage
020131d0 g     F .text	00000060 __mcmp
02006028 g     F .text	00000020 _ZN18CInfoSensorMessage8doActionEv
0200bf7c g     F .text	000000a4 __cxa_end_catch
02003f9c g     F .text	00000164 _ZN15CADCInfoMessageC1EPh
02011f9c g     F .text	00000018 __fp_lock_all
0200c7a4 g     F .text	00000010 _ZNSt13bad_exceptionD2Ev
02007978 g     F .text	00000120 _ZN12CCarProtocolD0Ev
0201f7b0 g     O .bss	00000001 bSPIReady
02017fc4 g     F .text	00000098 alt_alarm_stop
0201f818 g     O .bss	00000004 alt_irq_active
0200bf14 g     F .text	00000018 _ZSt9terminatev
0200aa80 g     F .text	000001b4 _ZN15CWelcomeMessageC1EhhhPh
0200903c g     F .text	00000058 _ZN24CMotorMeasurementMessageD2Ev
020071cc g     F .text	0000008c _ZN11CCarMessage11parseHeaderEPhi
02005604 g     F .text	00000028 _ZN15CControlMessage8getBytesEPh
020000ec g     F .exceptions	000000cc alt_irq_handler
0201c8b4 g     O .rwdata	00000028 alt_dev_null
02006094 g     F .text	00000028 _ZN18CInfoSensorMessage12parseMessageEPhi
0201b888  w    O .rodata	0000001c _ZTV15CADCInfoMessage
0201bc04  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
0201a548 g     F .text	0000001c alt_dcache_flush_all
0201309c g     F .text	00000070 __hi0bits
02006b7c g     F .text	00000040 _ZN21CRemoteControlMessageC2Ev
0201dbd0  w    O .rwdata	00000008 _ZTISt9exception
02006ff0 g     F .text	0000002c _ZN11CCarMessage10getSubTypeEv
02002158 g     F .text	00000020 _ZN13CPIControllerD2Ev
020169a0 g     F .text	000000d8 __fixdfsi
0201f7b8 g     O .bss	00000004 iCurrentSpeed
0200616c g     F .text	00000058 _ZN18CInfoSensorMessageD2Ev
0201dc28 g       *ABS*	00000000 __ram_rwdata_end
02005be0 g     F .text	00000024 _ZN22CEmergencyBrakeMessage9getLengthEv
02002348 g     F .text	00000048 _ZN13CPIController13getControllerEPlS0_
020028d0 g     F .text	0000014c _Z17I2C_MultipleWritemmahPht
0200c48c g     F .text	00000010 _ZNSt9type_infoD1Ev
0201dc00 g     O .rwdata	00000008 alt_dev_list
0201f7d8 g     O .bss	00000004 __new_handler
02009f78 g     F .text	000000bc _ZN26CUltrasoundDistanceMessage8getBytesEPh
02018198 g     F .text	00000124 write
0200c47c g     F .text	00000010 _ZNSt9type_infoD0Ev
0201c0a0 g       *ABS*	00000000 __ram_rodata_end
02007548 g     F .text	000000c0 _ZN12CCarProtocolC1EtPP11CCarMessagem
02017604 g     F .text	000000d8 fstat
02019c44 g     F .text	00000094 alt_up_rs232_write_fd
02006eac g     F .text	00000038 _ZN11CCarMessageC1Ev
02017880 g     F .text	00000140 kill
02000e48 g     F .text	0000005c _Z17waitForEndOfCyclev
02009ba0 g     F .text	00000158 _ZN21CMotorVelocityMessageC1Es
02005650 g     F .text	000000e4 _ZN15CControlMessage12parseMessageEPhi
0200a034 g     F .text	00000044 _ZN26CUltrasoundDistanceMessage8doActionEv
02013ec0 g     F .text	00000120 __pow5mult
0201f7f8 g     O .bss	00000004 __nlocale_changed
0200d0c4 g     F .text	00000008 __umodsi3
0200c474 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
02002ed4 g     F .text	00000044 _Z18ADXL345_SPI_IdReadmPh
0201bac0  w    O .rodata	0000000f _ZTS12CCarProtocol
02002cd8 g     F .text	00000178 _Z15i2c_data_verifymmh
0200a6d8 g     F .text	00000020 _ZN15CWelcomeMessage8doActionEv
0201a250 g     F .text	0000006c epcs_read_electronic_signature
020202ec g       *ABS*	00000000 end
02008bec g     F .text	00000060 _ZN12CCarProtocolC2EPhi
0200a6f8 g     F .text	00000024 _ZN15CWelcomeMessage9getLengthEv
02003310 g     F .text	0000004c _Z8SPI_Initm
0201b8f4  w    O .rodata	0000000c _ZTI17CADCValuesMessage
020064b8 g     F .text	00000020 _ZN17CInfoStateMessage8doActionEv
0200d2c4 g     F .text	00000018 _Unwind_DeleteException
0201b8e0  w    O .rodata	00000014 _ZTS17CADCValuesMessage
02018f24 g     F .text	000000b8 altera_avalon_jtag_uart_init
02000e1c g     F .text	0000002c _Z14alarm_callbackPv
0201b828 g       *ABS*	00000000 __CTOR_LIST__
0200097c g     F .text	00000044 _ZN16CEth_UART_SocketC1Ev
04000000 g       *ABS*	00000000 __alt_stack_pointer
020198f8 g     F .text	00000088 alt_avalon_timer_sc_init
02016d30 g     F .text	00000080 __clzsi2
0200b0a0 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
02019644 g     F .text	00000240 altera_avalon_jtag_uart_write
02011ec0 g     F .text	00000004 __sfp_lock_acquire
0201bcec  w    O .rodata	00000012 _ZTSSt13bad_exception
02012e10 g     F .text	000000e4 memchr
0200e41c g     F .text	00001ec4 ___vfprintf_internal_r
02012288 g     F .text	00000314 _free_r
0201dbb4  w    O .rwdata	00000008 _ZTI11CCarMessage
0201b4f4 g     F .text	000001b0 __call_exitprocs
0200430c g     F .text	000000e0 _ZN17CADCValuesMessage12parseMessageEPhi
020076e4 g     F .text	00000060 _ZN12CCarProtocol13getNthMessageEm
0201f7fc g     O .bss	00000004 __mlocale_changed
02006fc4 g     F .text	0000002c _ZN11CCarMessage7getTypeEv
0201dbe4 g     O .rwdata	00000004 __malloc_sbrk_base
020001b8 g     F .text	0000003c _start
0201f810 g     O .bss	00000004 _alt_tick_rate
020009c0 g     F .text	00000044 _ZN16CEth_UART_SocketC2Ev
02007cd8 g     F .text	00000eb4 _ZN12CCarProtocol11parsePacketEPhi
02009a44 g     F .text	0000015c _ZN21CMotorVelocityMessageC2EPhi
0201bcb4  w    O .rodata	0000000d _ZTSSt9type_info
02004764 g     F .text	0000015c _ZN17CADCValuesMessageC2EPhi
020139b8 g     F .text	0000014c __lshift
0201aed4 g     F .text	00000238 alt_avalon_spi_command
0201bd1c  w    O .rodata	00000014 _ZTVSt9bad_alloc
0201f814 g     O .bss	00000004 _alt_nticks
0200e2bc g     F .text	0000001c signal
02017d0c g     F .text	00000124 read
02006fa0 g     F .text	00000024 _ZN11CCarMessage9getLengthEv
02005318 g     F .text	00000154 _ZN26CAccelerationValuesMessageC1Ev
02018350 g     F .text	00000070 alt_sys_init
02004d10 g     F .text	00000184 _ZN26CAccelerationValuesMessage8getBytesEPh
0201f7bc g     O .bss	00000004 iDesiredSpeed
0201b3bc g     F .text	00000134 __register_exitproc
0201bd30  w    O .rodata	0000000d _ZTSSt9bad_alloc
020061c4 g     F .text	00000040 _ZN18CInfoSensorMessageC1Ev
02003528 g     F .text	00000164 _Z17SPI_MultipleWritemhPhh
0200776c g     F .text	0000020c _ZN12CCarProtocol8getBytesEPh
02019a68 g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
0201bb54  w    O .rodata	0000001c _ZTV26CUltrasoundDistanceMessage
02013b04 g     F .text	00000254 __multiply
02004264 g     F .text	00000020 _ZN17CADCValuesMessage8doActionEv
020048c0 g     F .text	0000015c _ZN17CADCValuesMessageC1EPh
020192b8 g     F .text	00000074 altera_avalon_jtag_uart_close
02007398 g     F .text	00000050 _ZN11CCarMessageD0Ev
0200d0cc g     F .text	00000038 __mulsi3
0201c0a0 g       *ABS*	00000000 __ram_rwdata_start
0200d42c g     F .text	000000f8 _Unwind_SjLj_RaiseException
0201b82c g       *ABS*	00000000 __ram_rodata_start
02000884 g     F .text	000000f8 _ZN16CEth_UART_Socket4SendEPhm
0200af44 g     F .text	0000015c _ZN15CWelcomeMessageC2EPhi
02020034 g     O .bss	00000028 __malloc_current_mallinfo
0200d3d0 g     F .text	0000005c _Unwind_SjLj_Resume
020136b0 g     F .text	0000017c __d2b
0200c49c g     F .text	00000010 _ZNSt9type_infoD2Ev
02019d18 g     F .text	00000060 epcs_read_status_register
0200c28c g     F .text	00000078 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
02002704 g     F .text	000001cc _Z16I2C_MultipleReadmmahPht
02018ddc g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0201b22c g     F .text	000000d0 alt_get_fd
020091f0 g     F .text	0000015c _ZN24CMotorMeasurementMessageC2EPhi
0201a3ec g     F .text	0000015c alt_busy_sleep
020171fc g     F .text	000000c8 __fpcmp_parts_d
0200546c g     F .text	00000154 _ZN26CAccelerationValuesMessageC2Ev
02006070 g     F .text	00000024 _ZN18CInfoSensorMessage9getLengthEv
02014aac g     F .text	00000070 _close_r
02000638 g     F .text	00000020 _ZN16CEth_UART_SocketD1Ev
0201a2bc g     F .text	00000080 epcs_read_device_id
0201b348 g     F .text	00000074 memcmp
02009838 g     F .text	00000058 _ZN21CMotorVelocityMessageD1Ev
02018e8c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
020202ec g       *ABS*	00000000 __alt_stack_base
02018ed4 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
02005a18 g     F .text	0000015c _ZN15CControlMessageC2EPhi
0200c804 g     F .text	00000034 _ZNSt9bad_allocD0Ev
0200c338 g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
02010304 g     F .text	0000013c __swsetup_r
0200d5f4 g     F .text	00000058 _Unwind_SjLj_Resume_or_Rethrow
020163a8 g     F .text	00000258 __divdf3
0201206c g     F .text	000000f0 __sfp
02013514 g     F .text	00000058 __copybits
0200c454 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
0201c0a0 g     O .rwdata	00000408 __malloc_av_
02011ecc g     F .text	00000004 __sinit_lock_release
0200ade8 g     F .text	0000015c _ZN15CWelcomeMessageC1EPhi
02015fe4 g     F .text	000003c4 __muldf3
020096b8 g     F .text	00000094 _ZN21CMotorVelocityMessage12parseMessageEPhi
02014850 g     F .text	00000060 __sread
0201bcd8  w    O .rodata	00000014 _ZTVSt9exception
020199d4 g     F .text	00000058 alt_up_rs232_disable_read_interrupt
0201b10c g     F .text	00000120 alt_find_file
0200b10c g     F .text	00000020 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_
0201a564 g     F .text	000000b4 alt_dev_llist_insert
02017ccc g     F .text	00000020 __malloc_lock
02017f08 g     F .text	000000bc sbrk
0200aa28 g     F .text	00000058 _ZN15CWelcomeMessageD2Ev
0201bbd8  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
0200c1b8 g     F .text	00000074 __cxa_throw
02007258 g     F .text	00000058 _ZN11CCarMessageC1EPhi
02011c38 g     F .text	000001fc _fflush_r
0200d188 g     F .text	00000010 _Unwind_SetIP
02004f58 g     F .text	00000058 _ZN26CAccelerationValuesMessageD0Ev
02002e50 g     F .text	00000084 _Z10I2C_Verifymmm
020149e4 g     F .text	000000c8 _calloc_r
02006ae4 g     F .text	00000058 _ZN21CRemoteControlMessageD2Ev
020055e4 g     F .text	00000020 _ZN15CControlMessage8doActionEv
02008c4c g     F .text	00000020 _ZN24CMotorMeasurementMessage8doActionEv
0201dc1c g     O .rwdata	00000008 alt_flash_dev_list
02005cdc g     F .text	00000058 _ZN22CEmergencyBrakeMessageD2Ev
0200a128 g     F .text	00000058 _ZN26CUltrasoundDistanceMessageD2Ev
0201f7b0 g       *ABS*	00000000 __bss_start
02004100 g     F .text	00000164 _ZN15CADCInfoMessageC2EPh
0201bad0  w    O .rodata	0000001c _ZTV24CMotorMeasurementMessage
0200ddcc g     F .text	00000098 memset
02001e14 g     F .text	00000230 main
0200ac34 g     F .text	000001b4 _ZN15CWelcomeMessageC2EhhhPh
0201f80c g     O .bss	00000004 alt_envp
0201f7f0 g     O .bss	00000004 __malloc_max_total_mem
02005b98 g     F .text	00000020 _ZN22CEmergencyBrakeMessage8doActionEv
02018e34 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0200c858 g     F .text	00000008 __cxa_get_globals_fast
02000248 g     F .text	000000b0 _Z13swapEndianessPhm
0200654c g     F .text	00000058 _ZN17CInfoStateMessageD0Ev
0201b9c8  w    O .rodata	0000001c _ZTV18CInfoSensorMessage
02007744 g     F .text	00000028 _ZN12CCarProtocol15getMessageCountEv
02006524 g     F .text	00000028 _ZN17CInfoStateMessage12parseMessageEPhi
02014764 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
02014c2c g     F .text	00000014 fclose
0200715c g     F .text	00000070 _ZN11CCarMessage9setHeaderEhhhb
02008c6c g     F .text	00000024 _ZN24CMotorMeasurementMessage9getLengthEv
02000758 g     F .text	0000012c _ZN16CEth_UART_Socket7ReceiveEPhmm
0202015c g     O .bss	00000190 _atexit0
02010684 g     F .text	000015b4 _dtoa_r
0200d68c g     F .text	00000740 _malloc_r
0201dc0c g     O .rwdata	00000004 alt_errno
02009ec0 g     F .text	00000024 _ZN26CUltrasoundDistanceMessage9getLengthEv
0200e144 g     F .text	00000010 _init_signal
0201bc28  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
020072b0 g     F .text	00000058 _ZN11CCarMessageC2EPhi
02012b00 g     F .text	000000b8 _fwalk
0200c794 g     F .text	00000010 _ZNSt13bad_exceptionD1Ev
0200974c g     F .text	00000094 _ZN21CMotorVelocityMessage8getBytesEPh
0201ba38  w    O .rodata	0000000c _ZTI17CInfoStateMessage
0201b9a0  w    O .rodata	00000019 _ZTS22CEmergencyBrakeMessage
0200cffc g     F .text	00000060 __divsi3
0201c048 g     O .rodata	00000014 __thenan_df
0201215c g     F .text	0000012c _malloc_trim_r
0201baec  w    O .rodata	0000001b _ZTS24CMotorMeasurementMessage
0201b82c g       *ABS*	00000000 __CTOR_END__
0200a978 g     F .text	00000058 _ZN15CWelcomeMessageD0Ev
0200a7f0 g     F .text	000000ac _ZN15CWelcomeMessage13answerMessageEh
02018814 g     F .text	00000280 alt_epcs_flash_write
020148b0 g     F .text	000000bc strcmp
0201b82c g       *ABS*	00000000 __flash_rodata_start
0201b82c g       *ABS*	00000000 __DTOR_LIST__
02019cd8 g     F .text	00000040 alt_up_rs232_open_dev
0201bb9c  w    O .rodata	0000001c _ZTV15CWelcomeMessage
0201b8a4  w    O .rodata	00000012 _ZTS15CADCInfoMessage
02016688 g     F .text	00000088 __nedf2
02006a34 g     F .text	00000058 _ZN21CRemoteControlMessageD0Ev
0201831c g     F .text	00000034 alt_irq_init
02017e90 g     F .text	00000078 alt_release_fd
0200c304 g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
0201bd4c g     O .rodata	00000100 __clz_tab
020042e8 g     F .text	00000024 _ZN17CADCValuesMessage9getLengthEv
0201f800 g     O .bss	00000004 _PathLocale
02005bb8 g     F .text	00000028 _ZN22CEmergencyBrakeMessage8getBytesEPh
0201b2fc g     F .text	00000014 atexit
0201496c g     F .text	00000078 _write_r
02002a1c g     F .text	00000174 _Z8I2C_ReadmmahPh
02012c60 g     F .text	0000001c setlocale
02000b98 g     F .text	000000c0 _Z22measureSpeedUnblockingv
02006b3c g     F .text	00000040 _ZN21CRemoteControlMessageC1Ev
0200d1bc g     F .text	00000008 _Unwind_GetTextRelBase
0200c7b4 g     F .text	00000044 __cxa_call_terminate
02000ea4 g     F .text	00000484 _Z17setUpPIControllerv
02005c84 g     F .text	00000058 _ZN22CEmergencyBrakeMessageD1Ev
0201dbe8 g     O .rwdata	00000004 _impure_ptr
02000a04 g     F .text	00000104 _Z13motor_settingmmmmmm
0201f804 g     O .bss	00000004 alt_argc
02008b8c g     F .text	00000060 _ZN12CCarProtocolC1EPhi
02007a98 g     F .text	00000120 _ZN12CCarProtocolD1Ev
0201a6dc g     F .text	00000064 _do_dtors
0201b8b8  w    O .rodata	0000000c _ZTI15CADCInfoMessage
02006114 g     F .text	00000058 _ZN18CInfoSensorMessageD1Ev
020001f4 g     F .text	00000054 _Z5delayj
02003bdc g     F .text	00000058 _ZN15CADCInfoMessageD0Ev
02000020 g       .exceptions	00000000 alt_irq_entry
02009670 g     F .text	00000048 _ZN21CMotorVelocityMessage13answerMessageEs
020097e0 g     F .text	00000058 _ZN21CMotorVelocityMessageD0Ev
02000414 g     F .text	00000204 _Z15ReadADCChannelsPhhPm
02013230 g     F .text	00000080 __ulp
020146f4 g     F .text	00000040 __isinfd
0200d1ac g     F .text	00000008 _Unwind_FindEnclosingFunction
02011f84 g     F .text	00000018 __fp_unlock_all
02006654 g     F .text	00000040 _ZN17CInfoStateMessageC1Ev
02006bbc g     F .text	0000015c _ZN21CRemoteControlMessageC1EPhi
02000b08 g     F .text	00000090 _Z8setSpeedl
0201dbf8 g     O .rwdata	00000008 alt_fs_list
02006694 g     F .text	00000040 _ZN17CInfoStateMessageC2Ev
02019980 g     F .text	00000054 alt_up_rs232_enable_read_interrupt
02006948 g     F .text	00000020 _ZN21CRemoteControlMessage8doActionEv
0200d198 g     F .text	0000000c _Unwind_GetLanguageSpecificData
02019af8 g     F .text	00000048 alt_up_rs232_write_data
0200c020 g     F .text	00000118 __cxa_begin_catch
0200b170 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
0200bf2c g     F .text	00000010 _ZN10__cxxabiv112__unexpectedEPFvvE
02003c8c g     F .text	00000058 _ZN15CADCInfoMessageD2Ev
0200a9d0 g     F .text	00000058 _ZN15CWelcomeMessageD1Ev
02002308 g     F .text	00000040 _ZN13CPIController16changeControllerEll
02000020 g       *ABS*	00000000 __ram_exceptions_start
0201f7d0 g     O .bss	00000001 bCycleFinished
02012bcc g     F .text	00000010 localeconv
02019ee0 g     F .text	0000014c epcs_read_buffer
0200c760 g     F .text	00000034 _ZNSt13bad_exceptionD0Ev
020183f8 g     F .text	00000054 alt_epcs_flash_init
0201dbc4 g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
02005d74 g     F .text	00000040 _ZN22CEmergencyBrakeMessageC2Ev
02002044  w    F .text	00000034 _ZNK21CMotorVelocityMessage16getIDesiredSpeedEv
0200c4ec g     F .text	00000134 __cxa_allocate_exception
0201bc88  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
0200c7f8 g     F .text	0000000c _ZSt15set_new_handlerPFvvE
0201dc28 g       *ABS*	00000000 _edata
020202ec g       *ABS*	00000000 _end
0201dbd8 g     O .rwdata	00000001 _ZSt7nothrow
02005060 g     F .text	0000015c _ZN26CAccelerationValuesMessageC1EPhi
0201a7d4 g     F .text	0000007c alt_flash_open_dev
0200b968 g     F .text	000004e0 __gxx_personality_sj0
0200a0d0 g     F .text	00000058 _ZN26CUltrasoundDistanceMessageD1Ev
020001b8 g       *ABS*	00000000 __ram_exceptions_end
0200a2dc g     F .text	0000015c _ZN26CUltrasoundDistanceMessageC2EPhi
0201932c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
020065a4 g     F .text	00000058 _ZN17CInfoStateMessageD1Ev
0200b210 g     F .text	0000004c _ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
0200c740 g     F .text	00000010 _ZNSt9exceptionD1Ev
0201a33c g     F .text	00000058 epcs_enter_4_bytes_mode
020147d4 g     F .text	0000007c __swrite
0201f7cc g     O .bss	00000004 pProtocol
0201dbe0 g     O .rwdata	00000004 __malloc_trim_threshold
0201b310 g     F .text	00000038 exit
0200d14c g     F .text	00000018 _Unwind_SetGR
02012a38 g     F .text	000000c8 _fwalk_reent
0201382c g     F .text	0000018c __mdiff
0201a850 g     F .text	00000054 alt_flash_close_dev
0200be70 g     F .text	000000a4 _ZN10__cxxabiv111__terminateEPFvvE
020020e8 g     F .text	00000070 _ZN13CPIControllerC1Ellll
0200d05c g     F .text	00000060 __modsi3
02004500 g     F .text	00000058 _ZN17CADCValuesMessageD0Ev
0200c838 g     F .text	00000010 _ZNSt9bad_allocD1Ev
02005c04 g     F .text	00000028 _ZN22CEmergencyBrakeMessage12parseMessageEPhi
02001ccc g     F .text	00000148 _Z4initv
04000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
02002408 g     F .text	00000088 _Z9i2c_startmm
02011ec4 g     F .text	00000004 __sfp_lock_release
0200c38c g     F .text	000000c8 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
0201f7c8 g     O .bss	00000004 pSocket
0201bd00  w    O .rodata	0000000c _ZTISt13bad_exception
02000000 g       *ABS*	00000000 __alt_mem_sdram
02004bf4 g     F .text	00000024 _ZN26CAccelerationValuesMessage9getLengthEv
02002198 g     F .text	00000170 _ZN13CPIController7controlEl
02002f18 g     F .text	0000006c _Z23ADXL345_SPI_IsDataReadym
02006e74 g     F .text	00000038 _ZN11CCarMessageC2Ev
020094bc g     F .text	00000170 _ZN24CMotorMeasurementMessageC2Ev
02004e94 g     F .text	000000c4 _ZN26CAccelerationValuesMessage8doActionEv
0201b8c4  w    O .rodata	0000001c _ZTV17CADCValuesMessage
0200701c g     F .text	0000002c _ZN11CCarMessage7isValidEv
02006ee4 g     F .text	00000020 _ZN11CCarMessage8doActionEv
0201f7c4 g     O .bss	00000004 pController
0200a89c g     F .text	000000dc _ZN15CWelcomeMessage8getBytesEPh
02014734 g     F .text	00000030 __isnand
020175e4 g     F .text	00000020 _exit
0201ba44  w    O .rodata	0000001c _ZTV21CRemoteControlMessage
020172c4 g     F .text	00000154 alt_alarm_start
0201dbb0 g     O .rwdata	00000004 pLED
02016c0c g     F .text	00000124 __muldi3
02006004 g     F .text	00000024 _ZN18CInfoSensorMessage13answerMessageEb
0200562c g     F .text	00000024 _ZN15CControlMessage9getLengthEv
02007308 g     F .text	00000090 _ZN11CCarMessage19writeHeaderToBufferEPhi
0200d120 g     F .text	00000018 _Unwind_GetGR
0200c860 g     F .text	00000008 __cxa_get_globals
02012c7c g     F .text	00000194 __smakebuf_r
020060bc g     F .text	00000058 _ZN18CInfoSensorMessageD0Ev
0201dbdc g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
0200335c g     F .text	00000184 _Z16SPI_MultipleReadmhPhh
0201b964  w    O .rodata	00000012 _ZTS15CControlMessage
020002f8 g     F .text	0000011c _Z15getAccelerationPs
0200e350 g     F .text	00000074 strlen
0201a02c g     F .text	00000050 epcs_write_enable
02003e40 g     F .text	0000015c _ZN15CADCInfoMessageC2EPhi
0200e0e0 g     F .text	00000064 _init_signal_r
0201dbc8  w    O .rwdata	00000008 _ZTISt9type_info
0201acc8 g     F .text	0000018c open
02016798 g     F .text	00000088 __gedf2
0201bd0c  w    O .rodata	0000000d _ZTSSt9exception
02009e50 g     F .text	00000070 _ZN26CUltrasoundDistanceMessage13answerMessageEl
02004fb0 g     F .text	00000058 _ZN26CAccelerationValuesMessageD1Ev
02005734 g     F .text	00000058 _ZN15CControlMessageD0Ev
02003a20 g     F .text	000001bc _ZN15CADCInfoMessage8getBytesEPh
0200c730 g     F .text	00000010 _ZNSt9exceptionD0Ev
0201a8a4 g     F .text	0000001c alt_icache_flush_all
02002b90 g     F .text	00000148 _Z9I2C_Writemmahh
0200d1b4 g     F .text	00000008 _Unwind_GetDataRelBase
0201b948  w    O .rodata	0000001c _ZTV15CControlMessage
0201dc24 g     O .rwdata	00000004 alt_priority_mask
020102e0 g     F .text	00000024 __vfprintf_internal
04000000 g       *ABS*	00000000 __alt_mem_epcs
02003120 g     F .text	000000d8 _Z25ADXL345_SPI_WaitDataReadym
02000d18 g     F .text	00000104 _Z15measuredistancem
02015ef0 g     F .text	00000080 __subdf3
02002390 g     F .text	00000078 _Z8i2c_stopmm
02005008 g     F .text	00000058 _ZN26CAccelerationValuesMessageD2Ev
02018d44 g     F .text	00000098 alt_epcs_flash_read
0201310c g     F .text	000000c4 __lo0bits
0201bbcc  w    O .rodata	0000000c _ZTI15CWelcomeMessage
0201dc14 g     O .rwdata	00000008 alt_alarm_list
0201a678 g     F .text	00000064 _do_ctors
0200e208 g     F .text	00000014 __sigtramp
0200587c g     F .text	00000040 _ZN15CControlMessageC2Ev
02019a2c g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
02017418 g     F .text	00000100 close
0201b978  w    O .rodata	0000000c _ZTI15CControlMessage
020064d8 g     F .text	00000028 _ZN17CInfoStateMessage8getBytesEPh
02003890 g     F .text	00000190 _ZN15CADCInfoMessage12parseMessageEPhi
02017a20 g     F .text	00000080 alt_load
02016db0 g     F .text	00000314 __pack_d
02007634 g     F .text	000000b0 _ZN12CCarProtocol9getLengthEv
0200c464 g     F .text	00000010 _ZNKSt9type_info10__do_catchEPKS_PPvj
0200e0cc g     F .text	00000014 raise
0201ba24  w    O .rodata	00000014 _ZTS17CInfoStateMessage
020051bc g     F .text	0000015c _ZN26CAccelerationValuesMessageC2EPhi
0200d664 g     F .text	00000014 free
02011ec8 g     F .text	00000004 __sinit_lock_acquire
0201a0e0 g     F .text	00000170 epcs_write_buffer
02013d94 g     F .text	0000012c __multadd
0200b12c g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
02013074 g     F .text	00000028 _Bfree
02006990 g     F .text	00000024 _ZN21CRemoteControlMessage9getLengthEv
0201b9bc  w    O .rodata	0000000c _ZTI22CEmergencyBrakeMessage



Disassembly of section .entry:

02000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000000:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 2000004:	08406e14 	ori	at,at,440
    jmp r1
 2000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

02000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 2000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000ec0 	call	20000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000306 	br	2000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 200008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 2000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 2000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 200009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 20000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 20000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000e8:	ef80083a 	eret

020000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000ec:	defff904 	addi	sp,sp,-28
 20000f0:	dfc00615 	stw	ra,24(sp)
 20000f4:	df000515 	stw	fp,20(sp)
 20000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 20000fc:	0005313a 	rdctl	r2,ipending
 2000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 2000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 2000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 200010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000110:	00800044 	movi	r2,1
 2000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 2000118:	e0ffff17 	ldw	r3,-4(fp)
 200011c:	e0bffe17 	ldw	r2,-8(fp)
 2000120:	1884703a 	and	r2,r3,r2
 2000124:	1005003a 	cmpeq	r2,r2,zero
 2000128:	1000171e 	bne	r2,zero,2000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 200012c:	e0bffd17 	ldw	r2,-12(fp)
 2000130:	00c080b4 	movhi	r3,514
 2000134:	18c01704 	addi	r3,r3,92
 2000138:	100490fa 	slli	r2,r2,3
 200013c:	10c5883a 	add	r2,r2,r3
 2000140:	11800017 	ldw	r6,0(r2)
 2000144:	e0bffd17 	ldw	r2,-12(fp)
 2000148:	00c080b4 	movhi	r3,514
 200014c:	18c01704 	addi	r3,r3,92
 2000150:	100490fa 	slli	r2,r2,3
 2000154:	10c5883a 	add	r2,r2,r3
 2000158:	10800104 	addi	r2,r2,4
 200015c:	11000017 	ldw	r4,0(r2)
 2000160:	e17ffd17 	ldw	r5,-12(fp)
 2000164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000168:	0005313a 	rdctl	r2,ipending
 200016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 2000170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 2000174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 2000178:	e0bfff17 	ldw	r2,-4(fp)
 200017c:	1004c03a 	cmpne	r2,r2,zero
 2000180:	103fe21e 	bne	r2,zero,200010c <alt_irq_handler+0x20>
 2000184:	00000706 	br	20001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 2000188:	e0bffe17 	ldw	r2,-8(fp)
 200018c:	1085883a 	add	r2,r2,r2
 2000190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 2000194:	e0bffd17 	ldw	r2,-12(fp)
 2000198:	10800044 	addi	r2,r2,1
 200019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 20001a0:	003fdd06 	br	2000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 20001a4:	e037883a 	mov	sp,fp
 20001a8:	dfc00117 	ldw	ra,4(sp)
 20001ac:	df000017 	ldw	fp,0(sp)
 20001b0:	dec00204 	addi	sp,sp,8
 20001b4:	f800283a 	ret

Disassembly of section .text:

020001b8 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 20001b8:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 20001bc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 20001c0:	068080b4 	movhi	gp,514
    ori gp, gp, %lo(_gp)
 20001c4:	d696ec14 	ori	gp,gp,23472
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 20001c8:	00808074 	movhi	r2,513
    ori r2, r2, %lo(__bss_start)
 20001cc:	10bdec14 	ori	r2,r2,63408

    movhi r3, %hi(__bss_end)
 20001d0:	00c080b4 	movhi	r3,514
    ori r3, r3, %lo(__bss_end)
 20001d4:	18c0bb14 	ori	r3,r3,748

    beq r2, r3, 1f
 20001d8:	10c00326 	beq	r2,r3,20001e8 <_start+0x30>

0:
    stw zero, (r2)
 20001dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 20001e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 20001e4:	10fffd36 	bltu	r2,r3,20001dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 20001e8:	2017a200 	call	2017a20 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 20001ec:	2017c600 	call	2017c60 <alt_main>

020001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 20001f0:	003fff06 	br	20001f0 <alt_after_alt_main>

020001f4 <_Z5delayj>:
 */

#include "utility.h"


void delay (unsigned int seconds)
 20001f4:	defffd04 	addi	sp,sp,-12
 20001f8:	dfc00215 	stw	ra,8(sp)
 20001fc:	df000115 	stw	fp,4(sp)
 2000200:	df000104 	addi	fp,sp,4
 2000204:	e13fff15 	stw	r4,-4(fp)
{
	// TODO: is this even accurate?
	seconds *= 444;
 2000208:	e13fff17 	ldw	r4,-4(fp)
 200020c:	01406f04 	movi	r5,444
 2000210:	200d0cc0 	call	200d0cc <__mulsi3>
 2000214:	e0bfff15 	stw	r2,-4(fp)

	while (seconds != 0)
 2000218:	00000306 	br	2000228 <_Z5delayj+0x34>
	{
		seconds --;
 200021c:	e0bfff17 	ldw	r2,-4(fp)
 2000220:	10bfffc4 	addi	r2,r2,-1
 2000224:	e0bfff15 	stw	r2,-4(fp)
void delay (unsigned int seconds)
{
	// TODO: is this even accurate?
	seconds *= 444;

	while (seconds != 0)
 2000228:	e0bfff17 	ldw	r2,-4(fp)
 200022c:	1004c03a 	cmpne	r2,r2,zero
 2000230:	103ffa1e 	bne	r2,zero,200021c <_Z5delayj+0x28>
	{
		seconds --;
	}
}
 2000234:	e037883a 	mov	sp,fp
 2000238:	dfc00117 	ldw	ra,4(sp)
 200023c:	df000017 	ldw	fp,0(sp)
 2000240:	dec00204 	addi	sp,sp,8
 2000244:	f800283a 	ret

02000248 <_Z13swapEndianessPhm>:

void swapEndianess(alt_u8 *pArray, alt_u32 iLength)
 2000248:	defffa04 	addi	sp,sp,-24
 200024c:	df000515 	stw	fp,20(sp)
 2000250:	df000504 	addi	fp,sp,20
 2000254:	e13ffe15 	stw	r4,-8(fp)
 2000258:	e17fff15 	stw	r5,-4(fp)
{
	alt_u8 buffer;
	alt_u32 middle = iLength / 2;
 200025c:	e0bfff17 	ldw	r2,-4(fp)
 2000260:	1004d07a 	srli	r2,r2,1
 2000264:	e0bffc15 	stw	r2,-16(fp)

	iLength--;
 2000268:	e0bfff17 	ldw	r2,-4(fp)
 200026c:	10bfffc4 	addi	r2,r2,-1
 2000270:	e0bfff15 	stw	r2,-4(fp)
	for(alt_u32 i = 0; i < middle; )
 2000274:	e03ffb15 	stw	zero,-20(fp)
 2000278:	00001806 	br	20002dc <_Z13swapEndianessPhm+0x94>
	{
		buffer = pArray[i];
 200027c:	e0fffb17 	ldw	r3,-20(fp)
 2000280:	e0bffe17 	ldw	r2,-8(fp)
 2000284:	1885883a 	add	r2,r3,r2
 2000288:	10800003 	ldbu	r2,0(r2)
 200028c:	e0bffd05 	stb	r2,-12(fp)
		pArray[i] = pArray[iLength];
 2000290:	e0fffb17 	ldw	r3,-20(fp)
 2000294:	e0bffe17 	ldw	r2,-8(fp)
 2000298:	1889883a 	add	r4,r3,r2
 200029c:	e0ffff17 	ldw	r3,-4(fp)
 20002a0:	e0bffe17 	ldw	r2,-8(fp)
 20002a4:	1885883a 	add	r2,r3,r2
 20002a8:	10800003 	ldbu	r2,0(r2)
 20002ac:	20800005 	stb	r2,0(r4)
		pArray[iLength] = buffer;
 20002b0:	e0ffff17 	ldw	r3,-4(fp)
 20002b4:	e0bffe17 	ldw	r2,-8(fp)
 20002b8:	1887883a 	add	r3,r3,r2
 20002bc:	e0bffd03 	ldbu	r2,-12(fp)
 20002c0:	18800005 	stb	r2,0(r3)
		i++;
 20002c4:	e0bffb17 	ldw	r2,-20(fp)
 20002c8:	10800044 	addi	r2,r2,1
 20002cc:	e0bffb15 	stw	r2,-20(fp)
		iLength--;
 20002d0:	e0bfff17 	ldw	r2,-4(fp)
 20002d4:	10bfffc4 	addi	r2,r2,-1
 20002d8:	e0bfff15 	stw	r2,-4(fp)
{
	alt_u8 buffer;
	alt_u32 middle = iLength / 2;

	iLength--;
	for(alt_u32 i = 0; i < middle; )
 20002dc:	e0fffb17 	ldw	r3,-20(fp)
 20002e0:	e0bffc17 	ldw	r2,-16(fp)
 20002e4:	18bfe536 	bltu	r3,r2,200027c <_Z13swapEndianessPhm+0x34>
		pArray[i] = pArray[iLength];
		pArray[iLength] = buffer;
		i++;
		iLength--;
	}
}
 20002e8:	e037883a 	mov	sp,fp
 20002ec:	df000017 	ldw	fp,0(sp)
 20002f0:	dec00104 	addi	sp,sp,4
 20002f4:	f800283a 	ret

020002f8 <_Z15getAccelerationPs>:
#include "accelerometer_interface.h"

// Local variables:
bool bSPIReady = false;

bool getAcceleration(alt_16 *iXYZ)
 20002f8:	defffc04 	addi	sp,sp,-16
 20002fc:	dfc00315 	stw	ra,12(sp)
 2000300:	df000215 	stw	fp,8(sp)
 2000304:	df000204 	addi	fp,sp,8
 2000308:	e13fff15 	stw	r4,-4(fp)
{
	bool bSuccess = false;
 200030c:	e03ffe05 	stb	zero,-8(fp)

	if(!bSPIReady)
 2000310:	d0a70003 	ldbu	r2,-25600(gp)
 2000314:	1080005c 	xori	r2,r2,1
 2000318:	10803fcc 	andi	r2,r2,255
 200031c:	1005003a 	cmpeq	r2,r2,zero
 2000320:	1000041e 	bne	r2,zero,2000334 <_Z15getAccelerationPs+0x3c>
		bSPIReady = ADXL345_SPI_Init(GSENSOR_SPI_BASE);
 2000324:	01010034 	movhi	r4,1024
 2000328:	21020004 	addi	r4,r4,2048
 200032c:	20030500 	call	2003050 <_Z16ADXL345_SPI_Initm>
 2000330:	d0a70005 	stb	r2,-25600(gp)

	if(bSPIReady)
 2000334:	d0a70003 	ldbu	r2,-25600(gp)
 2000338:	10803fcc 	andi	r2,r2,255
 200033c:	1005003a 	cmpeq	r2,r2,zero
 2000340:	10002e1e 	bne	r2,zero,20003fc <_Z15getAccelerationPs+0x104>
	{
		if (ADXL345_SPI_IsDataReady(GSENSOR_SPI_BASE))
 2000344:	01010034 	movhi	r4,1024
 2000348:	21020004 	addi	r4,r4,2048
 200034c:	2002f180 	call	2002f18 <_Z23ADXL345_SPI_IsDataReadym>
 2000350:	10803fcc 	andi	r2,r2,255
 2000354:	1005003a 	cmpeq	r2,r2,zero
 2000358:	1000281e 	bne	r2,zero,20003fc <_Z15getAccelerationPs+0x104>
		{
			bSuccess = ADXL345_SPI_XYZ_Read(GSENSOR_SPI_BASE, (unsigned short*) iXYZ);
 200035c:	e17fff17 	ldw	r5,-4(fp)
 2000360:	01010034 	movhi	r4,1024
 2000364:	21020004 	addi	r4,r4,2048
 2000368:	2002f840 	call	2002f84 <_Z20ADXL345_SPI_XYZ_ReadmPt>
 200036c:	e0bffe05 	stb	r2,-8(fp)

			if (bSuccess)
 2000370:	e0bffe03 	ldbu	r2,-8(fp)
 2000374:	1005003a 	cmpeq	r2,r2,zero
 2000378:	1000201e 	bne	r2,zero,20003fc <_Z15getAccelerationPs+0x104>
			{
				iXYZ[0]*=4; iXYZ[1]*=4; iXYZ[2]*=4;
 200037c:	e0bfff17 	ldw	r2,-4(fp)
 2000380:	1080000b 	ldhu	r2,0(r2)
 2000384:	10bfffcc 	andi	r2,r2,65535
 2000388:	10a0001c 	xori	r2,r2,32768
 200038c:	10a00004 	addi	r2,r2,-32768
 2000390:	1085883a 	add	r2,r2,r2
 2000394:	1085883a 	add	r2,r2,r2
 2000398:	1007883a 	mov	r3,r2
 200039c:	e0bfff17 	ldw	r2,-4(fp)
 20003a0:	10c0000d 	sth	r3,0(r2)
 20003a4:	e0bfff17 	ldw	r2,-4(fp)
 20003a8:	10c00084 	addi	r3,r2,2
 20003ac:	e0bfff17 	ldw	r2,-4(fp)
 20003b0:	10800084 	addi	r2,r2,2
 20003b4:	1080000b 	ldhu	r2,0(r2)
 20003b8:	10bfffcc 	andi	r2,r2,65535
 20003bc:	10a0001c 	xori	r2,r2,32768
 20003c0:	10a00004 	addi	r2,r2,-32768
 20003c4:	1085883a 	add	r2,r2,r2
 20003c8:	1085883a 	add	r2,r2,r2
 20003cc:	1880000d 	sth	r2,0(r3)
 20003d0:	e0bfff17 	ldw	r2,-4(fp)
 20003d4:	10c00104 	addi	r3,r2,4
 20003d8:	e0bfff17 	ldw	r2,-4(fp)
 20003dc:	10800104 	addi	r2,r2,4
 20003e0:	1080000b 	ldhu	r2,0(r2)
 20003e4:	10bfffcc 	andi	r2,r2,65535
 20003e8:	10a0001c 	xori	r2,r2,32768
 20003ec:	10a00004 	addi	r2,r2,-32768
 20003f0:	1085883a 	add	r2,r2,r2
 20003f4:	1085883a 	add	r2,r2,r2
 20003f8:	1880000d 	sth	r2,0(r3)
			}
		}

	}

	return bSuccess;
 20003fc:	e0bffe03 	ldbu	r2,-8(fp)

}
 2000400:	e037883a 	mov	sp,fp
 2000404:	dfc00117 	ldw	ra,4(sp)
 2000408:	df000017 	ldw	fp,0(sp)
 200040c:	dec00204 	addi	sp,sp,8
 2000410:	f800283a 	ret

02000414 <_Z15ReadADCChannelsPhhPm>:
#include "../terasic_lib/adc_spi_read.h"
#include "alt_types.h"

#include "adc_interface.h"

bool ReadADCChannels(alt_u8 *uiChannels, alt_u8 uiChannelCount, alt_u32 *uiValues)
 2000414:	defff804 	addi	sp,sp,-32
 2000418:	dfc00715 	stw	ra,28(sp)
 200041c:	df000615 	stw	fp,24(sp)
 2000420:	dc000515 	stw	r16,20(sp)
 2000424:	df000504 	addi	fp,sp,20
 2000428:	e13ffc15 	stw	r4,-16(fp)
 200042c:	e1bffe15 	stw	r6,-8(fp)
 2000430:	e17ffd05 	stb	r5,-12(fp)
{
	if(uiChannelCount < 1)
 2000434:	e0bffd03 	ldbu	r2,-12(fp)
 2000438:	1004c03a 	cmpne	r2,r2,zero
 200043c:	1000021e 	bne	r2,zero,2000448 <_Z15ReadADCChannelsPhhPm+0x34>
		return false;
 2000440:	e03fff15 	stw	zero,-4(fp)
 2000444:	00006d06 	br	20005fc <_Z15ReadADCChannelsPhhPm+0x1e8>

	// Start Read for the first channel
	ADC_Read(uiChannels[0]);
 2000448:	e0bffc17 	ldw	r2,-16(fp)
 200044c:	10800003 	ldbu	r2,0(r2)
 2000450:	11003fcc 	andi	r4,r2,255
 2000454:	20031f80 	call	20031f8 <_Z8ADC_Readh>

	// Read rest
	for(int i = 0; i < uiChannelCount-1; i++)
 2000458:	e03ffb15 	stw	zero,-20(fp)
 200045c:	00003206 	br	2000528 <_Z15ReadADCChannelsPhhPm+0x114>
	{
		uiValues[i] = ADC_Read(uiChannels[i+1]);
 2000460:	e0bffb17 	ldw	r2,-20(fp)
 2000464:	1085883a 	add	r2,r2,r2
 2000468:	1085883a 	add	r2,r2,r2
 200046c:	1007883a 	mov	r3,r2
 2000470:	e0bffe17 	ldw	r2,-8(fp)
 2000474:	18a1883a 	add	r16,r3,r2
 2000478:	e0fffb17 	ldw	r3,-20(fp)
 200047c:	e0bffc17 	ldw	r2,-16(fp)
 2000480:	1885883a 	add	r2,r3,r2
 2000484:	10800044 	addi	r2,r2,1
 2000488:	10800003 	ldbu	r2,0(r2)
 200048c:	11003fcc 	andi	r4,r2,255
 2000490:	20031f80 	call	20031f8 <_Z8ADC_Readh>
 2000494:	10bfffcc 	andi	r2,r2,65535
 2000498:	80800015 	stw	r2,0(r16)
		uiValues[i] *= 100;
 200049c:	e0bffb17 	ldw	r2,-20(fp)
 20004a0:	1085883a 	add	r2,r2,r2
 20004a4:	1085883a 	add	r2,r2,r2
 20004a8:	1007883a 	mov	r3,r2
 20004ac:	e0bffe17 	ldw	r2,-8(fp)
 20004b0:	18a1883a 	add	r16,r3,r2
 20004b4:	e0bffb17 	ldw	r2,-20(fp)
 20004b8:	1085883a 	add	r2,r2,r2
 20004bc:	1085883a 	add	r2,r2,r2
 20004c0:	1007883a 	mov	r3,r2
 20004c4:	e0bffe17 	ldw	r2,-8(fp)
 20004c8:	1885883a 	add	r2,r3,r2
 20004cc:	11000017 	ldw	r4,0(r2)
 20004d0:	01401904 	movi	r5,100
 20004d4:	200d0cc0 	call	200d0cc <__mulsi3>
 20004d8:	80800015 	stw	r2,0(r16)
		uiValues[i] /= 1311;
 20004dc:	e0bffb17 	ldw	r2,-20(fp)
 20004e0:	1085883a 	add	r2,r2,r2
 20004e4:	1085883a 	add	r2,r2,r2
 20004e8:	1007883a 	mov	r3,r2
 20004ec:	e0bffe17 	ldw	r2,-8(fp)
 20004f0:	18a1883a 	add	r16,r3,r2
 20004f4:	e0bffb17 	ldw	r2,-20(fp)
 20004f8:	1085883a 	add	r2,r2,r2
 20004fc:	1085883a 	add	r2,r2,r2
 2000500:	1007883a 	mov	r3,r2
 2000504:	e0bffe17 	ldw	r2,-8(fp)
 2000508:	1885883a 	add	r2,r3,r2
 200050c:	11000017 	ldw	r4,0(r2)
 2000510:	014147c4 	movi	r5,1311
 2000514:	200d0bc0 	call	200d0bc <__udivsi3>
 2000518:	80800015 	stw	r2,0(r16)

	// Start Read for the first channel
	ADC_Read(uiChannels[0]);

	// Read rest
	for(int i = 0; i < uiChannelCount-1; i++)
 200051c:	e0bffb17 	ldw	r2,-20(fp)
 2000520:	10800044 	addi	r2,r2,1
 2000524:	e0bffb15 	stw	r2,-20(fp)
 2000528:	e0bffd03 	ldbu	r2,-12(fp)
 200052c:	10ffffc4 	addi	r3,r2,-1
 2000530:	e0bffb17 	ldw	r2,-20(fp)
 2000534:	10ffca16 	blt	r2,r3,2000460 <_Z15ReadADCChannelsPhhPm+0x4c>
		uiValues[i] *= 100;
		uiValues[i] /= 1311;
	}

	// Read last
	uiValues[uiChannelCount-1] = ADC_Read(0);
 2000538:	e0bffd03 	ldbu	r2,-12(fp)
 200053c:	1085883a 	add	r2,r2,r2
 2000540:	1085883a 	add	r2,r2,r2
 2000544:	1007883a 	mov	r3,r2
 2000548:	e0bffe17 	ldw	r2,-8(fp)
 200054c:	1885883a 	add	r2,r3,r2
 2000550:	143fff04 	addi	r16,r2,-4
 2000554:	0009883a 	mov	r4,zero
 2000558:	20031f80 	call	20031f8 <_Z8ADC_Readh>
 200055c:	10bfffcc 	andi	r2,r2,65535
 2000560:	80800015 	stw	r2,0(r16)
	uiValues[uiChannelCount-1] *= 100;
 2000564:	e0bffd03 	ldbu	r2,-12(fp)
 2000568:	1085883a 	add	r2,r2,r2
 200056c:	1085883a 	add	r2,r2,r2
 2000570:	1007883a 	mov	r3,r2
 2000574:	e0bffe17 	ldw	r2,-8(fp)
 2000578:	1885883a 	add	r2,r3,r2
 200057c:	143fff04 	addi	r16,r2,-4
 2000580:	e0bffd03 	ldbu	r2,-12(fp)
 2000584:	1085883a 	add	r2,r2,r2
 2000588:	1085883a 	add	r2,r2,r2
 200058c:	1007883a 	mov	r3,r2
 2000590:	e0bffe17 	ldw	r2,-8(fp)
 2000594:	1885883a 	add	r2,r3,r2
 2000598:	10bfff04 	addi	r2,r2,-4
 200059c:	11000017 	ldw	r4,0(r2)
 20005a0:	01401904 	movi	r5,100
 20005a4:	200d0cc0 	call	200d0cc <__mulsi3>
 20005a8:	80800015 	stw	r2,0(r16)
	uiValues[uiChannelCount-1] /= 1311;
 20005ac:	e0bffd03 	ldbu	r2,-12(fp)
 20005b0:	1085883a 	add	r2,r2,r2
 20005b4:	1085883a 	add	r2,r2,r2
 20005b8:	1007883a 	mov	r3,r2
 20005bc:	e0bffe17 	ldw	r2,-8(fp)
 20005c0:	1885883a 	add	r2,r3,r2
 20005c4:	143fff04 	addi	r16,r2,-4
 20005c8:	e0bffd03 	ldbu	r2,-12(fp)
 20005cc:	1085883a 	add	r2,r2,r2
 20005d0:	1085883a 	add	r2,r2,r2
 20005d4:	1007883a 	mov	r3,r2
 20005d8:	e0bffe17 	ldw	r2,-8(fp)
 20005dc:	1885883a 	add	r2,r3,r2
 20005e0:	10bfff04 	addi	r2,r2,-4
 20005e4:	11000017 	ldw	r4,0(r2)
 20005e8:	014147c4 	movi	r5,1311
 20005ec:	200d0bc0 	call	200d0bc <__udivsi3>
 20005f0:	80800015 	stw	r2,0(r16)

	return true;
 20005f4:	00800044 	movi	r2,1
 20005f8:	e0bfff15 	stw	r2,-4(fp)
 20005fc:	e0bfff17 	ldw	r2,-4(fp)
}
 2000600:	e037883a 	mov	sp,fp
 2000604:	dfc00217 	ldw	ra,8(sp)
 2000608:	df000117 	ldw	fp,4(sp)
 200060c:	dc000017 	ldw	r16,0(sp)
 2000610:	dec00304 	addi	sp,sp,12
 2000614:	f800283a 	ret

02000618 <_ZN16CEth_UART_SocketD2Ev>:
	m_pDevice = alt_up_rs232_open_dev(UARTNAME);

	m_iTxFrameNr = 0;
}

CEth_UART_Socket::~CEth_UART_Socket()
 2000618:	defffe04 	addi	sp,sp,-8
 200061c:	df000115 	stw	fp,4(sp)
 2000620:	df000104 	addi	fp,sp,4
 2000624:	e13fff15 	stw	r4,-4(fp)
{


}
 2000628:	e037883a 	mov	sp,fp
 200062c:	df000017 	ldw	fp,0(sp)
 2000630:	dec00104 	addi	sp,sp,4
 2000634:	f800283a 	ret

02000638 <_ZN16CEth_UART_SocketD1Ev>:
	m_pDevice = alt_up_rs232_open_dev(UARTNAME);

	m_iTxFrameNr = 0;
}

CEth_UART_Socket::~CEth_UART_Socket()
 2000638:	defffe04 	addi	sp,sp,-8
 200063c:	df000115 	stw	fp,4(sp)
 2000640:	df000104 	addi	fp,sp,4
 2000644:	e13fff15 	stw	r4,-4(fp)
{


}
 2000648:	e037883a 	mov	sp,fp
 200064c:	df000017 	ldw	fp,0(sp)
 2000650:	dec00104 	addi	sp,sp,4
 2000654:	f800283a 	ret

02000658 <_ZN16CEth_UART_Socket5ResetEv>:
	}

	return i;
}

bool CEth_UART_Socket::Reset()
 2000658:	defffe04 	addi	sp,sp,-8
 200065c:	df000115 	stw	fp,4(sp)
 2000660:	df000104 	addi	fp,sp,4
 2000664:	e13fff15 	stw	r4,-4(fp)
{
	m_iTxFrameNr = 0;
 2000668:	e0bfff17 	ldw	r2,-4(fp)
 200066c:	10000115 	stw	zero,4(r2)
	return true;
 2000670:	00800044 	movi	r2,1
}
 2000674:	e037883a 	mov	sp,fp
 2000678:	df000017 	ldw	fp,0(sp)
 200067c:	dec00104 	addi	sp,sp,4
 2000680:	f800283a 	ret

02000684 <_ZN16CEth_UART_Socket16ReceiveImmediateEPhm>:
	}

	return i;
}

alt_32 CEth_UART_Socket::ReceiveImmediate(data_t *p_Data, alt_u32 iLength)
 2000684:	defff804 	addi	sp,sp,-32
 2000688:	dfc00715 	stw	ra,28(sp)
 200068c:	df000615 	stw	fp,24(sp)
 2000690:	df000604 	addi	fp,sp,24
 2000694:	e13ffd15 	stw	r4,-12(fp)
 2000698:	e17ffe15 	stw	r5,-8(fp)
 200069c:	e1bfff15 	stw	r6,-4(fp)
{
	alt_u32 uiCount = 0;
 20006a0:	e03ffb15 	stw	zero,-20(fp)
	alt_u8 uiParity = 0;
 20006a4:	e03ffc05 	stb	zero,-16(fp)
	alt_u32 i = 0;
 20006a8:	e03ffa15 	stw	zero,-24(fp)

	uiCount = alt_up_rs232_get_used_space_in_read_FIFO(m_pDevice);
 20006ac:	e0bffd17 	ldw	r2,-12(fp)
 20006b0:	11000017 	ldw	r4,0(r2)
 20006b4:	2019a2c0 	call	2019a2c <alt_up_rs232_get_used_space_in_read_FIFO>
 20006b8:	e0bffb15 	stw	r2,-20(fp)

	while(uiCount > 0 && iLength > 0)
 20006bc:	00001a06 	br	2000728 <_ZN16CEth_UART_Socket16ReceiveImmediateEPhm+0xa4>
	{
		while(uiCount > 0 && iLength > 0)
		{
			alt_up_rs232_read_data(m_pDevice, (alt_u8*) p_Data+i, &uiParity);
 20006c0:	e0bffd17 	ldw	r2,-12(fp)
 20006c4:	11000017 	ldw	r4,0(r2)
 20006c8:	e0fffa17 	ldw	r3,-24(fp)
 20006cc:	e0bffe17 	ldw	r2,-8(fp)
 20006d0:	188b883a 	add	r5,r3,r2
 20006d4:	e1bffc04 	addi	r6,fp,-16
 20006d8:	2019b400 	call	2019b40 <alt_up_rs232_read_data>
			uiCount--;
 20006dc:	e0bffb17 	ldw	r2,-20(fp)
 20006e0:	10bfffc4 	addi	r2,r2,-1
 20006e4:	e0bffb15 	stw	r2,-20(fp)
			iLength--;
 20006e8:	e0bfff17 	ldw	r2,-4(fp)
 20006ec:	10bfffc4 	addi	r2,r2,-1
 20006f0:	e0bfff15 	stw	r2,-4(fp)
			i++;
 20006f4:	e0bffa17 	ldw	r2,-24(fp)
 20006f8:	10800044 	addi	r2,r2,1
 20006fc:	e0bffa15 	stw	r2,-24(fp)

	uiCount = alt_up_rs232_get_used_space_in_read_FIFO(m_pDevice);

	while(uiCount > 0 && iLength > 0)
	{
		while(uiCount > 0 && iLength > 0)
 2000700:	e0bffb17 	ldw	r2,-20(fp)
 2000704:	1005003a 	cmpeq	r2,r2,zero
 2000708:	1000031e 	bne	r2,zero,2000718 <_ZN16CEth_UART_Socket16ReceiveImmediateEPhm+0x94>
 200070c:	e0bfff17 	ldw	r2,-4(fp)
 2000710:	1004c03a 	cmpne	r2,r2,zero
 2000714:	103fea1e 	bne	r2,zero,20006c0 <_ZN16CEth_UART_Socket16ReceiveImmediateEPhm+0x3c>
			alt_up_rs232_read_data(m_pDevice, (alt_u8*) p_Data+i, &uiParity);
			uiCount--;
			iLength--;
			i++;
		}
		uiCount = alt_up_rs232_get_used_space_in_read_FIFO(m_pDevice);
 2000718:	e0bffd17 	ldw	r2,-12(fp)
 200071c:	11000017 	ldw	r4,0(r2)
 2000720:	2019a2c0 	call	2019a2c <alt_up_rs232_get_used_space_in_read_FIFO>
 2000724:	e0bffb15 	stw	r2,-20(fp)
	alt_u8 uiParity = 0;
	alt_u32 i = 0;

	uiCount = alt_up_rs232_get_used_space_in_read_FIFO(m_pDevice);

	while(uiCount > 0 && iLength > 0)
 2000728:	e0bffb17 	ldw	r2,-20(fp)
 200072c:	1005003a 	cmpeq	r2,r2,zero
 2000730:	1000031e 	bne	r2,zero,2000740 <_ZN16CEth_UART_Socket16ReceiveImmediateEPhm+0xbc>
 2000734:	e0bfff17 	ldw	r2,-4(fp)
 2000738:	1004c03a 	cmpne	r2,r2,zero
 200073c:	103ff01e 	bne	r2,zero,2000700 <_ZN16CEth_UART_Socket16ReceiveImmediateEPhm+0x7c>
			i++;
		}
		uiCount = alt_up_rs232_get_used_space_in_read_FIFO(m_pDevice);
	}

	return i;
 2000740:	e0bffa17 	ldw	r2,-24(fp)
}
 2000744:	e037883a 	mov	sp,fp
 2000748:	dfc00117 	ldw	ra,4(sp)
 200074c:	df000017 	ldw	fp,0(sp)
 2000750:	dec00204 	addi	sp,sp,8
 2000754:	f800283a 	ret

02000758 <_ZN16CEth_UART_Socket7ReceiveEPhmm>:


	return !fail;
}

alt_32 CEth_UART_Socket::Receive(data_t *p_Data, alt_u32 iLength, alt_u32 iTimeOut)
 2000758:	defff504 	addi	sp,sp,-44
 200075c:	dfc00a15 	stw	ra,40(sp)
 2000760:	df000915 	stw	fp,36(sp)
 2000764:	df000904 	addi	fp,sp,36
 2000768:	e13ffb15 	stw	r4,-20(fp)
 200076c:	e17ffc15 	stw	r5,-16(fp)
 2000770:	e1bffd15 	stw	r6,-12(fp)
 2000774:	e1fffe15 	stw	r7,-8(fp)
{
	alt_u32 iTime = 10;
 2000778:	00800284 	movi	r2,10
 200077c:	e0bff915 	stw	r2,-28(fp)
	alt_u32 uiCount = 0;
 2000780:	e03ff815 	stw	zero,-32(fp)
	alt_u8 uiParity = 0;
 2000784:	e03ffa05 	stb	zero,-24(fp)
	alt_u32 i = 0;
 2000788:	e03ff715 	stw	zero,-36(fp)

	iTimeOut *= 400;
 200078c:	e13ffe17 	ldw	r4,-8(fp)
 2000790:	01406404 	movi	r5,400
 2000794:	200d0cc0 	call	200d0cc <__mulsi3>
 2000798:	e0bffe15 	stw	r2,-8(fp)

	do
	{
		uiCount = alt_up_rs232_get_used_space_in_read_FIFO(m_pDevice);
 200079c:	e0bffb17 	ldw	r2,-20(fp)
 20007a0:	11000017 	ldw	r4,0(r2)
 20007a4:	2019a2c0 	call	2019a2c <alt_up_rs232_get_used_space_in_read_FIFO>
 20007a8:	e0bff815 	stw	r2,-32(fp)
		iTime += 5;
 20007ac:	e0bff917 	ldw	r2,-28(fp)
 20007b0:	10800144 	addi	r2,r2,5
 20007b4:	e0bff915 	stw	r2,-28(fp)
		if(iTime > iTimeOut)
 20007b8:	e0fff917 	ldw	r3,-28(fp)
 20007bc:	e0bffe17 	ldw	r2,-8(fp)
 20007c0:	10c0022e 	bgeu	r2,r3,20007cc <_ZN16CEth_UART_Socket7ReceiveEPhmm+0x74>
			return 0;
 20007c4:	e03fff15 	stw	zero,-4(fp)
 20007c8:	00002806 	br	200086c <_ZN16CEth_UART_Socket7ReceiveEPhmm+0x114>
	alt_u8 uiParity = 0;
	alt_u32 i = 0;

	iTimeOut *= 400;

	do
 20007cc:	e0bff817 	ldw	r2,-32(fp)
 20007d0:	1005003a 	cmpeq	r2,r2,zero
 20007d4:	103ff11e 	bne	r2,zero,200079c <_ZN16CEth_UART_Socket7ReceiveEPhmm+0x44>
		iTime += 5;
		if(iTime > iTimeOut)
			return 0;
	}while(uiCount == 0);

	while(uiCount > 0 && iLength > 0)
 20007d8:	00001c06 	br	200084c <_ZN16CEth_UART_Socket7ReceiveEPhmm+0xf4>
	{
		while(uiCount > 0 && iLength > 0)
		{
			alt_up_rs232_read_data(m_pDevice, (alt_u8*) p_Data+i, &uiParity);
 20007dc:	e0bffb17 	ldw	r2,-20(fp)
 20007e0:	11000017 	ldw	r4,0(r2)
 20007e4:	e0fff717 	ldw	r3,-36(fp)
 20007e8:	e0bffc17 	ldw	r2,-16(fp)
 20007ec:	188b883a 	add	r5,r3,r2
 20007f0:	e1bffa04 	addi	r6,fp,-24
 20007f4:	2019b400 	call	2019b40 <alt_up_rs232_read_data>
			uiCount--;
 20007f8:	e0bff817 	ldw	r2,-32(fp)
 20007fc:	10bfffc4 	addi	r2,r2,-1
 2000800:	e0bff815 	stw	r2,-32(fp)
			iLength--;
 2000804:	e0bffd17 	ldw	r2,-12(fp)
 2000808:	10bfffc4 	addi	r2,r2,-1
 200080c:	e0bffd15 	stw	r2,-12(fp)
			i++;
 2000810:	e0bff717 	ldw	r2,-36(fp)
 2000814:	10800044 	addi	r2,r2,1
 2000818:	e0bff715 	stw	r2,-36(fp)
			return 0;
	}while(uiCount == 0);

	while(uiCount > 0 && iLength > 0)
	{
		while(uiCount > 0 && iLength > 0)
 200081c:	e0bff817 	ldw	r2,-32(fp)
 2000820:	1005003a 	cmpeq	r2,r2,zero
 2000824:	1000031e 	bne	r2,zero,2000834 <_ZN16CEth_UART_Socket7ReceiveEPhmm+0xdc>
 2000828:	e0bffd17 	ldw	r2,-12(fp)
 200082c:	1004c03a 	cmpne	r2,r2,zero
 2000830:	103fea1e 	bne	r2,zero,20007dc <_ZN16CEth_UART_Socket7ReceiveEPhmm+0x84>
			alt_up_rs232_read_data(m_pDevice, (alt_u8*) p_Data+i, &uiParity);
			uiCount--;
			iLength--;
			i++;
		}
		delay(1);
 2000834:	01000044 	movi	r4,1
 2000838:	20001f40 	call	20001f4 <_Z5delayj>
		uiCount = alt_up_rs232_get_used_space_in_read_FIFO(m_pDevice);
 200083c:	e0bffb17 	ldw	r2,-20(fp)
 2000840:	11000017 	ldw	r4,0(r2)
 2000844:	2019a2c0 	call	2019a2c <alt_up_rs232_get_used_space_in_read_FIFO>
 2000848:	e0bff815 	stw	r2,-32(fp)
		iTime += 5;
		if(iTime > iTimeOut)
			return 0;
	}while(uiCount == 0);

	while(uiCount > 0 && iLength > 0)
 200084c:	e0bff817 	ldw	r2,-32(fp)
 2000850:	1005003a 	cmpeq	r2,r2,zero
 2000854:	1000031e 	bne	r2,zero,2000864 <_ZN16CEth_UART_Socket7ReceiveEPhmm+0x10c>
 2000858:	e0bffd17 	ldw	r2,-12(fp)
 200085c:	1004c03a 	cmpne	r2,r2,zero
 2000860:	103fee1e 	bne	r2,zero,200081c <_ZN16CEth_UART_Socket7ReceiveEPhmm+0xc4>
		}
		delay(1);
		uiCount = alt_up_rs232_get_used_space_in_read_FIFO(m_pDevice);
	}

	return i;
 2000864:	e0bff717 	ldw	r2,-36(fp)
 2000868:	e0bfff15 	stw	r2,-4(fp)
 200086c:	e0bfff17 	ldw	r2,-4(fp)
}
 2000870:	e037883a 	mov	sp,fp
 2000874:	dfc00117 	ldw	ra,4(sp)
 2000878:	df000017 	ldw	fp,0(sp)
 200087c:	dec00204 	addi	sp,sp,8
 2000880:	f800283a 	ret

02000884 <_ZN16CEth_UART_Socket4SendEPhm>:


}


bool CEth_UART_Socket::Send(data_t *p_Data, alt_u32 iLength)
 2000884:	defff704 	addi	sp,sp,-36
 2000888:	dfc00815 	stw	ra,32(sp)
 200088c:	df000715 	stw	fp,28(sp)
 2000890:	df000704 	addi	fp,sp,28
 2000894:	e13ffc15 	stw	r4,-16(fp)
 2000898:	e17ffd15 	stw	r5,-12(fp)
 200089c:	e1bffe15 	stw	r6,-8(fp)
{
	alt_u32 uiFreeSpace = 0;
 20008a0:	e03ffb15 	stw	zero,-20(fp)
	bool fail = false;
 20008a4:	e03ffa05 	stb	zero,-24(fp)

	while(iLength > 0)
 20008a8:	00002906 	br	2000950 <_ZN16CEth_UART_Socket4SendEPhm+0xcc>
	{
		uiFreeSpace = alt_up_rs232_get_available_space_in_write_FIFO(m_pDevice);
 20008ac:	e0bffc17 	ldw	r2,-16(fp)
 20008b0:	11000017 	ldw	r4,0(r2)
 20008b4:	2019a680 	call	2019a68 <alt_up_rs232_get_available_space_in_write_FIFO>
 20008b8:	e0bffb15 	stw	r2,-20(fp)

		if(uiFreeSpace > iLength)
 20008bc:	e0fffb17 	ldw	r3,-20(fp)
 20008c0:	e0bffe17 	ldw	r2,-8(fp)
 20008c4:	10c0022e 	bgeu	r2,r3,20008d0 <_ZN16CEth_UART_Socket4SendEPhm+0x4c>
			uiFreeSpace = iLength;
 20008c8:	e0bffe17 	ldw	r2,-8(fp)
 20008cc:	e0bffb15 	stw	r2,-20(fp)

		for (alt_u32 i = 0; i < uiFreeSpace; i++)
 20008d0:	e03ff915 	stw	zero,-28(fp)
 20008d4:	00001706 	br	2000934 <_ZN16CEth_UART_Socket4SendEPhm+0xb0>
		{
			fail = fail || (alt_up_rs232_write_data(m_pDevice, *p_Data) < 0);
 20008d8:	e0bffa03 	ldbu	r2,-24(fp)
 20008dc:	1004c03a 	cmpne	r2,r2,zero
 20008e0:	1000081e 	bne	r2,zero,2000904 <_ZN16CEth_UART_Socket4SendEPhm+0x80>
 20008e4:	e0bffc17 	ldw	r2,-16(fp)
 20008e8:	11000017 	ldw	r4,0(r2)
 20008ec:	e0bffd17 	ldw	r2,-12(fp)
 20008f0:	10800003 	ldbu	r2,0(r2)
 20008f4:	11403fcc 	andi	r5,r2,255
 20008f8:	2019af80 	call	2019af8 <alt_up_rs232_write_data>
 20008fc:	1004403a 	cmpge	r2,r2,zero
 2000900:	1000031e 	bne	r2,zero,2000910 <_ZN16CEth_UART_Socket4SendEPhm+0x8c>
 2000904:	00800044 	movi	r2,1
 2000908:	e0bfff05 	stb	r2,-4(fp)
 200090c:	00000106 	br	2000914 <_ZN16CEth_UART_Socket4SendEPhm+0x90>
 2000910:	e03fff05 	stb	zero,-4(fp)
 2000914:	e0bfff03 	ldbu	r2,-4(fp)
 2000918:	e0bffa05 	stb	r2,-24(fp)
			p_Data++;
 200091c:	e0bffd17 	ldw	r2,-12(fp)
 2000920:	10800044 	addi	r2,r2,1
 2000924:	e0bffd15 	stw	r2,-12(fp)
		uiFreeSpace = alt_up_rs232_get_available_space_in_write_FIFO(m_pDevice);

		if(uiFreeSpace > iLength)
			uiFreeSpace = iLength;

		for (alt_u32 i = 0; i < uiFreeSpace; i++)
 2000928:	e0bff917 	ldw	r2,-28(fp)
 200092c:	10800044 	addi	r2,r2,1
 2000930:	e0bff915 	stw	r2,-28(fp)
 2000934:	e0fff917 	ldw	r3,-28(fp)
 2000938:	e0bffb17 	ldw	r2,-20(fp)
 200093c:	18bfe636 	bltu	r3,r2,20008d8 <_ZN16CEth_UART_Socket4SendEPhm+0x54>
		{
			fail = fail || (alt_up_rs232_write_data(m_pDevice, *p_Data) < 0);
			p_Data++;
		}
		iLength = iLength - uiFreeSpace;
 2000940:	e0bffe17 	ldw	r2,-8(fp)
 2000944:	e0fffb17 	ldw	r3,-20(fp)
 2000948:	10c5c83a 	sub	r2,r2,r3
 200094c:	e0bffe15 	stw	r2,-8(fp)
bool CEth_UART_Socket::Send(data_t *p_Data, alt_u32 iLength)
{
	alt_u32 uiFreeSpace = 0;
	bool fail = false;

	while(iLength > 0)
 2000950:	e0bffe17 	ldw	r2,-8(fp)
 2000954:	1004c03a 	cmpne	r2,r2,zero
 2000958:	103fd41e 	bne	r2,zero,20008ac <_ZN16CEth_UART_Socket4SendEPhm+0x28>
		}
		iLength = iLength - uiFreeSpace;
	}


	return !fail;
 200095c:	e0bffa03 	ldbu	r2,-24(fp)
 2000960:	1080005c 	xori	r2,r2,1
 2000964:	10803fcc 	andi	r2,r2,255
}
 2000968:	e037883a 	mov	sp,fp
 200096c:	dfc00117 	ldw	ra,4(sp)
 2000970:	df000017 	ldw	fp,0(sp)
 2000974:	dec00204 	addi	sp,sp,8
 2000978:	f800283a 	ret

0200097c <_ZN16CEth_UART_SocketC1Ev>:
#include <system.h>
#include "..\etc\utility.h"

#define UARTNAME "/dev/uart_0"

CEth_UART_Socket::CEth_UART_Socket()
 200097c:	defffd04 	addi	sp,sp,-12
 2000980:	dfc00215 	stw	ra,8(sp)
 2000984:	df000115 	stw	fp,4(sp)
 2000988:	df000104 	addi	fp,sp,4
 200098c:	e13fff15 	stw	r4,-4(fp)
{
	m_pDevice = alt_up_rs232_open_dev(UARTNAME);
 2000990:	010080b4 	movhi	r4,514
 2000994:	212e0b04 	addi	r4,r4,-18388
 2000998:	2019cd80 	call	2019cd8 <alt_up_rs232_open_dev>
 200099c:	e0ffff17 	ldw	r3,-4(fp)
 20009a0:	18800015 	stw	r2,0(r3)

	m_iTxFrameNr = 0;
 20009a4:	e0bfff17 	ldw	r2,-4(fp)
 20009a8:	10000115 	stw	zero,4(r2)
}
 20009ac:	e037883a 	mov	sp,fp
 20009b0:	dfc00117 	ldw	ra,4(sp)
 20009b4:	df000017 	ldw	fp,0(sp)
 20009b8:	dec00204 	addi	sp,sp,8
 20009bc:	f800283a 	ret

020009c0 <_ZN16CEth_UART_SocketC2Ev>:
#include <system.h>
#include "..\etc\utility.h"

#define UARTNAME "/dev/uart_0"

CEth_UART_Socket::CEth_UART_Socket()
 20009c0:	defffd04 	addi	sp,sp,-12
 20009c4:	dfc00215 	stw	ra,8(sp)
 20009c8:	df000115 	stw	fp,4(sp)
 20009cc:	df000104 	addi	fp,sp,4
 20009d0:	e13fff15 	stw	r4,-4(fp)
{
	m_pDevice = alt_up_rs232_open_dev(UARTNAME);
 20009d4:	010080b4 	movhi	r4,514
 20009d8:	212e0b04 	addi	r4,r4,-18388
 20009dc:	2019cd80 	call	2019cd8 <alt_up_rs232_open_dev>
 20009e0:	e0ffff17 	ldw	r3,-4(fp)
 20009e4:	18800015 	stw	r2,0(r3)

	m_iTxFrameNr = 0;
 20009e8:	e0bfff17 	ldw	r2,-4(fp)
 20009ec:	10000115 	stw	zero,4(r2)
}
 20009f0:	e037883a 	mov	sp,fp
 20009f4:	dfc00117 	ldw	ra,4(sp)
 20009f8:	df000017 	ldw	fp,0(sp)
 20009fc:	dec00204 	addi	sp,sp,8
 2000a00:	f800283a 	ret

02000a04 <_Z13motor_settingmmmmmm>:
#include <sys/time.h>



void motor_setting(unsigned long phase1, unsigned long duty1,unsigned long phase2, unsigned long duty2,
		unsigned long period,unsigned long enable)
 2000a04:	defff504 	addi	sp,sp,-44
 2000a08:	df000a15 	stw	fp,40(sp)
 2000a0c:	df000a04 	addi	fp,sp,40
 2000a10:	e13ffc15 	stw	r4,-16(fp)
 2000a14:	e17ffd15 	stw	r5,-12(fp)
 2000a18:	e1bffe15 	stw	r6,-8(fp)
 2000a1c:	e1ffff15 	stw	r7,-4(fp)
{
	volatile unsigned int * pwm_en		=(volatile unsigned int *)	PWM_EN;
 2000a20:	00a18034 	movhi	r2,34304
 2000a24:	10844004 	addi	r2,r2,4352
 2000a28:	e0bffb15 	stw	r2,-20(fp)
	volatile unsigned int * pwm_period	=(volatile unsigned int *)	PWM_PERIOD;
 2000a2c:	00a18034 	movhi	r2,34304
 2000a30:	10844104 	addi	r2,r2,4356
 2000a34:	e0bffa15 	stw	r2,-24(fp)
	volatile unsigned int * pwm_phase1	=(volatile unsigned int *)	PWM_PHASE1;
 2000a38:	00a18034 	movhi	r2,34304
 2000a3c:	10844404 	addi	r2,r2,4368
 2000a40:	e0bff915 	stw	r2,-28(fp)
	volatile unsigned int * pwm_phase2	=(volatile unsigned int *)	PWM_PHASE2;
 2000a44:	00a18034 	movhi	r2,34304
 2000a48:	10844504 	addi	r2,r2,4372
 2000a4c:	e0bff815 	stw	r2,-32(fp)
	volatile unsigned int * pwm_duty1	=(volatile unsigned int *)	PWM_DUTY1;
 2000a50:	00a18034 	movhi	r2,34304
 2000a54:	10844204 	addi	r2,r2,4360
 2000a58:	e0bff715 	stw	r2,-36(fp)
	volatile unsigned int * pwm_duty2	=(volatile unsigned int *)	PWM_DUTY2;
 2000a5c:	00a18034 	movhi	r2,34304
 2000a60:	10844304 	addi	r2,r2,4364
 2000a64:	e0bff615 	stw	r2,-40(fp)

	// Check for invalid parameters
	if(enable > 2)
 2000a68:	e0800217 	ldw	r2,8(fp)
 2000a6c:	108000f0 	cmpltui	r2,r2,3
 2000a70:	1000011e 	bne	r2,zero,2000a78 <_Z13motor_settingmmmmmm+0x74>
		enable = 0;
 2000a74:	e0000215 	stw	zero,8(fp)

	if(duty1 > 100000)
 2000a78:	e0fffd17 	ldw	r3,-12(fp)
 2000a7c:	008000b4 	movhi	r2,2
 2000a80:	10a1a804 	addi	r2,r2,-31072
 2000a84:	10c0032e 	bgeu	r2,r3,2000a94 <_Z13motor_settingmmmmmm+0x90>
		duty1 = 100000;
 2000a88:	008000b4 	movhi	r2,2
 2000a8c:	10a1a804 	addi	r2,r2,-31072
 2000a90:	e0bffd15 	stw	r2,-12(fp)

	if(duty2 > 100000)
 2000a94:	e0ffff17 	ldw	r3,-4(fp)
 2000a98:	008000b4 	movhi	r2,2
 2000a9c:	10a1a804 	addi	r2,r2,-31072
 2000aa0:	10c0032e 	bgeu	r2,r3,2000ab0 <_Z13motor_settingmmmmmm+0xac>
		duty2 = 100000;
 2000aa4:	008000b4 	movhi	r2,2
 2000aa8:	10a1a804 	addi	r2,r2,-31072
 2000aac:	e0bfff15 	stw	r2,-4(fp)

	// Write settings to PWM-generator
	* pwm_en		= enable;
 2000ab0:	e0fffb17 	ldw	r3,-20(fp)
 2000ab4:	e0800217 	ldw	r2,8(fp)
 2000ab8:	18800015 	stw	r2,0(r3)
	* pwm_period	= period;
 2000abc:	e0fffa17 	ldw	r3,-24(fp)
 2000ac0:	e0800117 	ldw	r2,4(fp)
 2000ac4:	18800015 	stw	r2,0(r3)
	* pwm_phase1	= phase1;
 2000ac8:	e0fff917 	ldw	r3,-28(fp)
 2000acc:	e0bffc17 	ldw	r2,-16(fp)
 2000ad0:	18800015 	stw	r2,0(r3)
	* pwm_phase2	= phase2;
 2000ad4:	e0fff817 	ldw	r3,-32(fp)
 2000ad8:	e0bffe17 	ldw	r2,-8(fp)
 2000adc:	18800015 	stw	r2,0(r3)
	* pwm_duty1		= duty1;
 2000ae0:	e0fff717 	ldw	r3,-36(fp)
 2000ae4:	e0bffd17 	ldw	r2,-12(fp)
 2000ae8:	18800015 	stw	r2,0(r3)
	* pwm_duty2		= duty2;
 2000aec:	e0fff617 	ldw	r3,-40(fp)
 2000af0:	e0bfff17 	ldw	r2,-4(fp)
 2000af4:	18800015 	stw	r2,0(r3)

}
 2000af8:	e037883a 	mov	sp,fp
 2000afc:	df000017 	ldw	fp,0(sp)
 2000b00:	dec00104 	addi	sp,sp,4
 2000b04:	f800283a 	ret

02000b08 <_Z8setSpeedl>:

void setSpeed(alt_32 uiSpeed)
 2000b08:	defffb04 	addi	sp,sp,-20
 2000b0c:	dfc00415 	stw	ra,16(sp)
 2000b10:	df000315 	stw	fp,12(sp)
 2000b14:	df000304 	addi	fp,sp,12
 2000b18:	e13fff15 	stw	r4,-4(fp)
{
	if(uiSpeed > 0)
 2000b1c:	e0bfff17 	ldw	r2,-4(fp)
 2000b20:	10800050 	cmplti	r2,r2,1
 2000b24:	10000b1e 	bne	r2,zero,2000b54 <_Z8setSpeedl+0x4c>
	{
		motor_setting(0,uiSpeed,0,0,100000,1);
 2000b28:	e17fff17 	ldw	r5,-4(fp)
 2000b2c:	008000b4 	movhi	r2,2
 2000b30:	10a1a804 	addi	r2,r2,-31072
 2000b34:	d8800015 	stw	r2,0(sp)
 2000b38:	00800044 	movi	r2,1
 2000b3c:	d8800115 	stw	r2,4(sp)
 2000b40:	0009883a 	mov	r4,zero
 2000b44:	000d883a 	mov	r6,zero
 2000b48:	000f883a 	mov	r7,zero
 2000b4c:	2000a040 	call	2000a04 <_Z13motor_settingmmmmmm>
 2000b50:	00000c06 	br	2000b84 <_Z8setSpeedl+0x7c>
	}
	else
	{
		motor_setting(0,0,0,-1 * uiSpeed,100000,2);
 2000b54:	e0bfff17 	ldw	r2,-4(fp)
 2000b58:	0085c83a 	sub	r2,zero,r2
 2000b5c:	100f883a 	mov	r7,r2
 2000b60:	008000b4 	movhi	r2,2
 2000b64:	10a1a804 	addi	r2,r2,-31072
 2000b68:	d8800015 	stw	r2,0(sp)
 2000b6c:	00800084 	movi	r2,2
 2000b70:	d8800115 	stw	r2,4(sp)
 2000b74:	0009883a 	mov	r4,zero
 2000b78:	000b883a 	mov	r5,zero
 2000b7c:	000d883a 	mov	r6,zero
 2000b80:	2000a040 	call	2000a04 <_Z13motor_settingmmmmmm>
	}

}
 2000b84:	e037883a 	mov	sp,fp
 2000b88:	dfc00117 	ldw	ra,4(sp)
 2000b8c:	df000017 	ldw	fp,0(sp)
 2000b90:	dec00204 	addi	sp,sp,8
 2000b94:	f800283a 	ret

02000b98 <_Z22measureSpeedUnblockingv>:
		return current_speed;
	else
		return current_speed * -1;
}

alt_32 measureSpeedUnblocking(void)
 2000b98:	defff904 	addi	sp,sp,-28
 2000b9c:	dfc00615 	stw	ra,24(sp)
 2000ba0:	df000515 	stw	fp,20(sp)
 2000ba4:	df000504 	addi	fp,sp,20
{
	volatile alt_u32 * pEnc = (volatile alt_u32 *) (0x80000000 | MOTOR_ENCODER_0_BASE);
 2000ba8:	00a18034 	movhi	r2,34304
 2000bac:	10844c04 	addi	r2,r2,4400
 2000bb0:	e0bffc15 	stw	r2,-16(fp)
	volatile alt_u32 * pDir = (volatile alt_u32 *) (0x80000000 | MOTOR_ENCODER_0_BASE + 4);
 2000bb4:	00a18034 	movhi	r2,34304
 2000bb8:	10844d04 	addi	r2,r2,4404
 2000bbc:	e0bffb15 	stw	r2,-20(fp)
	volatile alt_u32 pDirOld;
	volatile alt_u32 current_speed;

	// NOTE: Call every 10 ms!!!!
	current_speed = *pEnc;
 2000bc0:	e0bffc17 	ldw	r2,-16(fp)
 2000bc4:	10800017 	ldw	r2,0(r2)
 2000bc8:	e0bffe15 	stw	r2,-8(fp)
	pDirOld = *pDir;
 2000bcc:	e0bffb17 	ldw	r2,-20(fp)
 2000bd0:	10800017 	ldw	r2,0(r2)
 2000bd4:	e0bffd15 	stw	r2,-12(fp)
	*pEnc =  1;
 2000bd8:	e0fffc17 	ldw	r3,-16(fp)
 2000bdc:	00800044 	movi	r2,1
 2000be0:	18800015 	stw	r2,0(r3)

	current_speed *= 100;
 2000be4:	e13ffe17 	ldw	r4,-8(fp)
 2000be8:	01401904 	movi	r5,100
 2000bec:	200d0cc0 	call	200d0cc <__mulsi3>
 2000bf0:	e0bffe15 	stw	r2,-8(fp)
	current_speed *= WHEEL_SCALE;
 2000bf4:	e13ffe17 	ldw	r4,-8(fp)
 2000bf8:	01405cc4 	movi	r5,371
 2000bfc:	200d0cc0 	call	200d0cc <__mulsi3>
 2000c00:	e0bffe15 	stw	r2,-8(fp)
	current_speed /= 4288;
 2000c04:	e13ffe17 	ldw	r4,-8(fp)
 2000c08:	01443004 	movi	r5,4288
 2000c0c:	200d0bc0 	call	200d0bc <__udivsi3>
 2000c10:	e0bffe15 	stw	r2,-8(fp)

	if(pDirOld == INVERTED)
 2000c14:	e0bffd17 	ldw	r2,-12(fp)
 2000c18:	108000a0 	cmpeqi	r2,r2,2
 2000c1c:	10803fcc 	andi	r2,r2,255
 2000c20:	1005003a 	cmpeq	r2,r2,zero
 2000c24:	1000031e 	bne	r2,zero,2000c34 <_Z22measureSpeedUnblockingv+0x9c>
		return current_speed;
 2000c28:	e0bffe17 	ldw	r2,-8(fp)
 2000c2c:	e0bfff15 	stw	r2,-4(fp)
 2000c30:	00000306 	br	2000c40 <_Z22measureSpeedUnblockingv+0xa8>
	else
		return current_speed * -1;
 2000c34:	e0bffe17 	ldw	r2,-8(fp)
 2000c38:	0085c83a 	sub	r2,zero,r2
 2000c3c:	e0bfff15 	stw	r2,-4(fp)
 2000c40:	e0bfff17 	ldw	r2,-4(fp)
}
 2000c44:	e037883a 	mov	sp,fp
 2000c48:	dfc00117 	ldw	ra,4(sp)
 2000c4c:	df000017 	ldw	fp,0(sp)
 2000c50:	dec00204 	addi	sp,sp,8
 2000c54:	f800283a 	ret

02000c58 <_Z12measureSpeedv>:
		motor_setting(0,0,0,-1 * uiSpeed,100000,2);
	}

}

alt_32 measureSpeed(void)
 2000c58:	defffa04 	addi	sp,sp,-24
 2000c5c:	dfc00515 	stw	ra,20(sp)
 2000c60:	df000415 	stw	fp,16(sp)
 2000c64:	df000404 	addi	fp,sp,16
{
	volatile alt_u32 * pEnc = (volatile alt_u32 *) (0x80000000 | MOTOR_ENCODER_0_BASE);
 2000c68:	00a18034 	movhi	r2,34304
 2000c6c:	10844c04 	addi	r2,r2,4400
 2000c70:	e0bffd15 	stw	r2,-12(fp)
	volatile alt_u32 * pDir = (volatile alt_u32 *) (0x80000000 | MOTOR_ENCODER_0_BASE + 4);
 2000c74:	00a18034 	movhi	r2,34304
 2000c78:	10844d04 	addi	r2,r2,4404
 2000c7c:	e0bffc15 	stw	r2,-16(fp)
	volatile alt_u32 current_speed;

	*pEnc =  1;
 2000c80:	e0fffd17 	ldw	r3,-12(fp)
 2000c84:	00800044 	movi	r2,1
 2000c88:	18800015 	stw	r2,0(r3)
	delay(10);
 2000c8c:	01000284 	movi	r4,10
 2000c90:	20001f40 	call	20001f4 <_Z5delayj>
	current_speed = *pEnc;
 2000c94:	e0bffd17 	ldw	r2,-12(fp)
 2000c98:	10800017 	ldw	r2,0(r2)
 2000c9c:	e0bffe15 	stw	r2,-8(fp)



	current_speed *= 100;
 2000ca0:	e13ffe17 	ldw	r4,-8(fp)
 2000ca4:	01401904 	movi	r5,100
 2000ca8:	200d0cc0 	call	200d0cc <__mulsi3>
 2000cac:	e0bffe15 	stw	r2,-8(fp)
	current_speed *= WHEEL_SCALE;
 2000cb0:	e13ffe17 	ldw	r4,-8(fp)
 2000cb4:	01405cc4 	movi	r5,371
 2000cb8:	200d0cc0 	call	200d0cc <__mulsi3>
 2000cbc:	e0bffe15 	stw	r2,-8(fp)
	current_speed /= 4288;
 2000cc0:	e13ffe17 	ldw	r4,-8(fp)
 2000cc4:	01443004 	movi	r5,4288
 2000cc8:	200d0bc0 	call	200d0bc <__udivsi3>
 2000ccc:	e0bffe15 	stw	r2,-8(fp)

	if(*pDir == INVERTED)
 2000cd0:	e0bffc17 	ldw	r2,-16(fp)
 2000cd4:	10800017 	ldw	r2,0(r2)
 2000cd8:	108000a0 	cmpeqi	r2,r2,2
 2000cdc:	10803fcc 	andi	r2,r2,255
 2000ce0:	1005003a 	cmpeq	r2,r2,zero
 2000ce4:	1000031e 	bne	r2,zero,2000cf4 <_Z12measureSpeedv+0x9c>
		return current_speed;
 2000ce8:	e0bffe17 	ldw	r2,-8(fp)
 2000cec:	e0bfff15 	stw	r2,-4(fp)
 2000cf0:	00000306 	br	2000d00 <_Z12measureSpeedv+0xa8>
	else
		return current_speed * -1;
 2000cf4:	e0bffe17 	ldw	r2,-8(fp)
 2000cf8:	0085c83a 	sub	r2,zero,r2
 2000cfc:	e0bfff15 	stw	r2,-4(fp)
 2000d00:	e0bfff17 	ldw	r2,-4(fp)
}
 2000d04:	e037883a 	mov	sp,fp
 2000d08:	dfc00117 	ldw	ra,4(sp)
 2000d0c:	df000017 	ldw	fp,0(sp)
 2000d10:	dec00204 	addi	sp,sp,8
 2000d14:	f800283a 	ret

02000d18 <_Z15measuredistancem>:
 *      Author: Florian
 */

#include "ultrasound_interface.h"

alt_32 measuredistance(const alt_u32 base_address)
 2000d18:	defff904 	addi	sp,sp,-28
 2000d1c:	dfc00615 	stw	ra,24(sp)
 2000d20:	df000515 	stw	fp,20(sp)
 2000d24:	df000504 	addi	fp,sp,20
 2000d28:	e13fff15 	stw	r4,-4(fp)
{
	alt_u32 state;
	alt_u32 measure_data;
	alt_32 distance;
	alt_u32 iTimeout = 0;
 2000d2c:	e03ffb15 	stw	zero,-20(fp)

	state = get_sensor_state(base_address);
 2000d30:	e0bfff17 	ldw	r2,-4(fp)
 2000d34:	10800204 	addi	r2,r2,8
 2000d38:	10800037 	ldwio	r2,0(r2)
 2000d3c:	e0bffe15 	stw	r2,-8(fp)
	while (state == 1)
 2000d40:	00000706 	br	2000d60 <_Z15measuredistancem+0x48>
	{
		state = get_sensor_state(base_address);
 2000d44:	e0bfff17 	ldw	r2,-4(fp)
 2000d48:	10800204 	addi	r2,r2,8
 2000d4c:	10800037 	ldwio	r2,0(r2)
 2000d50:	e0bffe15 	stw	r2,-8(fp)
		iTimeout++;
 2000d54:	e0bffb17 	ldw	r2,-20(fp)
 2000d58:	10800044 	addi	r2,r2,1
 2000d5c:	e0bffb15 	stw	r2,-20(fp)
	alt_u32 measure_data;
	alt_32 distance;
	alt_u32 iTimeout = 0;

	state = get_sensor_state(base_address);
	while (state == 1)
 2000d60:	e0bffe17 	ldw	r2,-8(fp)
 2000d64:	10800060 	cmpeqi	r2,r2,1
 2000d68:	103ff61e 	bne	r2,zero,2000d44 <_Z15measuredistancem+0x2c>
		iTimeout++;
		//if(iTimeout > 20)
		//	return -1;
	}

	trigger_clear(base_address);
 2000d6c:	e0bfff17 	ldw	r2,-4(fp)
 2000d70:	10000035 	stwio	zero,0(r2)
	trigger_sensor(base_address);
 2000d74:	e0bfff17 	ldw	r2,-4(fp)
 2000d78:	1007883a 	mov	r3,r2
 2000d7c:	00800044 	movi	r2,1
 2000d80:	18800035 	stwio	r2,0(r3)
	trigger_clear(base_address);
 2000d84:	e0bfff17 	ldw	r2,-4(fp)
 2000d88:	10000035 	stwio	zero,0(r2)

	state = get_sensor_state(base_address);
 2000d8c:	e0bfff17 	ldw	r2,-4(fp)
 2000d90:	10800204 	addi	r2,r2,8
 2000d94:	10800037 	ldwio	r2,0(r2)
 2000d98:	e0bffe15 	stw	r2,-8(fp)
	iTimeout = 0;
 2000d9c:	e03ffb15 	stw	zero,-20(fp)
	while (state != 2)
 2000da0:	00000706 	br	2000dc0 <_Z15measuredistancem+0xa8>
	{
		state = get_sensor_state(base_address);
 2000da4:	e0bfff17 	ldw	r2,-4(fp)
 2000da8:	10800204 	addi	r2,r2,8
 2000dac:	10800037 	ldwio	r2,0(r2)
 2000db0:	e0bffe15 	stw	r2,-8(fp)
		iTimeout++;
 2000db4:	e0bffb17 	ldw	r2,-20(fp)
 2000db8:	10800044 	addi	r2,r2,1
 2000dbc:	e0bffb15 	stw	r2,-20(fp)
	trigger_sensor(base_address);
	trigger_clear(base_address);

	state = get_sensor_state(base_address);
	iTimeout = 0;
	while (state != 2)
 2000dc0:	e0bffe17 	ldw	r2,-8(fp)
 2000dc4:	10800098 	cmpnei	r2,r2,2
 2000dc8:	103ff61e 	bne	r2,zero,2000da4 <_Z15measuredistancem+0x8c>
		iTimeout++;
		//if(iTimeout > 20)
		//	return -1;
	}

	measure_data = get_sensor_data(base_address);
 2000dcc:	e0bfff17 	ldw	r2,-4(fp)
 2000dd0:	10800104 	addi	r2,r2,4
 2000dd4:	10800037 	ldwio	r2,0(r2)
 2000dd8:	e0bffd15 	stw	r2,-12(fp)
	if (measure_data == -1)
 2000ddc:	e0bffd17 	ldw	r2,-12(fp)
 2000de0:	10bfffd8 	cmpnei	r2,r2,-1
 2000de4:	1000031e 	bne	r2,zero,2000df4 <_Z15measuredistancem+0xdc>
		distance = -1;
 2000de8:	00bfffc4 	movi	r2,-1
 2000dec:	e0bffc15 	stw	r2,-16(fp)
 2000df0:	00000406 	br	2000e04 <_Z15measuredistancem+0xec>
	else
	{
		distance = measure_data / 588;
 2000df4:	e13ffd17 	ldw	r4,-12(fp)
 2000df8:	01409304 	movi	r5,588
 2000dfc:	200d0bc0 	call	200d0bc <__udivsi3>
 2000e00:	e0bffc15 	stw	r2,-16(fp)
	}

	return distance;
 2000e04:	e0bffc17 	ldw	r2,-16(fp)
}
 2000e08:	e037883a 	mov	sp,fp
 2000e0c:	dfc00117 	ldw	ra,4(sp)
 2000e10:	df000017 	ldw	fp,0(sp)
 2000e14:	dec00204 	addi	sp,sp,8
 2000e18:	f800283a 	ret

02000e1c <_Z14alarm_callbackPv>:
 * Alarm callback. This function is called by the timer after 10ms. The return value will be
 * the next timer value.
 * This function will simply set the bCycleFinished to true. Thereby the WaitForEndOfCycle function
 * will not block anymore.
 */
alt_u32 alarm_callback(void* context)
 2000e1c:	defffe04 	addi	sp,sp,-8
 2000e20:	df000115 	stw	fp,4(sp)
 2000e24:	df000104 	addi	fp,sp,4
 2000e28:	e13fff15 	stw	r4,-4(fp)
{
	bCycleFinished = true;
 2000e2c:	00800044 	movi	r2,1
 2000e30:	d0a70805 	stb	r2,-25568(gp)
	return 10;
 2000e34:	00800284 	movi	r2,10
}
 2000e38:	e037883a 	mov	sp,fp
 2000e3c:	df000017 	ldw	fp,0(sp)
 2000e40:	dec00104 	addi	sp,sp,4
 2000e44:	f800283a 	ret

02000e48 <_Z17waitForEndOfCyclev>:
	}

	return true;
}

bool waitForEndOfCycle()
 2000e48:	deffff04 	addi	sp,sp,-4
 2000e4c:	df000015 	stw	fp,0(sp)
 2000e50:	d839883a 	mov	fp,sp
{
	while(!bCycleFinished)
 2000e54:	00000306 	br	2000e64 <_Z17waitForEndOfCyclev+0x1c>
	{
		*pLED = 0x08;
 2000e58:	d0e00017 	ldw	r3,-32768(gp)
 2000e5c:	00800204 	movi	r2,8
 2000e60:	18800015 	stw	r2,0(r3)
	return true;
}

bool waitForEndOfCycle()
{
	while(!bCycleFinished)
 2000e64:	d0a70803 	ldbu	r2,-25568(gp)
 2000e68:	1080005c 	xori	r2,r2,1
 2000e6c:	10803fcc 	andi	r2,r2,255
 2000e70:	1004c03a 	cmpne	r2,r2,zero
 2000e74:	103ff81e 	bne	r2,zero,2000e58 <_Z17waitForEndOfCyclev+0x10>
	{
		*pLED = 0x08;
	}
	*pLED = *pLED & 0xF7;
 2000e78:	d0e00017 	ldw	r3,-32768(gp)
 2000e7c:	d0a00017 	ldw	r2,-32768(gp)
 2000e80:	10800017 	ldw	r2,0(r2)
 2000e84:	10803dcc 	andi	r2,r2,247
 2000e88:	18800015 	stw	r2,0(r3)

	bCycleFinished = false;
 2000e8c:	d0270805 	stb	zero,-25568(gp)
	return true;
 2000e90:	00800044 	movi	r2,1
}
 2000e94:	e037883a 	mov	sp,fp
 2000e98:	df000017 	ldw	fp,0(sp)
 2000e9c:	dec00104 	addi	sp,sp,4
 2000ea0:	f800283a 	ret

02000ea4 <_Z17setUpPIControllerv>:
	}

	return true;
}

bool setUpPIController()
 2000ea4:	deffb904 	addi	sp,sp,-284
 2000ea8:	dfc04615 	stw	ra,280(sp)
 2000eac:	df004515 	stw	fp,276(sp)
 2000eb0:	ddc04415 	stw	r23,272(sp)
 2000eb4:	dd804315 	stw	r22,268(sp)
 2000eb8:	dd404215 	stw	r21,264(sp)
 2000ebc:	dd004115 	stw	r20,260(sp)
 2000ec0:	dcc04015 	stw	r19,256(sp)
 2000ec4:	dc803f15 	stw	r18,252(sp)
 2000ec8:	dc403e15 	stw	r17,248(sp)
 2000ecc:	dc003d15 	stw	r16,244(sp)
 2000ed0:	df003d04 	addi	fp,sp,244
 2000ed4:	00808074 	movhi	r2,513
 2000ed8:	10ae5a04 	addi	r2,r2,-18072
 2000edc:	e0bfef15 	stw	r2,-68(fp)
 2000ee0:	008080b4 	movhi	r2,514
 2000ee4:	10ada904 	addi	r2,r2,-18780
 2000ee8:	e0bff015 	stw	r2,-64(fp)
 2000eec:	e0bff104 	addi	r2,fp,-60
 2000ef0:	e0ffc504 	addi	r3,fp,-236
 2000ef4:	10c00015 	stw	r3,0(r2)
 2000ef8:	00c08034 	movhi	r3,512
 2000efc:	18c44404 	addi	r3,r3,4368
 2000f00:	10c00115 	stw	r3,4(r2)
 2000f04:	16c00215 	stw	sp,8(r2)
 2000f08:	e13fe904 	addi	r4,fp,-92
 2000f0c:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
{
	CCarMessage *pMessage = 0;
 2000f10:	e03fc815 	stw	zero,-224(fp)
	alt_u32 uiTries = 0;
 2000f14:	e03fc715 	stw	zero,-228(fp)
	alt_u8 cBuffer[128];
	alt_u32 uiReceivedCount = 0;
 2000f18:	e03fc615 	stw	zero,-232(fp)

	alt_32 uiT;

	// Stop
	iDesiredSpeed = 0;
 2000f1c:	d0270315 	stw	zero,-25588(gp)
	iCurrentSpeed = 0;
 2000f20:	d0270215 	stw	zero,-25592(gp)

	// set speed to 0
	setSpeed(0);
 2000f24:	00bfffc4 	movi	r2,-1
 2000f28:	e0bfea15 	stw	r2,-88(fp)
 2000f2c:	0009883a 	mov	r4,zero
 2000f30:	2000b080 	call	2000b08 <_Z8setSpeedl>
	delay (250);
 2000f34:	01003e84 	movi	r4,250
 2000f38:	20001f40 	call	20001f4 <_Z5delayj>

	// Full speed forward
	setSpeed(30000);
 2000f3c:	011d4c04 	movi	r4,30000
 2000f40:	2000b080 	call	2000b08 <_Z8setSpeedl>
	delay (500);
 2000f44:	01007d04 	movi	r4,500
 2000f48:	20001f40 	call	20001f4 <_Z5delayj>
	// Measure speed at T1 (=10ns)
	uiT = measureSpeed();
 2000f4c:	2000c580 	call	2000c58 <_Z12measureSpeedv>
 2000f50:	e0bfc515 	stw	r2,-236(fp)
	// reset speed to 0
	setSpeed(0);
 2000f54:	0009883a 	mov	r4,zero
 2000f58:	2000b080 	call	2000b08 <_Z8setSpeedl>
	delay(250);
 2000f5c:	01003e84 	movi	r4,250
 2000f60:	20001f40 	call	20001f4 <_Z5delayj>
	// Full speed backwards
	setSpeed(-30000);
 2000f64:	0122b404 	movi	r4,-30000
 2000f68:	2000b080 	call	2000b08 <_Z8setSpeedl>
	delay (500);
 2000f6c:	01007d04 	movi	r4,500
 2000f70:	20001f40 	call	20001f4 <_Z5delayj>

	// Measure speed at Tk (=10020ns) which should be the VMax
	uiMaxSpeed = measureSpeed();
 2000f74:	2000c580 	call	2000c58 <_Z12measureSpeedv>
 2000f78:	d0a70415 	stw	r2,-25584(gp)

	setSpeed(0);
 2000f7c:	0009883a 	mov	r4,zero
 2000f80:	2000b080 	call	2000b08 <_Z8setSpeedl>
	delay(250);
 2000f84:	01003e84 	movi	r4,250
 2000f88:	20001f40 	call	20001f4 <_Z5delayj>
	// Reset the controller if exists
	if(pController){
 2000f8c:	d0a70517 	ldw	r2,-25580(gp)
 2000f90:	1005003a 	cmpeq	r2,r2,zero
 2000f94:	1000091e 	bne	r2,zero,2000fbc <_Z17setUpPIControllerv+0x118>
		delete(pController);
 2000f98:	d0a70517 	ldw	r2,-25580(gp)
 2000f9c:	e0bffd15 	stw	r2,-12(fp)
 2000fa0:	e0fffd17 	ldw	r3,-12(fp)
 2000fa4:	1805003a 	cmpeq	r2,r3,zero
 2000fa8:	1000041e 	bne	r2,zero,2000fbc <_Z17setUpPIControllerv+0x118>
 2000fac:	e13ffd17 	ldw	r4,-12(fp)
 2000fb0:	20021780 	call	2002178 <_ZN13CPIControllerD1Ev>
 2000fb4:	e13ffd17 	ldw	r4,-12(fp)
 2000fb8:	200c1380 	call	200c138 <_ZdlPv>
	}
	//preset values for PI Controller, to allow skipping of control init
	uiMaxSpeed=500;
 2000fbc:	00807d04 	movi	r2,500
 2000fc0:	d0a70415 	stw	r2,-25584(gp)
	uiT=3;
 2000fc4:	008000c4 	movi	r2,3
 2000fc8:	e0bfc515 	stw	r2,-236(fp)
	pController = new CPIController(uiMaxSpeed, uiT, -1*uiMaxSpeed, uiMaxSpeed);
 2000fcc:	00bfffc4 	movi	r2,-1
 2000fd0:	e0bfea15 	stw	r2,-88(fp)
 2000fd4:	01000704 	movi	r4,28
 2000fd8:	200c6200 	call	200c620 <_Znwm>
 2000fdc:	e0bffc15 	stw	r2,-16(fp)
 2000fe0:	d0a70417 	ldw	r2,-25584(gp)
 2000fe4:	100b883a 	mov	r5,r2
 2000fe8:	d0a70417 	ldw	r2,-25584(gp)
 2000fec:	0085c83a 	sub	r2,zero,r2
 2000ff0:	100f883a 	mov	r7,r2
 2000ff4:	d0a70417 	ldw	r2,-25584(gp)
 2000ff8:	d8800015 	stw	r2,0(sp)
 2000ffc:	00800084 	movi	r2,2
 2001000:	e0bfea15 	stw	r2,-88(fp)
 2001004:	e13ffc17 	ldw	r4,-16(fp)
 2001008:	e1bfc517 	ldw	r6,-236(fp)
 200100c:	20020e80 	call	20020e8 <_ZN13CPIControllerC1Ellll>
 2001010:	e0bffc17 	ldw	r2,-16(fp)
 2001014:	d0a70515 	stw	r2,-25580(gp)
 2001018:	00000a06 	br	2001044 <_Z17setUpPIControllerv+0x1a0>
 200101c:	e0ffff17 	ldw	r3,-4(fp)
 2001020:	e0fff715 	stw	r3,-36(fp)
 2001024:	e13ffc17 	ldw	r4,-16(fp)
 2001028:	200c1380 	call	200c138 <_ZdlPv>
 200102c:	e0bff717 	ldw	r2,-36(fp)
 2001030:	e0bfff15 	stw	r2,-4(fp)
 2001034:	00bfffc4 	movi	r2,-1
 2001038:	e0bfea15 	stw	r2,-88(fp)
 200103c:	e13fff17 	ldw	r4,-4(fp)
 2001040:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>

	// Get the MeasurementRequestMessage
	while(true)
	{
		if(uiTries >= 5)
 2001044:	e0bfc717 	ldw	r2,-228(fp)
 2001048:	10800170 	cmpltui	r2,r2,5
 200104c:	1000071e 	bne	r2,zero,200106c <_Z17setUpPIControllerv+0x1c8>
		{
			*pLED = *pLED | 0x04;
 2001050:	d0e00017 	ldw	r3,-32768(gp)
 2001054:	d0a00017 	ldw	r2,-32768(gp)
 2001058:	10800017 	ldw	r2,0(r2)
 200105c:	10800114 	ori	r2,r2,4
 2001060:	18800015 	stw	r2,0(r3)
			return false;
 2001064:	e03ffb15 	stw	zero,-20(fp)
 2001068:	00009d06 	br	20012e0 <_Z17setUpPIControllerv+0x43c>
		}

		uiReceivedCount = pSocket->Receive(cBuffer, 128, 10);
 200106c:	d1270617 	ldw	r4,-25576(gp)
 2001070:	e17fc904 	addi	r5,fp,-220
 2001074:	00bfffc4 	movi	r2,-1
 2001078:	e0bfea15 	stw	r2,-88(fp)
 200107c:	01802004 	movi	r6,128
 2001080:	01c00284 	movi	r7,10
 2001084:	20007580 	call	2000758 <_ZN16CEth_UART_Socket7ReceiveEPhmm>
 2001088:	e0bfc615 	stw	r2,-232(fp)
		if(uiReceivedCount <= 0)
 200108c:	e0bfc617 	ldw	r2,-232(fp)
 2001090:	1005003a 	cmpeq	r2,r2,zero
 2001094:	103feb1e 	bne	r2,zero,2001044 <_Z17setUpPIControllerv+0x1a0>
			continue;

		if(pProtocol)
 2001098:	d0a70717 	ldw	r2,-25572(gp)
 200109c:	1005003a 	cmpeq	r2,r2,zero
 20010a0:	10000a1e 	bne	r2,zero,20010cc <_Z17setUpPIControllerv+0x228>
		{
			delete(pProtocol);
 20010a4:	d0a70717 	ldw	r2,-25572(gp)
 20010a8:	1005003a 	cmpeq	r2,r2,zero
 20010ac:	1000061e 	bne	r2,zero,20010c8 <_Z17setUpPIControllerv+0x224>
 20010b0:	d0a70717 	ldw	r2,-25572(gp)
 20010b4:	10800017 	ldw	r2,0(r2)
 20010b8:	10800104 	addi	r2,r2,4
 20010bc:	10800017 	ldw	r2,0(r2)
 20010c0:	d1270717 	ldw	r4,-25572(gp)
 20010c4:	103ee83a 	callr	r2
			pProtocol = 0;
 20010c8:	d0270715 	stw	zero,-25572(gp)
		}
		pProtocol = new CCarProtocol(cBuffer, uiReceivedCount);
 20010cc:	00bfffc4 	movi	r2,-1
 20010d0:	e0bfea15 	stw	r2,-88(fp)
 20010d4:	01000b04 	movi	r4,44
 20010d8:	200c6200 	call	200c620 <_Znwm>
 20010dc:	e0bffa15 	stw	r2,-24(fp)
 20010e0:	e1bfc617 	ldw	r6,-232(fp)
 20010e4:	e17fc904 	addi	r5,fp,-220
 20010e8:	00800044 	movi	r2,1
 20010ec:	e0bfea15 	stw	r2,-88(fp)
 20010f0:	e13ffa17 	ldw	r4,-24(fp)
 20010f4:	2008b8c0 	call	2008b8c <_ZN12CCarProtocolC1EPhi>
 20010f8:	e0fffa17 	ldw	r3,-24(fp)
 20010fc:	d0e70715 	stw	r3,-25572(gp)
		if(pProtocol == 0 || !pProtocol->isValid() || pProtocol->getMessageCount() != 1)
 2001100:	d0a70717 	ldw	r2,-25572(gp)
 2001104:	1005003a 	cmpeq	r2,r2,zero
 2001108:	10001d1e 	bne	r2,zero,2001180 <_Z17setUpPIControllerv+0x2dc>
 200110c:	00001006 	br	2001150 <_Z17setUpPIControllerv+0x2ac>
 2001110:	e7003b04 	addi	fp,fp,236
 2001114:	e0bfea17 	ldw	r2,-88(fp)
 2001118:	e0ffeb17 	ldw	r3,-84(fp)
 200111c:	e0ffff15 	stw	r3,-4(fp)
 2001120:	10800060 	cmpeqi	r2,r2,1
 2001124:	103fbd1e 	bne	r2,zero,200101c <_Z17setUpPIControllerv+0x178>
 2001128:	e0bfff17 	ldw	r2,-4(fp)
 200112c:	e0bff615 	stw	r2,-40(fp)
		if(pProtocol)
		{
			delete(pProtocol);
			pProtocol = 0;
		}
		pProtocol = new CCarProtocol(cBuffer, uiReceivedCount);
 2001130:	e13ffa17 	ldw	r4,-24(fp)
 2001134:	200c1380 	call	200c138 <_ZdlPv>
 2001138:	e0fff617 	ldw	r3,-40(fp)
 200113c:	e0ffff15 	stw	r3,-4(fp)
 2001140:	00bfffc4 	movi	r2,-1
 2001144:	e0bfea15 	stw	r2,-88(fp)
 2001148:	e13fff17 	ldw	r4,-4(fp)
 200114c:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
		if(pProtocol == 0 || !pProtocol->isValid() || pProtocol->getMessageCount() != 1)
 2001150:	d1270717 	ldw	r4,-25572(gp)
 2001154:	00bfffc4 	movi	r2,-1
 2001158:	e0bfea15 	stw	r2,-88(fp)
 200115c:	20076080 	call	2007608 <_ZN12CCarProtocol7isValidEv>
 2001160:	1080005c 	xori	r2,r2,1
 2001164:	10803fcc 	andi	r2,r2,255
 2001168:	1004c03a 	cmpne	r2,r2,zero
 200116c:	1000041e 	bne	r2,zero,2001180 <_Z17setUpPIControllerv+0x2dc>
 2001170:	d1270717 	ldw	r4,-25572(gp)
 2001174:	20077440 	call	2007744 <_ZN12CCarProtocol15getMessageCountEv>
 2001178:	10800060 	cmpeqi	r2,r2,1
 200117c:	1000031e 	bne	r2,zero,200118c <_Z17setUpPIControllerv+0x2e8>
 2001180:	00800044 	movi	r2,1
 2001184:	e0bff945 	stb	r2,-27(fp)
 2001188:	00000106 	br	2001190 <_Z17setUpPIControllerv+0x2ec>
 200118c:	e03ff945 	stb	zero,-27(fp)
 2001190:	e0bff943 	ldbu	r2,-27(fp)
 2001194:	10803fcc 	andi	r2,r2,255
 2001198:	1005003a 	cmpeq	r2,r2,zero
 200119c:	1000041e 	bne	r2,zero,20011b0 <_Z17setUpPIControllerv+0x30c>
		{
			uiTries++;
 20011a0:	e0bfc717 	ldw	r2,-228(fp)
 20011a4:	10800044 	addi	r2,r2,1
 20011a8:	e0bfc715 	stw	r2,-228(fp)
			continue;
 20011ac:	003fa506 	br	2001044 <_Z17setUpPIControllerv+0x1a0>
		}

		pMessage = pProtocol->getNthMessage(0);
 20011b0:	d1270717 	ldw	r4,-25572(gp)
 20011b4:	00bfffc4 	movi	r2,-1
 20011b8:	e0bfea15 	stw	r2,-88(fp)
 20011bc:	000b883a 	mov	r5,zero
 20011c0:	20076e40 	call	20076e4 <_ZN12CCarProtocol13getNthMessageEm>
 20011c4:	e0bfc815 	stw	r2,-224(fp)
		if(pMessage->isValid() && pMessage->getType() == 0x05)
 20011c8:	e13fc817 	ldw	r4,-224(fp)
 20011cc:	200701c0 	call	200701c <_ZN11CCarMessage7isValidEv>
 20011d0:	1080005c 	xori	r2,r2,1
 20011d4:	10803fcc 	andi	r2,r2,255
 20011d8:	1004c03a 	cmpne	r2,r2,zero
 20011dc:	1000081e 	bne	r2,zero,2001200 <_Z17setUpPIControllerv+0x35c>
 20011e0:	e13fc817 	ldw	r4,-224(fp)
 20011e4:	2006fc40 	call	2006fc4 <_ZN11CCarMessage7getTypeEv>
 20011e8:	10803fcc 	andi	r2,r2,255
 20011ec:	10800158 	cmpnei	r2,r2,5
 20011f0:	1000031e 	bne	r2,zero,2001200 <_Z17setUpPIControllerv+0x35c>
 20011f4:	00c00044 	movi	r3,1
 20011f8:	e0fff905 	stb	r3,-28(fp)
 20011fc:	00000106 	br	2001204 <_Z17setUpPIControllerv+0x360>
 2001200:	e03ff905 	stb	zero,-28(fp)
 2001204:	e0bff903 	ldbu	r2,-28(fp)
 2001208:	10803fcc 	andi	r2,r2,255
 200120c:	1004c03a 	cmpne	r2,r2,zero
 2001210:	1000011e 	bne	r2,zero,2001218 <_Z17setUpPIControllerv+0x374>
	uiMaxSpeed=500;
	uiT=3;
	pController = new CPIController(uiMaxSpeed, uiT, -1*uiMaxSpeed, uiMaxSpeed);

	// Get the MeasurementRequestMessage
	while(true)
 2001214:	003f8b06 	br	2001044 <_Z17setUpPIControllerv+0x1a0>
		pMessage = pProtocol->getNthMessage(0);
		if(pMessage->isValid() && pMessage->getType() == 0x05)
			break;
	}

	*pLED = *pLED & 0xFE;
 2001218:	d0e00017 	ldw	r3,-32768(gp)
 200121c:	d0a00017 	ldw	r2,-32768(gp)
 2001220:	10800017 	ldw	r2,0(r2)
 2001224:	10803f8c 	andi	r2,r2,254
 2001228:	18800015 	stw	r2,0(r3)
	((CMotorMeasurementMessage*) pMessage)->answerMessage((alt_16) uiMaxSpeed, WHEEL_SCALE, (alt_16) uiMaxSpeed, (alt_16) uiT, 0);
 200122c:	e13fc817 	ldw	r4,-224(fp)
 2001230:	d0a70417 	ldw	r2,-25584(gp)
 2001234:	117fffcc 	andi	r5,r2,65535
 2001238:	2960001c 	xori	r5,r5,32768
 200123c:	29600004 	addi	r5,r5,-32768
 2001240:	d0a70417 	ldw	r2,-25584(gp)
 2001244:	11ffffcc 	andi	r7,r2,65535
 2001248:	39e0001c 	xori	r7,r7,32768
 200124c:	39e00004 	addi	r7,r7,-32768
 2001250:	e0bfc517 	ldw	r2,-236(fp)
 2001254:	10bfffcc 	andi	r2,r2,65535
 2001258:	10a0001c 	xori	r2,r2,32768
 200125c:	10a00004 	addi	r2,r2,-32768
 2001260:	d8800015 	stw	r2,0(sp)
 2001264:	d8000115 	stw	zero,4(sp)
 2001268:	00bfffc4 	movi	r2,-1
 200126c:	e0bfea15 	stw	r2,-88(fp)
 2001270:	01805cc4 	movi	r6,371
 2001274:	2008c900 	call	2008c90 <_ZN24CMotorMeasurementMessage13answerMessageEstsss>

	pProtocol->getBytes(cBuffer);
 2001278:	d1270717 	ldw	r4,-25572(gp)
 200127c:	e17fc904 	addi	r5,fp,-220
 2001280:	200776c0 	call	200776c <_ZN12CCarProtocol8getBytesEPh>
	pSocket->Send(cBuffer, pProtocol->getLength());
 2001284:	d0a70617 	ldw	r2,-25576(gp)
 2001288:	e0bff815 	stw	r2,-32(fp)
 200128c:	d1270717 	ldw	r4,-25572(gp)
 2001290:	20076340 	call	2007634 <_ZN12CCarProtocol9getLengthEv>
 2001294:	100d883a 	mov	r6,r2
 2001298:	e17fc904 	addi	r5,fp,-220
 200129c:	e13ff817 	ldw	r4,-32(fp)
 20012a0:	20008840 	call	2000884 <_ZN16CEth_UART_Socket4SendEPhm>

	if(pProtocol){
 20012a4:	d0a70717 	ldw	r2,-25572(gp)
 20012a8:	1005003a 	cmpeq	r2,r2,zero
 20012ac:	10000a1e 	bne	r2,zero,20012d8 <_Z17setUpPIControllerv+0x434>
		delete(pProtocol);
 20012b0:	d0a70717 	ldw	r2,-25572(gp)
 20012b4:	1005003a 	cmpeq	r2,r2,zero
 20012b8:	1000061e 	bne	r2,zero,20012d4 <_Z17setUpPIControllerv+0x430>
 20012bc:	d0a70717 	ldw	r2,-25572(gp)
 20012c0:	10800017 	ldw	r2,0(r2)
 20012c4:	10800104 	addi	r2,r2,4
 20012c8:	10800017 	ldw	r2,0(r2)
 20012cc:	d1270717 	ldw	r4,-25572(gp)
 20012d0:	103ee83a 	callr	r2
		pProtocol = 0;
 20012d4:	d0270715 	stw	zero,-25572(gp)
	}

	return true;
 20012d8:	00c00044 	movi	r3,1
 20012dc:	e0fffb15 	stw	r3,-20(fp)
 20012e0:	e0bffb17 	ldw	r2,-20(fp)
 20012e4:	e0bffe15 	stw	r2,-8(fp)
 20012e8:	e13fe904 	addi	r4,fp,-92
 20012ec:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
}
 20012f0:	e0bffe17 	ldw	r2,-8(fp)
 20012f4:	e037883a 	mov	sp,fp
 20012f8:	dfc00917 	ldw	ra,36(sp)
 20012fc:	df000817 	ldw	fp,32(sp)
 2001300:	ddc00717 	ldw	r23,28(sp)
 2001304:	dd800617 	ldw	r22,24(sp)
 2001308:	dd400517 	ldw	r21,20(sp)
 200130c:	dd000417 	ldw	r20,16(sp)
 2001310:	dcc00317 	ldw	r19,12(sp)
 2001314:	dc800217 	ldw	r18,8(sp)
 2001318:	dc400117 	ldw	r17,4(sp)
 200131c:	dc000017 	ldw	r16,0(sp)
 2001320:	dec00a04 	addi	sp,sp,40
 2001324:	f800283a 	ret

02001328 <_Z17waitForNextPacketv>:
	}

	return true;
}

bool waitForNextPacket()
 2001328:	deffbe04 	addi	sp,sp,-264
 200132c:	dfc04115 	stw	ra,260(sp)
 2001330:	df004015 	stw	fp,256(sp)
 2001334:	ddc03f15 	stw	r23,252(sp)
 2001338:	dd803e15 	stw	r22,248(sp)
 200133c:	dd403d15 	stw	r21,244(sp)
 2001340:	dd003c15 	stw	r20,240(sp)
 2001344:	dcc03b15 	stw	r19,236(sp)
 2001348:	dc803a15 	stw	r18,232(sp)
 200134c:	dc403915 	stw	r17,228(sp)
 2001350:	dc003815 	stw	r16,224(sp)
 2001354:	df003804 	addi	fp,sp,224
 2001358:	00808074 	movhi	r2,513
 200135c:	10ae5a04 	addi	r2,r2,-18072
 2001360:	e0bff115 	stw	r2,-60(fp)
 2001364:	008080b4 	movhi	r2,514
 2001368:	10adab04 	addi	r2,r2,-18772
 200136c:	e0bff215 	stw	r2,-56(fp)
 2001370:	e0bff304 	addi	r2,fp,-52
 2001374:	e0ffc804 	addi	r3,fp,-224
 2001378:	10c00015 	stw	r3,0(r2)
 200137c:	00c08034 	movhi	r3,512
 2001380:	18c50604 	addi	r3,r3,5144
 2001384:	10c00115 	stw	r3,4(r2)
 2001388:	16c00215 	stw	sp,8(r2)
 200138c:	e13feb04 	addi	r4,fp,-84
 2001390:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
{
	CCarProtocol *pNewProtocol = 0;
 2001394:	e03fca15 	stw	zero,-216(fp)
	CCarMessage *pMessage = 0;
 2001398:	e03fc915 	stw	zero,-220(fp)
	alt_u8 cBuffer[128];
	alt_u32 uiReceivedCount = 0;
 200139c:	e03fc815 	stw	zero,-224(fp)

	// Get new package
	uiReceivedCount = pSocket->ReceiveImmediate(cBuffer, 128);
 20013a0:	d1270617 	ldw	r4,-25576(gp)
 20013a4:	e17fcb04 	addi	r5,fp,-212
 20013a8:	00bfffc4 	movi	r2,-1
 20013ac:	e0bfec15 	stw	r2,-80(fp)
 20013b0:	01802004 	movi	r6,128
 20013b4:	20006840 	call	2000684 <_ZN16CEth_UART_Socket16ReceiveImmediateEPhm>
 20013b8:	e0bfc815 	stw	r2,-224(fp)
	if(uiReceivedCount > 0)
 20013bc:	e0bfc817 	ldw	r2,-224(fp)
 20013c0:	1005003a 	cmpeq	r2,r2,zero
 20013c4:	1000581e 	bne	r2,zero,2001528 <_Z17waitForNextPacketv+0x200>
	{
		*pLED = *pLED & 0xEF;
 20013c8:	d0e00017 	ldw	r3,-32768(gp)
 20013cc:	d0a00017 	ldw	r2,-32768(gp)
 20013d0:	10800017 	ldw	r2,0(r2)
 20013d4:	10803bcc 	andi	r2,r2,239
 20013d8:	18800015 	stw	r2,0(r3)

		pNewProtocol = new CCarProtocol(cBuffer, uiReceivedCount);
 20013dc:	01000b04 	movi	r4,44
 20013e0:	200c6200 	call	200c620 <_Znwm>
 20013e4:	e0bffd15 	stw	r2,-12(fp)
 20013e8:	e1bfc817 	ldw	r6,-224(fp)
 20013ec:	e17fcb04 	addi	r5,fp,-212
 20013f0:	00800044 	movi	r2,1
 20013f4:	e0bfec15 	stw	r2,-80(fp)
 20013f8:	e13ffd17 	ldw	r4,-12(fp)
 20013fc:	2008b8c0 	call	2008b8c <_ZN12CCarProtocolC1EPhi>
 2001400:	e0bffd17 	ldw	r2,-12(fp)
 2001404:	e0bfca15 	stw	r2,-216(fp)
		//LOG_DEBUG("cBuffer: '%c%c%c%c' 0x%0X%0X%0X%0X 0x%0X%0X%0X%0X", cBuffer[0], cBuffer[1],
				//cBuffer[2], cBuffer[3], cBuffer[4], cBuffer[5], cBuffer[6], cBuffer[7],
				//cBuffer[8], cBuffer[9], cBuffer[10], cBuffer[11]);

		// Is there a VelocityMessage then set the desired speed along with the message
		if(pNewProtocol != 0 && pNewProtocol->isValid() && pNewProtocol->getMessageCount() > 0)
 2001408:	e0bfca17 	ldw	r2,-216(fp)
 200140c:	1005003a 	cmpeq	r2,r2,zero
 2001410:	10001d1e 	bne	r2,zero,2001488 <_Z17waitForNextPacketv+0x160>
 2001414:	00000d06 	br	200144c <_Z17waitForNextPacketv+0x124>
 2001418:	e7003804 	addi	fp,fp,224
 200141c:	e0ffed17 	ldw	r3,-76(fp)
 2001420:	e0ffff15 	stw	r3,-4(fp)
 2001424:	e0bfff17 	ldw	r2,-4(fp)
 2001428:	e0bff815 	stw	r2,-32(fp)
	uiReceivedCount = pSocket->ReceiveImmediate(cBuffer, 128);
	if(uiReceivedCount > 0)
	{
		*pLED = *pLED & 0xEF;

		pNewProtocol = new CCarProtocol(cBuffer, uiReceivedCount);
 200142c:	e13ffd17 	ldw	r4,-12(fp)
 2001430:	200c1380 	call	200c138 <_ZdlPv>
 2001434:	e0fff817 	ldw	r3,-32(fp)
 2001438:	e0ffff15 	stw	r3,-4(fp)
 200143c:	00bfffc4 	movi	r2,-1
 2001440:	e0bfec15 	stw	r2,-80(fp)
 2001444:	e13fff17 	ldw	r4,-4(fp)
 2001448:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
		//LOG_DEBUG("cBuffer: '%c%c%c%c' 0x%0X%0X%0X%0X 0x%0X%0X%0X%0X", cBuffer[0], cBuffer[1],
				//cBuffer[2], cBuffer[3], cBuffer[4], cBuffer[5], cBuffer[6], cBuffer[7],
				//cBuffer[8], cBuffer[9], cBuffer[10], cBuffer[11]);

		// Is there a VelocityMessage then set the desired speed along with the message
		if(pNewProtocol != 0 && pNewProtocol->isValid() && pNewProtocol->getMessageCount() > 0)
 200144c:	00bfffc4 	movi	r2,-1
 2001450:	e0bfec15 	stw	r2,-80(fp)
 2001454:	e13fca17 	ldw	r4,-216(fp)
 2001458:	20076080 	call	2007608 <_ZN12CCarProtocol7isValidEv>
 200145c:	1080005c 	xori	r2,r2,1
 2001460:	10803fcc 	andi	r2,r2,255
 2001464:	1004c03a 	cmpne	r2,r2,zero
 2001468:	1000071e 	bne	r2,zero,2001488 <_Z17waitForNextPacketv+0x160>
 200146c:	e13fca17 	ldw	r4,-216(fp)
 2001470:	20077440 	call	2007744 <_ZN12CCarProtocol15getMessageCountEv>
 2001474:	1005003a 	cmpeq	r2,r2,zero
 2001478:	1000031e 	bne	r2,zero,2001488 <_Z17waitForNextPacketv+0x160>
 200147c:	00800044 	movi	r2,1
 2001480:	e0bffc85 	stb	r2,-14(fp)
 2001484:	00000106 	br	200148c <_Z17waitForNextPacketv+0x164>
 2001488:	e03ffc85 	stb	zero,-14(fp)
 200148c:	e0bffc83 	ldbu	r2,-14(fp)
 2001490:	10803fcc 	andi	r2,r2,255
 2001494:	1005003a 	cmpeq	r2,r2,zero
 2001498:	1000281e 	bne	r2,zero,200153c <_Z17waitForNextPacketv+0x214>
		{
			pMessage = pNewProtocol->getNthMessage(0);
 200149c:	00bfffc4 	movi	r2,-1
 20014a0:	e0bfec15 	stw	r2,-80(fp)
 20014a4:	e13fca17 	ldw	r4,-216(fp)
 20014a8:	000b883a 	mov	r5,zero
 20014ac:	20076e40 	call	20076e4 <_ZN12CCarProtocol13getNthMessageEm>
 20014b0:	e0bfc915 	stw	r2,-220(fp)
			if(pMessage != 0 && pMessage->isValid() && pMessage->getType() == 4)
 20014b4:	e0bfc917 	ldw	r2,-220(fp)
 20014b8:	1005003a 	cmpeq	r2,r2,zero
 20014bc:	10000e1e 	bne	r2,zero,20014f8 <_Z17waitForNextPacketv+0x1d0>
 20014c0:	e13fc917 	ldw	r4,-220(fp)
 20014c4:	200701c0 	call	200701c <_ZN11CCarMessage7isValidEv>
 20014c8:	1080005c 	xori	r2,r2,1
 20014cc:	10803fcc 	andi	r2,r2,255
 20014d0:	1004c03a 	cmpne	r2,r2,zero
 20014d4:	1000081e 	bne	r2,zero,20014f8 <_Z17waitForNextPacketv+0x1d0>
 20014d8:	e13fc917 	ldw	r4,-220(fp)
 20014dc:	2006fc40 	call	2006fc4 <_ZN11CCarMessage7getTypeEv>
 20014e0:	10803fcc 	andi	r2,r2,255
 20014e4:	10800118 	cmpnei	r2,r2,4
 20014e8:	1000031e 	bne	r2,zero,20014f8 <_Z17waitForNextPacketv+0x1d0>
 20014ec:	00c00044 	movi	r3,1
 20014f0:	e0fffc45 	stb	r3,-15(fp)
 20014f4:	00000106 	br	20014fc <_Z17waitForNextPacketv+0x1d4>
 20014f8:	e03ffc45 	stb	zero,-15(fp)
 20014fc:	e0bffc43 	ldbu	r2,-15(fp)
 2001500:	10803fcc 	andi	r2,r2,255
 2001504:	1005003a 	cmpeq	r2,r2,zero
 2001508:	10000c1e 	bne	r2,zero,200153c <_Z17waitForNextPacketv+0x214>
			{
				iDesiredSpeed = ((CMotorVelocityMessage*) pMessage)->getIDesiredSpeed();
 200150c:	e13fc917 	ldw	r4,-220(fp)
 2001510:	20020440 	call	2002044 <_ZNK21CMotorVelocityMessage16getIDesiredSpeedEv>
 2001514:	10bfffcc 	andi	r2,r2,65535
 2001518:	10a0001c 	xori	r2,r2,32768
 200151c:	10a00004 	addi	r2,r2,-32768
 2001520:	d0a70315 	stw	r2,-25588(gp)
 2001524:	00000506 	br	200153c <_Z17waitForNextPacketv+0x214>
			}
		}
	}
	else
	{
		*pLED = *pLED | 0x10;
 2001528:	d0e00017 	ldw	r3,-32768(gp)
 200152c:	d0a00017 	ldw	r2,-32768(gp)
 2001530:	10800017 	ldw	r2,0(r2)
 2001534:	10800414 	ori	r2,r2,16
 2001538:	18800015 	stw	r2,0(r3)
	}
	//LOG_DEBUG("send answer of last packet");

	// Send answer of the last packet
	if(pProtocol != 0 && pProtocol->isValid())
 200153c:	d0a70717 	ldw	r2,-25572(gp)
 2001540:	1005003a 	cmpeq	r2,r2,zero
 2001544:	10000b1e 	bne	r2,zero,2001574 <_Z17waitForNextPacketv+0x24c>
 2001548:	d1270717 	ldw	r4,-25572(gp)
 200154c:	00bfffc4 	movi	r2,-1
 2001550:	e0bfec15 	stw	r2,-80(fp)
 2001554:	20076080 	call	2007608 <_ZN12CCarProtocol7isValidEv>
 2001558:	1080005c 	xori	r2,r2,1
 200155c:	10803fcc 	andi	r2,r2,255
 2001560:	1004c03a 	cmpne	r2,r2,zero
 2001564:	1000031e 	bne	r2,zero,2001574 <_Z17waitForNextPacketv+0x24c>
 2001568:	00800044 	movi	r2,1
 200156c:	e0bffc05 	stb	r2,-16(fp)
 2001570:	00000106 	br	2001578 <_Z17waitForNextPacketv+0x250>
 2001574:	e03ffc05 	stb	zero,-16(fp)
 2001578:	e0bffc03 	ldbu	r2,-16(fp)
 200157c:	10803fcc 	andi	r2,r2,255
 2001580:	1005003a 	cmpeq	r2,r2,zero
 2001584:	1000101e 	bne	r2,zero,20015c8 <_Z17waitForNextPacketv+0x2a0>
	{
		if(!pProtocol->getBytes(cBuffer))
 2001588:	d1270717 	ldw	r4,-25572(gp)
 200158c:	e17fcb04 	addi	r5,fp,-212
 2001590:	00bfffc4 	movi	r2,-1
 2001594:	e0bfec15 	stw	r2,-80(fp)
 2001598:	200776c0 	call	200776c <_ZN12CCarProtocol8getBytesEPh>
 200159c:	1080005c 	xori	r2,r2,1
 20015a0:	10803fcc 	andi	r2,r2,255
 20015a4:	1005003a 	cmpeq	r2,r2,zero
 20015a8:	1000071e 	bne	r2,zero,20015c8 <_Z17waitForNextPacketv+0x2a0>
		{
			*pLED = *pLED | 0x02;
 20015ac:	d0e00017 	ldw	r3,-32768(gp)
 20015b0:	d0a00017 	ldw	r2,-32768(gp)
 20015b4:	10800017 	ldw	r2,0(r2)
 20015b8:	10800094 	ori	r2,r2,2
 20015bc:	18800015 	stw	r2,0(r3)
			return false;
 20015c0:	e03ffb15 	stw	zero,-20(fp)
 20015c4:	00003806 	br	20016a8 <_Z17waitForNextPacketv+0x380>
		}
	}
	//LOG_DEBUG("delete old protokol");

	if(pNewProtocol != 0 && pNewProtocol->isValid() && pNewProtocol->getMessageCount() > 0)
 20015c8:	e0bfca17 	ldw	r2,-216(fp)
 20015cc:	1005003a 	cmpeq	r2,r2,zero
 20015d0:	10000f1e 	bne	r2,zero,2001610 <_Z17waitForNextPacketv+0x2e8>
 20015d4:	00bfffc4 	movi	r2,-1
 20015d8:	e0bfec15 	stw	r2,-80(fp)
 20015dc:	e13fca17 	ldw	r4,-216(fp)
 20015e0:	20076080 	call	2007608 <_ZN12CCarProtocol7isValidEv>
 20015e4:	1080005c 	xori	r2,r2,1
 20015e8:	10803fcc 	andi	r2,r2,255
 20015ec:	1004c03a 	cmpne	r2,r2,zero
 20015f0:	1000071e 	bne	r2,zero,2001610 <_Z17waitForNextPacketv+0x2e8>
 20015f4:	e13fca17 	ldw	r4,-216(fp)
 20015f8:	20077440 	call	2007744 <_ZN12CCarProtocol15getMessageCountEv>
 20015fc:	1005003a 	cmpeq	r2,r2,zero
 2001600:	1000031e 	bne	r2,zero,2001610 <_Z17waitForNextPacketv+0x2e8>
 2001604:	00c00044 	movi	r3,1
 2001608:	e0fffa05 	stb	r3,-24(fp)
 200160c:	00000106 	br	2001614 <_Z17waitForNextPacketv+0x2ec>
 2001610:	e03ffa05 	stb	zero,-24(fp)
 2001614:	e0bffa03 	ldbu	r2,-24(fp)
 2001618:	10803fcc 	andi	r2,r2,255
 200161c:	1005003a 	cmpeq	r2,r2,zero
 2001620:	10001f1e 	bne	r2,zero,20016a0 <_Z17waitForNextPacketv+0x378>
	{
		pNewProtocol->getBytes(cBuffer);
 2001624:	e17fcb04 	addi	r5,fp,-212
 2001628:	00bfffc4 	movi	r2,-1
 200162c:	e0bfec15 	stw	r2,-80(fp)
 2001630:	e13fca17 	ldw	r4,-216(fp)
 2001634:	200776c0 	call	200776c <_ZN12CCarProtocol8getBytesEPh>
		pSocket->Send(cBuffer, pNewProtocol->getLength());
 2001638:	d0a70617 	ldw	r2,-25576(gp)
 200163c:	e0bff915 	stw	r2,-28(fp)
 2001640:	e13fca17 	ldw	r4,-216(fp)
 2001644:	20076340 	call	2007634 <_ZN12CCarProtocol9getLengthEv>
 2001648:	100d883a 	mov	r6,r2
 200164c:	e17fcb04 	addi	r5,fp,-212
 2001650:	e13ff917 	ldw	r4,-28(fp)
 2001654:	20008840 	call	2000884 <_ZN16CEth_UART_Socket4SendEPhm>
		printf("send NewProtocol\n");
 2001658:	010080b4 	movhi	r4,514
 200165c:	212e0e04 	addi	r4,r4,-18376
 2001660:	200df7c0 	call	200df7c <puts>
		// Delete old Packet
		if(pProtocol)
 2001664:	d0a70717 	ldw	r2,-25572(gp)
 2001668:	1005003a 	cmpeq	r2,r2,zero
 200166c:	10000a1e 	bne	r2,zero,2001698 <_Z17waitForNextPacketv+0x370>
		{
			delete(pProtocol);
 2001670:	d0a70717 	ldw	r2,-25572(gp)
 2001674:	1005003a 	cmpeq	r2,r2,zero
 2001678:	1000061e 	bne	r2,zero,2001694 <_Z17waitForNextPacketv+0x36c>
 200167c:	d0a70717 	ldw	r2,-25572(gp)
 2001680:	10800017 	ldw	r2,0(r2)
 2001684:	10800104 	addi	r2,r2,4
 2001688:	10800017 	ldw	r2,0(r2)
 200168c:	d1270717 	ldw	r4,-25572(gp)
 2001690:	103ee83a 	callr	r2
			pProtocol = 0;
 2001694:	d0270715 	stw	zero,-25572(gp)
		}

		pProtocol = pNewProtocol;
 2001698:	e0bfca17 	ldw	r2,-216(fp)
 200169c:	d0a70715 	stw	r2,-25572(gp)
	}

	return true;
 20016a0:	00c00044 	movi	r3,1
 20016a4:	e0fffb15 	stw	r3,-20(fp)
 20016a8:	e0bffb17 	ldw	r2,-20(fp)
 20016ac:	e0bffe15 	stw	r2,-8(fp)
 20016b0:	e13feb04 	addi	r4,fp,-84
 20016b4:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
}
 20016b8:	e0bffe17 	ldw	r2,-8(fp)
 20016bc:	e037883a 	mov	sp,fp
 20016c0:	dfc00917 	ldw	ra,36(sp)
 20016c4:	df000817 	ldw	fp,32(sp)
 20016c8:	ddc00717 	ldw	r23,28(sp)
 20016cc:	dd800617 	ldw	r22,24(sp)
 20016d0:	dd400517 	ldw	r21,20(sp)
 20016d4:	dd000417 	ldw	r20,16(sp)
 20016d8:	dcc00317 	ldw	r19,12(sp)
 20016dc:	dc800217 	ldw	r18,8(sp)
 20016e0:	dc400117 	ldw	r17,4(sp)
 20016e4:	dc000017 	ldw	r16,0(sp)
 20016e8:	dec00a04 	addi	sp,sp,40
 20016ec:	f800283a 	ret

020016f0 <_Z12controlSpeedv>:


	return false;
}

bool controlSpeed()
 20016f0:	defffb04 	addi	sp,sp,-20
 20016f4:	dfc00415 	stw	ra,16(sp)
 20016f8:	df000315 	stw	fp,12(sp)
 20016fc:	df000304 	addi	fp,sp,12
{
	alt_32 iNextSpeed = 0;
 2001700:	e03ffe15 	stw	zero,-8(fp)

	// Finish running speed measurement
	iCurrentSpeed = measureSpeedUnblocking();
 2001704:	2000b980 	call	2000b98 <_Z22measureSpeedUnblockingv>
 2001708:	d0a70215 	stw	r2,-25592(gp)
	// Call PI-Controller with speed error
	iNextSpeed = pController->control(iDesiredSpeed - iCurrentSpeed);
 200170c:	d1270517 	ldw	r4,-25580(gp)
 2001710:	d0e70317 	ldw	r3,-25588(gp)
 2001714:	d0a70217 	ldw	r2,-25592(gp)
 2001718:	188bc83a 	sub	r5,r3,r2
 200171c:	20021980 	call	2002198 <_ZN13CPIController7controlEl>
 2001720:	e0bffe15 	stw	r2,-8(fp)
	// Set new speed
	setSpeed(iNextSpeed);
 2001724:	e13ffe17 	ldw	r4,-8(fp)
 2001728:	2000b080 	call	2000b08 <_Z8setSpeedl>
	//LOG_DEBUG("iNextSpeed: %hd iCurrentSpeed: %hd",iNextSpeed,iCurrentSpeed);

	// Is there a VelocityMessage then set the current speed as an answer
	if(pProtocol != 0 && pProtocol->isValid() && pProtocol->getMessageCount() > 0)
 200172c:	d0a70717 	ldw	r2,-25572(gp)
 2001730:	1005003a 	cmpeq	r2,r2,zero
 2001734:	10000d1e 	bne	r2,zero,200176c <_Z12controlSpeedv+0x7c>
 2001738:	d1270717 	ldw	r4,-25572(gp)
 200173c:	20076080 	call	2007608 <_ZN12CCarProtocol7isValidEv>
 2001740:	1080005c 	xori	r2,r2,1
 2001744:	10803fcc 	andi	r2,r2,255
 2001748:	1004c03a 	cmpne	r2,r2,zero
 200174c:	1000071e 	bne	r2,zero,200176c <_Z12controlSpeedv+0x7c>
 2001750:	d1270717 	ldw	r4,-25572(gp)
 2001754:	20077440 	call	2007744 <_ZN12CCarProtocol15getMessageCountEv>
 2001758:	1005003a 	cmpeq	r2,r2,zero
 200175c:	1000031e 	bne	r2,zero,200176c <_Z12controlSpeedv+0x7c>
 2001760:	00800044 	movi	r2,1
 2001764:	e0bfff45 	stb	r2,-3(fp)
 2001768:	00000106 	br	2001770 <_Z12controlSpeedv+0x80>
 200176c:	e03fff45 	stb	zero,-3(fp)
 2001770:	e0bfff43 	ldbu	r2,-3(fp)
 2001774:	10803fcc 	andi	r2,r2,255
 2001778:	1005003a 	cmpeq	r2,r2,zero
 200177c:	1000201e 	bne	r2,zero,2001800 <_Z12controlSpeedv+0x110>
	{
		CCarMessage *pMessage = pProtocol->getNthMessage(0);
 2001780:	d1270717 	ldw	r4,-25572(gp)
 2001784:	000b883a 	mov	r5,zero
 2001788:	20076e40 	call	20076e4 <_ZN12CCarProtocol13getNthMessageEm>
 200178c:	e0bffd15 	stw	r2,-12(fp)
		if(pMessage != 0 && pMessage->isValid() && pMessage->getType() == 4)
 2001790:	e0bffd17 	ldw	r2,-12(fp)
 2001794:	1005003a 	cmpeq	r2,r2,zero
 2001798:	10000e1e 	bne	r2,zero,20017d4 <_Z12controlSpeedv+0xe4>
 200179c:	e13ffd17 	ldw	r4,-12(fp)
 20017a0:	200701c0 	call	200701c <_ZN11CCarMessage7isValidEv>
 20017a4:	1080005c 	xori	r2,r2,1
 20017a8:	10803fcc 	andi	r2,r2,255
 20017ac:	1004c03a 	cmpne	r2,r2,zero
 20017b0:	1000081e 	bne	r2,zero,20017d4 <_Z12controlSpeedv+0xe4>
 20017b4:	e13ffd17 	ldw	r4,-12(fp)
 20017b8:	2006fc40 	call	2006fc4 <_ZN11CCarMessage7getTypeEv>
 20017bc:	10803fcc 	andi	r2,r2,255
 20017c0:	10800118 	cmpnei	r2,r2,4
 20017c4:	1000031e 	bne	r2,zero,20017d4 <_Z12controlSpeedv+0xe4>
 20017c8:	00800044 	movi	r2,1
 20017cc:	e0bfff05 	stb	r2,-4(fp)
 20017d0:	00000106 	br	20017d8 <_Z12controlSpeedv+0xe8>
 20017d4:	e03fff05 	stb	zero,-4(fp)
 20017d8:	e0bfff03 	ldbu	r2,-4(fp)
 20017dc:	10803fcc 	andi	r2,r2,255
 20017e0:	1005003a 	cmpeq	r2,r2,zero
 20017e4:	1000061e 	bne	r2,zero,2001800 <_Z12controlSpeedv+0x110>
		{
			((CMotorVelocityMessage*) pMessage)->answerMessage(iCurrentSpeed);
 20017e8:	e13ffd17 	ldw	r4,-12(fp)
 20017ec:	d0a70217 	ldw	r2,-25592(gp)
 20017f0:	117fffcc 	andi	r5,r2,65535
 20017f4:	2960001c 	xori	r5,r5,32768
 20017f8:	29600004 	addi	r5,r5,-32768
 20017fc:	20096700 	call	2009670 <_ZN21CMotorVelocityMessage13answerMessageEs>
		}
	}

	return true;
 2001800:	00800044 	movi	r2,1
}
 2001804:	e037883a 	mov	sp,fp
 2001808:	dfc00117 	ldw	ra,4(sp)
 200180c:	df000017 	ldw	fp,0(sp)
 2001810:	dec00204 	addi	sp,sp,8
 2001814:	f800283a 	ret

02001818 <_Z11sendWelcomev>:

	// This function is always successful
	return true;
}

bool sendWelcome()
 2001818:	deffb504 	addi	sp,sp,-300
 200181c:	dfc04a15 	stw	ra,296(sp)
 2001820:	df004915 	stw	fp,292(sp)
 2001824:	ddc04815 	stw	r23,288(sp)
 2001828:	dd804715 	stw	r22,284(sp)
 200182c:	dd404615 	stw	r21,280(sp)
 2001830:	dd004515 	stw	r20,276(sp)
 2001834:	dcc04415 	stw	r19,272(sp)
 2001838:	dc804315 	stw	r18,268(sp)
 200183c:	dc404215 	stw	r17,264(sp)
 2001840:	dc004115 	stw	r16,260(sp)
 2001844:	df004104 	addi	fp,sp,260
 2001848:	00808074 	movhi	r2,513
 200184c:	10ae5a04 	addi	r2,r2,-18072
 2001850:	e0bfeb15 	stw	r2,-84(fp)
 2001854:	008080b4 	movhi	r2,514
 2001858:	10adac84 	addi	r2,r2,-18766
 200185c:	e0bfec15 	stw	r2,-80(fp)
 2001860:	e0bfed04 	addi	r2,fp,-76
 2001864:	e0ffc004 	addi	r3,fp,-256
 2001868:	10c00015 	stw	r3,0(r2)
 200186c:	00c08034 	movhi	r3,512
 2001870:	18c6b104 	addi	r3,r3,6852
 2001874:	10c00115 	stw	r3,4(r2)
 2001878:	16c00215 	stw	sp,8(r2)
 200187c:	e13fe504 	addi	r4,fp,-108
 2001880:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
{
	//LOG_DEBUG("wait entry");

	CCarMessage * pMessage = 0;
 2001884:	e03fc315 	stw	zero,-244(fp)
	alt_u32 uiTries = 0;         // Counts the tries, if >= 5 return
 2001888:	e03fc215 	stw	zero,-248(fp)
	alt_u8 cBuffer[128];         // Standard byte buffer
	alt_u32 uiReceivedCount = 0; // Count of received bytes (further: iLength)
 200188c:	e03fc115 	stw	zero,-252(fp)

	// Prepare welcome message
	//LOG_DEBUG("allocate msg");

	// set led on
	*pLED |= 0x01;
 2001890:	d0e00017 	ldw	r3,-32768(gp)
 2001894:	d0a00017 	ldw	r2,-32768(gp)
 2001898:	10800017 	ldw	r2,0(r2)
 200189c:	10800054 	ori	r2,r2,1
 20018a0:	18800015 	stw	r2,0(r3)
 20018a4:	00000006 	br	20018a8 <_Z11sendWelcomev+0x90>
	while(true)
	{
		//LOG_DEBUG("loop %d",  (int) uiTries);

		// Put the WelcomeMessage into the protocol wrapper.
		if(pProtocol) {
 20018a8:	d0a70717 	ldw	r2,-25572(gp)
 20018ac:	1005003a 	cmpeq	r2,r2,zero
 20018b0:	10000c1e 	bne	r2,zero,20018e4 <_Z11sendWelcomev+0xcc>
			delete(pProtocol);
 20018b4:	d0a70717 	ldw	r2,-25572(gp)
 20018b8:	1005003a 	cmpeq	r2,r2,zero
 20018bc:	1000081e 	bne	r2,zero,20018e0 <_Z11sendWelcomev+0xc8>
 20018c0:	d0a70717 	ldw	r2,-25572(gp)
 20018c4:	10800017 	ldw	r2,0(r2)
 20018c8:	10800104 	addi	r2,r2,4
 20018cc:	10c00017 	ldw	r3,0(r2)
 20018d0:	d1270717 	ldw	r4,-25572(gp)
 20018d4:	00bfffc4 	movi	r2,-1
 20018d8:	e0bfe615 	stw	r2,-104(fp)
 20018dc:	183ee83a 	callr	r3
			pProtocol = 0;
 20018e0:	d0270715 	stw	zero,-25572(gp)
		}
		wMsg = new CWelcomeMessage(FIRMWARE_VERSION, COMPONENT_TYPE, COMPONENT_ID, uiAvailableOperations);
 20018e4:	00bfffc4 	movi	r2,-1
 20018e8:	e0bfe615 	stw	r2,-104(fp)
 20018ec:	01000504 	movi	r4,20
 20018f0:	200c6200 	call	200c620 <_Znwm>
 20018f4:	e0bffc15 	stw	r2,-16(fp)
 20018f8:	d0a70104 	addi	r2,gp,-25596
 20018fc:	d8800015 	stw	r2,0(sp)
 2001900:	008000c4 	movi	r2,3
 2001904:	e0bfe615 	stw	r2,-104(fp)
 2001908:	e13ffc17 	ldw	r4,-16(fp)
 200190c:	01400404 	movi	r5,16
 2001910:	01800044 	movi	r6,1
 2001914:	01c000c4 	movi	r7,3
 2001918:	200aa800 	call	200aa80 <_ZN15CWelcomeMessageC1EhhhPh>
 200191c:	e0bffc17 	ldw	r2,-16(fp)
 2001920:	e0bfc415 	stw	r2,-240(fp)
		pProtocol = new CCarProtocol(0, (CCarMessage **) &wMsg, 1);
 2001924:	00bfffc4 	movi	r2,-1
 2001928:	e0bfe615 	stw	r2,-104(fp)
 200192c:	01000b04 	movi	r4,44
 2001930:	200c6200 	call	200c620 <_Znwm>
 2001934:	e0bffb15 	stw	r2,-20(fp)
 2001938:	e1bfc404 	addi	r6,fp,-240
 200193c:	00800084 	movi	r2,2
 2001940:	e0bfe615 	stw	r2,-104(fp)
 2001944:	e13ffb17 	ldw	r4,-20(fp)
 2001948:	000b883a 	mov	r5,zero
 200194c:	01c00044 	movi	r7,1
 2001950:	20075480 	call	2007548 <_ZN12CCarProtocolC1EtPP11CCarMessagem>
 2001954:	00000a06 	br	2001980 <_Z11sendWelcomev+0x168>
 2001958:	e0fffe17 	ldw	r3,-8(fp)
 200195c:	e0fff415 	stw	r3,-48(fp)
		// Put the WelcomeMessage into the protocol wrapper.
		if(pProtocol) {
			delete(pProtocol);
			pProtocol = 0;
		}
		wMsg = new CWelcomeMessage(FIRMWARE_VERSION, COMPONENT_TYPE, COMPONENT_ID, uiAvailableOperations);
 2001960:	e13ffc17 	ldw	r4,-16(fp)
 2001964:	200c1380 	call	200c138 <_ZdlPv>
 2001968:	e0bff417 	ldw	r2,-48(fp)
 200196c:	e0bffe15 	stw	r2,-8(fp)
 2001970:	00bfffc4 	movi	r2,-1
 2001974:	e0bfe615 	stw	r2,-104(fp)
 2001978:	e13ffe17 	ldw	r4,-8(fp)
 200197c:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
		pProtocol = new CCarProtocol(0, (CCarMessage **) &wMsg, 1);
 2001980:	e0fffb17 	ldw	r3,-20(fp)
 2001984:	d0e70715 	stw	r3,-25572(gp)
		pProtocol->getBytes(cBuffer);
 2001988:	d1270717 	ldw	r4,-25572(gp)
 200198c:	e17fc504 	addi	r5,fp,-236
 2001990:	00bfffc4 	movi	r2,-1
 2001994:	e0bfe615 	stw	r2,-104(fp)
 2001998:	200776c0 	call	200776c <_ZN12CCarProtocol8getBytesEPh>
		//LOG_DEBUG("cBuffer: '%c%c%c%c' 0x%02X%02X%02X%02X 0x%02X%02X%02X%02X", cBuffer[0], cBuffer[1],
				//cBuffer[2], cBuffer[3], cBuffer[4], cBuffer[5], cBuffer[6], cBuffer[7],
				//cBuffer[8], cBuffer[9], cBuffer[10], cBuffer[11]);

		// Send out the packet.
		if(uiTries % 50 == 0)
 200199c:	e13fc217 	ldw	r4,-248(fp)
 20019a0:	01400c84 	movi	r5,50
 20019a4:	200d0c40 	call	200d0c4 <__umodsi3>
 20019a8:	1005003a 	cmpeq	r2,r2,zero
 20019ac:	10000b1e 	bne	r2,zero,20019dc <_Z11sendWelcomev+0x1c4>
 20019b0:	00001506 	br	2001a08 <_Z11sendWelcomev+0x1f0>
 20019b4:	e0bffe17 	ldw	r2,-8(fp)
 20019b8:	e0bff315 	stw	r2,-52(fp)
		if(pProtocol) {
			delete(pProtocol);
			pProtocol = 0;
		}
		wMsg = new CWelcomeMessage(FIRMWARE_VERSION, COMPONENT_TYPE, COMPONENT_ID, uiAvailableOperations);
		pProtocol = new CCarProtocol(0, (CCarMessage **) &wMsg, 1);
 20019bc:	e13ffb17 	ldw	r4,-20(fp)
 20019c0:	200c1380 	call	200c138 <_ZdlPv>
 20019c4:	e0fff317 	ldw	r3,-52(fp)
 20019c8:	e0fffe15 	stw	r3,-8(fp)
 20019cc:	00bfffc4 	movi	r2,-1
 20019d0:	e0bfe615 	stw	r2,-104(fp)
 20019d4:	e13ffe17 	ldw	r4,-8(fp)
 20019d8:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
				//cBuffer[8], cBuffer[9], cBuffer[10], cBuffer[11]);

		// Send out the packet.
		if(uiTries % 50 == 0)
		{
			success = pSocket->Send(cBuffer, pProtocol->getLength());
 20019dc:	d0a70617 	ldw	r2,-25576(gp)
 20019e0:	e0bffa15 	stw	r2,-24(fp)
 20019e4:	d1270717 	ldw	r4,-25572(gp)
 20019e8:	00bfffc4 	movi	r2,-1
 20019ec:	e0bfe615 	stw	r2,-104(fp)
 20019f0:	20076340 	call	2007634 <_ZN12CCarProtocol9getLengthEv>
 20019f4:	100d883a 	mov	r6,r2
 20019f8:	e17fc504 	addi	r5,fp,-236
 20019fc:	e13ffa17 	ldw	r4,-24(fp)
 2001a00:	20008840 	call	2000884 <_ZN16CEth_UART_Socket4SendEPhm>
 2001a04:	e0bfc005 	stb	r2,-256(fp)
		}
		//LOG_DEBUG("sent? %x", success);

		// Receive bytes from socket (timed blocking)
		uiReceivedCount = pSocket->Receive(cBuffer, 128, 10);
 2001a08:	d1270617 	ldw	r4,-25576(gp)
 2001a0c:	e17fc504 	addi	r5,fp,-236
 2001a10:	00bfffc4 	movi	r2,-1
 2001a14:	e0bfe615 	stw	r2,-104(fp)
 2001a18:	01802004 	movi	r6,128
 2001a1c:	01c00284 	movi	r7,10
 2001a20:	20007580 	call	2000758 <_ZN16CEth_UART_Socket7ReceiveEPhmm>
 2001a24:	e0bfc115 	stw	r2,-252(fp)
		if(uiReceivedCount <= 0)
 2001a28:	e0bfc117 	ldw	r2,-252(fp)
 2001a2c:	1004c03a 	cmpne	r2,r2,zero
 2001a30:	1000041e 	bne	r2,zero,2001a44 <_Z11sendWelcomev+0x22c>
		{
			//LOG_DEBUG("incomplete packet");
			uiTries++;
 2001a34:	e0bfc217 	ldw	r2,-248(fp)
 2001a38:	10800044 	addi	r2,r2,1
 2001a3c:	e0bfc215 	stw	r2,-248(fp)
			continue; // If nothing was received
 2001a40:	003f9906 	br	20018a8 <_Z11sendWelcomev+0x90>
		}
		
		// Is there a current protocol, delete it and generate a new one out of received data
		if(pProtocol){
 2001a44:	d0a70717 	ldw	r2,-25572(gp)
 2001a48:	1005003a 	cmpeq	r2,r2,zero
 2001a4c:	10000c1e 	bne	r2,zero,2001a80 <_Z11sendWelcomev+0x268>
			delete(pProtocol);
 2001a50:	d0a70717 	ldw	r2,-25572(gp)
 2001a54:	1005003a 	cmpeq	r2,r2,zero
 2001a58:	1000081e 	bne	r2,zero,2001a7c <_Z11sendWelcomev+0x264>
 2001a5c:	d0a70717 	ldw	r2,-25572(gp)
 2001a60:	10800017 	ldw	r2,0(r2)
 2001a64:	10800104 	addi	r2,r2,4
 2001a68:	10c00017 	ldw	r3,0(r2)
 2001a6c:	d1270717 	ldw	r4,-25572(gp)
 2001a70:	00bfffc4 	movi	r2,-1
 2001a74:	e0bfe615 	stw	r2,-104(fp)
 2001a78:	183ee83a 	callr	r3
			pProtocol = 0;
 2001a7c:	d0270715 	stw	zero,-25572(gp)
		}
		pProtocol = new CCarProtocol(cBuffer, uiReceivedCount);
 2001a80:	00bfffc4 	movi	r2,-1
 2001a84:	e0bfe615 	stw	r2,-104(fp)
 2001a88:	01000b04 	movi	r4,44
 2001a8c:	200c6200 	call	200c620 <_Znwm>
 2001a90:	e0bff915 	stw	r2,-28(fp)
 2001a94:	e1bfc117 	ldw	r6,-252(fp)
 2001a98:	e17fc504 	addi	r5,fp,-236
 2001a9c:	00800044 	movi	r2,1
 2001aa0:	e0bfe615 	stw	r2,-104(fp)
 2001aa4:	e13ff917 	ldw	r4,-28(fp)
 2001aa8:	2008b8c0 	call	2008b8c <_ZN12CCarProtocolC1EPhi>
 2001aac:	e0fff917 	ldw	r3,-28(fp)
 2001ab0:	d0e70715 	stw	r3,-25572(gp)

		// Was the protocol generation unsuccessful then count one more try and continue
		if(pProtocol == 0 || !pProtocol->isValid() || pProtocol->getMessageCount() < 1u)
 2001ab4:	d0a70717 	ldw	r2,-25572(gp)
 2001ab8:	1005003a 	cmpeq	r2,r2,zero
 2001abc:	1000221e 	bne	r2,zero,2001b48 <_Z11sendWelcomev+0x330>
 2001ac0:	00001506 	br	2001b18 <_Z11sendWelcomev+0x300>
 2001ac4:	e7004004 	addi	fp,fp,256
 2001ac8:	e0bfe617 	ldw	r2,-104(fp)
 2001acc:	e0bfff15 	stw	r2,-4(fp)
 2001ad0:	e0ffe717 	ldw	r3,-100(fp)
 2001ad4:	e0fffe15 	stw	r3,-8(fp)
 2001ad8:	e0ffff17 	ldw	r3,-4(fp)
 2001adc:	18800060 	cmpeqi	r2,r3,1
 2001ae0:	103fb41e 	bne	r2,zero,20019b4 <_Z11sendWelcomev+0x19c>
 2001ae4:	e0ffff17 	ldw	r3,-4(fp)
 2001ae8:	188000a0 	cmpeqi	r2,r3,2
 2001aec:	103f9a1e 	bne	r2,zero,2001958 <_Z11sendWelcomev+0x140>
 2001af0:	e0bffe17 	ldw	r2,-8(fp)
 2001af4:	e0bff215 	stw	r2,-56(fp)
		// Is there a current protocol, delete it and generate a new one out of received data
		if(pProtocol){
			delete(pProtocol);
			pProtocol = 0;
		}
		pProtocol = new CCarProtocol(cBuffer, uiReceivedCount);
 2001af8:	e13ff917 	ldw	r4,-28(fp)
 2001afc:	200c1380 	call	200c138 <_ZdlPv>
 2001b00:	e0fff217 	ldw	r3,-56(fp)
 2001b04:	e0fffe15 	stw	r3,-8(fp)
 2001b08:	00bfffc4 	movi	r2,-1
 2001b0c:	e0bfe615 	stw	r2,-104(fp)
 2001b10:	e13ffe17 	ldw	r4,-8(fp)
 2001b14:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>

		// Was the protocol generation unsuccessful then count one more try and continue
		if(pProtocol == 0 || !pProtocol->isValid() || pProtocol->getMessageCount() < 1u)
 2001b18:	d1270717 	ldw	r4,-25572(gp)
 2001b1c:	00bfffc4 	movi	r2,-1
 2001b20:	e0bfe615 	stw	r2,-104(fp)
 2001b24:	20076080 	call	2007608 <_ZN12CCarProtocol7isValidEv>
 2001b28:	1080005c 	xori	r2,r2,1
 2001b2c:	10803fcc 	andi	r2,r2,255
 2001b30:	1004c03a 	cmpne	r2,r2,zero
 2001b34:	1000041e 	bne	r2,zero,2001b48 <_Z11sendWelcomev+0x330>
 2001b38:	d1270717 	ldw	r4,-25572(gp)
 2001b3c:	20077440 	call	2007744 <_ZN12CCarProtocol15getMessageCountEv>
 2001b40:	1004c03a 	cmpne	r2,r2,zero
 2001b44:	1000031e 	bne	r2,zero,2001b54 <_Z11sendWelcomev+0x33c>
 2001b48:	00800044 	movi	r2,1
 2001b4c:	e0bff805 	stb	r2,-32(fp)
 2001b50:	00000106 	br	2001b58 <_Z11sendWelcomev+0x340>
 2001b54:	e03ff805 	stb	zero,-32(fp)
 2001b58:	e0bff803 	ldbu	r2,-32(fp)
 2001b5c:	10803fcc 	andi	r2,r2,255
 2001b60:	1005003a 	cmpeq	r2,r2,zero
 2001b64:	1000151e 	bne	r2,zero,2001bbc <_Z11sendWelcomev+0x3a4>
		{
			printf("invalid packet pProtocol %u isValid %d messageCount %1u\n", pProtocol, !pProtocol->isValid(), pProtocol->getMessageCount());
 2001b68:	d0e70717 	ldw	r3,-25572(gp)
 2001b6c:	e0fff715 	stw	r3,-36(fp)
 2001b70:	d1270717 	ldw	r4,-25572(gp)
 2001b74:	00bfffc4 	movi	r2,-1
 2001b78:	e0bfe615 	stw	r2,-104(fp)
 2001b7c:	20076080 	call	2007608 <_ZN12CCarProtocol7isValidEv>
 2001b80:	1080005c 	xori	r2,r2,1
 2001b84:	10803fcc 	andi	r2,r2,255
 2001b88:	e0bff615 	stw	r2,-40(fp)
 2001b8c:	d1270717 	ldw	r4,-25572(gp)
 2001b90:	20077440 	call	2007744 <_ZN12CCarProtocol15getMessageCountEv>
 2001b94:	100f883a 	mov	r7,r2
 2001b98:	010080b4 	movhi	r4,514
 2001b9c:	212e1304 	addi	r4,r4,-18356
 2001ba0:	e17ff717 	ldw	r5,-36(fp)
 2001ba4:	e1bff617 	ldw	r6,-40(fp)
 2001ba8:	200de640 	call	200de64 <printf>
			uiTries++;
 2001bac:	e0bfc217 	ldw	r2,-248(fp)
 2001bb0:	10800044 	addi	r2,r2,1
 2001bb4:	e0bfc215 	stw	r2,-248(fp)
			continue;
 2001bb8:	003f3b06 	br	20018a8 <_Z11sendWelcomev+0x90>
		}

		// Check if the first message was a WelcomeMessage then break
		pMessage = pProtocol->getNthMessage(0);
 2001bbc:	d1270717 	ldw	r4,-25572(gp)
 2001bc0:	00bfffc4 	movi	r2,-1
 2001bc4:	e0bfe615 	stw	r2,-104(fp)
 2001bc8:	000b883a 	mov	r5,zero
 2001bcc:	20076e40 	call	20076e4 <_ZN12CCarProtocol13getNthMessageEm>
 2001bd0:	e0bfc315 	stw	r2,-244(fp)
		if(pMessage->isValid() && pMessage->getType() == 0x01)
 2001bd4:	e13fc317 	ldw	r4,-244(fp)
 2001bd8:	200701c0 	call	200701c <_ZN11CCarMessage7isValidEv>
 2001bdc:	1080005c 	xori	r2,r2,1
 2001be0:	10803fcc 	andi	r2,r2,255
 2001be4:	1004c03a 	cmpne	r2,r2,zero
 2001be8:	1000081e 	bne	r2,zero,2001c0c <_Z11sendWelcomev+0x3f4>
 2001bec:	e13fc317 	ldw	r4,-244(fp)
 2001bf0:	2006fc40 	call	2006fc4 <_ZN11CCarMessage7getTypeEv>
 2001bf4:	10803fcc 	andi	r2,r2,255
 2001bf8:	10800058 	cmpnei	r2,r2,1
 2001bfc:	1000031e 	bne	r2,zero,2001c0c <_Z11sendWelcomev+0x3f4>
 2001c00:	00800044 	movi	r2,1
 2001c04:	e0bff505 	stb	r2,-44(fp)
 2001c08:	00000106 	br	2001c10 <_Z11sendWelcomev+0x3f8>
 2001c0c:	e03ff505 	stb	zero,-44(fp)
 2001c10:	e0bff503 	ldbu	r2,-44(fp)
 2001c14:	10803fcc 	andi	r2,r2,255
 2001c18:	1005003a 	cmpeq	r2,r2,zero
 2001c1c:	1000171e 	bne	r2,zero,2001c7c <_Z11sendWelcomev+0x464>
		{
			//LOG_DEBUG("valid message");
			*pLED &= 0xFE;
 2001c20:	d0e00017 	ldw	r3,-32768(gp)
 2001c24:	d0a00017 	ldw	r2,-32768(gp)
 2001c28:	10800017 	ldw	r2,0(r2)
 2001c2c:	10803f8c 	andi	r2,r2,254
 2001c30:	18800015 	stw	r2,0(r3)
			if(pProtocol) {
 2001c34:	d0a70717 	ldw	r2,-25572(gp)
 2001c38:	1005003a 	cmpeq	r2,r2,zero
 2001c3c:	10000c1e 	bne	r2,zero,2001c70 <_Z11sendWelcomev+0x458>
				delete(pProtocol);
 2001c40:	d0a70717 	ldw	r2,-25572(gp)
 2001c44:	1005003a 	cmpeq	r2,r2,zero
 2001c48:	1000081e 	bne	r2,zero,2001c6c <_Z11sendWelcomev+0x454>
 2001c4c:	d0a70717 	ldw	r2,-25572(gp)
 2001c50:	10800017 	ldw	r2,0(r2)
 2001c54:	10800104 	addi	r2,r2,4
 2001c58:	10c00017 	ldw	r3,0(r2)
 2001c5c:	d1270717 	ldw	r4,-25572(gp)
 2001c60:	00bfffc4 	movi	r2,-1
 2001c64:	e0bfe615 	stw	r2,-104(fp)
 2001c68:	183ee83a 	callr	r3
				pProtocol = 0;
 2001c6c:	d0270715 	stw	zero,-25572(gp)
			}
			return true;
 2001c70:	00800044 	movi	r2,1
 2001c74:	e0bffd15 	stw	r2,-12(fp)
 2001c78:	00000406 	br	2001c8c <_Z11sendWelcomev+0x474>
		}
		uiTries++;
 2001c7c:	e0bfc217 	ldw	r2,-248(fp)
 2001c80:	10800044 	addi	r2,r2,1
 2001c84:	e0bfc215 	stw	r2,-248(fp)
	// set led on
	*pLED |= 0x01;

	//LOG_DEBUG("pre while");

	while(true)
 2001c88:	003f0706 	br	20018a8 <_Z11sendWelcomev+0x90>
 2001c8c:	e13fe504 	addi	r4,fp,-108
 2001c90:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>

	}


	return false;
}
 2001c94:	e0bffd17 	ldw	r2,-12(fp)
 2001c98:	e037883a 	mov	sp,fp
 2001c9c:	dfc00917 	ldw	ra,36(sp)
 2001ca0:	df000817 	ldw	fp,32(sp)
 2001ca4:	ddc00717 	ldw	r23,28(sp)
 2001ca8:	dd800617 	ldw	r22,24(sp)
 2001cac:	dd400517 	ldw	r21,20(sp)
 2001cb0:	dd000417 	ldw	r20,16(sp)
 2001cb4:	dcc00317 	ldw	r19,12(sp)
 2001cb8:	dc800217 	ldw	r18,8(sp)
 2001cbc:	dc400117 	ldw	r17,4(sp)
 2001cc0:	dc000017 	ldw	r16,0(sp)
 2001cc4:	dec00a04 	addi	sp,sp,40
 2001cc8:	f800283a 	ret

02001ccc <_Z4initv>:
	return -1;
}



bool init()
 2001ccc:	deffe504 	addi	sp,sp,-108
 2001cd0:	dfc01a15 	stw	ra,104(sp)
 2001cd4:	df001915 	stw	fp,100(sp)
 2001cd8:	ddc01815 	stw	r23,96(sp)
 2001cdc:	dd801715 	stw	r22,92(sp)
 2001ce0:	dd401615 	stw	r21,88(sp)
 2001ce4:	dd001515 	stw	r20,84(sp)
 2001ce8:	dcc01415 	stw	r19,80(sp)
 2001cec:	dc801315 	stw	r18,76(sp)
 2001cf0:	dc401215 	stw	r17,72(sp)
 2001cf4:	dc001115 	stw	r16,68(sp)
 2001cf8:	df001104 	addi	fp,sp,68
 2001cfc:	00808074 	movhi	r2,513
 2001d00:	10ae5a04 	addi	r2,r2,-18072
 2001d04:	e0bff515 	stw	r2,-44(fp)
 2001d08:	008080b4 	movhi	r2,514
 2001d0c:	10adaf04 	addi	r2,r2,-18756
 2001d10:	e0bff615 	stw	r2,-40(fp)
 2001d14:	e0bff704 	addi	r2,fp,-36
 2001d18:	e0ffef04 	addi	r3,fp,-68
 2001d1c:	10c00015 	stw	r3,0(r2)
 2001d20:	00c08034 	movhi	r3,512
 2001d24:	18c76804 	addi	r3,r3,7584
 2001d28:	10c00115 	stw	r3,4(r2)
 2001d2c:	16c00215 	stw	sp,8(r2)
 2001d30:	e13fef04 	addi	r4,fp,-68
 2001d34:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
{
	// Set speed to 0
	iDesiredSpeed = 0;
 2001d38:	d0270315 	stw	zero,-25588(gp)
	iCurrentSpeed = 0;
 2001d3c:	d0270215 	stw	zero,-25592(gp)
	setSpeed(0);
 2001d40:	00bfffc4 	movi	r2,-1
 2001d44:	e0bff015 	stw	r2,-64(fp)
 2001d48:	0009883a 	mov	r4,zero
 2001d4c:	2000b080 	call	2000b08 <_Z8setSpeedl>

	// Check LEDs
	*pLED = 0xFF;
 2001d50:	d0e00017 	ldw	r3,-32768(gp)
 2001d54:	00803fc4 	movi	r2,255
 2001d58:	18800015 	stw	r2,0(r3)
	delay(1000);
 2001d5c:	0100fa04 	movi	r4,1000
 2001d60:	20001f40 	call	20001f4 <_Z5delayj>
	*pLED = 0x00;
 2001d64:	d0a00017 	ldw	r2,-32768(gp)
 2001d68:	10000015 	stw	zero,0(r2)

	bCycleFinished = false;
 2001d6c:	d0270805 	stb	zero,-25568(gp)

	// Generate new socket object
	pSocket = new CEth_UART_Socket();
 2001d70:	01000204 	movi	r4,8
 2001d74:	200c6200 	call	200c620 <_Znwm>
 2001d78:	e0bffd15 	stw	r2,-12(fp)
 2001d7c:	00800044 	movi	r2,1
 2001d80:	e0bff015 	stw	r2,-64(fp)
 2001d84:	e13ffd17 	ldw	r4,-12(fp)
 2001d88:	200097c0 	call	200097c <_ZN16CEth_UART_SocketC1Ev>
 2001d8c:	e0bffd17 	ldw	r2,-12(fp)
 2001d90:	d0a70615 	stw	r2,-25576(gp)

	// This function is always successful
	return true;
 2001d94:	00800044 	movi	r2,1
 2001d98:	e0bffe15 	stw	r2,-8(fp)
 2001d9c:	00000d06 	br	2001dd4 <_Z4initv+0x108>
 2001da0:	e7001104 	addi	fp,fp,68
 2001da4:	e0fff117 	ldw	r3,-60(fp)
 2001da8:	e0ffff15 	stw	r3,-4(fp)
 2001dac:	e0bfff17 	ldw	r2,-4(fp)
 2001db0:	e0bffc15 	stw	r2,-16(fp)
	*pLED = 0x00;

	bCycleFinished = false;

	// Generate new socket object
	pSocket = new CEth_UART_Socket();
 2001db4:	e13ffd17 	ldw	r4,-12(fp)
 2001db8:	200c1380 	call	200c138 <_ZdlPv>
 2001dbc:	e0fffc17 	ldw	r3,-16(fp)
 2001dc0:	e0ffff15 	stw	r3,-4(fp)
 2001dc4:	00bfffc4 	movi	r2,-1
 2001dc8:	e0bff015 	stw	r2,-64(fp)
 2001dcc:	e13fff17 	ldw	r4,-4(fp)
 2001dd0:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 2001dd4:	e13fef04 	addi	r4,fp,-68
 2001dd8:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>

	// This function is always successful
	return true;
}
 2001ddc:	e0bffe17 	ldw	r2,-8(fp)
 2001de0:	e037883a 	mov	sp,fp
 2001de4:	dfc00917 	ldw	ra,36(sp)
 2001de8:	df000817 	ldw	fp,32(sp)
 2001dec:	ddc00717 	ldw	r23,28(sp)
 2001df0:	dd800617 	ldw	r22,24(sp)
 2001df4:	dd400517 	ldw	r21,20(sp)
 2001df8:	dd000417 	ldw	r20,16(sp)
 2001dfc:	dcc00317 	ldw	r19,12(sp)
 2001e00:	dc800217 	ldw	r18,8(sp)
 2001e04:	dc400117 	ldw	r17,4(sp)
 2001e08:	dc000017 	ldw	r16,0(sp)
 2001e0c:	dec00a04 	addi	sp,sp,40
 2001e10:	f800283a 	ret

02001e14 <main>:

// Export interface
#include "main.h"
#include "ErrHandler.h"

int main (void)
 2001e14:	defff804 	addi	sp,sp,-32
 2001e18:	dfc00715 	stw	ra,28(sp)
 2001e1c:	df000615 	stw	fp,24(sp)
 2001e20:	dc000515 	stw	r16,20(sp)
 2001e24:	df000504 	addi	fp,sp,20
{
	bool ret;
	alt_u16 state = 0; // State to distinguish between the small cycles
 2001e28:	e03ffe0d 	sth	zero,-8(fp)
	CCarMessage *pCurrentMessage = 0; // The current message
 2001e2c:	e03ffd15 	stw	zero,-12(fp)
	//LOG_DEBUG("init");
	if(!init())
 2001e30:	2001ccc0 	call	2001ccc <_Z4initv>
 2001e34:	1080005c 	xori	r2,r2,1
 2001e38:	10803fcc 	andi	r2,r2,255
 2001e3c:	1004c03a 	cmpne	r2,r2,zero
 2001e40:	1000721e 	bne	r2,zero,200200c <main+0x1f8>
	{
		goto fail;
	}

	*pLED = 0xAA;
 2001e44:	d0e00017 	ldw	r3,-32768(gp)
 2001e48:	00802a84 	movi	r2,170
 2001e4c:	18800015 	stw	r2,0(r3)

	//LOG_DEBUG("wait");
	ret = sendWelcome();
 2001e50:	20018180 	call	2001818 <_Z11sendWelcomev>
 2001e54:	e0bffe85 	stb	r2,-6(fp)
	if(!ret) {
 2001e58:	e0bffe83 	ldbu	r2,-6(fp)
 2001e5c:	1080005c 	xori	r2,r2,1
 2001e60:	10803fcc 	andi	r2,r2,255
 2001e64:	1004c03a 	cmpne	r2,r2,zero
 2001e68:	1000681e 	bne	r2,zero,200200c <main+0x1f8>
		goto fail;
	}
	*pLED = 0;
 2001e6c:	d0a00017 	ldw	r2,-32768(gp)
 2001e70:	10000015 	stw	zero,0(r2)

	//LOG_DEBUG("setuppid");
	ret = setUpPIController();
 2001e74:	2000ea40 	call	2000ea4 <_Z17setUpPIControllerv>
 2001e78:	e0bffe85 	stb	r2,-6(fp)
	if(!ret)
 2001e7c:	e0bffe83 	ldbu	r2,-6(fp)
 2001e80:	1080005c 	xori	r2,r2,1
 2001e84:	10803fcc 	andi	r2,r2,255
 2001e88:	1004c03a 	cmpne	r2,r2,zero
 2001e8c:	10005f1e 	bne	r2,zero,200200c <main+0x1f8>
	}
	//LOG_DEBUG("after setuppid");


	// Restore speed = 0
	iDesiredSpeed = 0;
 2001e90:	d0270315 	stw	zero,-25588(gp)
	iCurrentSpeed = 0;
 2001e94:	d0270215 	stw	zero,-25592(gp)
	setSpeed(0);
 2001e98:	0009883a 	mov	r4,zero
 2001e9c:	2000b080 	call	2000b08 <_Z8setSpeedl>

	// Set timer and start it
	alt_u32 (*callback) (void*);
	callback = alarm_callback;
 2001ea0:	00808034 	movhi	r2,512
 2001ea4:	10838704 	addi	r2,r2,3612
 2001ea8:	e0bffc15 	stw	r2,-16(fp)
	alt_alarm_start(&alarm, 10, callback, 0);
 2001eac:	010080b4 	movhi	r4,514
 2001eb0:	213e0704 	addi	r4,r4,-2020
 2001eb4:	01400284 	movi	r5,10
 2001eb8:	e1bffc17 	ldw	r6,-16(fp)
 2001ebc:	000f883a 	mov	r7,zero
 2001ec0:	20172c40 	call	20172c4 <alt_alarm_start>
 2001ec4:	00000006 	br	2001ec8 <main+0xb4>

	// Small cycle:
	while(true)
	{
		if(!waitForEndOfCycle())
 2001ec8:	2000e480 	call	2000e48 <_Z17waitForEndOfCyclev>
 2001ecc:	1080005c 	xori	r2,r2,1
 2001ed0:	10803fcc 	andi	r2,r2,255
 2001ed4:	1004c03a 	cmpne	r2,r2,zero
 2001ed8:	10004c1e 	bne	r2,zero,200200c <main+0x1f8>
			goto fail;
		//LOG_DEBUG("EndofCycle");
		if(!controlSpeed())
 2001edc:	20016f00 	call	20016f0 <_Z12controlSpeedv>
 2001ee0:	1080005c 	xori	r2,r2,1
 2001ee4:	10803fcc 	andi	r2,r2,255
 2001ee8:	1004c03a 	cmpne	r2,r2,zero
 2001eec:	1000471e 	bne	r2,zero,200200c <main+0x1f8>
			goto fail;
		//LOG_DEBUG("controlSpeed");
		if(state >= 9)
 2001ef0:	e0bffe0b 	ldhu	r2,-8(fp)
 2001ef4:	10800270 	cmpltui	r2,r2,9
 2001ef8:	1000071e 	bne	r2,zero,2001f18 <main+0x104>
		{
			if(!waitForNextPacket())
 2001efc:	20013280 	call	2001328 <_Z17waitForNextPacketv>
 2001f00:	1080005c 	xori	r2,r2,1
 2001f04:	10803fcc 	andi	r2,r2,255
 2001f08:	1004c03a 	cmpne	r2,r2,zero
 2001f0c:	10003f1e 	bne	r2,zero,200200c <main+0x1f8>
				goto fail;
			state = 0;
 2001f10:	e03ffe0d 	sth	zero,-8(fp)
 2001f14:	003fec06 	br	2001ec8 <main+0xb4>
			//LOG_DEBUG("NextPacket");
		}
		else
		{
			// Get current message and call doAction()
			if(pProtocol != 0 && pProtocol->isValid() && state < pProtocol->getMessageCount())
 2001f18:	d0a70717 	ldw	r2,-25572(gp)
 2001f1c:	1005003a 	cmpeq	r2,r2,zero
 2001f20:	10000d1e 	bne	r2,zero,2001f58 <main+0x144>
 2001f24:	d1270717 	ldw	r4,-25572(gp)
 2001f28:	20076080 	call	2007608 <_ZN12CCarProtocol7isValidEv>
 2001f2c:	1080005c 	xori	r2,r2,1
 2001f30:	10803fcc 	andi	r2,r2,255
 2001f34:	1004c03a 	cmpne	r2,r2,zero
 2001f38:	1000071e 	bne	r2,zero,2001f58 <main+0x144>
 2001f3c:	e43ffe0b 	ldhu	r16,-8(fp)
 2001f40:	d1270717 	ldw	r4,-25572(gp)
 2001f44:	20077440 	call	2007744 <_ZN12CCarProtocol15getMessageCountEv>
 2001f48:	8080032e 	bgeu	r16,r2,2001f58 <main+0x144>
 2001f4c:	00800044 	movi	r2,1
 2001f50:	e0bfff45 	stb	r2,-3(fp)
 2001f54:	00000106 	br	2001f5c <main+0x148>
 2001f58:	e03fff45 	stb	zero,-3(fp)
 2001f5c:	e0bfff43 	ldbu	r2,-3(fp)
 2001f60:	10803fcc 	andi	r2,r2,255
 2001f64:	1005003a 	cmpeq	r2,r2,zero
 2001f68:	1000241e 	bne	r2,zero,2001ffc <main+0x1e8>
			{
				alt_u32 count = pProtocol->getMessageCount();
 2001f6c:	d1270717 	ldw	r4,-25572(gp)
 2001f70:	20077440 	call	2007744 <_ZN12CCarProtocol15getMessageCountEv>
 2001f74:	e0bffb15 	stw	r2,-20(fp)
				count = count - state - 1;
 2001f78:	e0fffe0b 	ldhu	r3,-8(fp)
 2001f7c:	e0bffb17 	ldw	r2,-20(fp)
 2001f80:	10c5c83a 	sub	r2,r2,r3
 2001f84:	10bfffc4 	addi	r2,r2,-1
 2001f88:	e0bffb15 	stw	r2,-20(fp)
				pCurrentMessage = 0;
 2001f8c:	e03ffd15 	stw	zero,-12(fp)
				pCurrentMessage = pProtocol->getNthMessage(count);
 2001f90:	d1270717 	ldw	r4,-25572(gp)
 2001f94:	e17ffb17 	ldw	r5,-20(fp)
 2001f98:	20076e40 	call	20076e4 <_ZN12CCarProtocol13getNthMessageEm>
 2001f9c:	e0bffd15 	stw	r2,-12(fp)
				//LOG_DEBUG("getNthMessage");
				if(pCurrentMessage != 0 && pCurrentMessage->isValid())
 2001fa0:	e0bffd17 	ldw	r2,-12(fp)
 2001fa4:	1005003a 	cmpeq	r2,r2,zero
 2001fa8:	1000091e 	bne	r2,zero,2001fd0 <main+0x1bc>
 2001fac:	e13ffd17 	ldw	r4,-12(fp)
 2001fb0:	200701c0 	call	200701c <_ZN11CCarMessage7isValidEv>
 2001fb4:	1080005c 	xori	r2,r2,1
 2001fb8:	10803fcc 	andi	r2,r2,255
 2001fbc:	1004c03a 	cmpne	r2,r2,zero
 2001fc0:	1000031e 	bne	r2,zero,2001fd0 <main+0x1bc>
 2001fc4:	00800044 	movi	r2,1
 2001fc8:	e0bfff05 	stb	r2,-4(fp)
 2001fcc:	00000106 	br	2001fd4 <main+0x1c0>
 2001fd0:	e03fff05 	stb	zero,-4(fp)
 2001fd4:	e0bfff03 	ldbu	r2,-4(fp)
 2001fd8:	10803fcc 	andi	r2,r2,255
 2001fdc:	1005003a 	cmpeq	r2,r2,zero
 2001fe0:	1000061e 	bne	r2,zero,2001ffc <main+0x1e8>
					pCurrentMessage->doAction();
 2001fe4:	e0bffd17 	ldw	r2,-12(fp)
 2001fe8:	10800017 	ldw	r2,0(r2)
 2001fec:	10800204 	addi	r2,r2,8
 2001ff0:	10800017 	ldw	r2,0(r2)
 2001ff4:	e13ffd17 	ldw	r4,-12(fp)
 2001ff8:	103ee83a 	callr	r2
				//LOG_DEBUG("doAction");
			}
			state++;
 2001ffc:	e0bffe0b 	ldhu	r2,-8(fp)
 2002000:	10800044 	addi	r2,r2,1
 2002004:	e0bffe0d 	sth	r2,-8(fp)
	alt_u32 (*callback) (void*);
	callback = alarm_callback;
	alt_alarm_start(&alarm, 10, callback, 0);

	// Small cycle:
	while(true)
 2002008:	003faf06 	br	2001ec8 <main+0xb4>
	}

// Label for failure
fail:
	//LOG_DEBUG("fail");
	setSpeed(0);
 200200c:	0009883a 	mov	r4,zero
 2002010:	2000b080 	call	2000b08 <_Z8setSpeedl>
	*pLED = 0x80;
 2002014:	d0e00017 	ldw	r3,-32768(gp)
 2002018:	00802004 	movi	r2,128
 200201c:	18800015 	stw	r2,0(r3)
	delay(10000);
 2002020:	0109c404 	movi	r4,10000
 2002024:	20001f40 	call	20001f4 <_Z5delayj>
	return -1;
 2002028:	00bfffc4 	movi	r2,-1
}
 200202c:	e037883a 	mov	sp,fp
 2002030:	dfc00217 	ldw	ra,8(sp)
 2002034:	df000117 	ldw	fp,4(sp)
 2002038:	dc000017 	ldw	r16,0(sp)
 200203c:	dec00304 	addi	sp,sp,12
 2002040:	f800283a 	ret

02002044 <_ZNK21CMotorVelocityMessage16getIDesiredSpeedEv>:

	alt_16 getICurrentSpeed() const {
		return m_iCurrentSpeed;
	}

	alt_16 getIDesiredSpeed() const {
 2002044:	defffe04 	addi	sp,sp,-8
 2002048:	df000115 	stw	fp,4(sp)
 200204c:	df000104 	addi	fp,sp,4
 2002050:	e13fff15 	stw	r4,-4(fp)
		return m_iDesiredSpeed;
 2002054:	e0bfff17 	ldw	r2,-4(fp)
 2002058:	1080028b 	ldhu	r2,10(r2)
 200205c:	10bfffcc 	andi	r2,r2,65535
 2002060:	10a0001c 	xori	r2,r2,32768
 2002064:	10a00004 	addi	r2,r2,-32768
	}
 2002068:	e037883a 	mov	sp,fp
 200206c:	df000017 	ldw	fp,0(sp)
 2002070:	dec00104 	addi	sp,sp,4
 2002074:	f800283a 	ret

02002078 <_ZN13CPIControllerC2Ellll>:
#include "pidcontroller.h"
#include "ErrHandler.h"

CPIController::CPIController(alt_32 iPValue, alt_32 iIValue, alt_32 iMinimum, alt_32 iMaximum)
 2002078:	defffb04 	addi	sp,sp,-20
 200207c:	df000415 	stw	fp,16(sp)
 2002080:	df000404 	addi	fp,sp,16
 2002084:	e13ffc15 	stw	r4,-16(fp)
 2002088:	e17ffd15 	stw	r5,-12(fp)
 200208c:	e1bffe15 	stw	r6,-8(fp)
 2002090:	e1ffff15 	stw	r7,-4(fp)
{
	m_iPValue = iPValue;
 2002094:	e0fffc17 	ldw	r3,-16(fp)
 2002098:	e0bffd17 	ldw	r2,-12(fp)
 200209c:	18800015 	stw	r2,0(r3)
	m_iIValue = iIValue;
 20020a0:	e0fffc17 	ldw	r3,-16(fp)
 20020a4:	e0bffe17 	ldw	r2,-8(fp)
 20020a8:	18800115 	stw	r2,4(r3)

	m_iMinimum = iMinimum;
 20020ac:	e0fffc17 	ldw	r3,-16(fp)
 20020b0:	e0bfff17 	ldw	r2,-4(fp)
 20020b4:	18800215 	stw	r2,8(r3)
	m_iMaximum = iMaximum;
 20020b8:	e0fffc17 	ldw	r3,-16(fp)
 20020bc:	e0800117 	ldw	r2,4(fp)
 20020c0:	18800315 	stw	r2,12(r3)

	m_iErrorSum = 0;
 20020c4:	e0bffc17 	ldw	r2,-16(fp)
 20020c8:	10000415 	stw	zero,16(r2)
 20020cc:	10000515 	stw	zero,20(r2)
	m_iLastError = 0;
 20020d0:	e0bffc17 	ldw	r2,-16(fp)
 20020d4:	10000615 	stw	zero,24(r2)
	//LOG_DEBUG("Controller set up with P=%d, I=%d",m_iPValue,m_iIValue);
}
 20020d8:	e037883a 	mov	sp,fp
 20020dc:	df000017 	ldw	fp,0(sp)
 20020e0:	dec00104 	addi	sp,sp,4
 20020e4:	f800283a 	ret

020020e8 <_ZN13CPIControllerC1Ellll>:
#include "pidcontroller.h"
#include "ErrHandler.h"

CPIController::CPIController(alt_32 iPValue, alt_32 iIValue, alt_32 iMinimum, alt_32 iMaximum)
 20020e8:	defffb04 	addi	sp,sp,-20
 20020ec:	df000415 	stw	fp,16(sp)
 20020f0:	df000404 	addi	fp,sp,16
 20020f4:	e13ffc15 	stw	r4,-16(fp)
 20020f8:	e17ffd15 	stw	r5,-12(fp)
 20020fc:	e1bffe15 	stw	r6,-8(fp)
 2002100:	e1ffff15 	stw	r7,-4(fp)
{
	m_iPValue = iPValue;
 2002104:	e0fffc17 	ldw	r3,-16(fp)
 2002108:	e0bffd17 	ldw	r2,-12(fp)
 200210c:	18800015 	stw	r2,0(r3)
	m_iIValue = iIValue;
 2002110:	e0fffc17 	ldw	r3,-16(fp)
 2002114:	e0bffe17 	ldw	r2,-8(fp)
 2002118:	18800115 	stw	r2,4(r3)

	m_iMinimum = iMinimum;
 200211c:	e0fffc17 	ldw	r3,-16(fp)
 2002120:	e0bfff17 	ldw	r2,-4(fp)
 2002124:	18800215 	stw	r2,8(r3)
	m_iMaximum = iMaximum;
 2002128:	e0fffc17 	ldw	r3,-16(fp)
 200212c:	e0800117 	ldw	r2,4(fp)
 2002130:	18800315 	stw	r2,12(r3)

	m_iErrorSum = 0;
 2002134:	e0bffc17 	ldw	r2,-16(fp)
 2002138:	10000415 	stw	zero,16(r2)
 200213c:	10000515 	stw	zero,20(r2)
	m_iLastError = 0;
 2002140:	e0bffc17 	ldw	r2,-16(fp)
 2002144:	10000615 	stw	zero,24(r2)
	//LOG_DEBUG("Controller set up with P=%d, I=%d",m_iPValue,m_iIValue);
}
 2002148:	e037883a 	mov	sp,fp
 200214c:	df000017 	ldw	fp,0(sp)
 2002150:	dec00104 	addi	sp,sp,4
 2002154:	f800283a 	ret

02002158 <_ZN13CPIControllerD2Ev>:


CPIController::~CPIController(void){}
 2002158:	defffe04 	addi	sp,sp,-8
 200215c:	df000115 	stw	fp,4(sp)
 2002160:	df000104 	addi	fp,sp,4
 2002164:	e13fff15 	stw	r4,-4(fp)
 2002168:	e037883a 	mov	sp,fp
 200216c:	df000017 	ldw	fp,0(sp)
 2002170:	dec00104 	addi	sp,sp,4
 2002174:	f800283a 	ret

02002178 <_ZN13CPIControllerD1Ev>:
 2002178:	defffe04 	addi	sp,sp,-8
 200217c:	df000115 	stw	fp,4(sp)
 2002180:	df000104 	addi	fp,sp,4
 2002184:	e13fff15 	stw	r4,-4(fp)
 2002188:	e037883a 	mov	sp,fp
 200218c:	df000017 	ldw	fp,0(sp)
 2002190:	dec00104 	addi	sp,sp,4
 2002194:	f800283a 	ret

02002198 <_ZN13CPIController7controlEl>:

alt_32 CPIController::control(alt_32 iError)
 2002198:	defff904 	addi	sp,sp,-28
 200219c:	dfc00615 	stw	ra,24(sp)
 20021a0:	df000515 	stw	fp,20(sp)
 20021a4:	df000504 	addi	fp,sp,20
 20021a8:	e13ffe15 	stw	r4,-8(fp)
 20021ac:	e17fff15 	stw	r5,-4(fp)
{
	alt_32 iResultP, iResultI, iResult;

	// Compute P Type:
	iResultP = iError / m_iPValue;
 20021b0:	e0bffe17 	ldw	r2,-8(fp)
 20021b4:	11400017 	ldw	r5,0(r2)
 20021b8:	e13fff17 	ldw	r4,-4(fp)
 20021bc:	200cffc0 	call	200cffc <__divsi3>
 20021c0:	e0bffd15 	stw	r2,-12(fp)

	// Compute I Type:
	m_iErrorSum += iError;
 20021c4:	e0bffe17 	ldw	r2,-8(fp)
 20021c8:	11800417 	ldw	r6,16(r2)
 20021cc:	11c00517 	ldw	r7,20(r2)
 20021d0:	e0bfff17 	ldw	r2,-4(fp)
 20021d4:	1005d7fa 	srai	r2,r2,31
 20021d8:	e13fff17 	ldw	r4,-4(fp)
 20021dc:	100b883a 	mov	r5,r2
 20021e0:	3105883a 	add	r2,r6,r4
 20021e4:	1191803a 	cmpltu	r8,r2,r6
 20021e8:	3947883a 	add	r3,r7,r5
 20021ec:	40c9883a 	add	r4,r8,r3
 20021f0:	2007883a 	mov	r3,r4
 20021f4:	1009883a 	mov	r4,r2
 20021f8:	180b883a 	mov	r5,r3
 20021fc:	e0bffe17 	ldw	r2,-8(fp)
 2002200:	11000415 	stw	r4,16(r2)
 2002204:	11400515 	stw	r5,20(r2)
	iResultI = m_iErrorSum  / m_iIValue;
 2002208:	e0bffe17 	ldw	r2,-8(fp)
 200220c:	11400417 	ldw	r5,16(r2)
 2002210:	11800517 	ldw	r6,20(r2)
 2002214:	e0bffe17 	ldw	r2,-8(fp)
 2002218:	11000117 	ldw	r4,4(r2)
 200221c:	200fd7fa 	srai	r7,r4,31
 2002220:	2005883a 	mov	r2,r4
 2002224:	3807883a 	mov	r3,r7
 2002228:	2809883a 	mov	r4,r5
 200222c:	300b883a 	mov	r5,r6
 2002230:	100d883a 	mov	r6,r2
 2002234:	180f883a 	mov	r7,r3
 2002238:	200c8680 	call	200c868 <__divdi3>
 200223c:	1009883a 	mov	r4,r2
 2002240:	180b883a 	mov	r5,r3
 2002244:	2005883a 	mov	r2,r4
 2002248:	2807883a 	mov	r3,r5
 200224c:	e0bffc15 	stw	r2,-16(fp)
	m_iLastError = iError;
 2002250:	e0fffe17 	ldw	r3,-8(fp)
 2002254:	e0bfff17 	ldw	r2,-4(fp)
 2002258:	18800615 	stw	r2,24(r3)

	// Complete Controller
	iResult = iResultP + iResultI;
 200225c:	e0fffd17 	ldw	r3,-12(fp)
 2002260:	e0bffc17 	ldw	r2,-16(fp)
 2002264:	1885883a 	add	r2,r3,r2
 2002268:	e0bffb15 	stw	r2,-20(fp)

	// Check for bounds
	if(iResult < m_iMinimum)
 200226c:	e0bffe17 	ldw	r2,-8(fp)
 2002270:	10c00217 	ldw	r3,8(r2)
 2002274:	e0bffb17 	ldw	r2,-20(fp)
 2002278:	10c0040e 	bge	r2,r3,200228c <_ZN13CPIController7controlEl+0xf4>
		iResult = m_iMinimum;
 200227c:	e0bffe17 	ldw	r2,-8(fp)
 2002280:	10800217 	ldw	r2,8(r2)
 2002284:	e0bffb15 	stw	r2,-20(fp)
 2002288:	00000706 	br	20022a8 <_ZN13CPIController7controlEl+0x110>
	else if(iResult > m_iMaximum)
 200228c:	e0bffe17 	ldw	r2,-8(fp)
 2002290:	10c00317 	ldw	r3,12(r2)
 2002294:	e0bffb17 	ldw	r2,-20(fp)
 2002298:	1880030e 	bge	r3,r2,20022a8 <_ZN13CPIController7controlEl+0x110>
		iResult = m_iMaximum;
 200229c:	e0bffe17 	ldw	r2,-8(fp)
 20022a0:	10800317 	ldw	r2,12(r2)
 20022a4:	e0bffb15 	stw	r2,-20(fp)

	iResult  *= 100000;
 20022a8:	e13ffb17 	ldw	r4,-20(fp)
 20022ac:	014000b4 	movhi	r5,2
 20022b0:	2961a804 	addi	r5,r5,-31072
 20022b4:	200d0cc0 	call	200d0cc <__mulsi3>
 20022b8:	e0bffb15 	stw	r2,-20(fp)
	iResult  /= (m_iMaximum + 1);
 20022bc:	e0bffe17 	ldw	r2,-8(fp)
 20022c0:	10800317 	ldw	r2,12(r2)
 20022c4:	11400044 	addi	r5,r2,1
 20022c8:	e13ffb17 	ldw	r4,-20(fp)
 20022cc:	200cffc0 	call	200cffc <__divsi3>
 20022d0:	e0bffb15 	stw	r2,-20(fp)
	//LOG_DEBUG("iresult: %d",iResult);
	if(iResult < 10000 && iResult > -10000)
 20022d4:	e0bffb17 	ldw	r2,-20(fp)
 20022d8:	1089c408 	cmpgei	r2,r2,10000
 20022dc:	1000041e 	bne	r2,zero,20022f0 <_ZN13CPIController7controlEl+0x158>
 20022e0:	e0bffb17 	ldw	r2,-20(fp)
 20022e4:	10b63c50 	cmplti	r2,r2,-9999
 20022e8:	1000011e 	bne	r2,zero,20022f0 <_ZN13CPIController7controlEl+0x158>
		iResult = 0;
 20022ec:	e03ffb15 	stw	zero,-20(fp)

	return iResult;
 20022f0:	e0bffb17 	ldw	r2,-20(fp)
}
 20022f4:	e037883a 	mov	sp,fp
 20022f8:	dfc00117 	ldw	ra,4(sp)
 20022fc:	df000017 	ldw	fp,0(sp)
 2002300:	dec00204 	addi	sp,sp,8
 2002304:	f800283a 	ret

02002308 <_ZN13CPIController16changeControllerEll>:

void CPIController::changeController(alt_32 iPValue, alt_32 iIValue)
 2002308:	defffc04 	addi	sp,sp,-16
 200230c:	df000315 	stw	fp,12(sp)
 2002310:	df000304 	addi	fp,sp,12
 2002314:	e13ffd15 	stw	r4,-12(fp)
 2002318:	e17ffe15 	stw	r5,-8(fp)
 200231c:	e1bfff15 	stw	r6,-4(fp)
{
	m_iPValue = iPValue;
 2002320:	e0fffd17 	ldw	r3,-12(fp)
 2002324:	e0bffe17 	ldw	r2,-8(fp)
 2002328:	18800015 	stw	r2,0(r3)
	m_iIValue = iIValue;
 200232c:	e0fffd17 	ldw	r3,-12(fp)
 2002330:	e0bfff17 	ldw	r2,-4(fp)
 2002334:	18800115 	stw	r2,4(r3)
}
 2002338:	e037883a 	mov	sp,fp
 200233c:	df000017 	ldw	fp,0(sp)
 2002340:	dec00104 	addi	sp,sp,4
 2002344:	f800283a 	ret

02002348 <_ZN13CPIController13getControllerEPlS0_>:

void CPIController::getController(alt_32 *p_iPValue, alt_32 *p_iIValue)
 2002348:	defffc04 	addi	sp,sp,-16
 200234c:	df000315 	stw	fp,12(sp)
 2002350:	df000304 	addi	fp,sp,12
 2002354:	e13ffd15 	stw	r4,-12(fp)
 2002358:	e17ffe15 	stw	r5,-8(fp)
 200235c:	e1bfff15 	stw	r6,-4(fp)
{
	*p_iPValue = m_iPValue;
 2002360:	e0bffd17 	ldw	r2,-12(fp)
 2002364:	10c00017 	ldw	r3,0(r2)
 2002368:	e0bffe17 	ldw	r2,-8(fp)
 200236c:	10c00015 	stw	r3,0(r2)
	*p_iIValue = m_iIValue;
 2002370:	e0bffd17 	ldw	r2,-12(fp)
 2002374:	10c00117 	ldw	r3,4(r2)
 2002378:	e0bfff17 	ldw	r2,-4(fp)
 200237c:	10c00015 	stw	r3,0(r2)
}
 2002380:	e037883a 	mov	sp,fp
 2002384:	df000017 	ldw	fp,0(sp)
 2002388:	dec00104 	addi	sp,sp,4
 200238c:	f800283a 	ret

02002390 <_Z8i2c_stopmm>:
    SCL_LOW(clk_base); // clock low
    SCL_DELAY;
}

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
 2002390:	defffc04 	addi	sp,sp,-16
 2002394:	dfc00315 	stw	ra,12(sp)
 2002398:	df000215 	stw	fp,8(sp)
 200239c:	df000204 	addi	fp,sp,8
 20023a0:	e13ffe15 	stw	r4,-8(fp)
 20023a4:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
 20023a8:	e0bfff17 	ldw	r2,-4(fp)
 20023ac:	10800104 	addi	r2,r2,4
 20023b0:	1007883a 	mov	r3,r2
 20023b4:	00800044 	movi	r2,1
 20023b8:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
 20023bc:	e0bfff17 	ldw	r2,-4(fp)
 20023c0:	10000035 	stwio	zero,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
 20023c4:	e0bffe17 	ldw	r2,-8(fp)
 20023c8:	1007883a 	mov	r3,r2
 20023cc:	00800044 	movi	r2,1
 20023d0:	18800035 	stwio	r2,0(r3)
    SCL_DELAY; // clock high long delay
 20023d4:	01000044 	movi	r4,1
 20023d8:	20181680 	call	2018168 <usleep>
    SDA_HIGH(data_base); // data high
 20023dc:	e0bfff17 	ldw	r2,-4(fp)
 20023e0:	1007883a 	mov	r3,r2
 20023e4:	00800044 	movi	r2,1
 20023e8:	18800035 	stwio	r2,0(r3)
    SCL_DELAY; // data high delay
 20023ec:	01000044 	movi	r4,1
 20023f0:	20181680 	call	2018168 <usleep>
    

    
}
 20023f4:	e037883a 	mov	sp,fp
 20023f8:	dfc00117 	ldw	ra,4(sp)
 20023fc:	df000017 	ldw	fp,0(sp)
 2002400:	dec00204 	addi	sp,sp,8
 2002404:	f800283a 	ret

02002408 <_Z9i2c_startmm>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
 2002408:	defffc04 	addi	sp,sp,-16
 200240c:	dfc00315 	stw	ra,12(sp)
 2002410:	df000215 	stw	fp,8(sp)
 2002414:	df000204 	addi	fp,sp,8
 2002418:	e13ffe15 	stw	r4,-8(fp)
 200241c:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
 2002420:	e0bfff17 	ldw	r2,-4(fp)
 2002424:	10800104 	addi	r2,r2,4
 2002428:	1007883a 	mov	r3,r2
 200242c:	00800044 	movi	r2,1
 2002430:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
 2002434:	e0bfff17 	ldw	r2,-4(fp)
 2002438:	1007883a 	mov	r3,r2
 200243c:	00800044 	movi	r2,1
 2002440:	18800035 	stwio	r2,0(r3)
    SCL_HIGH(clk_base);
 2002444:	e0bffe17 	ldw	r2,-8(fp)
 2002448:	1007883a 	mov	r3,r2
 200244c:	00800044 	movi	r2,1
 2002450:	18800035 	stwio	r2,0(r3)
    SCL_DELAY;
 2002454:	01000044 	movi	r4,1
 2002458:	20181680 	call	2018168 <usleep>
     
    SDA_LOW(data_base); // data low
 200245c:	e0bfff17 	ldw	r2,-4(fp)
 2002460:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; 
 2002464:	01000044 	movi	r4,1
 2002468:	20181680 	call	2018168 <usleep>
    SCL_LOW(clk_base); // clock low
 200246c:	e0bffe17 	ldw	r2,-8(fp)
 2002470:	10000035 	stwio	zero,0(r2)
    SCL_DELAY;
 2002474:	01000044 	movi	r4,1
 2002478:	20181680 	call	2018168 <usleep>
}
 200247c:	e037883a 	mov	sp,fp
 2002480:	dfc00117 	ldw	ra,4(sp)
 2002484:	df000017 	ldw	fp,0(sp)
 2002488:	dec00204 	addi	sp,sp,8
 200248c:	f800283a 	ret

02002490 <_Z8i2c_readmmPhb>:
    SCL_LOW(clk_base); // clock low         
    SCL_DELAY; // clock low delay
    return bAck;
}    

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
 2002490:	defff804 	addi	sp,sp,-32
 2002494:	dfc00715 	stw	ra,28(sp)
 2002498:	df000615 	stw	fp,24(sp)
 200249c:	df000604 	addi	fp,sp,24
 20024a0:	e13ffc15 	stw	r4,-16(fp)
 20024a4:	e17ffd15 	stw	r5,-12(fp)
 20024a8:	e1bffe15 	stw	r6,-8(fp)
 20024ac:	e1ffff05 	stb	r7,-4(fp)
    alt_u8 Data=0;
 20024b0:	e03ffb05 	stb	zero,-20(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
 20024b4:	e0bffd17 	ldw	r2,-12(fp)
 20024b8:	10800104 	addi	r2,r2,4
 20024bc:	10000035 	stwio	zero,0(r2)
    SCL_LOW(clk_base); // clock low
 20024c0:	e0bffc17 	ldw	r2,-16(fp)
 20024c4:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
 20024c8:	01000044 	movi	r4,1
 20024cc:	20181680 	call	2018168 <usleep>

    for(i=0;i<8;i++){
 20024d0:	e03ffa15 	stw	zero,-24(fp)
 20024d4:	00001906 	br	200253c <_Z8i2c_readmmPhb+0xac>
        Data <<= 1;
 20024d8:	e0bffb03 	ldbu	r2,-20(fp)
 20024dc:	1085883a 	add	r2,r2,r2
 20024e0:	e0bffb05 	stb	r2,-20(fp)
        SCL_HIGH(clk_base);  // clock high
 20024e4:	e0bffc17 	ldw	r2,-16(fp)
 20024e8:	1007883a 	mov	r3,r2
 20024ec:	00800044 	movi	r2,1
 20024f0:	18800035 	stwio	r2,0(r3)
        SCL_DELAY;
 20024f4:	01000044 	movi	r4,1
 20024f8:	20181680 	call	2018168 <usleep>
        if (SDA_READ(data_base))  // read data   
 20024fc:	e0bffd17 	ldw	r2,-12(fp)
 2002500:	10800037 	ldwio	r2,0(r2)
 2002504:	1004c03a 	cmpne	r2,r2,zero
 2002508:	10803fcc 	andi	r2,r2,255
 200250c:	1005003a 	cmpeq	r2,r2,zero
 2002510:	1000031e 	bne	r2,zero,2002520 <_Z8i2c_readmmPhb+0x90>
            Data |= 0x01;
 2002514:	e0bffb03 	ldbu	r2,-20(fp)
 2002518:	10800054 	ori	r2,r2,1
 200251c:	e0bffb05 	stb	r2,-20(fp)
        SCL_LOW(clk_base);  // clock log  
 2002520:	e0bffc17 	ldw	r2,-16(fp)
 2002524:	10000035 	stwio	zero,0(r2)
        SCL_DELAY;
 2002528:	01000044 	movi	r4,1
 200252c:	20181680 	call	2018168 <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
 2002530:	e0bffa17 	ldw	r2,-24(fp)
 2002534:	10800044 	addi	r2,r2,1
 2002538:	e0bffa15 	stw	r2,-24(fp)
 200253c:	e0bffa17 	ldw	r2,-24(fp)
 2002540:	10800210 	cmplti	r2,r2,8
 2002544:	103fe41e 	bne	r2,zero,20024d8 <_Z8i2c_readmmPhb+0x48>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
 2002548:	e0bffc17 	ldw	r2,-16(fp)
 200254c:	10000035 	stwio	zero,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
 2002550:	e0bffd17 	ldw	r2,-12(fp)
 2002554:	10800104 	addi	r2,r2,4
 2002558:	1007883a 	mov	r3,r2
 200255c:	00800044 	movi	r2,1
 2002560:	18800035 	stwio	r2,0(r3)
    if (bAck)
 2002564:	e0bfff03 	ldbu	r2,-4(fp)
 2002568:	1005003a 	cmpeq	r2,r2,zero
 200256c:	1000031e 	bne	r2,zero,200257c <_Z8i2c_readmmPhb+0xec>
        SDA_LOW(data_base);
 2002570:	e0bffd17 	ldw	r2,-12(fp)
 2002574:	10000035 	stwio	zero,0(r2)
 2002578:	00000406 	br	200258c <_Z8i2c_readmmPhb+0xfc>
    else
        SDA_HIGH(data_base);
 200257c:	e0bffd17 	ldw	r2,-12(fp)
 2002580:	1007883a 	mov	r3,r2
 2002584:	00800044 	movi	r2,1
 2002588:	18800035 	stwio	r2,0(r3)
    SCL_HIGH(clk_base); // clock high
 200258c:	e0bffc17 	ldw	r2,-16(fp)
 2002590:	1007883a 	mov	r3,r2
 2002594:	00800044 	movi	r2,1
 2002598:	18800035 	stwio	r2,0(r3)
    SCL_DELAY; // clock high  delay
 200259c:	01000044 	movi	r4,1
 20025a0:	20181680 	call	2018168 <usleep>
    SCL_LOW(clk_base); // clock low
 20025a4:	e0bffc17 	ldw	r2,-16(fp)
 20025a8:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
 20025ac:	01000044 	movi	r4,1
 20025b0:	20181680 	call	2018168 <usleep>
    SDA_LOW(data_base);  // data low
 20025b4:	e0bffd17 	ldw	r2,-12(fp)
 20025b8:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // data low delay
 20025bc:	01000044 	movi	r4,1
 20025c0:	20181680 	call	2018168 <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
 20025c4:	e0fffe17 	ldw	r3,-8(fp)
 20025c8:	e0bffb03 	ldbu	r2,-20(fp)
 20025cc:	18800005 	stb	r2,0(r3)
}
 20025d0:	e037883a 	mov	sp,fp
 20025d4:	dfc00117 	ldw	ra,4(sp)
 20025d8:	df000017 	ldw	fp,0(sp)
 20025dc:	dec00204 	addi	sp,sp,8
 20025e0:	f800283a 	ret

020025e4 <_Z9i2c_writemmh>:
    

    
}

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
 20025e4:	defff904 	addi	sp,sp,-28
 20025e8:	dfc00615 	stw	ra,24(sp)
 20025ec:	df000515 	stw	fp,20(sp)
 20025f0:	df000504 	addi	fp,sp,20
 20025f4:	e13ffd15 	stw	r4,-12(fp)
 20025f8:	e17ffe15 	stw	r5,-8(fp)
 20025fc:	e1bfff05 	stb	r6,-4(fp)
    alt_u8 Mask = 0x80;
 2002600:	00bfe004 	movi	r2,-128
 2002604:	e0bffc45 	stb	r2,-15(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
 2002608:	e0bffe17 	ldw	r2,-8(fp)
 200260c:	10800104 	addi	r2,r2,4
 2002610:	1007883a 	mov	r3,r2
 2002614:	00800044 	movi	r2,1
 2002618:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
 200261c:	e03ffb15 	stw	zero,-20(fp)
 2002620:	00001e06 	br	200269c <_Z9i2c_writemmh+0xb8>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
 2002624:	e0bffd17 	ldw	r2,-12(fp)
 2002628:	10000035 	stwio	zero,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
 200262c:	e0ffff03 	ldbu	r3,-4(fp)
 2002630:	e0bffc43 	ldbu	r2,-15(fp)
 2002634:	1884703a 	and	r2,r3,r2
 2002638:	1005003a 	cmpeq	r2,r2,zero
 200263c:	1000051e 	bne	r2,zero,2002654 <_Z9i2c_writemmh+0x70>
            SDA_HIGH(data_base);
 2002640:	e0bffe17 	ldw	r2,-8(fp)
 2002644:	1007883a 	mov	r3,r2
 2002648:	00800044 	movi	r2,1
 200264c:	18800035 	stwio	r2,0(r3)
 2002650:	00000206 	br	200265c <_Z9i2c_writemmh+0x78>
        }else{    
            SDA_LOW(data_base);
 2002654:	e0bffe17 	ldw	r2,-8(fp)
 2002658:	10000035 	stwio	zero,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
 200265c:	e0bffc43 	ldbu	r2,-15(fp)
 2002660:	1004d07a 	srli	r2,r2,1
 2002664:	e0bffc45 	stb	r2,-15(fp)
        // clock high
        SCL_HIGH(clk_base);
 2002668:	e0bffd17 	ldw	r2,-12(fp)
 200266c:	1007883a 	mov	r3,r2
 2002670:	00800044 	movi	r2,1
 2002674:	18800035 	stwio	r2,0(r3)
        SCL_DELAY;
 2002678:	01000044 	movi	r4,1
 200267c:	20181680 	call	2018168 <usleep>
        SCL_LOW(clk_base);
 2002680:	e0bffd17 	ldw	r2,-12(fp)
 2002684:	10000035 	stwio	zero,0(r2)
        SCL_DELAY;
 2002688:	01000044 	movi	r4,1
 200268c:	20181680 	call	2018168 <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
 2002690:	e0bffb17 	ldw	r2,-20(fp)
 2002694:	10800044 	addi	r2,r2,1
 2002698:	e0bffb15 	stw	r2,-20(fp)
 200269c:	e0bffb17 	ldw	r2,-20(fp)
 20026a0:	10800210 	cmplti	r2,r2,8
 20026a4:	103fdf1e 	bne	r2,zero,2002624 <_Z9i2c_writemmh+0x40>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
 20026a8:	e0bffe17 	ldw	r2,-8(fp)
 20026ac:	10800104 	addi	r2,r2,4
 20026b0:	10000035 	stwio	zero,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
 20026b4:	e0bffd17 	ldw	r2,-12(fp)
 20026b8:	1007883a 	mov	r3,r2
 20026bc:	00800044 	movi	r2,1
 20026c0:	18800035 	stwio	r2,0(r3)
    SCL_DELAY;  // clock high delay
 20026c4:	01000044 	movi	r4,1
 20026c8:	20181680 	call	2018168 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
 20026cc:	e0bffe17 	ldw	r2,-8(fp)
 20026d0:	10800037 	ldwio	r2,0(r2)
 20026d4:	1005003a 	cmpeq	r2,r2,zero
 20026d8:	e0bffc05 	stb	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
 20026dc:	e0bffd17 	ldw	r2,-12(fp)
 20026e0:	10000035 	stwio	zero,0(r2)
    SCL_DELAY; // clock low delay
 20026e4:	01000044 	movi	r4,1
 20026e8:	20181680 	call	2018168 <usleep>
    return bAck;
 20026ec:	e0bffc03 	ldbu	r2,-16(fp)
}    
 20026f0:	e037883a 	mov	sp,fp
 20026f4:	dfc00117 	ldw	ra,4(sp)
 20026f8:	df000017 	ldw	fp,0(sp)
 20026fc:	dec00204 	addi	sp,sp,8
 2002700:	f800283a 	ret

02002704 <_Z16I2C_MultipleReadmmahPht>:
    return bSuccess;

    
}

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pBuf, alt_u16 len){
 2002704:	defff704 	addi	sp,sp,-36
 2002708:	dfc00815 	stw	ra,32(sp)
 200270c:	df000715 	stw	fp,28(sp)
 2002710:	df000704 	addi	fp,sp,28
 2002714:	e13ffb15 	stw	r4,-20(fp)
 2002718:	e17ffc15 	stw	r5,-16(fp)
 200271c:	e0800317 	ldw	r2,12(fp)
 2002720:	e1bffd05 	stb	r6,-12(fp)
 2002724:	e1fffe05 	stb	r7,-8(fp)
 2002728:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
 200272c:	00800044 	movi	r2,1
 2002730:	e0bff905 	stb	r2,-28(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 2002734:	e13ffb17 	ldw	r4,-20(fp)
 2002738:	e17ffc17 	ldw	r5,-16(fp)
 200273c:	20024080 	call	2002408 <_Z9i2c_startmm>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 2002740:	e0bffd03 	ldbu	r2,-12(fp)
 2002744:	11803fcc 	andi	r6,r2,255
 2002748:	e13ffb17 	ldw	r4,-20(fp)
 200274c:	e17ffc17 	ldw	r5,-16(fp)
 2002750:	20025e40 	call	20025e4 <_Z9i2c_writemmh>
 2002754:	1080005c 	xori	r2,r2,1
 2002758:	10803fcc 	andi	r2,r2,255
 200275c:	1005003a 	cmpeq	r2,r2,zero
 2002760:	1000011e 	bne	r2,zero,2002768 <_Z16I2C_MultipleReadmmahPht+0x64>
        bSuccess = FALSE;
 2002764:	e03ff905 	stb	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 2002768:	e0bff903 	ldbu	r2,-28(fp)
 200276c:	1080005c 	xori	r2,r2,1
 2002770:	10803fcc 	andi	r2,r2,255
 2002774:	1004c03a 	cmpne	r2,r2,zero
 2002778:	10000c1e 	bne	r2,zero,20027ac <_Z16I2C_MultipleReadmmahPht+0xa8>
 200277c:	e1bffe03 	ldbu	r6,-8(fp)
 2002780:	e13ffb17 	ldw	r4,-20(fp)
 2002784:	e17ffc17 	ldw	r5,-16(fp)
 2002788:	20025e40 	call	20025e4 <_Z9i2c_writemmh>
 200278c:	1080005c 	xori	r2,r2,1
 2002790:	1080005c 	xori	r2,r2,1
 2002794:	10803fcc 	andi	r2,r2,255
 2002798:	1004c03a 	cmpne	r2,r2,zero
 200279c:	1000031e 	bne	r2,zero,20027ac <_Z16I2C_MultipleReadmmahPht+0xa8>
 20027a0:	00800044 	movi	r2,1
 20027a4:	e0bfffc5 	stb	r2,-1(fp)
 20027a8:	00000106 	br	20027b0 <_Z16I2C_MultipleReadmmahPht+0xac>
 20027ac:	e03fffc5 	stb	zero,-1(fp)
 20027b0:	e0bfffc3 	ldbu	r2,-1(fp)
 20027b4:	10803fcc 	andi	r2,r2,255
 20027b8:	1005003a 	cmpeq	r2,r2,zero
 20027bc:	1000011e 	bne	r2,zero,20027c4 <_Z16I2C_MultipleReadmmahPht+0xc0>
        bSuccess = FALSE;
 20027c0:	e03ff905 	stb	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }    
    if (bSuccess)        
 20027c4:	e0bff903 	ldbu	r2,-28(fp)
 20027c8:	1005003a 	cmpeq	r2,r2,zero
 20027cc:	1000031e 	bne	r2,zero,20027dc <_Z16I2C_MultipleReadmmahPht+0xd8>
        i2c_start(clk_base, data_base);  // restart
 20027d0:	e13ffb17 	ldw	r4,-20(fp)
 20027d4:	e17ffc17 	ldw	r5,-16(fp)
 20027d8:	20024080 	call	2002408 <_Z9i2c_startmm>
    DeviceAddr |= 1; // Read
 20027dc:	e0bffd03 	ldbu	r2,-12(fp)
 20027e0:	10800054 	ori	r2,r2,1
 20027e4:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 20027e8:	e0bff903 	ldbu	r2,-28(fp)
 20027ec:	1080005c 	xori	r2,r2,1
 20027f0:	10803fcc 	andi	r2,r2,255
 20027f4:	1004c03a 	cmpne	r2,r2,zero
 20027f8:	10000d1e 	bne	r2,zero,2002830 <_Z16I2C_MultipleReadmmahPht+0x12c>
 20027fc:	e0bffd03 	ldbu	r2,-12(fp)
 2002800:	11803fcc 	andi	r6,r2,255
 2002804:	e13ffb17 	ldw	r4,-20(fp)
 2002808:	e17ffc17 	ldw	r5,-16(fp)
 200280c:	20025e40 	call	20025e4 <_Z9i2c_writemmh>
 2002810:	1080005c 	xori	r2,r2,1
 2002814:	1080005c 	xori	r2,r2,1
 2002818:	10803fcc 	andi	r2,r2,255
 200281c:	1004c03a 	cmpne	r2,r2,zero
 2002820:	1000031e 	bne	r2,zero,2002830 <_Z16I2C_MultipleReadmmahPht+0x12c>
 2002824:	00800044 	movi	r2,1
 2002828:	e0bfff85 	stb	r2,-2(fp)
 200282c:	00000106 	br	2002834 <_Z16I2C_MultipleReadmmahPht+0x130>
 2002830:	e03fff85 	stb	zero,-2(fp)
 2002834:	e0bfff83 	ldbu	r2,-2(fp)
 2002838:	10803fcc 	andi	r2,r2,255
 200283c:	1005003a 	cmpeq	r2,r2,zero
 2002840:	1000011e 	bne	r2,zero,2002848 <_Z16I2C_MultipleReadmmahPht+0x144>
        bSuccess = FALSE;
 2002844:	e03ff905 	stb	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
 2002848:	e0bff903 	ldbu	r2,-28(fp)
 200284c:	1005003a 	cmpeq	r2,r2,zero
 2002850:	1000161e 	bne	r2,zero,20028ac <_Z16I2C_MultipleReadmmahPht+0x1a8>
        for(i=0;i<len && bSuccess;i++){
 2002854:	e03ffa15 	stw	zero,-24(fp)
 2002858:	00000e06 	br	2002894 <_Z16I2C_MultipleReadmmahPht+0x190>
            i2c_read(clk_base, data_base, pBuf, (i==(len-1))?FALSE:TRUE);  // read
 200285c:	e0bfff0b 	ldhu	r2,-4(fp)
 2002860:	10ffffc4 	addi	r3,r2,-1
 2002864:	e0bffa17 	ldw	r2,-24(fp)
 2002868:	188ec03a 	cmpne	r7,r3,r2
 200286c:	e13ffb17 	ldw	r4,-20(fp)
 2002870:	e17ffc17 	ldw	r5,-16(fp)
 2002874:	e1800217 	ldw	r6,8(fp)
 2002878:	20024900 	call	2002490 <_Z8i2c_readmmPhb>
            pBuf++;
 200287c:	e0800217 	ldw	r2,8(fp)
 2002880:	10800044 	addi	r2,r2,1
 2002884:	e0800215 	stw	r2,8(fp)
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
 2002888:	e0bffa17 	ldw	r2,-24(fp)
 200288c:	10800044 	addi	r2,r2,1
 2002890:	e0bffa15 	stw	r2,-24(fp)
 2002894:	e0ffff0b 	ldhu	r3,-4(fp)
 2002898:	e0bffa17 	ldw	r2,-24(fp)
 200289c:	10c0030e 	bge	r2,r3,20028ac <_Z16I2C_MultipleReadmmahPht+0x1a8>
 20028a0:	e0bff903 	ldbu	r2,-28(fp)
 20028a4:	1004c03a 	cmpne	r2,r2,zero
 20028a8:	103fec1e 	bne	r2,zero,200285c <_Z16I2C_MultipleReadmmahPht+0x158>
            i2c_read(clk_base, data_base, pBuf, (i==(len-1))?FALSE:TRUE);  // read
            pBuf++;
        }            
    }        
    i2c_stop(clk_base, data_base);
 20028ac:	e13ffb17 	ldw	r4,-20(fp)
 20028b0:	e17ffc17 	ldw	r5,-16(fp)
 20028b4:	20023900 	call	2002390 <_Z8i2c_stopmm>
    
    return bSuccess;    
 20028b8:	e0bff903 	ldbu	r2,-28(fp)
    
}
 20028bc:	e037883a 	mov	sp,fp
 20028c0:	dfc00117 	ldw	ra,4(sp)
 20028c4:	df000017 	ldw	fp,0(sp)
 20028c8:	dec00204 	addi	sp,sp,8
 20028cc:	f800283a 	ret

020028d0 <_Z17I2C_MultipleWritemmahPht>:
    
    return bSuccess;
}


bool I2C_MultipleWrite(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pData, alt_u16 len){
 20028d0:	defff704 	addi	sp,sp,-36
 20028d4:	dfc00815 	stw	ra,32(sp)
 20028d8:	df000715 	stw	fp,28(sp)
 20028dc:	df000704 	addi	fp,sp,28
 20028e0:	e13ffb15 	stw	r4,-20(fp)
 20028e4:	e17ffc15 	stw	r5,-16(fp)
 20028e8:	e0800317 	ldw	r2,12(fp)
 20028ec:	e1bffd05 	stb	r6,-12(fp)
 20028f0:	e1fffe05 	stb	r7,-8(fp)
 20028f4:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess = TRUE;
 20028f8:	00800044 	movi	r2,1
 20028fc:	e0bffa05 	stb	r2,-24(fp)
    int i;

    i2c_start(clk_base, data_base);
 2002900:	e13ffb17 	ldw	r4,-20(fp)
 2002904:	e17ffc17 	ldw	r5,-16(fp)
 2002908:	20024080 	call	2002408 <_Z9i2c_startmm>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 200290c:	e0bffd03 	ldbu	r2,-12(fp)
 2002910:	11803fcc 	andi	r6,r2,255
 2002914:	e13ffb17 	ldw	r4,-20(fp)
 2002918:	e17ffc17 	ldw	r5,-16(fp)
 200291c:	20025e40 	call	20025e4 <_Z9i2c_writemmh>
 2002920:	1080005c 	xori	r2,r2,1
 2002924:	10803fcc 	andi	r2,r2,255
 2002928:	1005003a 	cmpeq	r2,r2,zero
 200292c:	1000011e 	bne	r2,zero,2002934 <_Z17I2C_MultipleWritemmahPht+0x64>
        bSuccess = FALSE;
 2002930:	e03ffa05 	stb	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 2002934:	e0bffa03 	ldbu	r2,-24(fp)
 2002938:	1080005c 	xori	r2,r2,1
 200293c:	10803fcc 	andi	r2,r2,255
 2002940:	1004c03a 	cmpne	r2,r2,zero
 2002944:	10000c1e 	bne	r2,zero,2002978 <_Z17I2C_MultipleWritemmahPht+0xa8>
 2002948:	e1bffe03 	ldbu	r6,-8(fp)
 200294c:	e13ffb17 	ldw	r4,-20(fp)
 2002950:	e17ffc17 	ldw	r5,-16(fp)
 2002954:	20025e40 	call	20025e4 <_Z9i2c_writemmh>
 2002958:	1080005c 	xori	r2,r2,1
 200295c:	1080005c 	xori	r2,r2,1
 2002960:	10803fcc 	andi	r2,r2,255
 2002964:	1004c03a 	cmpne	r2,r2,zero
 2002968:	1000031e 	bne	r2,zero,2002978 <_Z17I2C_MultipleWritemmahPht+0xa8>
 200296c:	00800044 	movi	r2,1
 2002970:	e0bfff85 	stb	r2,-2(fp)
 2002974:	00000106 	br	200297c <_Z17I2C_MultipleWritemmahPht+0xac>
 2002978:	e03fff85 	stb	zero,-2(fp)
 200297c:	e0bfff83 	ldbu	r2,-2(fp)
 2002980:	10803fcc 	andi	r2,r2,255
 2002984:	1005003a 	cmpeq	r2,r2,zero
 2002988:	1000011e 	bne	r2,zero,2002990 <_Z17I2C_MultipleWritemmahPht+0xc0>
        bSuccess = FALSE;
 200298c:	e03ffa05 	stb	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess){
 2002990:	e0bffa03 	ldbu	r2,-24(fp)
 2002994:	1005003a 	cmpeq	r2,r2,zero
 2002998:	1000151e 	bne	r2,zero,20029f0 <_Z17I2C_MultipleWritemmahPht+0x120>
        for(i=0;i<len && bSuccess;i++){
 200299c:	e03ff915 	stw	zero,-28(fp)
 20029a0:	00000d06 	br	20029d8 <_Z17I2C_MultipleWritemmahPht+0x108>
            bSuccess = i2c_write(clk_base, data_base, *pData);
 20029a4:	e0800217 	ldw	r2,8(fp)
 20029a8:	10800003 	ldbu	r2,0(r2)
 20029ac:	11803fcc 	andi	r6,r2,255
 20029b0:	e13ffb17 	ldw	r4,-20(fp)
 20029b4:	e17ffc17 	ldw	r5,-16(fp)
 20029b8:	20025e40 	call	20025e4 <_Z9i2c_writemmh>
 20029bc:	e0bffa05 	stb	r2,-24(fp)
            pData++;
 20029c0:	e0800217 	ldw	r2,8(fp)
 20029c4:	10800044 	addi	r2,r2,1
 20029c8:	e0800215 	stw	r2,8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
 20029cc:	e0bff917 	ldw	r2,-28(fp)
 20029d0:	10800044 	addi	r2,r2,1
 20029d4:	e0bff915 	stw	r2,-28(fp)
 20029d8:	e0ffff0b 	ldhu	r3,-4(fp)
 20029dc:	e0bff917 	ldw	r2,-28(fp)
 20029e0:	10c0030e 	bge	r2,r3,20029f0 <_Z17I2C_MultipleWritemmahPht+0x120>
 20029e4:	e0bffa03 	ldbu	r2,-24(fp)
 20029e8:	1004c03a 	cmpne	r2,r2,zero
 20029ec:	103fed1e 	bne	r2,zero,20029a4 <_Z17I2C_MultipleWritemmahPht+0xd4>
            pData++;
        }
        if (!bSuccess)         
            I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
 20029f0:	e13ffb17 	ldw	r4,-20(fp)
 20029f4:	e17ffc17 	ldw	r5,-16(fp)
 20029f8:	20023900 	call	2002390 <_Z8i2c_stopmm>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 20029fc:	0106d604 	movi	r4,7000
 2002a00:	20181680 	call	2018168 <usleep>
    
    return bSuccess;
 2002a04:	e0bffa03 	ldbu	r2,-24(fp)

    
}
 2002a08:	e037883a 	mov	sp,fp
 2002a0c:	dfc00117 	ldw	ra,4(sp)
 2002a10:	df000017 	ldw	fp,0(sp)
 2002a14:	dec00204 	addi	sp,sp,8
 2002a18:	f800283a 	ret

02002a1c <_Z8I2C_ReadmmahPh>:
    return bSuccess;

    
}

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
 2002a1c:	defff904 	addi	sp,sp,-28
 2002a20:	dfc00615 	stw	ra,24(sp)
 2002a24:	df000515 	stw	fp,20(sp)
 2002a28:	df000504 	addi	fp,sp,20
 2002a2c:	e13ffc15 	stw	r4,-16(fp)
 2002a30:	e17ffd15 	stw	r5,-12(fp)
 2002a34:	e1bffe05 	stb	r6,-8(fp)
 2002a38:	e1ffff05 	stb	r7,-4(fp)
    bool bSuccess = TRUE;
 2002a3c:	00800044 	movi	r2,1
 2002a40:	e0bffb05 	stb	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 2002a44:	e13ffc17 	ldw	r4,-16(fp)
 2002a48:	e17ffd17 	ldw	r5,-12(fp)
 2002a4c:	20024080 	call	2002408 <_Z9i2c_startmm>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 2002a50:	e0bffe03 	ldbu	r2,-8(fp)
 2002a54:	11803fcc 	andi	r6,r2,255
 2002a58:	e13ffc17 	ldw	r4,-16(fp)
 2002a5c:	e17ffd17 	ldw	r5,-12(fp)
 2002a60:	20025e40 	call	20025e4 <_Z9i2c_writemmh>
 2002a64:	1080005c 	xori	r2,r2,1
 2002a68:	10803fcc 	andi	r2,r2,255
 2002a6c:	1005003a 	cmpeq	r2,r2,zero
 2002a70:	1000011e 	bne	r2,zero,2002a78 <_Z8I2C_ReadmmahPh+0x5c>
        bSuccess = FALSE;
 2002a74:	e03ffb05 	stb	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 2002a78:	e0bffb03 	ldbu	r2,-20(fp)
 2002a7c:	1080005c 	xori	r2,r2,1
 2002a80:	10803fcc 	andi	r2,r2,255
 2002a84:	1004c03a 	cmpne	r2,r2,zero
 2002a88:	10000c1e 	bne	r2,zero,2002abc <_Z8I2C_ReadmmahPh+0xa0>
 2002a8c:	e1bfff03 	ldbu	r6,-4(fp)
 2002a90:	e13ffc17 	ldw	r4,-16(fp)
 2002a94:	e17ffd17 	ldw	r5,-12(fp)
 2002a98:	20025e40 	call	20025e4 <_Z9i2c_writemmh>
 2002a9c:	1080005c 	xori	r2,r2,1
 2002aa0:	1080005c 	xori	r2,r2,1
 2002aa4:	10803fcc 	andi	r2,r2,255
 2002aa8:	1004c03a 	cmpne	r2,r2,zero
 2002aac:	1000031e 	bne	r2,zero,2002abc <_Z8I2C_ReadmmahPh+0xa0>
 2002ab0:	00800044 	movi	r2,1
 2002ab4:	e0bfff85 	stb	r2,-2(fp)
 2002ab8:	00000106 	br	2002ac0 <_Z8I2C_ReadmmahPh+0xa4>
 2002abc:	e03fff85 	stb	zero,-2(fp)
 2002ac0:	e0bfff83 	ldbu	r2,-2(fp)
 2002ac4:	10803fcc 	andi	r2,r2,255
 2002ac8:	1005003a 	cmpeq	r2,r2,zero
 2002acc:	1000011e 	bne	r2,zero,2002ad4 <_Z8I2C_ReadmmahPh+0xb8>
        bSuccess = FALSE;
 2002ad0:	e03ffb05 	stb	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
 2002ad4:	e13ffc17 	ldw	r4,-16(fp)
 2002ad8:	e17ffd17 	ldw	r5,-12(fp)
 2002adc:	20024080 	call	2002408 <_Z9i2c_startmm>
    DeviceAddr |= 1; // Read
 2002ae0:	e0bffe03 	ldbu	r2,-8(fp)
 2002ae4:	10800054 	ori	r2,r2,1
 2002ae8:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 2002aec:	e0bffb03 	ldbu	r2,-20(fp)
 2002af0:	1080005c 	xori	r2,r2,1
 2002af4:	10803fcc 	andi	r2,r2,255
 2002af8:	1004c03a 	cmpne	r2,r2,zero
 2002afc:	10000d1e 	bne	r2,zero,2002b34 <_Z8I2C_ReadmmahPh+0x118>
 2002b00:	e0bffe03 	ldbu	r2,-8(fp)
 2002b04:	11803fcc 	andi	r6,r2,255
 2002b08:	e13ffc17 	ldw	r4,-16(fp)
 2002b0c:	e17ffd17 	ldw	r5,-12(fp)
 2002b10:	20025e40 	call	20025e4 <_Z9i2c_writemmh>
 2002b14:	1080005c 	xori	r2,r2,1
 2002b18:	1080005c 	xori	r2,r2,1
 2002b1c:	10803fcc 	andi	r2,r2,255
 2002b20:	1004c03a 	cmpne	r2,r2,zero
 2002b24:	1000031e 	bne	r2,zero,2002b34 <_Z8I2C_ReadmmahPh+0x118>
 2002b28:	00800044 	movi	r2,1
 2002b2c:	e0bfff45 	stb	r2,-3(fp)
 2002b30:	00000106 	br	2002b38 <_Z8I2C_ReadmmahPh+0x11c>
 2002b34:	e03fff45 	stb	zero,-3(fp)
 2002b38:	e0bfff43 	ldbu	r2,-3(fp)
 2002b3c:	10803fcc 	andi	r2,r2,255
 2002b40:	1005003a 	cmpeq	r2,r2,zero
 2002b44:	1000011e 	bne	r2,zero,2002b4c <_Z8I2C_ReadmmahPh+0x130>
        bSuccess = FALSE;
 2002b48:	e03ffb05 	stb	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
 2002b4c:	e0bffb03 	ldbu	r2,-20(fp)
 2002b50:	1005003a 	cmpeq	r2,r2,zero
 2002b54:	1000051e 	bne	r2,zero,2002b6c <_Z8I2C_ReadmmahPh+0x150>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
 2002b58:	e13ffc17 	ldw	r4,-16(fp)
 2002b5c:	e17ffd17 	ldw	r5,-12(fp)
 2002b60:	e1800217 	ldw	r6,8(fp)
 2002b64:	000f883a 	mov	r7,zero
 2002b68:	20024900 	call	2002490 <_Z8i2c_readmmPhb>
    }        
    i2c_stop(clk_base, data_base);
 2002b6c:	e13ffc17 	ldw	r4,-16(fp)
 2002b70:	e17ffd17 	ldw	r5,-12(fp)
 2002b74:	20023900 	call	2002390 <_Z8i2c_stopmm>
    
    return bSuccess;
 2002b78:	e0bffb03 	ldbu	r2,-20(fp)
}
 2002b7c:	e037883a 	mov	sp,fp
 2002b80:	dfc00117 	ldw	ra,4(sp)
 2002b84:	df000017 	ldw	fp,0(sp)
 2002b88:	dec00204 	addi	sp,sp,8
 2002b8c:	f800283a 	ret

02002b90 <_Z9I2C_Writemmahh>:
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);



bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
 2002b90:	defff804 	addi	sp,sp,-32
 2002b94:	dfc00715 	stw	ra,28(sp)
 2002b98:	df000615 	stw	fp,24(sp)
 2002b9c:	df000604 	addi	fp,sp,24
 2002ba0:	e13ffb15 	stw	r4,-20(fp)
 2002ba4:	e17ffc15 	stw	r5,-16(fp)
 2002ba8:	e0800217 	ldw	r2,8(fp)
 2002bac:	e1bffd05 	stb	r6,-12(fp)
 2002bb0:	e1fffe05 	stb	r7,-8(fp)
 2002bb4:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 2002bb8:	00800044 	movi	r2,1
 2002bbc:	e0bffa05 	stb	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 2002bc0:	e13ffb17 	ldw	r4,-20(fp)
 2002bc4:	e17ffc17 	ldw	r5,-16(fp)
 2002bc8:	20024080 	call	2002408 <_Z9i2c_startmm>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 2002bcc:	e0bffd03 	ldbu	r2,-12(fp)
 2002bd0:	11803fcc 	andi	r6,r2,255
 2002bd4:	e13ffb17 	ldw	r4,-20(fp)
 2002bd8:	e17ffc17 	ldw	r5,-16(fp)
 2002bdc:	20025e40 	call	20025e4 <_Z9i2c_writemmh>
 2002be0:	1080005c 	xori	r2,r2,1
 2002be4:	10803fcc 	andi	r2,r2,255
 2002be8:	1005003a 	cmpeq	r2,r2,zero
 2002bec:	1000011e 	bne	r2,zero,2002bf4 <_Z9I2C_Writemmahh+0x64>
        bSuccess = FALSE;
 2002bf0:	e03ffa05 	stb	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 2002bf4:	e0bffa03 	ldbu	r2,-24(fp)
 2002bf8:	1080005c 	xori	r2,r2,1
 2002bfc:	10803fcc 	andi	r2,r2,255
 2002c00:	1004c03a 	cmpne	r2,r2,zero
 2002c04:	10000c1e 	bne	r2,zero,2002c38 <_Z9I2C_Writemmahh+0xa8>
 2002c08:	e1bffe03 	ldbu	r6,-8(fp)
 2002c0c:	e13ffb17 	ldw	r4,-20(fp)
 2002c10:	e17ffc17 	ldw	r5,-16(fp)
 2002c14:	20025e40 	call	20025e4 <_Z9i2c_writemmh>
 2002c18:	1080005c 	xori	r2,r2,1
 2002c1c:	1080005c 	xori	r2,r2,1
 2002c20:	10803fcc 	andi	r2,r2,255
 2002c24:	1004c03a 	cmpne	r2,r2,zero
 2002c28:	1000031e 	bne	r2,zero,2002c38 <_Z9I2C_Writemmahh+0xa8>
 2002c2c:	00800044 	movi	r2,1
 2002c30:	e0bfff85 	stb	r2,-2(fp)
 2002c34:	00000106 	br	2002c3c <_Z9I2C_Writemmahh+0xac>
 2002c38:	e03fff85 	stb	zero,-2(fp)
 2002c3c:	e0bfff83 	ldbu	r2,-2(fp)
 2002c40:	10803fcc 	andi	r2,r2,255
 2002c44:	1005003a 	cmpeq	r2,r2,zero
 2002c48:	1000011e 	bne	r2,zero,2002c50 <_Z9I2C_Writemmahh+0xc0>
        bSuccess = FALSE;
 2002c4c:	e03ffa05 	stb	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
 2002c50:	e0bffa03 	ldbu	r2,-24(fp)
 2002c54:	1080005c 	xori	r2,r2,1
 2002c58:	10803fcc 	andi	r2,r2,255
 2002c5c:	1004c03a 	cmpne	r2,r2,zero
 2002c60:	10000c1e 	bne	r2,zero,2002c94 <_Z9I2C_Writemmahh+0x104>
 2002c64:	e1bfff03 	ldbu	r6,-4(fp)
 2002c68:	e13ffb17 	ldw	r4,-20(fp)
 2002c6c:	e17ffc17 	ldw	r5,-16(fp)
 2002c70:	20025e40 	call	20025e4 <_Z9i2c_writemmh>
 2002c74:	1080005c 	xori	r2,r2,1
 2002c78:	1080005c 	xori	r2,r2,1
 2002c7c:	10803fcc 	andi	r2,r2,255
 2002c80:	1004c03a 	cmpne	r2,r2,zero
 2002c84:	1000031e 	bne	r2,zero,2002c94 <_Z9I2C_Writemmahh+0x104>
 2002c88:	00800044 	movi	r2,1
 2002c8c:	e0bfff45 	stb	r2,-3(fp)
 2002c90:	00000106 	br	2002c98 <_Z9I2C_Writemmahh+0x108>
 2002c94:	e03fff45 	stb	zero,-3(fp)
 2002c98:	e0bfff43 	ldbu	r2,-3(fp)
 2002c9c:	10803fcc 	andi	r2,r2,255
 2002ca0:	1005003a 	cmpeq	r2,r2,zero
 2002ca4:	1000011e 	bne	r2,zero,2002cac <_Z9I2C_Writemmahh+0x11c>
        bSuccess = FALSE;
 2002ca8:	e03ffa05 	stb	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
 2002cac:	e13ffb17 	ldw	r4,-20(fp)
 2002cb0:	e17ffc17 	ldw	r5,-16(fp)
 2002cb4:	20023900 	call	2002390 <_Z8i2c_stopmm>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 2002cb8:	0106d604 	movi	r4,7000
 2002cbc:	20181680 	call	2018168 <usleep>
    
    return bSuccess;
 2002cc0:	e0bffa03 	ldbu	r2,-24(fp)

    
}
 2002cc4:	e037883a 	mov	sp,fp
 2002cc8:	dfc00117 	ldw	ra,4(sp)
 2002ccc:	df000017 	ldw	fp,0(sp)
 2002cd0:	dec00204 	addi	sp,sp,8
 2002cd4:	f800283a 	ret

02002cd8 <_Z15i2c_data_verifymmh>:
}

//==========================================================
// function for verify

bool i2c_data_verify(alt_u32 scl_base, alt_u32 sda_base, alt_u8 ControlAddr){
 2002cd8:	defff804 	addi	sp,sp,-32
 2002cdc:	dfc00715 	stw	ra,28(sp)
 2002ce0:	df000615 	stw	fp,24(sp)
 2002ce4:	df000604 	addi	fp,sp,24
 2002ce8:	e13ffd15 	stw	r4,-12(fp)
 2002cec:	e17ffe15 	stw	r5,-8(fp)
 2002cf0:	e1bfff05 	stb	r6,-4(fp)
    bool bPass;
    const alt_8 DeviceAddr = 0xA0;
 2002cf4:	00bfe804 	movi	r2,-96
 2002cf8:	e0bffb45 	stb	r2,-19(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 2002cfc:	008080b4 	movhi	r2,514
 2002d00:	10be0504 	addi	r2,r2,-2028
 2002d04:	10800017 	ldw	r2,0(r2)
    alt_u8 OrgData, TestData, Data;
    
    TestData = alt_nticks();
 2002d08:	e0bffb05 	stb	r2,-20(fp)
    if (TestData == 0)
 2002d0c:	e0bffb03 	ldbu	r2,-20(fp)
 2002d10:	1004c03a 	cmpne	r2,r2,zero
 2002d14:	1000021e 	bne	r2,zero,2002d20 <_Z15i2c_data_verifymmh+0x48>
        TestData = 0x12;
 2002d18:	00800484 	movi	r2,18
 2002d1c:	e0bffb05 	stb	r2,-20(fp)
    
    bPass = I2C_Read(scl_base, sda_base, DeviceAddr, ControlAddr, &OrgData);
 2002d20:	e1ffff03 	ldbu	r7,-4(fp)
 2002d24:	e0bffbc4 	addi	r2,fp,-17
 2002d28:	d8800015 	stw	r2,0(sp)
 2002d2c:	e13ffd17 	ldw	r4,-12(fp)
 2002d30:	e17ffe17 	ldw	r5,-8(fp)
 2002d34:	01bfe804 	movi	r6,-96
 2002d38:	2002a1c0 	call	2002a1c <_Z8I2C_ReadmmahPh>
 2002d3c:	e0bffb85 	stb	r2,-18(fp)
    if (bPass) // write
 2002d40:	e0bffb83 	ldbu	r2,-18(fp)
 2002d44:	1005003a 	cmpeq	r2,r2,zero
 2002d48:	1000081e 	bne	r2,zero,2002d6c <_Z15i2c_data_verifymmh+0x94>
        bPass = I2C_Write(scl_base, sda_base, DeviceAddr, ControlAddr, TestData);
 2002d4c:	e1ffff03 	ldbu	r7,-4(fp)
 2002d50:	e0bffb03 	ldbu	r2,-20(fp)
 2002d54:	d8800015 	stw	r2,0(sp)
 2002d58:	e13ffd17 	ldw	r4,-12(fp)
 2002d5c:	e17ffe17 	ldw	r5,-8(fp)
 2002d60:	01bfe804 	movi	r6,-96
 2002d64:	2002b900 	call	2002b90 <_Z9I2C_Writemmahh>
 2002d68:	e0bffb85 	stb	r2,-18(fp)
    if (bPass) // read        
 2002d6c:	e0bffb83 	ldbu	r2,-18(fp)
 2002d70:	1005003a 	cmpeq	r2,r2,zero
 2002d74:	1000081e 	bne	r2,zero,2002d98 <_Z15i2c_data_verifymmh+0xc0>
        bPass = I2C_Read(scl_base, sda_base, DeviceAddr, ControlAddr, &Data);
 2002d78:	e1ffff03 	ldbu	r7,-4(fp)
 2002d7c:	e0bffc04 	addi	r2,fp,-16
 2002d80:	d8800015 	stw	r2,0(sp)
 2002d84:	e13ffd17 	ldw	r4,-12(fp)
 2002d88:	e17ffe17 	ldw	r5,-8(fp)
 2002d8c:	01bfe804 	movi	r6,-96
 2002d90:	2002a1c0 	call	2002a1c <_Z8I2C_ReadmmahPh>
 2002d94:	e0bffb85 	stb	r2,-18(fp)
    if (bPass && (Data != TestData)) // verify
 2002d98:	e0bffb83 	ldbu	r2,-18(fp)
 2002d9c:	1005003a 	cmpeq	r2,r2,zero
 2002da0:	1000051e 	bne	r2,zero,2002db8 <_Z15i2c_data_verifymmh+0xe0>
 2002da4:	e0bffc03 	ldbu	r2,-16(fp)
 2002da8:	10c03fcc 	andi	r3,r2,255
 2002dac:	e0bffb03 	ldbu	r2,-20(fp)
 2002db0:	18800126 	beq	r3,r2,2002db8 <_Z15i2c_data_verifymmh+0xe0>
        bPass = FALSE;        
 2002db4:	e03ffb85 	stb	zero,-18(fp)
    // restore        
    if (bPass) // write back
 2002db8:	e0bffb83 	ldbu	r2,-18(fp)
 2002dbc:	1005003a 	cmpeq	r2,r2,zero
 2002dc0:	1000091e 	bne	r2,zero,2002de8 <_Z15i2c_data_verifymmh+0x110>
        bPass = I2C_Write(scl_base, sda_base, DeviceAddr, ControlAddr, OrgData);
 2002dc4:	e1ffff03 	ldbu	r7,-4(fp)
 2002dc8:	e0bffbc3 	ldbu	r2,-17(fp)
 2002dcc:	10803fcc 	andi	r2,r2,255
 2002dd0:	d8800015 	stw	r2,0(sp)
 2002dd4:	e13ffd17 	ldw	r4,-12(fp)
 2002dd8:	e17ffe17 	ldw	r5,-8(fp)
 2002ddc:	01bfe804 	movi	r6,-96
 2002de0:	2002b900 	call	2002b90 <_Z9I2C_Writemmahh>
 2002de4:	e0bffb85 	stb	r2,-18(fp)
    if (bPass) // read        
 2002de8:	e0bffb83 	ldbu	r2,-18(fp)
 2002dec:	1005003a 	cmpeq	r2,r2,zero
 2002df0:	1000081e 	bne	r2,zero,2002e14 <_Z15i2c_data_verifymmh+0x13c>
        bPass = I2C_Read(scl_base, sda_base, DeviceAddr, ControlAddr, &Data);
 2002df4:	e1ffff03 	ldbu	r7,-4(fp)
 2002df8:	e0bffc04 	addi	r2,fp,-16
 2002dfc:	d8800015 	stw	r2,0(sp)
 2002e00:	e13ffd17 	ldw	r4,-12(fp)
 2002e04:	e17ffe17 	ldw	r5,-8(fp)
 2002e08:	01bfe804 	movi	r6,-96
 2002e0c:	2002a1c0 	call	2002a1c <_Z8I2C_ReadmmahPh>
 2002e10:	e0bffb85 	stb	r2,-18(fp)
    if (bPass && (Data != OrgData)) // verify
 2002e14:	e0bffb83 	ldbu	r2,-18(fp)
 2002e18:	1005003a 	cmpeq	r2,r2,zero
 2002e1c:	1000061e 	bne	r2,zero,2002e38 <_Z15i2c_data_verifymmh+0x160>
 2002e20:	e0bffc03 	ldbu	r2,-16(fp)
 2002e24:	e0fffbc3 	ldbu	r3,-17(fp)
 2002e28:	11003fcc 	andi	r4,r2,255
 2002e2c:	18803fcc 	andi	r2,r3,255
 2002e30:	20800126 	beq	r4,r2,2002e38 <_Z15i2c_data_verifymmh+0x160>
        bPass = FALSE; 
 2002e34:	e03ffb85 	stb	zero,-18(fp)
        
    return bPass;
 2002e38:	e0bffb83 	ldbu	r2,-18(fp)
}
 2002e3c:	e037883a 	mov	sp,fp
 2002e40:	dfc00117 	ldw	ra,4(sp)
 2002e44:	df000017 	ldw	fp,0(sp)
 2002e48:	dec00204 	addi	sp,sp,8
 2002e4c:	f800283a 	ret

02002e50 <_Z10I2C_Verifymmm>:




bool I2C_Verify(alt_u32 scl_base, alt_u32 sda_base, alt_u32 size){
 2002e50:	defffa04 	addi	sp,sp,-24
 2002e54:	dfc00515 	stw	ra,20(sp)
 2002e58:	df000415 	stw	fp,16(sp)
 2002e5c:	df000404 	addi	fp,sp,16
 2002e60:	e13ffd15 	stw	r4,-12(fp)
 2002e64:	e17ffe15 	stw	r5,-8(fp)
 2002e68:	e1bfff15 	stw	r6,-4(fp)
    bool bPass;
    if (size <= 256){
 2002e6c:	e0bfff17 	ldw	r2,-4(fp)
 2002e70:	10804068 	cmpgeui	r2,r2,257
 2002e74:	1000101e 	bne	r2,zero,2002eb8 <_Z10I2C_Verifymmm+0x68>
        // less or equal to 256 Bytes
        bPass = i2c_data_verify(scl_base, sda_base, 0);
 2002e78:	e13ffd17 	ldw	r4,-12(fp)
 2002e7c:	e17ffe17 	ldw	r5,-8(fp)
 2002e80:	000d883a 	mov	r6,zero
 2002e84:	2002cd80 	call	2002cd8 <_Z15i2c_data_verifymmh>
 2002e88:	e0bffc05 	stb	r2,-16(fp)
        if (bPass)
 2002e8c:	e0bffc03 	ldbu	r2,-16(fp)
 2002e90:	1005003a 	cmpeq	r2,r2,zero
 2002e94:	1000091e 	bne	r2,zero,2002ebc <_Z10I2C_Verifymmm+0x6c>
            bPass = i2c_data_verify(scl_base, sda_base, size-1);
 2002e98:	e0bfff17 	ldw	r2,-4(fp)
 2002e9c:	10bfffc4 	addi	r2,r2,-1
 2002ea0:	11803fcc 	andi	r6,r2,255
 2002ea4:	e13ffd17 	ldw	r4,-12(fp)
 2002ea8:	e17ffe17 	ldw	r5,-8(fp)
 2002eac:	2002cd80 	call	2002cd8 <_Z15i2c_data_verifymmh>
 2002eb0:	e0bffc05 	stb	r2,-16(fp)
 2002eb4:	00000106 	br	2002ebc <_Z10I2C_Verifymmm+0x6c>
    }else{
        bPass = FALSE;
 2002eb8:	e03ffc05 	stb	zero,-16(fp)
        bPass = i2cl_data_verify(scl_base, sda_base, 0);
        if (bPass)
            bPass = i2cl_data_verify(scl_base, sda_base, size-1);
            */
    }
    return bPass;
 2002ebc:	e0bffc03 	ldbu	r2,-16(fp)
}
 2002ec0:	e037883a 	mov	sp,fp
 2002ec4:	dfc00117 	ldw	ra,4(sp)
 2002ec8:	df000017 	ldw	fp,0(sp)
 2002ecc:	dec00204 	addi	sp,sp,8
 2002ed0:	f800283a 	ret

02002ed4 <_Z18ADXL345_SPI_IdReadmPh>:
    }        
    
    return bPass;
}

bool ADXL345_SPI_IdRead(alt_u32 device_base, alt_u8 *pId){
 2002ed4:	defffb04 	addi	sp,sp,-20
 2002ed8:	dfc00415 	stw	ra,16(sp)
 2002edc:	df000315 	stw	fp,12(sp)
 2002ee0:	df000304 	addi	fp,sp,12
 2002ee4:	e13ffe15 	stw	r4,-8(fp)
 2002ee8:	e17fff15 	stw	r5,-4(fp)
    bool bPass;
    bPass = SPI_Read(device_base, ADXL345_REG_DEVID, pId);
 2002eec:	e13ffe17 	ldw	r4,-8(fp)
 2002ef0:	000b883a 	mov	r5,zero
 2002ef4:	e1bfff17 	ldw	r6,-4(fp)
 2002ef8:	20034e00 	call	20034e0 <_Z8SPI_ReadmhPh>
 2002efc:	e0bffd05 	stb	r2,-12(fp)
    
    return bPass;
 2002f00:	e0bffd03 	ldbu	r2,-12(fp)
}
 2002f04:	e037883a 	mov	sp,fp
 2002f08:	dfc00117 	ldw	ra,4(sp)
 2002f0c:	df000017 	ldw	fp,0(sp)
 2002f10:	dec00204 	addi	sp,sp,8
 2002f14:	f800283a 	ret

02002f18 <_Z23ADXL345_SPI_IsDataReadym>:
    
    return bDataReady;
        
}    

bool ADXL345_SPI_IsDataReady(alt_u32 device_base){
 2002f18:	defffc04 	addi	sp,sp,-16
 2002f1c:	dfc00315 	stw	ra,12(sp)
 2002f20:	df000215 	stw	fp,8(sp)
 2002f24:	df000204 	addi	fp,sp,8
 2002f28:	e13fff15 	stw	r4,-4(fp)
    bool bReady = FALSE;
 2002f2c:	e03ffe05 	stb	zero,-8(fp)
    alt_u8 data8;
    
    if (SPI_Read(device_base, ADXL345_REG_INT_SOURCE,&data8)){
 2002f30:	e1bffe44 	addi	r6,fp,-7
 2002f34:	e13fff17 	ldw	r4,-4(fp)
 2002f38:	01400c04 	movi	r5,48
 2002f3c:	20034e00 	call	20034e0 <_Z8SPI_ReadmhPh>
 2002f40:	10803fcc 	andi	r2,r2,255
 2002f44:	1005003a 	cmpeq	r2,r2,zero
 2002f48:	1000081e 	bne	r2,zero,2002f6c <_Z23ADXL345_SPI_IsDataReadym+0x54>
        if (data8 & XL345_DATAREADY)
 2002f4c:	e0bffe43 	ldbu	r2,-7(fp)
 2002f50:	10803fcc 	andi	r2,r2,255
 2002f54:	1080201c 	xori	r2,r2,128
 2002f58:	10bfe004 	addi	r2,r2,-128
 2002f5c:	1004403a 	cmpge	r2,r2,zero
 2002f60:	1000021e 	bne	r2,zero,2002f6c <_Z23ADXL345_SPI_IsDataReadym+0x54>
            bReady = TRUE;
 2002f64:	00800044 	movi	r2,1
 2002f68:	e0bffe05 	stb	r2,-8(fp)
    }            
    
    return bReady;
 2002f6c:	e0bffe03 	ldbu	r2,-8(fp)
}
 2002f70:	e037883a 	mov	sp,fp
 2002f74:	dfc00117 	ldw	ra,4(sp)
 2002f78:	df000017 	ldw	fp,0(sp)
 2002f7c:	dec00204 	addi	sp,sp,8
 2002f80:	f800283a 	ret

02002f84 <_Z20ADXL345_SPI_XYZ_ReadmPt>:



bool ADXL345_SPI_XYZ_Read(alt_u32 device_base, alt_u16 szData16[3]){
 2002f84:	defffa04 	addi	sp,sp,-24
 2002f88:	dfc00515 	stw	ra,20(sp)
 2002f8c:	df000415 	stw	fp,16(sp)
 2002f90:	df000404 	addi	fp,sp,16
 2002f94:	e13ffe15 	stw	r4,-8(fp)
 2002f98:	e17fff15 	stw	r5,-4(fp)
    bool bPass;
    alt_u8 szData8[6];
    bPass = SPI_MultipleRead(device_base, 0x32, (alt_u8 *)&szData8, sizeof(szData8));
 2002f9c:	e1bffc44 	addi	r6,fp,-15
 2002fa0:	e13ffe17 	ldw	r4,-8(fp)
 2002fa4:	01400c84 	movi	r5,50
 2002fa8:	01c00184 	movi	r7,6
 2002fac:	200335c0 	call	200335c <_Z16SPI_MultipleReadmhPhh>
 2002fb0:	e0bffc05 	stb	r2,-16(fp)
    if (bPass){
 2002fb4:	e0bffc03 	ldbu	r2,-16(fp)
 2002fb8:	1005003a 	cmpeq	r2,r2,zero
 2002fbc:	10001e1e 	bne	r2,zero,2003038 <_Z20ADXL345_SPI_XYZ_ReadmPt+0xb4>
        szData16[0] = (szData8[1] << 8) | szData8[0]; 
 2002fc0:	e0bffc83 	ldbu	r2,-14(fp)
 2002fc4:	10803fcc 	andi	r2,r2,255
 2002fc8:	1004923a 	slli	r2,r2,8
 2002fcc:	1007883a 	mov	r3,r2
 2002fd0:	e0bffc43 	ldbu	r2,-15(fp)
 2002fd4:	10803fcc 	andi	r2,r2,255
 2002fd8:	1884b03a 	or	r2,r3,r2
 2002fdc:	1007883a 	mov	r3,r2
 2002fe0:	e0bfff17 	ldw	r2,-4(fp)
 2002fe4:	10c0000d 	sth	r3,0(r2)
        szData16[1] = (szData8[3] << 8) | szData8[2];
 2002fe8:	e0bfff17 	ldw	r2,-4(fp)
 2002fec:	11000084 	addi	r4,r2,2
 2002ff0:	e0bffd03 	ldbu	r2,-12(fp)
 2002ff4:	10803fcc 	andi	r2,r2,255
 2002ff8:	1004923a 	slli	r2,r2,8
 2002ffc:	1007883a 	mov	r3,r2
 2003000:	e0bffcc3 	ldbu	r2,-13(fp)
 2003004:	10803fcc 	andi	r2,r2,255
 2003008:	1884b03a 	or	r2,r3,r2
 200300c:	2080000d 	sth	r2,0(r4)
        szData16[2] = (szData8[5] << 8) | szData8[4];
 2003010:	e0bfff17 	ldw	r2,-4(fp)
 2003014:	11000104 	addi	r4,r2,4
 2003018:	e0bffd83 	ldbu	r2,-10(fp)
 200301c:	10803fcc 	andi	r2,r2,255
 2003020:	1004923a 	slli	r2,r2,8
 2003024:	1007883a 	mov	r3,r2
 2003028:	e0bffd43 	ldbu	r2,-11(fp)
 200302c:	10803fcc 	andi	r2,r2,255
 2003030:	1884b03a 	or	r2,r3,r2
 2003034:	2080000d 	sth	r2,0(r4)
    }        
    
    return bPass;
 2003038:	e0bffc03 	ldbu	r2,-16(fp)
}
 200303c:	e037883a 	mov	sp,fp
 2003040:	dfc00117 	ldw	ra,4(sp)
 2003044:	df000017 	ldw	fp,0(sp)
 2003048:	dec00204 	addi	sp,sp,8
 200304c:	f800283a 	ret

02003050 <_Z16ADXL345_SPI_Initm>:

#define DATA_READY_TIMEOUT  (alt_ticks_per_second()/3)



bool ADXL345_SPI_Init(alt_u32 device_base){
 2003050:	defffc04 	addi	sp,sp,-16
 2003054:	dfc00315 	stw	ra,12(sp)
 2003058:	df000215 	stw	fp,8(sp)
 200305c:	df000204 	addi	fp,sp,8
 2003060:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess;
    
    // clear fifo
    SPI_Init(device_base);
 2003064:	e13fff17 	ldw	r4,-4(fp)
 2003068:	20033100 	call	2003310 <_Z8SPI_Initm>
   
    // 3-wire spi
    bSuccess = SPI_Write(device_base, ADXL345_REG_DATA_FORMAT, XL345_SPI3WIRE);
 200306c:	e13fff17 	ldw	r4,-4(fp)
 2003070:	01400c44 	movi	r5,49
 2003074:	01801004 	movi	r6,64
 2003078:	200368c0 	call	200368c <_Z9SPI_Writemhh>
 200307c:	e0bffe05 	stb	r2,-8(fp)
 
    // clear fifo   
    SPI_Init(device_base);
 2003080:	e13fff17 	ldw	r4,-4(fp)
 2003084:	20033100 	call	2003310 <_Z8SPI_Initm>
        
    //Output Data Rate: 40Hz
    if (bSuccess){
 2003088:	e0bffe03 	ldbu	r2,-8(fp)
 200308c:	1005003a 	cmpeq	r2,r2,zero
 2003090:	1000051e 	bne	r2,zero,20030a8 <_Z16ADXL345_SPI_Initm+0x58>
        bSuccess = SPI_Write(device_base, ADXL345_REG_BW_RATE, XL345_RATE_400); // 400 MHZ
 2003094:	e13fff17 	ldw	r4,-4(fp)
 2003098:	01400b04 	movi	r5,44
 200309c:	01800304 	movi	r6,12
 20030a0:	200368c0 	call	200368c <_Z9SPI_Writemhh>
 20030a4:	e0bffe05 	stb	r2,-8(fp)
    }
    
            
        
    //INT_Enable: Data Ready
    if (bSuccess){   
 20030a8:	e0bffe03 	ldbu	r2,-8(fp)
 20030ac:	1005003a 	cmpeq	r2,r2,zero
 20030b0:	1000051e 	bne	r2,zero,20030c8 <_Z16ADXL345_SPI_Initm+0x78>
        bSuccess = SPI_Write(device_base, ADXL345_REG_INT_ENALBE, XL345_DATAREADY);
 20030b4:	e13fff17 	ldw	r4,-4(fp)
 20030b8:	01400b84 	movi	r5,46
 20030bc:	01802004 	movi	r6,128
 20030c0:	200368c0 	call	200368c <_Z9SPI_Writemhh>
 20030c4:	e0bffe05 	stb	r2,-8(fp)
    }
    
    // stop measure
    if (bSuccess){
 20030c8:	e0bffe03 	ldbu	r2,-8(fp)
 20030cc:	1005003a 	cmpeq	r2,r2,zero
 20030d0:	1000051e 	bne	r2,zero,20030e8 <_Z16ADXL345_SPI_Initm+0x98>
        bSuccess = SPI_Write(device_base, ADXL345_REG_POWER_CTL, XL345_STANDBY);
 20030d4:	e13fff17 	ldw	r4,-4(fp)
 20030d8:	01400b44 	movi	r5,45
 20030dc:	000d883a 	mov	r6,zero
 20030e0:	200368c0 	call	200368c <_Z9SPI_Writemhh>
 20030e4:	e0bffe05 	stb	r2,-8(fp)
    }

    // start measure
    if (bSuccess){
 20030e8:	e0bffe03 	ldbu	r2,-8(fp)
 20030ec:	1005003a 	cmpeq	r2,r2,zero
 20030f0:	1000051e 	bne	r2,zero,2003108 <_Z16ADXL345_SPI_Initm+0xb8>
        bSuccess = SPI_Write(device_base, ADXL345_REG_POWER_CTL, XL345_MEASURE);
 20030f4:	e13fff17 	ldw	r4,-4(fp)
 20030f8:	01400b44 	movi	r5,45
 20030fc:	01800204 	movi	r6,8
 2003100:	200368c0 	call	200368c <_Z9SPI_Writemhh>
 2003104:	e0bffe05 	stb	r2,-8(fp)
        
    }
    
            
    return bSuccess;    
 2003108:	e0bffe03 	ldbu	r2,-8(fp)
        
}
 200310c:	e037883a 	mov	sp,fp
 2003110:	dfc00117 	ldw	ra,4(sp)
 2003114:	df000017 	ldw	fp,0(sp)
 2003118:	dec00204 	addi	sp,sp,8
 200311c:	f800283a 	ret

02003120 <_Z25ADXL345_SPI_WaitDataReadym>:


    
bool ADXL345_SPI_WaitDataReady(alt_u32 device_base){
 2003120:	defff904 	addi	sp,sp,-28
 2003124:	dfc00615 	stw	ra,24(sp)
 2003128:	df000515 	stw	fp,20(sp)
 200312c:	dc000415 	stw	r16,16(sp)
 2003130:	df000404 	addi	fp,sp,16
 2003134:	e13ffe15 	stw	r4,-8(fp)
 2003138:	008080b4 	movhi	r2,514
 200313c:	10be0504 	addi	r2,r2,-2028
 2003140:	10800017 	ldw	r2,0(r2)
    bool bDataReady;
    alt_u32 TimeStart;
    
    TimeStart = alt_nticks();
 2003144:	e0bffc15 	stw	r2,-16(fp)
    do{
        bDataReady = ADXL345_SPI_IsDataReady(device_base);
 2003148:	e13ffe17 	ldw	r4,-8(fp)
 200314c:	2002f180 	call	2002f18 <_Z23ADXL345_SPI_IsDataReadym>
 2003150:	e0bffd05 	stb	r2,-12(fp)
        if (!bDataReady)
 2003154:	e0bffd03 	ldbu	r2,-12(fp)
 2003158:	1080005c 	xori	r2,r2,1
 200315c:	10803fcc 	andi	r2,r2,255
 2003160:	1005003a 	cmpeq	r2,r2,zero
 2003164:	1000021e 	bne	r2,zero,2003170 <_Z25ADXL345_SPI_WaitDataReadym+0x50>
            usleep(500); 
 2003168:	01007d04 	movi	r4,500
 200316c:	20181680 	call	2018168 <usleep>
bool ADXL345_SPI_WaitDataReady(alt_u32 device_base){
    bool bDataReady;
    alt_u32 TimeStart;
    
    TimeStart = alt_nticks();
    do{
 2003170:	e0bffd03 	ldbu	r2,-12(fp)
 2003174:	1080005c 	xori	r2,r2,1
 2003178:	1080005c 	xori	r2,r2,1
 200317c:	10803fcc 	andi	r2,r2,255
 2003180:	1004c03a 	cmpne	r2,r2,zero
 2003184:	1000101e 	bne	r2,zero,20031c8 <_Z25ADXL345_SPI_WaitDataReadym+0xa8>
 2003188:	008080b4 	movhi	r2,514
 200318c:	10be0504 	addi	r2,r2,-2028
 2003190:	10800017 	ldw	r2,0(r2)
 2003194:	1007883a 	mov	r3,r2
 2003198:	e0bffc17 	ldw	r2,-16(fp)
 200319c:	18a1c83a 	sub	r16,r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 20031a0:	008080b4 	movhi	r2,514
 20031a4:	10be0404 	addi	r2,r2,-2032
 20031a8:	10800017 	ldw	r2,0(r2)
 20031ac:	1009883a 	mov	r4,r2
 20031b0:	014000c4 	movi	r5,3
 20031b4:	200d0bc0 	call	200d0bc <__udivsi3>
 20031b8:	8080032e 	bgeu	r16,r2,20031c8 <_Z25ADXL345_SPI_WaitDataReadym+0xa8>
 20031bc:	00800044 	movi	r2,1
 20031c0:	e0bfff05 	stb	r2,-4(fp)
 20031c4:	00000106 	br	20031cc <_Z25ADXL345_SPI_WaitDataReadym+0xac>
 20031c8:	e03fff05 	stb	zero,-4(fp)
 20031cc:	e0bfff03 	ldbu	r2,-4(fp)
 20031d0:	10803fcc 	andi	r2,r2,255
 20031d4:	1004c03a 	cmpne	r2,r2,zero
 20031d8:	103fdb1e 	bne	r2,zero,2003148 <_Z25ADXL345_SPI_WaitDataReadym+0x28>
        bDataReady = ADXL345_SPI_IsDataReady(device_base);
        if (!bDataReady)
            usleep(500); 
    }while (!bDataReady && ( (alt_nticks() - TimeStart) < DATA_READY_TIMEOUT) );
    
    return bDataReady;
 20031dc:	e0bffd03 	ldbu	r2,-12(fp)
        
}    
 20031e0:	e037883a 	mov	sp,fp
 20031e4:	dfc00217 	ldw	ra,8(sp)
 20031e8:	df000117 	ldw	fp,4(sp)
 20031ec:	dc000017 	ldw	r16,0(sp)
 20031f0:	dec00304 	addi	sp,sp,12
 20031f4:	f800283a 	ret

020031f8 <_Z8ADC_Readh>:
#include "adc_spi_read.h"

#define START_FLAG  0x8000
#define DONE_FLAG   0x8000

alt_u16 ADC_Read(alt_u8 NextChannel){
 20031f8:	defffa04 	addi	sp,sp,-24
 20031fc:	df000515 	stw	fp,20(sp)
 2003200:	df000504 	addi	fp,sp,20
 2003204:	e13fff05 	stb	r4,-4(fp)
    alt_u16 Data16, DigitalValue = 0;
 2003208:	e03ffd8d 	sth	zero,-10(fp)
    bool bDone = FALSE;
 200320c:	e03ffd05 	stb	zero,-12(fp)
    const int nMaxWait = 1000;
 2003210:	0080fa04 	movi	r2,1000
 2003214:	e0bffc15 	stw	r2,-16(fp)
    int nWaitCnt = 0;
 2003218:	e03ffb15 	stw	zero,-20(fp)
    
    // start
    Data16 = NextChannel;
 200321c:	e0bfff03 	ldbu	r2,-4(fp)
 2003220:	e0bffe0d 	sth	r2,-8(fp)
    IOWR(ADC_SPI_READ_BASE, 0, Data16);
 2003224:	e0fffe0b 	ldhu	r3,-8(fp)
 2003228:	00818034 	movhi	r2,1536
 200322c:	10845e04 	addi	r2,r2,4472
 2003230:	10c00035 	stwio	r3,0(r2)
    Data16 |= START_FLAG;
 2003234:	e0fffe0b 	ldhu	r3,-8(fp)
 2003238:	00a00004 	movi	r2,-32768
 200323c:	1884b03a 	or	r2,r3,r2
 2003240:	e0bffe0d 	sth	r2,-8(fp)
    IOWR(ADC_SPI_READ_BASE, 0, Data16);
 2003244:	e0fffe0b 	ldhu	r3,-8(fp)
 2003248:	00818034 	movhi	r2,1536
 200324c:	10845e04 	addi	r2,r2,4472
 2003250:	10c00035 	stwio	r3,0(r2)
    //usleep(1000); // wait 10ms
    
    // wait done
    while(!bDone && nWaitCnt++ <= nMaxWait){
 2003254:	00000806 	br	2003278 <_Z8ADC_Readh+0x80>
        Data16 = IORD(ADC_SPI_READ_BASE,0);
 2003258:	00818034 	movhi	r2,1536
 200325c:	10845e04 	addi	r2,r2,4472
 2003260:	10800037 	ldwio	r2,0(r2)
 2003264:	e0bffe0d 	sth	r2,-8(fp)
        bDone = (Data16 & DONE_FLAG)?TRUE:FALSE;
 2003268:	e0bffe0b 	ldhu	r2,-8(fp)
 200326c:	10bfffcc 	andi	r2,r2,65535
 2003270:	1004d3fa 	srli	r2,r2,15
 2003274:	e0bffd05 	stb	r2,-12(fp)
    Data16 |= START_FLAG;
    IOWR(ADC_SPI_READ_BASE, 0, Data16);
    //usleep(1000); // wait 10ms
    
    // wait done
    while(!bDone && nWaitCnt++ <= nMaxWait){
 2003278:	e0bffd03 	ldbu	r2,-12(fp)
 200327c:	1080005c 	xori	r2,r2,1
 2003280:	1080005c 	xori	r2,r2,1
 2003284:	10803fcc 	andi	r2,r2,255
 2003288:	1004c03a 	cmpne	r2,r2,zero
 200328c:	10000d1e 	bne	r2,zero,20032c4 <_Z8ADC_Readh+0xcc>
 2003290:	e0bffb17 	ldw	r2,-20(fp)
 2003294:	1080fa50 	cmplti	r2,r2,1001
 2003298:	1007883a 	mov	r3,r2
 200329c:	e0bffb17 	ldw	r2,-20(fp)
 20032a0:	10800044 	addi	r2,r2,1
 20032a4:	e0bffb15 	stw	r2,-20(fp)
 20032a8:	1880005c 	xori	r2,r3,1
 20032ac:	10803fcc 	andi	r2,r2,255
 20032b0:	1004c03a 	cmpne	r2,r2,zero
 20032b4:	1000031e 	bne	r2,zero,20032c4 <_Z8ADC_Readh+0xcc>
 20032b8:	00800044 	movi	r2,1
 20032bc:	e0bfff45 	stb	r2,-3(fp)
 20032c0:	00000106 	br	20032c8 <_Z8ADC_Readh+0xd0>
 20032c4:	e03fff45 	stb	zero,-3(fp)
 20032c8:	e0bfff43 	ldbu	r2,-3(fp)
 20032cc:	10803fcc 	andi	r2,r2,255
 20032d0:	1004c03a 	cmpne	r2,r2,zero
 20032d4:	103fe01e 	bne	r2,zero,2003258 <_Z8ADC_Readh+0x60>
        Data16 = IORD(ADC_SPI_READ_BASE,0);
        bDone = (Data16 & DONE_FLAG)?TRUE:FALSE;
    }
    
    if (bDone)
 20032d8:	e0bffd03 	ldbu	r2,-12(fp)
 20032dc:	1005003a 	cmpeq	r2,r2,zero
 20032e0:	1000031e 	bne	r2,zero,20032f0 <_Z8ADC_Readh+0xf8>
        DigitalValue = Data16 & 0xFFF; // 12 bits
 20032e4:	e0bffe0b 	ldhu	r2,-8(fp)
 20032e8:	1083ffcc 	andi	r2,r2,4095
 20032ec:	e0bffd8d 	sth	r2,-10(fp)
    
    // stop
    IOWR(ADC_SPI_READ_BASE, 0, 0);
 20032f0:	00818034 	movhi	r2,1536
 20032f4:	10845e04 	addi	r2,r2,4472
 20032f8:	10000035 	stwio	zero,0(r2)
    
    return DigitalValue;
 20032fc:	e0bffd8b 	ldhu	r2,-10(fp)
}
 2003300:	e037883a 	mov	sp,fp
 2003304:	df000017 	ldw	fp,0(sp)
 2003308:	dec00104 	addi	sp,sp,4
 200330c:	f800283a 	ret

02003310 <_Z8SPI_Initm>:

typedef enum{
        SPI_STATUS_FLAG_DONE = 0x01
}SPI_STATUS_FLAG;

void SPI_Init(alt_u32 spi_base){
 2003310:	defffe04 	addi	sp,sp,-8
 2003314:	df000115 	stw	fp,4(sp)
 2003318:	df000104 	addi	fp,sp,4
 200331c:	e13fff15 	stw	r4,-4(fp)
    // clear fifo
    IOWR(spi_base, SPI_REG_CTRL_STATUS, 0);
 2003320:	e0bfff17 	ldw	r2,-4(fp)
 2003324:	10800104 	addi	r2,r2,4
 2003328:	10000035 	stwio	zero,0(r2)
    IOWR(spi_base, SPI_REG_CTRL_STATUS, SPI_FLAG_CLEAR_FIFO);
 200332c:	e0bfff17 	ldw	r2,-4(fp)
 2003330:	10800104 	addi	r2,r2,4
 2003334:	1007883a 	mov	r3,r2
 2003338:	00800104 	movi	r2,4
 200333c:	18800035 	stwio	r2,0(r3)
    IOWR(spi_base, SPI_REG_CTRL_STATUS, 0);
 2003340:	e0bfff17 	ldw	r2,-4(fp)
 2003344:	10800104 	addi	r2,r2,4
 2003348:	10000035 	stwio	zero,0(r2)
   
}
 200334c:	e037883a 	mov	sp,fp
 2003350:	df000017 	ldw	fp,0(sp)
 2003354:	dec00104 	addi	sp,sp,4
 2003358:	f800283a 	ret

0200335c <_Z16SPI_MultipleReadmhPhh>:

bool SPI_Write(alt_u32 spi_base, alt_u8 RegIndex, alt_u8 Value){
    return SPI_MultipleWrite(spi_base, RegIndex, &Value, 1);
}    

bool SPI_MultipleRead(alt_u32 spi_base, alt_u8 RegIndex, alt_u8 szBuf[], alt_u8 nByteNum){
 200335c:	defff404 	addi	sp,sp,-48
 2003360:	dfc00b15 	stw	ra,44(sp)
 2003364:	df000a15 	stw	fp,40(sp)
 2003368:	df000a04 	addi	fp,sp,40
 200336c:	e13ffa15 	stw	r4,-24(fp)
 2003370:	e1bffc15 	stw	r6,-16(fp)
 2003374:	e17ffb05 	stb	r5,-20(fp)
 2003378:	e1fffd05 	stb	r7,-12(fp)
    alt_u8 Status, Value8;
    const int nMaxTry = 100;
 200337c:	00801904 	movi	r2,100
 2003380:	e0bff815 	stw	r2,-32(fp)
    int nTryCnt = 0;
 2003384:	e03ff715 	stw	zero,-36(fp)
    int i;
    
    // make sure processs is stoped, and set read flag
    IOWR(spi_base, SPI_REG_CTRL_STATUS, SPI_FLGA_REG_READ);
 2003388:	e0bffa17 	ldw	r2,-24(fp)
 200338c:	10800104 	addi	r2,r2,4
 2003390:	1007883a 	mov	r3,r2
 2003394:	00800084 	movi	r2,2
 2003398:	18800035 	stwio	r2,0(r3)
    

    // set register index
    IOWR(spi_base, SPI_REG_INDEX, RegIndex);
 200339c:	e0bffa17 	ldw	r2,-24(fp)
 20033a0:	10800204 	addi	r2,r2,8
 20033a4:	e0fffb03 	ldbu	r3,-20(fp)
 20033a8:	10c00035 	stwio	r3,0(r2)

    // set read byte count
    IOWR(spi_base, SPI_REG_READ_NUM, nByteNum-1);
 20033ac:	e0bffa17 	ldw	r2,-24(fp)
 20033b0:	11000304 	addi	r4,r2,12
 20033b4:	e0bffd03 	ldbu	r2,-12(fp)
 20033b8:	10ffffc4 	addi	r3,r2,-1
 20033bc:	2005883a 	mov	r2,r4
 20033c0:	10c00035 	stwio	r3,0(r2)
    
    // start
    IOWR(spi_base, SPI_REG_CTRL_STATUS, SPI_FLAG_STATR | SPI_FLGA_REG_READ);
 20033c4:	e0bffa17 	ldw	r2,-24(fp)
 20033c8:	10800104 	addi	r2,r2,4
 20033cc:	1007883a 	mov	r3,r2
 20033d0:	008000c4 	movi	r2,3
 20033d4:	18800035 	stwio	r2,0(r3)
    
    // check status
    usleep(10);
 20033d8:	01000284 	movi	r4,10
 20033dc:	20181680 	call	2018168 <usleep>
    do{    
        Status = IORD(spi_base, SPI_REG_CTRL_STATUS);
 20033e0:	e0bffa17 	ldw	r2,-24(fp)
 20033e4:	10800104 	addi	r2,r2,4
 20033e8:	10800037 	ldwio	r2,0(r2)
 20033ec:	e0bff945 	stb	r2,-27(fp)
    // start
    IOWR(spi_base, SPI_REG_CTRL_STATUS, SPI_FLAG_STATR | SPI_FLGA_REG_READ);
    
    // check status
    usleep(10);
    do{    
 20033f0:	e0bff943 	ldbu	r2,-27(fp)
 20033f4:	1080004c 	andi	r2,r2,1
 20033f8:	1080005c 	xori	r2,r2,1
 20033fc:	1080005c 	xori	r2,r2,1
 2003400:	10803fcc 	andi	r2,r2,255
 2003404:	1004c03a 	cmpne	r2,r2,zero
 2003408:	10000d1e 	bne	r2,zero,2003440 <_Z16SPI_MultipleReadmhPhh+0xe4>
 200340c:	e0bff717 	ldw	r2,-36(fp)
 2003410:	10801910 	cmplti	r2,r2,100
 2003414:	1007883a 	mov	r3,r2
 2003418:	e0bff717 	ldw	r2,-36(fp)
 200341c:	10800044 	addi	r2,r2,1
 2003420:	e0bff715 	stw	r2,-36(fp)
 2003424:	1880005c 	xori	r2,r3,1
 2003428:	10803fcc 	andi	r2,r2,255
 200342c:	1004c03a 	cmpne	r2,r2,zero
 2003430:	1000031e 	bne	r2,zero,2003440 <_Z16SPI_MultipleReadmhPhh+0xe4>
 2003434:	00800044 	movi	r2,1
 2003438:	e0bfff05 	stb	r2,-4(fp)
 200343c:	00000106 	br	2003444 <_Z16SPI_MultipleReadmhPhh+0xe8>
 2003440:	e03fff05 	stb	zero,-4(fp)
 2003444:	e0bfff03 	ldbu	r2,-4(fp)
 2003448:	10803fcc 	andi	r2,r2,255
 200344c:	1004c03a 	cmpne	r2,r2,zero
 2003450:	103fe31e 	bne	r2,zero,20033e0 <_Z16SPI_MultipleReadmhPhh+0x84>
        Status = IORD(spi_base, SPI_REG_CTRL_STATUS);
    }while (!(Status & SPI_STATUS_FLAG_DONE) && (nTryCnt++ < nMaxTry));
    
    IOWR(spi_base, SPI_REG_CTRL_STATUS, 0);  //stop
 2003454:	e0bffa17 	ldw	r2,-24(fp)
 2003458:	10800104 	addi	r2,r2,4
 200345c:	10000035 	stwio	zero,0(r2)
    
    if (Status & SPI_STATUS_FLAG_DONE){
 2003460:	e0bff943 	ldbu	r2,-27(fp)
 2003464:	1080004c 	andi	r2,r2,1
 2003468:	10803fcc 	andi	r2,r2,255
 200346c:	1005003a 	cmpeq	r2,r2,zero
 2003470:	1000141e 	bne	r2,zero,20034c4 <_Z16SPI_MultipleReadmhPhh+0x168>
        for(i=0;i<nByteNum;i++){
 2003474:	e03ff615 	stw	zero,-40(fp)
 2003478:	00000c06 	br	20034ac <_Z16SPI_MultipleReadmhPhh+0x150>
            Value8 = IORD(spi_base, SPI_REG_DATA);
 200347c:	e0bffa17 	ldw	r2,-24(fp)
 2003480:	10800037 	ldwio	r2,0(r2)
 2003484:	e0bff905 	stb	r2,-28(fp)
            szBuf[i] = Value8;
 2003488:	e0bff617 	ldw	r2,-40(fp)
 200348c:	1007883a 	mov	r3,r2
 2003490:	e0bffc17 	ldw	r2,-16(fp)
 2003494:	1887883a 	add	r3,r3,r2
 2003498:	e0bff903 	ldbu	r2,-28(fp)
 200349c:	18800005 	stb	r2,0(r3)
    }while (!(Status & SPI_STATUS_FLAG_DONE) && (nTryCnt++ < nMaxTry));
    
    IOWR(spi_base, SPI_REG_CTRL_STATUS, 0);  //stop
    
    if (Status & SPI_STATUS_FLAG_DONE){
        for(i=0;i<nByteNum;i++){
 20034a0:	e0bff617 	ldw	r2,-40(fp)
 20034a4:	10800044 	addi	r2,r2,1
 20034a8:	e0bff615 	stw	r2,-40(fp)
 20034ac:	e0fffd03 	ldbu	r3,-12(fp)
 20034b0:	e0bff617 	ldw	r2,-40(fp)
 20034b4:	10fff116 	blt	r2,r3,200347c <_Z16SPI_MultipleReadmhPhh+0x120>
            Value8 = IORD(spi_base, SPI_REG_DATA);
            szBuf[i] = Value8;
        }
        return TRUE;
 20034b8:	00800044 	movi	r2,1
 20034bc:	e0bffe15 	stw	r2,-8(fp)
 20034c0:	00000106 	br	20034c8 <_Z16SPI_MultipleReadmhPhh+0x16c>
    }        
    return FALSE;
 20034c4:	e03ffe15 	stw	zero,-8(fp)
 20034c8:	e0bffe17 	ldw	r2,-8(fp)
}
 20034cc:	e037883a 	mov	sp,fp
 20034d0:	dfc00117 	ldw	ra,4(sp)
 20034d4:	df000017 	ldw	fp,0(sp)
 20034d8:	dec00204 	addi	sp,sp,8
 20034dc:	f800283a 	ret

020034e0 <_Z8SPI_ReadmhPh>:

bool SPI_Read(alt_u32 spi_base, alt_u8 RegIndex, alt_u8 *pBuf){
 20034e0:	defffb04 	addi	sp,sp,-20
 20034e4:	dfc00415 	stw	ra,16(sp)
 20034e8:	df000315 	stw	fp,12(sp)
 20034ec:	df000304 	addi	fp,sp,12
 20034f0:	e13ffd15 	stw	r4,-12(fp)
 20034f4:	e1bfff15 	stw	r6,-4(fp)
 20034f8:	e17ffe05 	stb	r5,-8(fp)
    return SPI_MultipleRead(spi_base, RegIndex, pBuf, 1);
 20034fc:	e17ffe03 	ldbu	r5,-8(fp)
 2003500:	e13ffd17 	ldw	r4,-12(fp)
 2003504:	e1bfff17 	ldw	r6,-4(fp)
 2003508:	01c00044 	movi	r7,1
 200350c:	200335c0 	call	200335c <_Z16SPI_MultipleReadmhPhh>
 2003510:	10803fcc 	andi	r2,r2,255
}
 2003514:	e037883a 	mov	sp,fp
 2003518:	dfc00117 	ldw	ra,4(sp)
 200351c:	df000017 	ldw	fp,0(sp)
 2003520:	dec00204 	addi	sp,sp,8
 2003524:	f800283a 	ret

02003528 <_Z17SPI_MultipleWritemhPhh>:
    IOWR(spi_base, SPI_REG_CTRL_STATUS, 0);
   
}


bool SPI_MultipleWrite(alt_u32 spi_base, alt_u8 RegIndex, alt_u8 szData[], alt_u8 nByteNum){
 2003528:	defff404 	addi	sp,sp,-48
 200352c:	dfc00b15 	stw	ra,44(sp)
 2003530:	df000a15 	stw	fp,40(sp)
 2003534:	df000a04 	addi	fp,sp,40
 2003538:	e13ffa15 	stw	r4,-24(fp)
 200353c:	e1bffc15 	stw	r6,-16(fp)
 2003540:	e17ffb05 	stb	r5,-20(fp)
 2003544:	e1fffd05 	stb	r7,-12(fp)
    alt_u8 Status;
    const int nMaxTry = 100;
 2003548:	00801904 	movi	r2,100
 200354c:	e0bff815 	stw	r2,-32(fp)
    int nTryCnt = 0;
 2003550:	e03ff715 	stw	zero,-36(fp)
    int i;
    
    // make sure processs is stoped, and set write flag
    IOWR(spi_base, SPI_REG_CTRL_STATUS, 0);
 2003554:	e0bffa17 	ldw	r2,-24(fp)
 2003558:	10800104 	addi	r2,r2,4
 200355c:	10000035 	stwio	zero,0(r2)
    
    // set register index
    IOWR(spi_base, SPI_REG_INDEX, RegIndex);
 2003560:	e0bffa17 	ldw	r2,-24(fp)
 2003564:	10800204 	addi	r2,r2,8
 2003568:	e0fffb03 	ldbu	r3,-20(fp)
 200356c:	10c00035 	stwio	r3,0(r2)
    
    // write data to fifo
    for(i=0;i<nByteNum;i++)
 2003570:	e03ff615 	stw	zero,-40(fp)
 2003574:	00000c06 	br	20035a8 <_Z17SPI_MultipleWritemhPhh+0x80>
        IOWR(spi_base, SPI_REG_DATA, szData[i]);
 2003578:	e13ffa17 	ldw	r4,-24(fp)
 200357c:	e0bff617 	ldw	r2,-40(fp)
 2003580:	1007883a 	mov	r3,r2
 2003584:	e0bffc17 	ldw	r2,-16(fp)
 2003588:	1885883a 	add	r2,r3,r2
 200358c:	10800003 	ldbu	r2,0(r2)
 2003590:	10c03fcc 	andi	r3,r2,255
 2003594:	2005883a 	mov	r2,r4
 2003598:	10c00035 	stwio	r3,0(r2)
    
    // set register index
    IOWR(spi_base, SPI_REG_INDEX, RegIndex);
    
    // write data to fifo
    for(i=0;i<nByteNum;i++)
 200359c:	e0bff617 	ldw	r2,-40(fp)
 20035a0:	10800044 	addi	r2,r2,1
 20035a4:	e0bff615 	stw	r2,-40(fp)
 20035a8:	e0fffd03 	ldbu	r3,-12(fp)
 20035ac:	e0bff617 	ldw	r2,-40(fp)
 20035b0:	10fff116 	blt	r2,r3,2003578 <_Z17SPI_MultipleWritemhPhh+0x50>
        IOWR(spi_base, SPI_REG_DATA, szData[i]);
    
    // start
    IOWR(spi_base, SPI_REG_CTRL_STATUS, SPI_FLAG_STATR);
 20035b4:	e0bffa17 	ldw	r2,-24(fp)
 20035b8:	10800104 	addi	r2,r2,4
 20035bc:	1007883a 	mov	r3,r2
 20035c0:	00800044 	movi	r2,1
 20035c4:	18800035 	stwio	r2,0(r3)
    
    // check status
    usleep(10);
 20035c8:	01000284 	movi	r4,10
 20035cc:	20181680 	call	2018168 <usleep>
    do{    
        Status = IORD(spi_base, SPI_REG_CTRL_STATUS);
 20035d0:	e0bffa17 	ldw	r2,-24(fp)
 20035d4:	10800104 	addi	r2,r2,4
 20035d8:	10800037 	ldwio	r2,0(r2)
 20035dc:	e0bff905 	stb	r2,-28(fp)
    // start
    IOWR(spi_base, SPI_REG_CTRL_STATUS, SPI_FLAG_STATR);
    
    // check status
    usleep(10);
    do{    
 20035e0:	e0bff903 	ldbu	r2,-28(fp)
 20035e4:	1080004c 	andi	r2,r2,1
 20035e8:	1080005c 	xori	r2,r2,1
 20035ec:	1080005c 	xori	r2,r2,1
 20035f0:	10803fcc 	andi	r2,r2,255
 20035f4:	1004c03a 	cmpne	r2,r2,zero
 20035f8:	10000d1e 	bne	r2,zero,2003630 <_Z17SPI_MultipleWritemhPhh+0x108>
 20035fc:	e0bff717 	ldw	r2,-36(fp)
 2003600:	10801910 	cmplti	r2,r2,100
 2003604:	1007883a 	mov	r3,r2
 2003608:	e0bff717 	ldw	r2,-36(fp)
 200360c:	10800044 	addi	r2,r2,1
 2003610:	e0bff715 	stw	r2,-36(fp)
 2003614:	1880005c 	xori	r2,r3,1
 2003618:	10803fcc 	andi	r2,r2,255
 200361c:	1004c03a 	cmpne	r2,r2,zero
 2003620:	1000031e 	bne	r2,zero,2003630 <_Z17SPI_MultipleWritemhPhh+0x108>
 2003624:	00800044 	movi	r2,1
 2003628:	e0bfff05 	stb	r2,-4(fp)
 200362c:	00000106 	br	2003634 <_Z17SPI_MultipleWritemhPhh+0x10c>
 2003630:	e03fff05 	stb	zero,-4(fp)
 2003634:	e0bfff03 	ldbu	r2,-4(fp)
 2003638:	10803fcc 	andi	r2,r2,255
 200363c:	1004c03a 	cmpne	r2,r2,zero
 2003640:	103fe31e 	bne	r2,zero,20035d0 <_Z17SPI_MultipleWritemhPhh+0xa8>
        Status = IORD(spi_base, SPI_REG_CTRL_STATUS);
    }while (!(Status & SPI_STATUS_FLAG_DONE) && (nTryCnt++ < nMaxTry));
    
    IOWR(spi_base, SPI_REG_CTRL_STATUS, 0);  //stop
 2003644:	e0bffa17 	ldw	r2,-24(fp)
 2003648:	10800104 	addi	r2,r2,4
 200364c:	10000035 	stwio	zero,0(r2)
    
    if (Status & SPI_STATUS_FLAG_DONE)
 2003650:	e0bff903 	ldbu	r2,-28(fp)
 2003654:	1080004c 	andi	r2,r2,1
 2003658:	10803fcc 	andi	r2,r2,255
 200365c:	1005003a 	cmpeq	r2,r2,zero
 2003660:	1000031e 	bne	r2,zero,2003670 <_Z17SPI_MultipleWritemhPhh+0x148>
        return TRUE;
 2003664:	00800044 	movi	r2,1
 2003668:	e0bffe15 	stw	r2,-8(fp)
 200366c:	00000106 	br	2003674 <_Z17SPI_MultipleWritemhPhh+0x14c>
    
    return FALSE;
 2003670:	e03ffe15 	stw	zero,-8(fp)
 2003674:	e0bffe17 	ldw	r2,-8(fp)
}
 2003678:	e037883a 	mov	sp,fp
 200367c:	dfc00117 	ldw	ra,4(sp)
 2003680:	df000017 	ldw	fp,0(sp)
 2003684:	dec00204 	addi	sp,sp,8
 2003688:	f800283a 	ret

0200368c <_Z9SPI_Writemhh>:

bool SPI_Write(alt_u32 spi_base, alt_u8 RegIndex, alt_u8 Value){
 200368c:	defffb04 	addi	sp,sp,-20
 2003690:	dfc00415 	stw	ra,16(sp)
 2003694:	df000315 	stw	fp,12(sp)
 2003698:	df000304 	addi	fp,sp,12
 200369c:	e13ffd15 	stw	r4,-12(fp)
 20036a0:	e17ffe05 	stb	r5,-8(fp)
 20036a4:	e1bfff05 	stb	r6,-4(fp)
    return SPI_MultipleWrite(spi_base, RegIndex, &Value, 1);
 20036a8:	e17ffe03 	ldbu	r5,-8(fp)
 20036ac:	e1bfff04 	addi	r6,fp,-4
 20036b0:	e13ffd17 	ldw	r4,-12(fp)
 20036b4:	01c00044 	movi	r7,1
 20036b8:	20035280 	call	2003528 <_Z17SPI_MultipleWritemhPhh>
 20036bc:	10803fcc 	andi	r2,r2,255
}    
 20036c0:	e037883a 	mov	sp,fp
 20036c4:	dfc00117 	ldw	ra,4(sp)
 20036c8:	df000017 	ldw	fp,0(sp)
 20036cc:	dec00204 	addi	sp,sp,8
 20036d0:	f800283a 	ret

020036d4 <_ZN15CADCInfoMessage8doActionEv>:
}

/*
 * Overrided from CCarMessage.
 */
void CADCInfoMessage::doAction()
 20036d4:	defffe04 	addi	sp,sp,-8
 20036d8:	df000115 	stw	fp,4(sp)
 20036dc:	df000104 	addi	fp,sp,4
 20036e0:	e13fff15 	stw	r4,-4(fp)
	alt_u8 uiNumbers[] = ADC_CHANNEL_NUMBERS;
	char uiAliases[] = ADC_CHANNEL_ALIAS_STRINGS;
	answerMessage(ADC_CONNECTED_CHANNELS, uiNumbers, (alt_u8*) uiAliases);
#endif /* CENTRAL_ECU_BUILD */

}
 20036e4:	e037883a 	mov	sp,fp
 20036e8:	df000017 	ldw	fp,0(sp)
 20036ec:	dec00104 	addi	sp,sp,4
 20036f0:	f800283a 	ret

020036f4 <_ZN15CADCInfoMessage13answerMessageEhPhS0_>:

/*
 * Overrided from CCarMessage.
 */
void CADCInfoMessage::answerMessage(alt_u8 uiChannelCount, alt_u8 uiChannelNumbers[], alt_u8 uiChannelAliasStrings[])
 20036f4:	defff804 	addi	sp,sp,-32
 20036f8:	dfc00715 	stw	ra,28(sp)
 20036fc:	df000615 	stw	fp,24(sp)
 2003700:	dc000515 	stw	r16,20(sp)
 2003704:	df000504 	addi	fp,sp,20
 2003708:	e13ffc15 	stw	r4,-16(fp)
 200370c:	e1bffe15 	stw	r6,-8(fp)
 2003710:	e1ffff15 	stw	r7,-4(fp)
 2003714:	e17ffd05 	stb	r5,-12(fp)
{
	alt_u32 i = 0;
 2003718:	e03ffb15 	stw	zero,-20(fp)
    m_uiChannelCount = uiChannelCount;
 200371c:	e0fffc17 	ldw	r3,-16(fp)
 2003720:	e0bffd03 	ldbu	r2,-12(fp)
 2003724:	18800245 	stb	r2,9(r3)
    for(i = 0; i < 7; i++)
 2003728:	e03ffb15 	stw	zero,-20(fp)
 200372c:	00001406 	br	2003780 <_ZN15CADCInfoMessage13answerMessageEhPhS0_+0x8c>
    	m_uiChannelAliasStrings[i] = uiChannelAliasStrings[m_uiChannelNumbers[0]*7+i];
 2003730:	e43ffb17 	ldw	r16,-20(fp)
 2003734:	e0bffc17 	ldw	r2,-16(fp)
 2003738:	10800283 	ldbu	r2,10(r2)
 200373c:	11003fcc 	andi	r4,r2,255
 2003740:	014001c4 	movi	r5,7
 2003744:	200d0cc0 	call	200d0cc <__mulsi3>
 2003748:	1007883a 	mov	r3,r2
 200374c:	e0bffb17 	ldw	r2,-20(fp)
 2003750:	1885883a 	add	r2,r3,r2
 2003754:	1007883a 	mov	r3,r2
 2003758:	e0bfff17 	ldw	r2,-4(fp)
 200375c:	1885883a 	add	r2,r3,r2
 2003760:	10c00003 	ldbu	r3,0(r2)
 2003764:	e0bffc17 	ldw	r2,-16(fp)
 2003768:	8085883a 	add	r2,r16,r2
 200376c:	10800304 	addi	r2,r2,12
 2003770:	10c00005 	stb	r3,0(r2)
 */
void CADCInfoMessage::answerMessage(alt_u8 uiChannelCount, alt_u8 uiChannelNumbers[], alt_u8 uiChannelAliasStrings[])
{
	alt_u32 i = 0;
    m_uiChannelCount = uiChannelCount;
    for(i = 0; i < 7; i++)
 2003774:	e0bffb17 	ldw	r2,-20(fp)
 2003778:	10800044 	addi	r2,r2,1
 200377c:	e0bffb15 	stw	r2,-20(fp)
 2003780:	e0bffb17 	ldw	r2,-20(fp)
 2003784:	108001f0 	cmpltui	r2,r2,7
 2003788:	103fe91e 	bne	r2,zero,2003730 <_ZN15CADCInfoMessage13answerMessageEhPhS0_+0x3c>
    	m_uiChannelAliasStrings[i] = uiChannelAliasStrings[m_uiChannelNumbers[0]*7+i];
    for(i = 7; i < 14; i++)
 200378c:	008001c4 	movi	r2,7
 2003790:	e0bffb15 	stw	r2,-20(fp)
 2003794:	00001406 	br	20037e8 <_ZN15CADCInfoMessage13answerMessageEhPhS0_+0xf4>
		m_uiChannelAliasStrings[i] = uiChannelAliasStrings[m_uiChannelNumbers[1]*7+i];
 2003798:	e43ffb17 	ldw	r16,-20(fp)
 200379c:	e0bffc17 	ldw	r2,-16(fp)
 20037a0:	108002c3 	ldbu	r2,11(r2)
 20037a4:	11003fcc 	andi	r4,r2,255
 20037a8:	014001c4 	movi	r5,7
 20037ac:	200d0cc0 	call	200d0cc <__mulsi3>
 20037b0:	1007883a 	mov	r3,r2
 20037b4:	e0bffb17 	ldw	r2,-20(fp)
 20037b8:	1885883a 	add	r2,r3,r2
 20037bc:	1007883a 	mov	r3,r2
 20037c0:	e0bfff17 	ldw	r2,-4(fp)
 20037c4:	1885883a 	add	r2,r3,r2
 20037c8:	10c00003 	ldbu	r3,0(r2)
 20037cc:	e0bffc17 	ldw	r2,-16(fp)
 20037d0:	8085883a 	add	r2,r16,r2
 20037d4:	10800304 	addi	r2,r2,12
 20037d8:	10c00005 	stb	r3,0(r2)
{
	alt_u32 i = 0;
    m_uiChannelCount = uiChannelCount;
    for(i = 0; i < 7; i++)
    	m_uiChannelAliasStrings[i] = uiChannelAliasStrings[m_uiChannelNumbers[0]*7+i];
    for(i = 7; i < 14; i++)
 20037dc:	e0bffb17 	ldw	r2,-20(fp)
 20037e0:	10800044 	addi	r2,r2,1
 20037e4:	e0bffb15 	stw	r2,-20(fp)
 20037e8:	e0bffb17 	ldw	r2,-20(fp)
 20037ec:	108003b0 	cmpltui	r2,r2,14
 20037f0:	103fe91e 	bne	r2,zero,2003798 <_ZN15CADCInfoMessage13answerMessageEhPhS0_+0xa4>
		m_uiChannelAliasStrings[i] = uiChannelAliasStrings[m_uiChannelNumbers[1]*7+i];
		
	m_uiChannelNumbers[0] = uiChannelNumbers[m_uiChannelNumbers[0]];
 20037f4:	e0bffc17 	ldw	r2,-16(fp)
 20037f8:	10800283 	ldbu	r2,10(r2)
 20037fc:	10803fcc 	andi	r2,r2,255
 2003800:	1007883a 	mov	r3,r2
 2003804:	e0bffe17 	ldw	r2,-8(fp)
 2003808:	1885883a 	add	r2,r3,r2
 200380c:	10c00003 	ldbu	r3,0(r2)
 2003810:	e0bffc17 	ldw	r2,-16(fp)
 2003814:	10c00285 	stb	r3,10(r2)
	m_uiChannelNumbers[1] = uiChannelNumbers[m_uiChannelNumbers[1]];
 2003818:	e0bffc17 	ldw	r2,-16(fp)
 200381c:	108002c3 	ldbu	r2,11(r2)
 2003820:	10803fcc 	andi	r2,r2,255
 2003824:	1007883a 	mov	r3,r2
 2003828:	e0bffe17 	ldw	r2,-8(fp)
 200382c:	1885883a 	add	r2,r3,r2
 2003830:	10c00003 	ldbu	r3,0(r2)
 2003834:	e0bffc17 	ldw	r2,-16(fp)
 2003838:	10c002c5 	stb	r3,11(r2)
    m_uiFlags = m_uiFlags | 0x01; // Set response flag
 200383c:	e0bffc17 	ldw	r2,-16(fp)
 2003840:	108001c3 	ldbu	r2,7(r2)
 2003844:	10800054 	ori	r2,r2,1
 2003848:	1007883a 	mov	r3,r2
 200384c:	e0bffc17 	ldw	r2,-16(fp)
 2003850:	10c001c5 	stb	r3,7(r2)
}
 2003854:	e037883a 	mov	sp,fp
 2003858:	dfc00217 	ldw	ra,8(sp)
 200385c:	df000117 	ldw	fp,4(sp)
 2003860:	dc000017 	ldw	r16,0(sp)
 2003864:	dec00304 	addi	sp,sp,12
 2003868:	f800283a 	ret

0200386c <_ZN15CADCInfoMessage9getLengthEv>:
}

/*
 * Overrided from CCarMessage.
 */
alt_u32 CADCInfoMessage::getLength()
 200386c:	defffe04 	addi	sp,sp,-8
 2003870:	df000115 	stw	fp,4(sp)
 2003874:	df000104 	addi	fp,sp,4
 2003878:	e13fff15 	stw	r4,-4(fp)
{
    return 24;
 200387c:	00800604 	movi	r2,24
}
 2003880:	e037883a 	mov	sp,fp
 2003884:	df000017 	ldw	fp,0(sp)
 2003888:	dec00104 	addi	sp,sp,4
 200388c:	f800283a 	ret

02003890 <_ZN15CADCInfoMessage12parseMessageEPhi>:

/*
 * Overrided from CCarMessage.
 */
void CADCInfoMessage::parseMessage(alt_u8 *pMessage, int iLength)
 2003890:	defffc04 	addi	sp,sp,-16
 2003894:	df000315 	stw	fp,12(sp)
 2003898:	df000304 	addi	fp,sp,12
 200389c:	e13ffd15 	stw	r4,-12(fp)
 20038a0:	e17ffe15 	stw	r5,-8(fp)
 20038a4:	e1bfff15 	stw	r6,-4(fp)
{
    if(iLength < 20)
 20038a8:	e0bfff17 	ldw	r2,-4(fp)
 20038ac:	10800510 	cmplti	r2,r2,20
 20038b0:	1000571e 	bne	r2,zero,2003a10 <_ZN15CADCInfoMessage12parseMessageEPhi+0x180>
        return;

    m_uiChannelCount = pMessage[0];
 20038b4:	e0bffe17 	ldw	r2,-8(fp)
 20038b8:	10c00003 	ldbu	r3,0(r2)
 20038bc:	e0bffd17 	ldw	r2,-12(fp)
 20038c0:	10c00245 	stb	r3,9(r2)
    m_uiChannelNumbers[0] = pMessage[4];
 20038c4:	e0bffe17 	ldw	r2,-8(fp)
 20038c8:	10800104 	addi	r2,r2,4
 20038cc:	10c00003 	ldbu	r3,0(r2)
 20038d0:	e0bffd17 	ldw	r2,-12(fp)
 20038d4:	10c00285 	stb	r3,10(r2)
    m_uiChannelAliasStrings[0] = pMessage[5];
 20038d8:	e0bffe17 	ldw	r2,-8(fp)
 20038dc:	10800144 	addi	r2,r2,5
 20038e0:	10c00003 	ldbu	r3,0(r2)
 20038e4:	e0bffd17 	ldw	r2,-12(fp)
 20038e8:	10c00305 	stb	r3,12(r2)
    m_uiChannelAliasStrings[1] = pMessage[6];
 20038ec:	e0bffe17 	ldw	r2,-8(fp)
 20038f0:	10800184 	addi	r2,r2,6
 20038f4:	10c00003 	ldbu	r3,0(r2)
 20038f8:	e0bffd17 	ldw	r2,-12(fp)
 20038fc:	10c00345 	stb	r3,13(r2)
    m_uiChannelAliasStrings[2] = pMessage[7];
 2003900:	e0bffe17 	ldw	r2,-8(fp)
 2003904:	108001c4 	addi	r2,r2,7
 2003908:	10c00003 	ldbu	r3,0(r2)
 200390c:	e0bffd17 	ldw	r2,-12(fp)
 2003910:	10c00385 	stb	r3,14(r2)
    m_uiChannelAliasStrings[3] = pMessage[8];
 2003914:	e0bffe17 	ldw	r2,-8(fp)
 2003918:	10800204 	addi	r2,r2,8
 200391c:	10c00003 	ldbu	r3,0(r2)
 2003920:	e0bffd17 	ldw	r2,-12(fp)
 2003924:	10c003c5 	stb	r3,15(r2)
    m_uiChannelAliasStrings[4] = pMessage[9];
 2003928:	e0bffe17 	ldw	r2,-8(fp)
 200392c:	10800244 	addi	r2,r2,9
 2003930:	10c00003 	ldbu	r3,0(r2)
 2003934:	e0bffd17 	ldw	r2,-12(fp)
 2003938:	10c00405 	stb	r3,16(r2)
    m_uiChannelAliasStrings[5] = pMessage[10];
 200393c:	e0bffe17 	ldw	r2,-8(fp)
 2003940:	10800284 	addi	r2,r2,10
 2003944:	10c00003 	ldbu	r3,0(r2)
 2003948:	e0bffd17 	ldw	r2,-12(fp)
 200394c:	10c00445 	stb	r3,17(r2)
    m_uiChannelAliasStrings[6] = pMessage[11];
 2003950:	e0bffe17 	ldw	r2,-8(fp)
 2003954:	108002c4 	addi	r2,r2,11
 2003958:	10c00003 	ldbu	r3,0(r2)
 200395c:	e0bffd17 	ldw	r2,-12(fp)
 2003960:	10c00485 	stb	r3,18(r2)
    m_uiChannelNumbers[1] = pMessage[12];
 2003964:	e0bffe17 	ldw	r2,-8(fp)
 2003968:	10800304 	addi	r2,r2,12
 200396c:	10c00003 	ldbu	r3,0(r2)
 2003970:	e0bffd17 	ldw	r2,-12(fp)
 2003974:	10c002c5 	stb	r3,11(r2)
    m_uiChannelAliasStrings[7] = pMessage[13];
 2003978:	e0bffe17 	ldw	r2,-8(fp)
 200397c:	10800344 	addi	r2,r2,13
 2003980:	10c00003 	ldbu	r3,0(r2)
 2003984:	e0bffd17 	ldw	r2,-12(fp)
 2003988:	10c004c5 	stb	r3,19(r2)
    m_uiChannelAliasStrings[8] = pMessage[14];
 200398c:	e0bffe17 	ldw	r2,-8(fp)
 2003990:	10800384 	addi	r2,r2,14
 2003994:	10c00003 	ldbu	r3,0(r2)
 2003998:	e0bffd17 	ldw	r2,-12(fp)
 200399c:	10c00505 	stb	r3,20(r2)
    m_uiChannelAliasStrings[9] = pMessage[15];
 20039a0:	e0bffe17 	ldw	r2,-8(fp)
 20039a4:	108003c4 	addi	r2,r2,15
 20039a8:	10c00003 	ldbu	r3,0(r2)
 20039ac:	e0bffd17 	ldw	r2,-12(fp)
 20039b0:	10c00545 	stb	r3,21(r2)
    m_uiChannelAliasStrings[10] = pMessage[16];
 20039b4:	e0bffe17 	ldw	r2,-8(fp)
 20039b8:	10800404 	addi	r2,r2,16
 20039bc:	10c00003 	ldbu	r3,0(r2)
 20039c0:	e0bffd17 	ldw	r2,-12(fp)
 20039c4:	10c00585 	stb	r3,22(r2)
    m_uiChannelAliasStrings[11] = pMessage[17];
 20039c8:	e0bffe17 	ldw	r2,-8(fp)
 20039cc:	10800444 	addi	r2,r2,17
 20039d0:	10c00003 	ldbu	r3,0(r2)
 20039d4:	e0bffd17 	ldw	r2,-12(fp)
 20039d8:	10c005c5 	stb	r3,23(r2)
    m_uiChannelAliasStrings[12] = pMessage[18];
 20039dc:	e0bffe17 	ldw	r2,-8(fp)
 20039e0:	10800484 	addi	r2,r2,18
 20039e4:	10c00003 	ldbu	r3,0(r2)
 20039e8:	e0bffd17 	ldw	r2,-12(fp)
 20039ec:	10c00605 	stb	r3,24(r2)
    m_uiChannelAliasStrings[13] = pMessage[19];
 20039f0:	e0bffe17 	ldw	r2,-8(fp)
 20039f4:	108004c4 	addi	r2,r2,19
 20039f8:	10c00003 	ldbu	r3,0(r2)
 20039fc:	e0bffd17 	ldw	r2,-12(fp)
 2003a00:	10c00645 	stb	r3,25(r2)

    m_bValid = true;
 2003a04:	e0fffd17 	ldw	r3,-12(fp)
 2003a08:	00800044 	movi	r2,1
 2003a0c:	18800205 	stb	r2,8(r3)

}
 2003a10:	e037883a 	mov	sp,fp
 2003a14:	df000017 	ldw	fp,0(sp)
 2003a18:	dec00104 	addi	sp,sp,4
 2003a1c:	f800283a 	ret

02003a20 <_ZN15CADCInfoMessage8getBytesEPh>:
}

/*
 * Overrided from CCarMessage.
 */
bool CADCInfoMessage::getBytes(alt_u8 *pMessage)
 2003a20:	defffc04 	addi	sp,sp,-16
 2003a24:	dfc00315 	stw	ra,12(sp)
 2003a28:	df000215 	stw	fp,8(sp)
 2003a2c:	df000204 	addi	fp,sp,8
 2003a30:	e13ffe15 	stw	r4,-8(fp)
 2003a34:	e17fff15 	stw	r5,-4(fp)
{
    CCarMessage::getBytes(pMessage);
 2003a38:	e13ffe17 	ldw	r4,-8(fp)
 2003a3c:	e17fff17 	ldw	r5,-4(fp)
 2003a40:	2006f040 	call	2006f04 <_ZN11CCarMessage8getBytesEPh>

    pMessage[4] = m_uiChannelCount;
 2003a44:	e0bfff17 	ldw	r2,-4(fp)
 2003a48:	10c00104 	addi	r3,r2,4
 2003a4c:	e0bffe17 	ldw	r2,-8(fp)
 2003a50:	10800243 	ldbu	r2,9(r2)
 2003a54:	18800005 	stb	r2,0(r3)
    pMessage[5] = 0;
 2003a58:	e0bfff17 	ldw	r2,-4(fp)
 2003a5c:	10800144 	addi	r2,r2,5
 2003a60:	10000005 	stb	zero,0(r2)
    pMessage[6] = 0;
 2003a64:	e0bfff17 	ldw	r2,-4(fp)
 2003a68:	10800184 	addi	r2,r2,6
 2003a6c:	10000005 	stb	zero,0(r2)
    pMessage[7] = 0;
 2003a70:	e0bfff17 	ldw	r2,-4(fp)
 2003a74:	108001c4 	addi	r2,r2,7
 2003a78:	10000005 	stb	zero,0(r2)
    pMessage[8] = m_uiChannelNumbers[0];
 2003a7c:	e0bfff17 	ldw	r2,-4(fp)
 2003a80:	10c00204 	addi	r3,r2,8
 2003a84:	e0bffe17 	ldw	r2,-8(fp)
 2003a88:	10800283 	ldbu	r2,10(r2)
 2003a8c:	18800005 	stb	r2,0(r3)
    pMessage[9] = m_uiChannelAliasStrings[0];
 2003a90:	e0bfff17 	ldw	r2,-4(fp)
 2003a94:	10c00244 	addi	r3,r2,9
 2003a98:	e0bffe17 	ldw	r2,-8(fp)
 2003a9c:	10800303 	ldbu	r2,12(r2)
 2003aa0:	18800005 	stb	r2,0(r3)
    pMessage[10] = m_uiChannelAliasStrings[1];
 2003aa4:	e0bfff17 	ldw	r2,-4(fp)
 2003aa8:	10c00284 	addi	r3,r2,10
 2003aac:	e0bffe17 	ldw	r2,-8(fp)
 2003ab0:	10800343 	ldbu	r2,13(r2)
 2003ab4:	18800005 	stb	r2,0(r3)
    pMessage[11] = m_uiChannelAliasStrings[2];
 2003ab8:	e0bfff17 	ldw	r2,-4(fp)
 2003abc:	10c002c4 	addi	r3,r2,11
 2003ac0:	e0bffe17 	ldw	r2,-8(fp)
 2003ac4:	10800383 	ldbu	r2,14(r2)
 2003ac8:	18800005 	stb	r2,0(r3)
    pMessage[12] = m_uiChannelAliasStrings[3];
 2003acc:	e0bfff17 	ldw	r2,-4(fp)
 2003ad0:	10c00304 	addi	r3,r2,12
 2003ad4:	e0bffe17 	ldw	r2,-8(fp)
 2003ad8:	108003c3 	ldbu	r2,15(r2)
 2003adc:	18800005 	stb	r2,0(r3)
    pMessage[13] = m_uiChannelAliasStrings[4];
 2003ae0:	e0bfff17 	ldw	r2,-4(fp)
 2003ae4:	10c00344 	addi	r3,r2,13
 2003ae8:	e0bffe17 	ldw	r2,-8(fp)
 2003aec:	10800403 	ldbu	r2,16(r2)
 2003af0:	18800005 	stb	r2,0(r3)
    pMessage[14] = m_uiChannelAliasStrings[5];
 2003af4:	e0bfff17 	ldw	r2,-4(fp)
 2003af8:	10c00384 	addi	r3,r2,14
 2003afc:	e0bffe17 	ldw	r2,-8(fp)
 2003b00:	10800443 	ldbu	r2,17(r2)
 2003b04:	18800005 	stb	r2,0(r3)
    pMessage[15] = m_uiChannelAliasStrings[6];
 2003b08:	e0bfff17 	ldw	r2,-4(fp)
 2003b0c:	10c003c4 	addi	r3,r2,15
 2003b10:	e0bffe17 	ldw	r2,-8(fp)
 2003b14:	10800483 	ldbu	r2,18(r2)
 2003b18:	18800005 	stb	r2,0(r3)
    pMessage[16] = m_uiChannelNumbers[1];
 2003b1c:	e0bfff17 	ldw	r2,-4(fp)
 2003b20:	10c00404 	addi	r3,r2,16
 2003b24:	e0bffe17 	ldw	r2,-8(fp)
 2003b28:	108002c3 	ldbu	r2,11(r2)
 2003b2c:	18800005 	stb	r2,0(r3)
    pMessage[17] = m_uiChannelAliasStrings[7];
 2003b30:	e0bfff17 	ldw	r2,-4(fp)
 2003b34:	10c00444 	addi	r3,r2,17
 2003b38:	e0bffe17 	ldw	r2,-8(fp)
 2003b3c:	108004c3 	ldbu	r2,19(r2)
 2003b40:	18800005 	stb	r2,0(r3)
    pMessage[18] = m_uiChannelAliasStrings[8];
 2003b44:	e0bfff17 	ldw	r2,-4(fp)
 2003b48:	10c00484 	addi	r3,r2,18
 2003b4c:	e0bffe17 	ldw	r2,-8(fp)
 2003b50:	10800503 	ldbu	r2,20(r2)
 2003b54:	18800005 	stb	r2,0(r3)
    pMessage[19] = m_uiChannelAliasStrings[9];
 2003b58:	e0bfff17 	ldw	r2,-4(fp)
 2003b5c:	10c004c4 	addi	r3,r2,19
 2003b60:	e0bffe17 	ldw	r2,-8(fp)
 2003b64:	10800543 	ldbu	r2,21(r2)
 2003b68:	18800005 	stb	r2,0(r3)
    pMessage[20] = m_uiChannelAliasStrings[10];
 2003b6c:	e0bfff17 	ldw	r2,-4(fp)
 2003b70:	10c00504 	addi	r3,r2,20
 2003b74:	e0bffe17 	ldw	r2,-8(fp)
 2003b78:	10800583 	ldbu	r2,22(r2)
 2003b7c:	18800005 	stb	r2,0(r3)
    pMessage[21] = m_uiChannelAliasStrings[11];
 2003b80:	e0bfff17 	ldw	r2,-4(fp)
 2003b84:	10c00544 	addi	r3,r2,21
 2003b88:	e0bffe17 	ldw	r2,-8(fp)
 2003b8c:	108005c3 	ldbu	r2,23(r2)
 2003b90:	18800005 	stb	r2,0(r3)
    pMessage[22] = m_uiChannelAliasStrings[12];
 2003b94:	e0bfff17 	ldw	r2,-4(fp)
 2003b98:	10c00584 	addi	r3,r2,22
 2003b9c:	e0bffe17 	ldw	r2,-8(fp)
 2003ba0:	10800603 	ldbu	r2,24(r2)
 2003ba4:	18800005 	stb	r2,0(r3)
    pMessage[23] = m_uiChannelAliasStrings[13];
 2003ba8:	e0bfff17 	ldw	r2,-4(fp)
 2003bac:	10c005c4 	addi	r3,r2,23
 2003bb0:	e0bffe17 	ldw	r2,-8(fp)
 2003bb4:	10800643 	ldbu	r2,25(r2)
 2003bb8:	18800005 	stb	r2,0(r3)
    return m_bValid;
 2003bbc:	e0bffe17 	ldw	r2,-8(fp)
 2003bc0:	10800203 	ldbu	r2,8(r2)
 2003bc4:	10803fcc 	andi	r2,r2,255
}
 2003bc8:	e037883a 	mov	sp,fp
 2003bcc:	dfc00117 	ldw	ra,4(sp)
 2003bd0:	df000017 	ldw	fp,0(sp)
 2003bd4:	dec00204 	addi	sp,sp,8
 2003bd8:	f800283a 	ret

02003bdc <_ZN15CADCInfoMessageD0Ev>:
}

/*
 * Basic Destructor.
 */
CADCInfoMessage::~CADCInfoMessage()
 2003bdc:	defffd04 	addi	sp,sp,-12
 2003be0:	dfc00215 	stw	ra,8(sp)
 2003be4:	df000115 	stw	fp,4(sp)
 2003be8:	df000104 	addi	fp,sp,4
 2003bec:	e13fff15 	stw	r4,-4(fp)
 2003bf0:	00c080b4 	movhi	r3,514
 2003bf4:	18ee2404 	addi	r3,r3,-18288
 2003bf8:	e0bfff17 	ldw	r2,-4(fp)
 2003bfc:	10c00015 	stw	r3,0(r2)
{
}
 2003c00:	e13fff17 	ldw	r4,-4(fp)
 2003c04:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 2003c08:	00800044 	movi	r2,1
 2003c0c:	10803fcc 	andi	r2,r2,255
 2003c10:	1005003a 	cmpeq	r2,r2,zero
 2003c14:	1000021e 	bne	r2,zero,2003c20 <_ZN15CADCInfoMessageD0Ev+0x44>
 2003c18:	e13fff17 	ldw	r4,-4(fp)
 2003c1c:	200c1380 	call	200c138 <_ZdlPv>
 2003c20:	e037883a 	mov	sp,fp
 2003c24:	dfc00117 	ldw	ra,4(sp)
 2003c28:	df000017 	ldw	fp,0(sp)
 2003c2c:	dec00204 	addi	sp,sp,8
 2003c30:	f800283a 	ret

02003c34 <_ZN15CADCInfoMessageD1Ev>:
}

/*
 * Basic Destructor.
 */
CADCInfoMessage::~CADCInfoMessage()
 2003c34:	defffd04 	addi	sp,sp,-12
 2003c38:	dfc00215 	stw	ra,8(sp)
 2003c3c:	df000115 	stw	fp,4(sp)
 2003c40:	df000104 	addi	fp,sp,4
 2003c44:	e13fff15 	stw	r4,-4(fp)
 2003c48:	00c080b4 	movhi	r3,514
 2003c4c:	18ee2404 	addi	r3,r3,-18288
 2003c50:	e0bfff17 	ldw	r2,-4(fp)
 2003c54:	10c00015 	stw	r3,0(r2)
{
}
 2003c58:	e13fff17 	ldw	r4,-4(fp)
 2003c5c:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 2003c60:	0005883a 	mov	r2,zero
 2003c64:	10803fcc 	andi	r2,r2,255
 2003c68:	1005003a 	cmpeq	r2,r2,zero
 2003c6c:	1000021e 	bne	r2,zero,2003c78 <_ZN15CADCInfoMessageD1Ev+0x44>
 2003c70:	e13fff17 	ldw	r4,-4(fp)
 2003c74:	200c1380 	call	200c138 <_ZdlPv>
 2003c78:	e037883a 	mov	sp,fp
 2003c7c:	dfc00117 	ldw	ra,4(sp)
 2003c80:	df000017 	ldw	fp,0(sp)
 2003c84:	dec00204 	addi	sp,sp,8
 2003c88:	f800283a 	ret

02003c8c <_ZN15CADCInfoMessageD2Ev>:
}

/*
 * Basic Destructor.
 */
CADCInfoMessage::~CADCInfoMessage()
 2003c8c:	defffd04 	addi	sp,sp,-12
 2003c90:	dfc00215 	stw	ra,8(sp)
 2003c94:	df000115 	stw	fp,4(sp)
 2003c98:	df000104 	addi	fp,sp,4
 2003c9c:	e13fff15 	stw	r4,-4(fp)
 2003ca0:	00c080b4 	movhi	r3,514
 2003ca4:	18ee2404 	addi	r3,r3,-18288
 2003ca8:	e0bfff17 	ldw	r2,-4(fp)
 2003cac:	10c00015 	stw	r3,0(r2)
{
}
 2003cb0:	e13fff17 	ldw	r4,-4(fp)
 2003cb4:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 2003cb8:	0005883a 	mov	r2,zero
 2003cbc:	10803fcc 	andi	r2,r2,255
 2003cc0:	1005003a 	cmpeq	r2,r2,zero
 2003cc4:	1000021e 	bne	r2,zero,2003cd0 <_ZN15CADCInfoMessageD2Ev+0x44>
 2003cc8:	e13fff17 	ldw	r4,-4(fp)
 2003ccc:	200c1380 	call	200c138 <_ZdlPv>
 2003cd0:	e037883a 	mov	sp,fp
 2003cd4:	dfc00117 	ldw	ra,4(sp)
 2003cd8:	df000017 	ldw	fp,0(sp)
 2003cdc:	dec00204 	addi	sp,sp,8
 2003ce0:	f800283a 	ret

02003ce4 <_ZN15CADCInfoMessageC1EPhi>:
/*
 * Constructor. Used to reassemble object from Byte stream.
 * pMessage : Byte-Array containing the fields of the subMessage
 * iLength  : Length of the said array
 */
CADCInfoMessage::CADCInfoMessage(alt_u8 *pMessage, int iLength)
 2003ce4:	deffe404 	addi	sp,sp,-112
 2003ce8:	dfc01b15 	stw	ra,108(sp)
 2003cec:	df001a15 	stw	fp,104(sp)
 2003cf0:	ddc01915 	stw	r23,100(sp)
 2003cf4:	dd801815 	stw	r22,96(sp)
 2003cf8:	dd401715 	stw	r21,92(sp)
 2003cfc:	dd001615 	stw	r20,88(sp)
 2003d00:	dcc01515 	stw	r19,84(sp)
 2003d04:	dc801415 	stw	r18,80(sp)
 2003d08:	dc401315 	stw	r17,76(sp)
 2003d0c:	dc001215 	stw	r16,72(sp)
 2003d10:	df001204 	addi	fp,sp,72
 2003d14:	e13fee15 	stw	r4,-72(fp)
 2003d18:	e17fef15 	stw	r5,-68(fp)
 2003d1c:	e1bff015 	stw	r6,-64(fp)
 2003d20:	00808074 	movhi	r2,513
 2003d24:	10ae5a04 	addi	r2,r2,-18072
 2003d28:	e0bff715 	stw	r2,-36(fp)
 2003d2c:	008080b4 	movhi	r2,514
 2003d30:	10adb084 	addi	r2,r2,-18750
 2003d34:	e0bff815 	stw	r2,-32(fp)
 2003d38:	e0bff904 	addi	r2,fp,-28
 2003d3c:	e0ffee04 	addi	r3,fp,-72
 2003d40:	10c00015 	stw	r3,0(r2)
 2003d44:	00c08034 	movhi	r3,512
 2003d48:	18cf7304 	addi	r3,r3,15820
 2003d4c:	10c00115 	stw	r3,4(r2)
 2003d50:	16c00215 	stw	sp,8(r2)
 2003d54:	e13ff104 	addi	r4,fp,-60
 2003d58:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 2003d5c:	e13fee17 	ldw	r4,-72(fp)
 2003d60:	00bfffc4 	movi	r2,-1
 2003d64:	e0bff215 	stw	r2,-56(fp)
 2003d68:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 2003d6c:	00c080b4 	movhi	r3,514
 2003d70:	18ee2404 	addi	r3,r3,-18288
 2003d74:	e0bfee17 	ldw	r2,-72(fp)
 2003d78:	10c00015 	stw	r3,0(r2)
{
    parseHeader(pMessage, iLength);
 2003d7c:	e13fee17 	ldw	r4,-72(fp)
 2003d80:	00800044 	movi	r2,1
 2003d84:	e0bff215 	stw	r2,-56(fp)
 2003d88:	e17fef17 	ldw	r5,-68(fp)
 2003d8c:	e1bff017 	ldw	r6,-64(fp)
 2003d90:	20071cc0 	call	20071cc <_ZN11CCarMessage11parseHeaderEPhi>
    if(m_bValid)
 2003d94:	e0bfee17 	ldw	r2,-72(fp)
 2003d98:	10800203 	ldbu	r2,8(r2)
 2003d9c:	10803fcc 	andi	r2,r2,255
 2003da0:	1005003a 	cmpeq	r2,r2,zero
 2003da4:	1000171e 	bne	r2,zero,2003e04 <_ZN15CADCInfoMessageC1EPhi+0x120>
    {
        m_bValid = false;
 2003da8:	e0bfee17 	ldw	r2,-72(fp)
 2003dac:	10000205 	stb	zero,8(r2)
        parseMessage(pMessage+4, iLength-4);
 2003db0:	e0bfef17 	ldw	r2,-68(fp)
 2003db4:	11400104 	addi	r5,r2,4
 2003db8:	e0bff017 	ldw	r2,-64(fp)
 2003dbc:	11bfff04 	addi	r6,r2,-4
 2003dc0:	e13fee17 	ldw	r4,-72(fp)
 2003dc4:	20038900 	call	2003890 <_ZN15CADCInfoMessage12parseMessageEPhi>
    }

}
 2003dc8:	00000e06 	br	2003e04 <_ZN15CADCInfoMessageC1EPhi+0x120>
 2003dcc:	e7001204 	addi	fp,fp,72
 2003dd0:	e0bff317 	ldw	r2,-52(fp)
 2003dd4:	e0bfff15 	stw	r2,-4(fp)
 2003dd8:	e0ffff17 	ldw	r3,-4(fp)
 2003ddc:	e0fffe15 	stw	r3,-8(fp)
 2003de0:	e13fee17 	ldw	r4,-72(fp)
 2003de4:	e03ff215 	stw	zero,-56(fp)
 2003de8:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 2003dec:	e0bffe17 	ldw	r2,-8(fp)
 2003df0:	e0bfff15 	stw	r2,-4(fp)
 2003df4:	00bfffc4 	movi	r2,-1
 2003df8:	e0bff215 	stw	r2,-56(fp)
 2003dfc:	e13fff17 	ldw	r4,-4(fp)
 2003e00:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 2003e04:	e13ff104 	addi	r4,fp,-60
 2003e08:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 2003e0c:	e037883a 	mov	sp,fp
 2003e10:	dfc00917 	ldw	ra,36(sp)
 2003e14:	df000817 	ldw	fp,32(sp)
 2003e18:	ddc00717 	ldw	r23,28(sp)
 2003e1c:	dd800617 	ldw	r22,24(sp)
 2003e20:	dd400517 	ldw	r21,20(sp)
 2003e24:	dd000417 	ldw	r20,16(sp)
 2003e28:	dcc00317 	ldw	r19,12(sp)
 2003e2c:	dc800217 	ldw	r18,8(sp)
 2003e30:	dc400117 	ldw	r17,4(sp)
 2003e34:	dc000017 	ldw	r16,0(sp)
 2003e38:	dec00a04 	addi	sp,sp,40
 2003e3c:	f800283a 	ret

02003e40 <_ZN15CADCInfoMessageC2EPhi>:
/*
 * Constructor. Used to reassemble object from Byte stream.
 * pMessage : Byte-Array containing the fields of the subMessage
 * iLength  : Length of the said array
 */
CADCInfoMessage::CADCInfoMessage(alt_u8 *pMessage, int iLength)
 2003e40:	deffe404 	addi	sp,sp,-112
 2003e44:	dfc01b15 	stw	ra,108(sp)
 2003e48:	df001a15 	stw	fp,104(sp)
 2003e4c:	ddc01915 	stw	r23,100(sp)
 2003e50:	dd801815 	stw	r22,96(sp)
 2003e54:	dd401715 	stw	r21,92(sp)
 2003e58:	dd001615 	stw	r20,88(sp)
 2003e5c:	dcc01515 	stw	r19,84(sp)
 2003e60:	dc801415 	stw	r18,80(sp)
 2003e64:	dc401315 	stw	r17,76(sp)
 2003e68:	dc001215 	stw	r16,72(sp)
 2003e6c:	df001204 	addi	fp,sp,72
 2003e70:	e13fee15 	stw	r4,-72(fp)
 2003e74:	e17fef15 	stw	r5,-68(fp)
 2003e78:	e1bff015 	stw	r6,-64(fp)
 2003e7c:	00808074 	movhi	r2,513
 2003e80:	10ae5a04 	addi	r2,r2,-18072
 2003e84:	e0bff715 	stw	r2,-36(fp)
 2003e88:	008080b4 	movhi	r2,514
 2003e8c:	10adb204 	addi	r2,r2,-18744
 2003e90:	e0bff815 	stw	r2,-32(fp)
 2003e94:	e0bff904 	addi	r2,fp,-28
 2003e98:	e0ffee04 	addi	r3,fp,-72
 2003e9c:	10c00015 	stw	r3,0(r2)
 2003ea0:	00c08034 	movhi	r3,512
 2003ea4:	18cfca04 	addi	r3,r3,16168
 2003ea8:	10c00115 	stw	r3,4(r2)
 2003eac:	16c00215 	stw	sp,8(r2)
 2003eb0:	e13ff104 	addi	r4,fp,-60
 2003eb4:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 2003eb8:	e13fee17 	ldw	r4,-72(fp)
 2003ebc:	00bfffc4 	movi	r2,-1
 2003ec0:	e0bff215 	stw	r2,-56(fp)
 2003ec4:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 2003ec8:	00c080b4 	movhi	r3,514
 2003ecc:	18ee2404 	addi	r3,r3,-18288
 2003ed0:	e0bfee17 	ldw	r2,-72(fp)
 2003ed4:	10c00015 	stw	r3,0(r2)
{
    parseHeader(pMessage, iLength);
 2003ed8:	e13fee17 	ldw	r4,-72(fp)
 2003edc:	00800044 	movi	r2,1
 2003ee0:	e0bff215 	stw	r2,-56(fp)
 2003ee4:	e17fef17 	ldw	r5,-68(fp)
 2003ee8:	e1bff017 	ldw	r6,-64(fp)
 2003eec:	20071cc0 	call	20071cc <_ZN11CCarMessage11parseHeaderEPhi>
    if(m_bValid)
 2003ef0:	e0bfee17 	ldw	r2,-72(fp)
 2003ef4:	10800203 	ldbu	r2,8(r2)
 2003ef8:	10803fcc 	andi	r2,r2,255
 2003efc:	1005003a 	cmpeq	r2,r2,zero
 2003f00:	1000171e 	bne	r2,zero,2003f60 <_ZN15CADCInfoMessageC2EPhi+0x120>
    {
        m_bValid = false;
 2003f04:	e0bfee17 	ldw	r2,-72(fp)
 2003f08:	10000205 	stb	zero,8(r2)
        parseMessage(pMessage+4, iLength-4);
 2003f0c:	e0bfef17 	ldw	r2,-68(fp)
 2003f10:	11400104 	addi	r5,r2,4
 2003f14:	e0bff017 	ldw	r2,-64(fp)
 2003f18:	11bfff04 	addi	r6,r2,-4
 2003f1c:	e13fee17 	ldw	r4,-72(fp)
 2003f20:	20038900 	call	2003890 <_ZN15CADCInfoMessage12parseMessageEPhi>
    }

}
 2003f24:	00000e06 	br	2003f60 <_ZN15CADCInfoMessageC2EPhi+0x120>
 2003f28:	e7001204 	addi	fp,fp,72
 2003f2c:	e0bff317 	ldw	r2,-52(fp)
 2003f30:	e0bfff15 	stw	r2,-4(fp)
 2003f34:	e0ffff17 	ldw	r3,-4(fp)
 2003f38:	e0fffe15 	stw	r3,-8(fp)
 2003f3c:	e13fee17 	ldw	r4,-72(fp)
 2003f40:	e03ff215 	stw	zero,-56(fp)
 2003f44:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 2003f48:	e0bffe17 	ldw	r2,-8(fp)
 2003f4c:	e0bfff15 	stw	r2,-4(fp)
 2003f50:	00bfffc4 	movi	r2,-1
 2003f54:	e0bff215 	stw	r2,-56(fp)
 2003f58:	e13fff17 	ldw	r4,-4(fp)
 2003f5c:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 2003f60:	e13ff104 	addi	r4,fp,-60
 2003f64:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 2003f68:	e037883a 	mov	sp,fp
 2003f6c:	dfc00917 	ldw	ra,36(sp)
 2003f70:	df000817 	ldw	fp,32(sp)
 2003f74:	ddc00717 	ldw	r23,28(sp)
 2003f78:	dd800617 	ldw	r22,24(sp)
 2003f7c:	dd400517 	ldw	r21,20(sp)
 2003f80:	dd000417 	ldw	r20,16(sp)
 2003f84:	dcc00317 	ldw	r19,12(sp)
 2003f88:	dc800217 	ldw	r18,8(sp)
 2003f8c:	dc400117 	ldw	r17,4(sp)
 2003f90:	dc000017 	ldw	r16,0(sp)
 2003f94:	dec00a04 	addi	sp,sp,40
 2003f98:	f800283a 	ret

02003f9c <_ZN15CADCInfoMessageC1EPh>:
// Import Interfaces

/*
 * Basic Constructor. Used to initialise new message-objects.
 */
CADCInfoMessage::CADCInfoMessage(alt_u8 uiChannelNumbers[])
 2003f9c:	deffe404 	addi	sp,sp,-112
 2003fa0:	dfc01b15 	stw	ra,108(sp)
 2003fa4:	df001a15 	stw	fp,104(sp)
 2003fa8:	ddc01915 	stw	r23,100(sp)
 2003fac:	dd801815 	stw	r22,96(sp)
 2003fb0:	dd401715 	stw	r21,92(sp)
 2003fb4:	dd001615 	stw	r20,88(sp)
 2003fb8:	dcc01515 	stw	r19,84(sp)
 2003fbc:	dc801415 	stw	r18,80(sp)
 2003fc0:	dc401315 	stw	r17,76(sp)
 2003fc4:	dc001215 	stw	r16,72(sp)
 2003fc8:	df001204 	addi	fp,sp,72
 2003fcc:	e13fee15 	stw	r4,-72(fp)
 2003fd0:	e17fef15 	stw	r5,-68(fp)
 2003fd4:	00808074 	movhi	r2,513
 2003fd8:	10ae5a04 	addi	r2,r2,-18072
 2003fdc:	e0bff615 	stw	r2,-40(fp)
 2003fe0:	008080b4 	movhi	r2,514
 2003fe4:	10adb384 	addi	r2,r2,-18738
 2003fe8:	e0bff715 	stw	r2,-36(fp)
 2003fec:	e0bff804 	addi	r2,fp,-32
 2003ff0:	e0ffee04 	addi	r3,fp,-72
 2003ff4:	10c00015 	stw	r3,0(r2)
 2003ff8:	00c08034 	movhi	r3,512
 2003ffc:	18d02304 	addi	r3,r3,16524
 2004000:	10c00115 	stw	r3,4(r2)
 2004004:	16c00215 	stw	sp,8(r2)
 2004008:	e13ff004 	addi	r4,fp,-64
 200400c:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 2004010:	e13fee17 	ldw	r4,-72(fp)
 2004014:	00bfffc4 	movi	r2,-1
 2004018:	e0bff115 	stw	r2,-60(fp)
 200401c:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 2004020:	00c080b4 	movhi	r3,514
 2004024:	18ee2404 	addi	r3,r3,-18288
 2004028:	e0bfee17 	ldw	r2,-72(fp)
 200402c:	10c00015 	stw	r3,0(r2)
{
    setHeader(10, getLength(), 0);
 2004030:	e0bfee17 	ldw	r2,-72(fp)
 2004034:	e0bffe15 	stw	r2,-8(fp)
 2004038:	e13fee17 	ldw	r4,-72(fp)
 200403c:	200386c0 	call	200386c <_ZN15CADCInfoMessage9getLengthEv>
 2004040:	11803fcc 	andi	r6,r2,255
 2004044:	00800044 	movi	r2,1
 2004048:	e0bff115 	stw	r2,-60(fp)
 200404c:	e13ffe17 	ldw	r4,-8(fp)
 2004050:	01400284 	movi	r5,10
 2004054:	000f883a 	mov	r7,zero
 2004058:	20070480 	call	2007048 <_ZN11CCarMessage9setHeaderEhhb>

    m_uiChannelCount = 0;
 200405c:	e0bfee17 	ldw	r2,-72(fp)
 2004060:	10000245 	stb	zero,9(r2)
    m_uiChannelNumbers[0] = uiChannelNumbers[0];
 2004064:	e0bfef17 	ldw	r2,-68(fp)
 2004068:	10c00003 	ldbu	r3,0(r2)
 200406c:	e0bfee17 	ldw	r2,-72(fp)
 2004070:	10c00285 	stb	r3,10(r2)
    m_uiChannelNumbers[1] = uiChannelNumbers[1];
 2004074:	e0bfef17 	ldw	r2,-68(fp)
 2004078:	10800044 	addi	r2,r2,1
 200407c:	10c00003 	ldbu	r3,0(r2)
 2004080:	e0bfee17 	ldw	r2,-72(fp)
 2004084:	10c002c5 	stb	r3,11(r2)
}
 2004088:	00000e06 	br	20040c4 <_ZN15CADCInfoMessageC1EPh+0x128>
 200408c:	e7001204 	addi	fp,fp,72
 2004090:	e0fff217 	ldw	r3,-56(fp)
 2004094:	e0ffff15 	stw	r3,-4(fp)
 2004098:	e0bfff17 	ldw	r2,-4(fp)
 200409c:	e0bffd15 	stw	r2,-12(fp)
 20040a0:	e13fee17 	ldw	r4,-72(fp)
 20040a4:	e03ff115 	stw	zero,-60(fp)
 20040a8:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 20040ac:	e0fffd17 	ldw	r3,-12(fp)
 20040b0:	e0ffff15 	stw	r3,-4(fp)
 20040b4:	00bfffc4 	movi	r2,-1
 20040b8:	e0bff115 	stw	r2,-60(fp)
 20040bc:	e13fff17 	ldw	r4,-4(fp)
 20040c0:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 20040c4:	e13ff004 	addi	r4,fp,-64
 20040c8:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 20040cc:	e037883a 	mov	sp,fp
 20040d0:	dfc00917 	ldw	ra,36(sp)
 20040d4:	df000817 	ldw	fp,32(sp)
 20040d8:	ddc00717 	ldw	r23,28(sp)
 20040dc:	dd800617 	ldw	r22,24(sp)
 20040e0:	dd400517 	ldw	r21,20(sp)
 20040e4:	dd000417 	ldw	r20,16(sp)
 20040e8:	dcc00317 	ldw	r19,12(sp)
 20040ec:	dc800217 	ldw	r18,8(sp)
 20040f0:	dc400117 	ldw	r17,4(sp)
 20040f4:	dc000017 	ldw	r16,0(sp)
 20040f8:	dec00a04 	addi	sp,sp,40
 20040fc:	f800283a 	ret

02004100 <_ZN15CADCInfoMessageC2EPh>:
// Import Interfaces

/*
 * Basic Constructor. Used to initialise new message-objects.
 */
CADCInfoMessage::CADCInfoMessage(alt_u8 uiChannelNumbers[])
 2004100:	deffe404 	addi	sp,sp,-112
 2004104:	dfc01b15 	stw	ra,108(sp)
 2004108:	df001a15 	stw	fp,104(sp)
 200410c:	ddc01915 	stw	r23,100(sp)
 2004110:	dd801815 	stw	r22,96(sp)
 2004114:	dd401715 	stw	r21,92(sp)
 2004118:	dd001615 	stw	r20,88(sp)
 200411c:	dcc01515 	stw	r19,84(sp)
 2004120:	dc801415 	stw	r18,80(sp)
 2004124:	dc401315 	stw	r17,76(sp)
 2004128:	dc001215 	stw	r16,72(sp)
 200412c:	df001204 	addi	fp,sp,72
 2004130:	e13fee15 	stw	r4,-72(fp)
 2004134:	e17fef15 	stw	r5,-68(fp)
 2004138:	00808074 	movhi	r2,513
 200413c:	10ae5a04 	addi	r2,r2,-18072
 2004140:	e0bff615 	stw	r2,-40(fp)
 2004144:	008080b4 	movhi	r2,514
 2004148:	10adb504 	addi	r2,r2,-18732
 200414c:	e0bff715 	stw	r2,-36(fp)
 2004150:	e0bff804 	addi	r2,fp,-32
 2004154:	e0ffee04 	addi	r3,fp,-72
 2004158:	10c00015 	stw	r3,0(r2)
 200415c:	00c08034 	movhi	r3,512
 2004160:	18d07c04 	addi	r3,r3,16880
 2004164:	10c00115 	stw	r3,4(r2)
 2004168:	16c00215 	stw	sp,8(r2)
 200416c:	e13ff004 	addi	r4,fp,-64
 2004170:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 2004174:	e13fee17 	ldw	r4,-72(fp)
 2004178:	00bfffc4 	movi	r2,-1
 200417c:	e0bff115 	stw	r2,-60(fp)
 2004180:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 2004184:	00c080b4 	movhi	r3,514
 2004188:	18ee2404 	addi	r3,r3,-18288
 200418c:	e0bfee17 	ldw	r2,-72(fp)
 2004190:	10c00015 	stw	r3,0(r2)
{
    setHeader(10, getLength(), 0);
 2004194:	e0bfee17 	ldw	r2,-72(fp)
 2004198:	e0bffe15 	stw	r2,-8(fp)
 200419c:	e13fee17 	ldw	r4,-72(fp)
 20041a0:	200386c0 	call	200386c <_ZN15CADCInfoMessage9getLengthEv>
 20041a4:	11803fcc 	andi	r6,r2,255
 20041a8:	00800044 	movi	r2,1
 20041ac:	e0bff115 	stw	r2,-60(fp)
 20041b0:	e13ffe17 	ldw	r4,-8(fp)
 20041b4:	01400284 	movi	r5,10
 20041b8:	000f883a 	mov	r7,zero
 20041bc:	20070480 	call	2007048 <_ZN11CCarMessage9setHeaderEhhb>

    m_uiChannelCount = 0;
 20041c0:	e0bfee17 	ldw	r2,-72(fp)
 20041c4:	10000245 	stb	zero,9(r2)
    m_uiChannelNumbers[0] = uiChannelNumbers[0];
 20041c8:	e0bfef17 	ldw	r2,-68(fp)
 20041cc:	10c00003 	ldbu	r3,0(r2)
 20041d0:	e0bfee17 	ldw	r2,-72(fp)
 20041d4:	10c00285 	stb	r3,10(r2)
    m_uiChannelNumbers[1] = uiChannelNumbers[1];
 20041d8:	e0bfef17 	ldw	r2,-68(fp)
 20041dc:	10800044 	addi	r2,r2,1
 20041e0:	10c00003 	ldbu	r3,0(r2)
 20041e4:	e0bfee17 	ldw	r2,-72(fp)
 20041e8:	10c002c5 	stb	r3,11(r2)
}
 20041ec:	00000e06 	br	2004228 <_ZN15CADCInfoMessageC2EPh+0x128>
 20041f0:	e7001204 	addi	fp,fp,72
 20041f4:	e0fff217 	ldw	r3,-56(fp)
 20041f8:	e0ffff15 	stw	r3,-4(fp)
 20041fc:	e0bfff17 	ldw	r2,-4(fp)
 2004200:	e0bffd15 	stw	r2,-12(fp)
 2004204:	e13fee17 	ldw	r4,-72(fp)
 2004208:	e03ff115 	stw	zero,-60(fp)
 200420c:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 2004210:	e0fffd17 	ldw	r3,-12(fp)
 2004214:	e0ffff15 	stw	r3,-4(fp)
 2004218:	00bfffc4 	movi	r2,-1
 200421c:	e0bff115 	stw	r2,-60(fp)
 2004220:	e13fff17 	ldw	r4,-4(fp)
 2004224:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 2004228:	e13ff004 	addi	r4,fp,-64
 200422c:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 2004230:	e037883a 	mov	sp,fp
 2004234:	dfc00917 	ldw	ra,36(sp)
 2004238:	df000817 	ldw	fp,32(sp)
 200423c:	ddc00717 	ldw	r23,28(sp)
 2004240:	dd800617 	ldw	r22,24(sp)
 2004244:	dd400517 	ldw	r21,20(sp)
 2004248:	dd000417 	ldw	r20,16(sp)
 200424c:	dcc00317 	ldw	r19,12(sp)
 2004250:	dc800217 	ldw	r18,8(sp)
 2004254:	dc400117 	ldw	r17,4(sp)
 2004258:	dc000017 	ldw	r16,0(sp)
 200425c:	dec00a04 	addi	sp,sp,40
 2004260:	f800283a 	ret

02004264 <_ZN17CADCValuesMessage8doActionEv>:
}

/*
 * Overrided from CCarMessage.
 */
void CADCValuesMessage::doAction()
 2004264:	defffe04 	addi	sp,sp,-8
 2004268:	df000115 	stw	fp,4(sp)
 200426c:	df000104 	addi	fp,sp,4
 2004270:	e13fff15 	stw	r4,-4(fp)

	answerMessage(m_uiChannelNumbers, uiTrimmedValues);

#endif /* CENTRAL_ECU_BUILD */

}
 2004274:	e037883a 	mov	sp,fp
 2004278:	df000017 	ldw	fp,0(sp)
 200427c:	dec00104 	addi	sp,sp,4
 2004280:	f800283a 	ret

02004284 <_ZN17CADCValuesMessage13answerMessageEPhPt>:

/*
 * Overrided from CCarMessage.
 */
void CADCValuesMessage::answerMessage(alt_u8 uiChannelNumbers[], alt_u16 uiChannelValues[])
 2004284:	defffc04 	addi	sp,sp,-16
 2004288:	df000315 	stw	fp,12(sp)
 200428c:	df000304 	addi	fp,sp,12
 2004290:	e13ffd15 	stw	r4,-12(fp)
 2004294:	e17ffe15 	stw	r5,-8(fp)
 2004298:	e1bfff15 	stw	r6,-4(fp)
{
    m_uiChannelValues[0] = uiChannelValues[0];
 200429c:	e0bfff17 	ldw	r2,-4(fp)
 20042a0:	10c0000b 	ldhu	r3,0(r2)
 20042a4:	e0bffd17 	ldw	r2,-12(fp)
 20042a8:	10c0030d 	sth	r3,12(r2)
    m_uiChannelValues[1] = uiChannelValues[1];
 20042ac:	e0bfff17 	ldw	r2,-4(fp)
 20042b0:	10800084 	addi	r2,r2,2
 20042b4:	10c0000b 	ldhu	r3,0(r2)
 20042b8:	e0bffd17 	ldw	r2,-12(fp)
 20042bc:	10c0038d 	sth	r3,14(r2)
    m_uiFlags = m_uiFlags | 0x01; // Set response flag
 20042c0:	e0bffd17 	ldw	r2,-12(fp)
 20042c4:	108001c3 	ldbu	r2,7(r2)
 20042c8:	10800054 	ori	r2,r2,1
 20042cc:	1007883a 	mov	r3,r2
 20042d0:	e0bffd17 	ldw	r2,-12(fp)
 20042d4:	10c001c5 	stb	r3,7(r2)
}
 20042d8:	e037883a 	mov	sp,fp
 20042dc:	df000017 	ldw	fp,0(sp)
 20042e0:	dec00104 	addi	sp,sp,4
 20042e4:	f800283a 	ret

020042e8 <_ZN17CADCValuesMessage9getLengthEv>:
}

/*
 * Overrided from CCarMessage.
 */
alt_u32 CADCValuesMessage::getLength()
 20042e8:	defffe04 	addi	sp,sp,-8
 20042ec:	df000115 	stw	fp,4(sp)
 20042f0:	df000104 	addi	fp,sp,4
 20042f4:	e13fff15 	stw	r4,-4(fp)
{
    return 12;
 20042f8:	00800304 	movi	r2,12
}
 20042fc:	e037883a 	mov	sp,fp
 2004300:	df000017 	ldw	fp,0(sp)
 2004304:	dec00104 	addi	sp,sp,4
 2004308:	f800283a 	ret

0200430c <_ZN17CADCValuesMessage12parseMessageEPhi>:

/*
 * Overrided from CCarMessage.
 */
void CADCValuesMessage::parseMessage(alt_u8 *pMessage, int iLength)
 200430c:	defffc04 	addi	sp,sp,-16
 2004310:	df000315 	stw	fp,12(sp)
 2004314:	df000304 	addi	fp,sp,12
 2004318:	e13ffd15 	stw	r4,-12(fp)
 200431c:	e17ffe15 	stw	r5,-8(fp)
 2004320:	e1bfff15 	stw	r6,-4(fp)
{
    if(iLength < 8)
 2004324:	e0bfff17 	ldw	r2,-4(fp)
 2004328:	10800210 	cmplti	r2,r2,8
 200432c:	10002b1e 	bne	r2,zero,20043dc <_ZN17CADCValuesMessage12parseMessageEPhi+0xd0>
        return;

    m_uiChannelNumbers[0] = pMessage[0];
 2004330:	e0bffe17 	ldw	r2,-8(fp)
 2004334:	10c00003 	ldbu	r3,0(r2)
 2004338:	e0bffd17 	ldw	r2,-12(fp)
 200433c:	10c00245 	stb	r3,9(r2)
    m_uiChannelValues[0] = ((alt_u32) pMessage[2]) << 0;
 2004340:	e0bffe17 	ldw	r2,-8(fp)
 2004344:	10800084 	addi	r2,r2,2
 2004348:	10800003 	ldbu	r2,0(r2)
 200434c:	10c03fcc 	andi	r3,r2,255
 2004350:	e0bffd17 	ldw	r2,-12(fp)
 2004354:	10c0030d 	sth	r3,12(r2)
    m_uiChannelValues[0] = ((alt_u32) pMessage[3]) << 8;
 2004358:	e0bffe17 	ldw	r2,-8(fp)
 200435c:	108000c4 	addi	r2,r2,3
 2004360:	10800003 	ldbu	r2,0(r2)
 2004364:	10803fcc 	andi	r2,r2,255
 2004368:	1004923a 	slli	r2,r2,8
 200436c:	1007883a 	mov	r3,r2
 2004370:	e0bffd17 	ldw	r2,-12(fp)
 2004374:	10c0030d 	sth	r3,12(r2)
    m_uiChannelNumbers[1] = pMessage[4];
 2004378:	e0bffe17 	ldw	r2,-8(fp)
 200437c:	10800104 	addi	r2,r2,4
 2004380:	10c00003 	ldbu	r3,0(r2)
 2004384:	e0bffd17 	ldw	r2,-12(fp)
 2004388:	10c00285 	stb	r3,10(r2)
    m_uiChannelValues[1] = ((alt_u32) pMessage[6]) << 0;
 200438c:	e0bffe17 	ldw	r2,-8(fp)
 2004390:	10800184 	addi	r2,r2,6
 2004394:	10800003 	ldbu	r2,0(r2)
 2004398:	10c03fcc 	andi	r3,r2,255
 200439c:	e0bffd17 	ldw	r2,-12(fp)
 20043a0:	10c0038d 	sth	r3,14(r2)
    m_uiChannelValues[1] += ((alt_u32) pMessage[7]) << 8;
 20043a4:	e0bffd17 	ldw	r2,-12(fp)
 20043a8:	10c0038b 	ldhu	r3,14(r2)
 20043ac:	e0bffe17 	ldw	r2,-8(fp)
 20043b0:	108001c4 	addi	r2,r2,7
 20043b4:	10800003 	ldbu	r2,0(r2)
 20043b8:	10803fcc 	andi	r2,r2,255
 20043bc:	1004923a 	slli	r2,r2,8
 20043c0:	1885883a 	add	r2,r3,r2
 20043c4:	1007883a 	mov	r3,r2
 20043c8:	e0bffd17 	ldw	r2,-12(fp)
 20043cc:	10c0038d 	sth	r3,14(r2)

    m_bValid = true;
 20043d0:	e0fffd17 	ldw	r3,-12(fp)
 20043d4:	00800044 	movi	r2,1
 20043d8:	18800205 	stb	r2,8(r3)
}
 20043dc:	e037883a 	mov	sp,fp
 20043e0:	df000017 	ldw	fp,0(sp)
 20043e4:	dec00104 	addi	sp,sp,4
 20043e8:	f800283a 	ret

020043ec <_ZN17CADCValuesMessage8getBytesEPh>:
}

/*
 * Overrided from CCarMessage.
 */
bool CADCValuesMessage::getBytes(alt_u8 *pMessage)
 20043ec:	defffc04 	addi	sp,sp,-16
 20043f0:	dfc00315 	stw	ra,12(sp)
 20043f4:	df000215 	stw	fp,8(sp)
 20043f8:	df000204 	addi	fp,sp,8
 20043fc:	e13ffe15 	stw	r4,-8(fp)
 2004400:	e17fff15 	stw	r5,-4(fp)
{
    CCarMessage::getBytes(pMessage);
 2004404:	e13ffe17 	ldw	r4,-8(fp)
 2004408:	e17fff17 	ldw	r5,-4(fp)
 200440c:	2006f040 	call	2006f04 <_ZN11CCarMessage8getBytesEPh>

    pMessage[4] = m_uiChannelNumbers[0];
 2004410:	e0bfff17 	ldw	r2,-4(fp)
 2004414:	10c00104 	addi	r3,r2,4
 2004418:	e0bffe17 	ldw	r2,-8(fp)
 200441c:	10800243 	ldbu	r2,9(r2)
 2004420:	18800005 	stb	r2,0(r3)
    pMessage[5] = 0;
 2004424:	e0bfff17 	ldw	r2,-4(fp)
 2004428:	10800144 	addi	r2,r2,5
 200442c:	10000005 	stb	zero,0(r2)
    pMessage[6] = (m_uiChannelValues[0] >> 0) & 0xFF;
 2004430:	e0bfff17 	ldw	r2,-4(fp)
 2004434:	11000184 	addi	r4,r2,6
 2004438:	e0bffe17 	ldw	r2,-8(fp)
 200443c:	1080030b 	ldhu	r2,12(r2)
 2004440:	1007883a 	mov	r3,r2
 2004444:	00bfffc4 	movi	r2,-1
 2004448:	1884703a 	and	r2,r3,r2
 200444c:	20800005 	stb	r2,0(r4)
    pMessage[7] = (m_uiChannelValues[0] >> 8) & 0xFF;
 2004450:	e0bfff17 	ldw	r2,-4(fp)
 2004454:	110001c4 	addi	r4,r2,7
 2004458:	e0bffe17 	ldw	r2,-8(fp)
 200445c:	1080030b 	ldhu	r2,12(r2)
 2004460:	10bfffcc 	andi	r2,r2,65535
 2004464:	1004d23a 	srli	r2,r2,8
 2004468:	1007883a 	mov	r3,r2
 200446c:	00bfffc4 	movi	r2,-1
 2004470:	1884703a 	and	r2,r3,r2
 2004474:	20800005 	stb	r2,0(r4)
    pMessage[8] = m_uiChannelNumbers[1];
 2004478:	e0bfff17 	ldw	r2,-4(fp)
 200447c:	10c00204 	addi	r3,r2,8
 2004480:	e0bffe17 	ldw	r2,-8(fp)
 2004484:	10800283 	ldbu	r2,10(r2)
 2004488:	18800005 	stb	r2,0(r3)
    pMessage[9] = 0;
 200448c:	e0bfff17 	ldw	r2,-4(fp)
 2004490:	10800244 	addi	r2,r2,9
 2004494:	10000005 	stb	zero,0(r2)
    pMessage[10] = (m_uiChannelValues[1] >> 0) & 0xFF;
 2004498:	e0bfff17 	ldw	r2,-4(fp)
 200449c:	11000284 	addi	r4,r2,10
 20044a0:	e0bffe17 	ldw	r2,-8(fp)
 20044a4:	1080038b 	ldhu	r2,14(r2)
 20044a8:	1007883a 	mov	r3,r2
 20044ac:	00bfffc4 	movi	r2,-1
 20044b0:	1884703a 	and	r2,r3,r2
 20044b4:	20800005 	stb	r2,0(r4)
    pMessage[11] = (m_uiChannelValues[1] >> 8) & 0xFF;
 20044b8:	e0bfff17 	ldw	r2,-4(fp)
 20044bc:	110002c4 	addi	r4,r2,11
 20044c0:	e0bffe17 	ldw	r2,-8(fp)
 20044c4:	1080038b 	ldhu	r2,14(r2)
 20044c8:	10bfffcc 	andi	r2,r2,65535
 20044cc:	1004d23a 	srli	r2,r2,8
 20044d0:	1007883a 	mov	r3,r2
 20044d4:	00bfffc4 	movi	r2,-1
 20044d8:	1884703a 	and	r2,r3,r2
 20044dc:	20800005 	stb	r2,0(r4)
    return m_bValid;
 20044e0:	e0bffe17 	ldw	r2,-8(fp)
 20044e4:	10800203 	ldbu	r2,8(r2)
 20044e8:	10803fcc 	andi	r2,r2,255
}
 20044ec:	e037883a 	mov	sp,fp
 20044f0:	dfc00117 	ldw	ra,4(sp)
 20044f4:	df000017 	ldw	fp,0(sp)
 20044f8:	dec00204 	addi	sp,sp,8
 20044fc:	f800283a 	ret

02004500 <_ZN17CADCValuesMessageD0Ev>:
}

/*
 * Basic Destructor.
 */
CADCValuesMessage::~CADCValuesMessage()
 2004500:	defffd04 	addi	sp,sp,-12
 2004504:	dfc00215 	stw	ra,8(sp)
 2004508:	df000115 	stw	fp,4(sp)
 200450c:	df000104 	addi	fp,sp,4
 2004510:	e13fff15 	stw	r4,-4(fp)
 2004514:	00c080b4 	movhi	r3,514
 2004518:	18ee3304 	addi	r3,r3,-18228
 200451c:	e0bfff17 	ldw	r2,-4(fp)
 2004520:	10c00015 	stw	r3,0(r2)
{
}
 2004524:	e13fff17 	ldw	r4,-4(fp)
 2004528:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 200452c:	00800044 	movi	r2,1
 2004530:	10803fcc 	andi	r2,r2,255
 2004534:	1005003a 	cmpeq	r2,r2,zero
 2004538:	1000021e 	bne	r2,zero,2004544 <_ZN17CADCValuesMessageD0Ev+0x44>
 200453c:	e13fff17 	ldw	r4,-4(fp)
 2004540:	200c1380 	call	200c138 <_ZdlPv>
 2004544:	e037883a 	mov	sp,fp
 2004548:	dfc00117 	ldw	ra,4(sp)
 200454c:	df000017 	ldw	fp,0(sp)
 2004550:	dec00204 	addi	sp,sp,8
 2004554:	f800283a 	ret

02004558 <_ZN17CADCValuesMessageD1Ev>:
}

/*
 * Basic Destructor.
 */
CADCValuesMessage::~CADCValuesMessage()
 2004558:	defffd04 	addi	sp,sp,-12
 200455c:	dfc00215 	stw	ra,8(sp)
 2004560:	df000115 	stw	fp,4(sp)
 2004564:	df000104 	addi	fp,sp,4
 2004568:	e13fff15 	stw	r4,-4(fp)
 200456c:	00c080b4 	movhi	r3,514
 2004570:	18ee3304 	addi	r3,r3,-18228
 2004574:	e0bfff17 	ldw	r2,-4(fp)
 2004578:	10c00015 	stw	r3,0(r2)
{
}
 200457c:	e13fff17 	ldw	r4,-4(fp)
 2004580:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 2004584:	0005883a 	mov	r2,zero
 2004588:	10803fcc 	andi	r2,r2,255
 200458c:	1005003a 	cmpeq	r2,r2,zero
 2004590:	1000021e 	bne	r2,zero,200459c <_ZN17CADCValuesMessageD1Ev+0x44>
 2004594:	e13fff17 	ldw	r4,-4(fp)
 2004598:	200c1380 	call	200c138 <_ZdlPv>
 200459c:	e037883a 	mov	sp,fp
 20045a0:	dfc00117 	ldw	ra,4(sp)
 20045a4:	df000017 	ldw	fp,0(sp)
 20045a8:	dec00204 	addi	sp,sp,8
 20045ac:	f800283a 	ret

020045b0 <_ZN17CADCValuesMessageD2Ev>:
}

/*
 * Basic Destructor.
 */
CADCValuesMessage::~CADCValuesMessage()
 20045b0:	defffd04 	addi	sp,sp,-12
 20045b4:	dfc00215 	stw	ra,8(sp)
 20045b8:	df000115 	stw	fp,4(sp)
 20045bc:	df000104 	addi	fp,sp,4
 20045c0:	e13fff15 	stw	r4,-4(fp)
 20045c4:	00c080b4 	movhi	r3,514
 20045c8:	18ee3304 	addi	r3,r3,-18228
 20045cc:	e0bfff17 	ldw	r2,-4(fp)
 20045d0:	10c00015 	stw	r3,0(r2)
{
}
 20045d4:	e13fff17 	ldw	r4,-4(fp)
 20045d8:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 20045dc:	0005883a 	mov	r2,zero
 20045e0:	10803fcc 	andi	r2,r2,255
 20045e4:	1005003a 	cmpeq	r2,r2,zero
 20045e8:	1000021e 	bne	r2,zero,20045f4 <_ZN17CADCValuesMessageD2Ev+0x44>
 20045ec:	e13fff17 	ldw	r4,-4(fp)
 20045f0:	200c1380 	call	200c138 <_ZdlPv>
 20045f4:	e037883a 	mov	sp,fp
 20045f8:	dfc00117 	ldw	ra,4(sp)
 20045fc:	df000017 	ldw	fp,0(sp)
 2004600:	dec00204 	addi	sp,sp,8
 2004604:	f800283a 	ret

02004608 <_ZN17CADCValuesMessageC1EPhi>:
/*
 * Constructor. Used to reassemble object from Byte stream.
 * pMessage : Byte-Array containing the fields of the subMessage
 * iLength  : Length of the said array
 */
CADCValuesMessage::CADCValuesMessage(alt_u8 *pMessage, int iLength)
 2004608:	deffe404 	addi	sp,sp,-112
 200460c:	dfc01b15 	stw	ra,108(sp)
 2004610:	df001a15 	stw	fp,104(sp)
 2004614:	ddc01915 	stw	r23,100(sp)
 2004618:	dd801815 	stw	r22,96(sp)
 200461c:	dd401715 	stw	r21,92(sp)
 2004620:	dd001615 	stw	r20,88(sp)
 2004624:	dcc01515 	stw	r19,84(sp)
 2004628:	dc801415 	stw	r18,80(sp)
 200462c:	dc401315 	stw	r17,76(sp)
 2004630:	dc001215 	stw	r16,72(sp)
 2004634:	df001204 	addi	fp,sp,72
 2004638:	e13fee15 	stw	r4,-72(fp)
 200463c:	e17fef15 	stw	r5,-68(fp)
 2004640:	e1bff015 	stw	r6,-64(fp)
 2004644:	00808074 	movhi	r2,513
 2004648:	10ae5a04 	addi	r2,r2,-18072
 200464c:	e0bff715 	stw	r2,-36(fp)
 2004650:	008080b4 	movhi	r2,514
 2004654:	10adb684 	addi	r2,r2,-18726
 2004658:	e0bff815 	stw	r2,-32(fp)
 200465c:	e0bff904 	addi	r2,fp,-28
 2004660:	e0ffee04 	addi	r3,fp,-72
 2004664:	10c00015 	stw	r3,0(r2)
 2004668:	00c08034 	movhi	r3,512
 200466c:	18d1bc04 	addi	r3,r3,18160
 2004670:	10c00115 	stw	r3,4(r2)
 2004674:	16c00215 	stw	sp,8(r2)
 2004678:	e13ff104 	addi	r4,fp,-60
 200467c:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 2004680:	e13fee17 	ldw	r4,-72(fp)
 2004684:	00bfffc4 	movi	r2,-1
 2004688:	e0bff215 	stw	r2,-56(fp)
 200468c:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 2004690:	00c080b4 	movhi	r3,514
 2004694:	18ee3304 	addi	r3,r3,-18228
 2004698:	e0bfee17 	ldw	r2,-72(fp)
 200469c:	10c00015 	stw	r3,0(r2)
{
    parseHeader(pMessage, iLength);
 20046a0:	e13fee17 	ldw	r4,-72(fp)
 20046a4:	00800044 	movi	r2,1
 20046a8:	e0bff215 	stw	r2,-56(fp)
 20046ac:	e17fef17 	ldw	r5,-68(fp)
 20046b0:	e1bff017 	ldw	r6,-64(fp)
 20046b4:	20071cc0 	call	20071cc <_ZN11CCarMessage11parseHeaderEPhi>
    if(m_bValid)
 20046b8:	e0bfee17 	ldw	r2,-72(fp)
 20046bc:	10800203 	ldbu	r2,8(r2)
 20046c0:	10803fcc 	andi	r2,r2,255
 20046c4:	1005003a 	cmpeq	r2,r2,zero
 20046c8:	1000171e 	bne	r2,zero,2004728 <_ZN17CADCValuesMessageC1EPhi+0x120>
    {
        m_bValid = false;
 20046cc:	e0bfee17 	ldw	r2,-72(fp)
 20046d0:	10000205 	stb	zero,8(r2)
        parseMessage(pMessage+4, iLength-4);
 20046d4:	e0bfef17 	ldw	r2,-68(fp)
 20046d8:	11400104 	addi	r5,r2,4
 20046dc:	e0bff017 	ldw	r2,-64(fp)
 20046e0:	11bfff04 	addi	r6,r2,-4
 20046e4:	e13fee17 	ldw	r4,-72(fp)
 20046e8:	200430c0 	call	200430c <_ZN17CADCValuesMessage12parseMessageEPhi>
    }

}
 20046ec:	00000e06 	br	2004728 <_ZN17CADCValuesMessageC1EPhi+0x120>
 20046f0:	e7001204 	addi	fp,fp,72
 20046f4:	e0bff317 	ldw	r2,-52(fp)
 20046f8:	e0bfff15 	stw	r2,-4(fp)
 20046fc:	e0ffff17 	ldw	r3,-4(fp)
 2004700:	e0fffe15 	stw	r3,-8(fp)
 2004704:	e13fee17 	ldw	r4,-72(fp)
 2004708:	e03ff215 	stw	zero,-56(fp)
 200470c:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 2004710:	e0bffe17 	ldw	r2,-8(fp)
 2004714:	e0bfff15 	stw	r2,-4(fp)
 2004718:	00bfffc4 	movi	r2,-1
 200471c:	e0bff215 	stw	r2,-56(fp)
 2004720:	e13fff17 	ldw	r4,-4(fp)
 2004724:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 2004728:	e13ff104 	addi	r4,fp,-60
 200472c:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 2004730:	e037883a 	mov	sp,fp
 2004734:	dfc00917 	ldw	ra,36(sp)
 2004738:	df000817 	ldw	fp,32(sp)
 200473c:	ddc00717 	ldw	r23,28(sp)
 2004740:	dd800617 	ldw	r22,24(sp)
 2004744:	dd400517 	ldw	r21,20(sp)
 2004748:	dd000417 	ldw	r20,16(sp)
 200474c:	dcc00317 	ldw	r19,12(sp)
 2004750:	dc800217 	ldw	r18,8(sp)
 2004754:	dc400117 	ldw	r17,4(sp)
 2004758:	dc000017 	ldw	r16,0(sp)
 200475c:	dec00a04 	addi	sp,sp,40
 2004760:	f800283a 	ret

02004764 <_ZN17CADCValuesMessageC2EPhi>:
/*
 * Constructor. Used to reassemble object from Byte stream.
 * pMessage : Byte-Array containing the fields of the subMessage
 * iLength  : Length of the said array
 */
CADCValuesMessage::CADCValuesMessage(alt_u8 *pMessage, int iLength)
 2004764:	deffe404 	addi	sp,sp,-112
 2004768:	dfc01b15 	stw	ra,108(sp)
 200476c:	df001a15 	stw	fp,104(sp)
 2004770:	ddc01915 	stw	r23,100(sp)
 2004774:	dd801815 	stw	r22,96(sp)
 2004778:	dd401715 	stw	r21,92(sp)
 200477c:	dd001615 	stw	r20,88(sp)
 2004780:	dcc01515 	stw	r19,84(sp)
 2004784:	dc801415 	stw	r18,80(sp)
 2004788:	dc401315 	stw	r17,76(sp)
 200478c:	dc001215 	stw	r16,72(sp)
 2004790:	df001204 	addi	fp,sp,72
 2004794:	e13fee15 	stw	r4,-72(fp)
 2004798:	e17fef15 	stw	r5,-68(fp)
 200479c:	e1bff015 	stw	r6,-64(fp)
 20047a0:	00808074 	movhi	r2,513
 20047a4:	10ae5a04 	addi	r2,r2,-18072
 20047a8:	e0bff715 	stw	r2,-36(fp)
 20047ac:	008080b4 	movhi	r2,514
 20047b0:	10adb804 	addi	r2,r2,-18720
 20047b4:	e0bff815 	stw	r2,-32(fp)
 20047b8:	e0bff904 	addi	r2,fp,-28
 20047bc:	e0ffee04 	addi	r3,fp,-72
 20047c0:	10c00015 	stw	r3,0(r2)
 20047c4:	00c08034 	movhi	r3,512
 20047c8:	18d21304 	addi	r3,r3,18508
 20047cc:	10c00115 	stw	r3,4(r2)
 20047d0:	16c00215 	stw	sp,8(r2)
 20047d4:	e13ff104 	addi	r4,fp,-60
 20047d8:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 20047dc:	e13fee17 	ldw	r4,-72(fp)
 20047e0:	00bfffc4 	movi	r2,-1
 20047e4:	e0bff215 	stw	r2,-56(fp)
 20047e8:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 20047ec:	00c080b4 	movhi	r3,514
 20047f0:	18ee3304 	addi	r3,r3,-18228
 20047f4:	e0bfee17 	ldw	r2,-72(fp)
 20047f8:	10c00015 	stw	r3,0(r2)
{
    parseHeader(pMessage, iLength);
 20047fc:	e13fee17 	ldw	r4,-72(fp)
 2004800:	00800044 	movi	r2,1
 2004804:	e0bff215 	stw	r2,-56(fp)
 2004808:	e17fef17 	ldw	r5,-68(fp)
 200480c:	e1bff017 	ldw	r6,-64(fp)
 2004810:	20071cc0 	call	20071cc <_ZN11CCarMessage11parseHeaderEPhi>
    if(m_bValid)
 2004814:	e0bfee17 	ldw	r2,-72(fp)
 2004818:	10800203 	ldbu	r2,8(r2)
 200481c:	10803fcc 	andi	r2,r2,255
 2004820:	1005003a 	cmpeq	r2,r2,zero
 2004824:	1000171e 	bne	r2,zero,2004884 <_ZN17CADCValuesMessageC2EPhi+0x120>
    {
        m_bValid = false;
 2004828:	e0bfee17 	ldw	r2,-72(fp)
 200482c:	10000205 	stb	zero,8(r2)
        parseMessage(pMessage+4, iLength-4);
 2004830:	e0bfef17 	ldw	r2,-68(fp)
 2004834:	11400104 	addi	r5,r2,4
 2004838:	e0bff017 	ldw	r2,-64(fp)
 200483c:	11bfff04 	addi	r6,r2,-4
 2004840:	e13fee17 	ldw	r4,-72(fp)
 2004844:	200430c0 	call	200430c <_ZN17CADCValuesMessage12parseMessageEPhi>
    }

}
 2004848:	00000e06 	br	2004884 <_ZN17CADCValuesMessageC2EPhi+0x120>
 200484c:	e7001204 	addi	fp,fp,72
 2004850:	e0bff317 	ldw	r2,-52(fp)
 2004854:	e0bfff15 	stw	r2,-4(fp)
 2004858:	e0ffff17 	ldw	r3,-4(fp)
 200485c:	e0fffe15 	stw	r3,-8(fp)
 2004860:	e13fee17 	ldw	r4,-72(fp)
 2004864:	e03ff215 	stw	zero,-56(fp)
 2004868:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 200486c:	e0bffe17 	ldw	r2,-8(fp)
 2004870:	e0bfff15 	stw	r2,-4(fp)
 2004874:	00bfffc4 	movi	r2,-1
 2004878:	e0bff215 	stw	r2,-56(fp)
 200487c:	e13fff17 	ldw	r4,-4(fp)
 2004880:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 2004884:	e13ff104 	addi	r4,fp,-60
 2004888:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 200488c:	e037883a 	mov	sp,fp
 2004890:	dfc00917 	ldw	ra,36(sp)
 2004894:	df000817 	ldw	fp,32(sp)
 2004898:	ddc00717 	ldw	r23,28(sp)
 200489c:	dd800617 	ldw	r22,24(sp)
 20048a0:	dd400517 	ldw	r21,20(sp)
 20048a4:	dd000417 	ldw	r20,16(sp)
 20048a8:	dcc00317 	ldw	r19,12(sp)
 20048ac:	dc800217 	ldw	r18,8(sp)
 20048b0:	dc400117 	ldw	r17,4(sp)
 20048b4:	dc000017 	ldw	r16,0(sp)
 20048b8:	dec00a04 	addi	sp,sp,40
 20048bc:	f800283a 	ret

020048c0 <_ZN17CADCValuesMessageC1EPh>:
// Import Interfaces

/*
 * Basic Constructor. Used to initialise new message-objects.
 */
CADCValuesMessage::CADCValuesMessage(alt_u8 uiChannelNumbers[])
 20048c0:	deffe404 	addi	sp,sp,-112
 20048c4:	dfc01b15 	stw	ra,108(sp)
 20048c8:	df001a15 	stw	fp,104(sp)
 20048cc:	ddc01915 	stw	r23,100(sp)
 20048d0:	dd801815 	stw	r22,96(sp)
 20048d4:	dd401715 	stw	r21,92(sp)
 20048d8:	dd001615 	stw	r20,88(sp)
 20048dc:	dcc01515 	stw	r19,84(sp)
 20048e0:	dc801415 	stw	r18,80(sp)
 20048e4:	dc401315 	stw	r17,76(sp)
 20048e8:	dc001215 	stw	r16,72(sp)
 20048ec:	df001204 	addi	fp,sp,72
 20048f0:	e13fee15 	stw	r4,-72(fp)
 20048f4:	e17fef15 	stw	r5,-68(fp)
 20048f8:	00808074 	movhi	r2,513
 20048fc:	10ae5a04 	addi	r2,r2,-18072
 2004900:	e0bff615 	stw	r2,-40(fp)
 2004904:	008080b4 	movhi	r2,514
 2004908:	10adb984 	addi	r2,r2,-18714
 200490c:	e0bff715 	stw	r2,-36(fp)
 2004910:	e0bff804 	addi	r2,fp,-32
 2004914:	e0ffee04 	addi	r3,fp,-72
 2004918:	10c00015 	stw	r3,0(r2)
 200491c:	00c08034 	movhi	r3,512
 2004920:	18d26a04 	addi	r3,r3,18856
 2004924:	10c00115 	stw	r3,4(r2)
 2004928:	16c00215 	stw	sp,8(r2)
 200492c:	e13ff004 	addi	r4,fp,-64
 2004930:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 2004934:	e13fee17 	ldw	r4,-72(fp)
 2004938:	00bfffc4 	movi	r2,-1
 200493c:	e0bff115 	stw	r2,-60(fp)
 2004940:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 2004944:	00c080b4 	movhi	r3,514
 2004948:	18ee3304 	addi	r3,r3,-18228
 200494c:	e0bfee17 	ldw	r2,-72(fp)
 2004950:	10c00015 	stw	r3,0(r2)
{
    setHeader(10, getLength(), 1);
 2004954:	e0bfee17 	ldw	r2,-72(fp)
 2004958:	e0bffe15 	stw	r2,-8(fp)
 200495c:	e13fee17 	ldw	r4,-72(fp)
 2004960:	20042e80 	call	20042e8 <_ZN17CADCValuesMessage9getLengthEv>
 2004964:	11803fcc 	andi	r6,r2,255
 2004968:	00800044 	movi	r2,1
 200496c:	e0bff115 	stw	r2,-60(fp)
 2004970:	e13ffe17 	ldw	r4,-8(fp)
 2004974:	01400284 	movi	r5,10
 2004978:	01c00044 	movi	r7,1
 200497c:	20070480 	call	2007048 <_ZN11CCarMessage9setHeaderEhhb>

    m_uiChannelNumbers[0] = uiChannelNumbers[0];
 2004980:	e0bfef17 	ldw	r2,-68(fp)
 2004984:	10c00003 	ldbu	r3,0(r2)
 2004988:	e0bfee17 	ldw	r2,-72(fp)
 200498c:	10c00245 	stb	r3,9(r2)
    m_uiChannelNumbers[1] = uiChannelNumbers[1];
 2004990:	e0bfef17 	ldw	r2,-68(fp)
 2004994:	10800044 	addi	r2,r2,1
 2004998:	10c00003 	ldbu	r3,0(r2)
 200499c:	e0bfee17 	ldw	r2,-72(fp)
 20049a0:	10c00285 	stb	r3,10(r2)
}
 20049a4:	00000e06 	br	20049e0 <_ZN17CADCValuesMessageC1EPh+0x120>
 20049a8:	e7001204 	addi	fp,fp,72
 20049ac:	e0fff217 	ldw	r3,-56(fp)
 20049b0:	e0ffff15 	stw	r3,-4(fp)
 20049b4:	e0bfff17 	ldw	r2,-4(fp)
 20049b8:	e0bffd15 	stw	r2,-12(fp)
 20049bc:	e13fee17 	ldw	r4,-72(fp)
 20049c0:	e03ff115 	stw	zero,-60(fp)
 20049c4:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 20049c8:	e0fffd17 	ldw	r3,-12(fp)
 20049cc:	e0ffff15 	stw	r3,-4(fp)
 20049d0:	00bfffc4 	movi	r2,-1
 20049d4:	e0bff115 	stw	r2,-60(fp)
 20049d8:	e13fff17 	ldw	r4,-4(fp)
 20049dc:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 20049e0:	e13ff004 	addi	r4,fp,-64
 20049e4:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 20049e8:	e037883a 	mov	sp,fp
 20049ec:	dfc00917 	ldw	ra,36(sp)
 20049f0:	df000817 	ldw	fp,32(sp)
 20049f4:	ddc00717 	ldw	r23,28(sp)
 20049f8:	dd800617 	ldw	r22,24(sp)
 20049fc:	dd400517 	ldw	r21,20(sp)
 2004a00:	dd000417 	ldw	r20,16(sp)
 2004a04:	dcc00317 	ldw	r19,12(sp)
 2004a08:	dc800217 	ldw	r18,8(sp)
 2004a0c:	dc400117 	ldw	r17,4(sp)
 2004a10:	dc000017 	ldw	r16,0(sp)
 2004a14:	dec00a04 	addi	sp,sp,40
 2004a18:	f800283a 	ret

02004a1c <_ZN17CADCValuesMessageC2EPh>:
// Import Interfaces

/*
 * Basic Constructor. Used to initialise new message-objects.
 */
CADCValuesMessage::CADCValuesMessage(alt_u8 uiChannelNumbers[])
 2004a1c:	deffe404 	addi	sp,sp,-112
 2004a20:	dfc01b15 	stw	ra,108(sp)
 2004a24:	df001a15 	stw	fp,104(sp)
 2004a28:	ddc01915 	stw	r23,100(sp)
 2004a2c:	dd801815 	stw	r22,96(sp)
 2004a30:	dd401715 	stw	r21,92(sp)
 2004a34:	dd001615 	stw	r20,88(sp)
 2004a38:	dcc01515 	stw	r19,84(sp)
 2004a3c:	dc801415 	stw	r18,80(sp)
 2004a40:	dc401315 	stw	r17,76(sp)
 2004a44:	dc001215 	stw	r16,72(sp)
 2004a48:	df001204 	addi	fp,sp,72
 2004a4c:	e13fee15 	stw	r4,-72(fp)
 2004a50:	e17fef15 	stw	r5,-68(fp)
 2004a54:	00808074 	movhi	r2,513
 2004a58:	10ae5a04 	addi	r2,r2,-18072
 2004a5c:	e0bff615 	stw	r2,-40(fp)
 2004a60:	008080b4 	movhi	r2,514
 2004a64:	10adbb04 	addi	r2,r2,-18708
 2004a68:	e0bff715 	stw	r2,-36(fp)
 2004a6c:	e0bff804 	addi	r2,fp,-32
 2004a70:	e0ffee04 	addi	r3,fp,-72
 2004a74:	10c00015 	stw	r3,0(r2)
 2004a78:	00c08034 	movhi	r3,512
 2004a7c:	18d2c104 	addi	r3,r3,19204
 2004a80:	10c00115 	stw	r3,4(r2)
 2004a84:	16c00215 	stw	sp,8(r2)
 2004a88:	e13ff004 	addi	r4,fp,-64
 2004a8c:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 2004a90:	e13fee17 	ldw	r4,-72(fp)
 2004a94:	00bfffc4 	movi	r2,-1
 2004a98:	e0bff115 	stw	r2,-60(fp)
 2004a9c:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 2004aa0:	00c080b4 	movhi	r3,514
 2004aa4:	18ee3304 	addi	r3,r3,-18228
 2004aa8:	e0bfee17 	ldw	r2,-72(fp)
 2004aac:	10c00015 	stw	r3,0(r2)
{
    setHeader(10, getLength(), 1);
 2004ab0:	e0bfee17 	ldw	r2,-72(fp)
 2004ab4:	e0bffe15 	stw	r2,-8(fp)
 2004ab8:	e13fee17 	ldw	r4,-72(fp)
 2004abc:	20042e80 	call	20042e8 <_ZN17CADCValuesMessage9getLengthEv>
 2004ac0:	11803fcc 	andi	r6,r2,255
 2004ac4:	00800044 	movi	r2,1
 2004ac8:	e0bff115 	stw	r2,-60(fp)
 2004acc:	e13ffe17 	ldw	r4,-8(fp)
 2004ad0:	01400284 	movi	r5,10
 2004ad4:	01c00044 	movi	r7,1
 2004ad8:	20070480 	call	2007048 <_ZN11CCarMessage9setHeaderEhhb>

    m_uiChannelNumbers[0] = uiChannelNumbers[0];
 2004adc:	e0bfef17 	ldw	r2,-68(fp)
 2004ae0:	10c00003 	ldbu	r3,0(r2)
 2004ae4:	e0bfee17 	ldw	r2,-72(fp)
 2004ae8:	10c00245 	stb	r3,9(r2)
    m_uiChannelNumbers[1] = uiChannelNumbers[1];
 2004aec:	e0bfef17 	ldw	r2,-68(fp)
 2004af0:	10800044 	addi	r2,r2,1
 2004af4:	10c00003 	ldbu	r3,0(r2)
 2004af8:	e0bfee17 	ldw	r2,-72(fp)
 2004afc:	10c00285 	stb	r3,10(r2)
}
 2004b00:	00000e06 	br	2004b3c <_ZN17CADCValuesMessageC2EPh+0x120>
 2004b04:	e7001204 	addi	fp,fp,72
 2004b08:	e0fff217 	ldw	r3,-56(fp)
 2004b0c:	e0ffff15 	stw	r3,-4(fp)
 2004b10:	e0bfff17 	ldw	r2,-4(fp)
 2004b14:	e0bffd15 	stw	r2,-12(fp)
 2004b18:	e13fee17 	ldw	r4,-72(fp)
 2004b1c:	e03ff115 	stw	zero,-60(fp)
 2004b20:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 2004b24:	e0fffd17 	ldw	r3,-12(fp)
 2004b28:	e0ffff15 	stw	r3,-4(fp)
 2004b2c:	00bfffc4 	movi	r2,-1
 2004b30:	e0bff115 	stw	r2,-60(fp)
 2004b34:	e13fff17 	ldw	r4,-4(fp)
 2004b38:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 2004b3c:	e13ff004 	addi	r4,fp,-64
 2004b40:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 2004b44:	e037883a 	mov	sp,fp
 2004b48:	dfc00917 	ldw	ra,36(sp)
 2004b4c:	df000817 	ldw	fp,32(sp)
 2004b50:	ddc00717 	ldw	r23,28(sp)
 2004b54:	dd800617 	ldw	r22,24(sp)
 2004b58:	dd400517 	ldw	r21,20(sp)
 2004b5c:	dd000417 	ldw	r20,16(sp)
 2004b60:	dcc00317 	ldw	r19,12(sp)
 2004b64:	dc800217 	ldw	r18,8(sp)
 2004b68:	dc400117 	ldw	r17,4(sp)
 2004b6c:	dc000017 	ldw	r16,0(sp)
 2004b70:	dec00a04 	addi	sp,sp,40
 2004b74:	f800283a 	ret

02004b78 <_ZN26CAccelerationValuesMessage13answerMessageEsssh>:
}

/*
 * Overrided from CCarMessage.
 */
void CAccelerationValuesMessage::answerMessage(alt_16 iXAcceleraition, alt_16 iYAcceleration, alt_16 iZAcceleration, alt_u8 uiAccelerationFlags)
 2004b78:	defffa04 	addi	sp,sp,-24
 2004b7c:	df000515 	stw	fp,20(sp)
 2004b80:	df000504 	addi	fp,sp,20
 2004b84:	e13ffb15 	stw	r4,-20(fp)
 2004b88:	e0800117 	ldw	r2,4(fp)
 2004b8c:	e17ffc0d 	sth	r5,-16(fp)
 2004b90:	e1bffd0d 	sth	r6,-12(fp)
 2004b94:	e1fffe0d 	sth	r7,-8(fp)
 2004b98:	e0bfff05 	stb	r2,-4(fp)
{
    m_iXAcceleration = iXAcceleraition;
 2004b9c:	e0fffb17 	ldw	r3,-20(fp)
 2004ba0:	e0bffc0b 	ldhu	r2,-16(fp)
 2004ba4:	1880028d 	sth	r2,10(r3)
    m_iYAcceleration = iYAcceleration;
 2004ba8:	e0fffb17 	ldw	r3,-20(fp)
 2004bac:	e0bffd0b 	ldhu	r2,-12(fp)
 2004bb0:	1880030d 	sth	r2,12(r3)
    m_iZAcceleration = iZAcceleration;
 2004bb4:	e0fffb17 	ldw	r3,-20(fp)
 2004bb8:	e0bffe0b 	ldhu	r2,-8(fp)
 2004bbc:	1880038d 	sth	r2,14(r3)
    m_uiAccelerationFlags = uiAccelerationFlags;
 2004bc0:	e0fffb17 	ldw	r3,-20(fp)
 2004bc4:	e0bfff03 	ldbu	r2,-4(fp)
 2004bc8:	18800405 	stb	r2,16(r3)
    m_uiFlags = m_uiFlags | 0x01; // Set response flag
 2004bcc:	e0bffb17 	ldw	r2,-20(fp)
 2004bd0:	108001c3 	ldbu	r2,7(r2)
 2004bd4:	10800054 	ori	r2,r2,1
 2004bd8:	1007883a 	mov	r3,r2
 2004bdc:	e0bffb17 	ldw	r2,-20(fp)
 2004be0:	10c001c5 	stb	r3,7(r2)
}
 2004be4:	e037883a 	mov	sp,fp
 2004be8:	df000017 	ldw	fp,0(sp)
 2004bec:	dec00104 	addi	sp,sp,4
 2004bf0:	f800283a 	ret

02004bf4 <_ZN26CAccelerationValuesMessage9getLengthEv>:
}

/*
 * Overrided from CCarMessage.
 */
alt_u32 CAccelerationValuesMessage::getLength()
 2004bf4:	defffe04 	addi	sp,sp,-8
 2004bf8:	df000115 	stw	fp,4(sp)
 2004bfc:	df000104 	addi	fp,sp,4
 2004c00:	e13fff15 	stw	r4,-4(fp)
{
    return 12;
 2004c04:	00800304 	movi	r2,12
}
 2004c08:	e037883a 	mov	sp,fp
 2004c0c:	df000017 	ldw	fp,0(sp)
 2004c10:	dec00104 	addi	sp,sp,4
 2004c14:	f800283a 	ret

02004c18 <_ZN26CAccelerationValuesMessage12parseMessageEPhi>:

/*
 * Overrided from CCarMessage.
 */
void CAccelerationValuesMessage::parseMessage(alt_u8 *pMessage, int iLength)
 2004c18:	defffc04 	addi	sp,sp,-16
 2004c1c:	df000315 	stw	fp,12(sp)
 2004c20:	df000304 	addi	fp,sp,12
 2004c24:	e13ffd15 	stw	r4,-12(fp)
 2004c28:	e17ffe15 	stw	r5,-8(fp)
 2004c2c:	e1bfff15 	stw	r6,-4(fp)
{
    if(iLength < 8)
 2004c30:	e0bfff17 	ldw	r2,-4(fp)
 2004c34:	10800210 	cmplti	r2,r2,8
 2004c38:	1000311e 	bne	r2,zero,2004d00 <_ZN26CAccelerationValuesMessage12parseMessageEPhi+0xe8>
        return;

    m_iXAcceleration = ((alt_u32) pMessage[0]) << 0;
 2004c3c:	e0bffe17 	ldw	r2,-8(fp)
 2004c40:	10800003 	ldbu	r2,0(r2)
 2004c44:	10c03fcc 	andi	r3,r2,255
 2004c48:	e0bffd17 	ldw	r2,-12(fp)
 2004c4c:	10c0028d 	sth	r3,10(r2)
    m_iXAcceleration = ((alt_u32) pMessage[1]) << 8;
 2004c50:	e0bffe17 	ldw	r2,-8(fp)
 2004c54:	10800044 	addi	r2,r2,1
 2004c58:	10800003 	ldbu	r2,0(r2)
 2004c5c:	10803fcc 	andi	r2,r2,255
 2004c60:	1004923a 	slli	r2,r2,8
 2004c64:	1007883a 	mov	r3,r2
 2004c68:	e0bffd17 	ldw	r2,-12(fp)
 2004c6c:	10c0028d 	sth	r3,10(r2)
    m_iYAcceleration = ((alt_u32) pMessage[2]) << 0;
 2004c70:	e0bffe17 	ldw	r2,-8(fp)
 2004c74:	10800084 	addi	r2,r2,2
 2004c78:	10800003 	ldbu	r2,0(r2)
 2004c7c:	10c03fcc 	andi	r3,r2,255
 2004c80:	e0bffd17 	ldw	r2,-12(fp)
 2004c84:	10c0030d 	sth	r3,12(r2)
    m_iYAcceleration = ((alt_u32) pMessage[3]) << 8;
 2004c88:	e0bffe17 	ldw	r2,-8(fp)
 2004c8c:	108000c4 	addi	r2,r2,3
 2004c90:	10800003 	ldbu	r2,0(r2)
 2004c94:	10803fcc 	andi	r2,r2,255
 2004c98:	1004923a 	slli	r2,r2,8
 2004c9c:	1007883a 	mov	r3,r2
 2004ca0:	e0bffd17 	ldw	r2,-12(fp)
 2004ca4:	10c0030d 	sth	r3,12(r2)
    m_iZAcceleration = ((alt_u32) pMessage[4]) << 0;
 2004ca8:	e0bffe17 	ldw	r2,-8(fp)
 2004cac:	10800104 	addi	r2,r2,4
 2004cb0:	10800003 	ldbu	r2,0(r2)
 2004cb4:	10c03fcc 	andi	r3,r2,255
 2004cb8:	e0bffd17 	ldw	r2,-12(fp)
 2004cbc:	10c0038d 	sth	r3,14(r2)
    m_iZAcceleration = ((alt_u32) pMessage[5]) << 8;
 2004cc0:	e0bffe17 	ldw	r2,-8(fp)
 2004cc4:	10800144 	addi	r2,r2,5
 2004cc8:	10800003 	ldbu	r2,0(r2)
 2004ccc:	10803fcc 	andi	r2,r2,255
 2004cd0:	1004923a 	slli	r2,r2,8
 2004cd4:	1007883a 	mov	r3,r2
 2004cd8:	e0bffd17 	ldw	r2,-12(fp)
 2004cdc:	10c0038d 	sth	r3,14(r2)
    m_uiAccelerationFlags = pMessage[7];
 2004ce0:	e0bffe17 	ldw	r2,-8(fp)
 2004ce4:	108001c4 	addi	r2,r2,7
 2004ce8:	10c00003 	ldbu	r3,0(r2)
 2004cec:	e0bffd17 	ldw	r2,-12(fp)
 2004cf0:	10c00405 	stb	r3,16(r2)

    m_bValid = true;
 2004cf4:	e0fffd17 	ldw	r3,-12(fp)
 2004cf8:	00800044 	movi	r2,1
 2004cfc:	18800205 	stb	r2,8(r3)

}
 2004d00:	e037883a 	mov	sp,fp
 2004d04:	df000017 	ldw	fp,0(sp)
 2004d08:	dec00104 	addi	sp,sp,4
 2004d0c:	f800283a 	ret

02004d10 <_ZN26CAccelerationValuesMessage8getBytesEPh>:
}

/*
 * Overrided from CCarMessage.
 */
bool CAccelerationValuesMessage::getBytes(alt_u8 *pMessage)
 2004d10:	defffc04 	addi	sp,sp,-16
 2004d14:	dfc00315 	stw	ra,12(sp)
 2004d18:	df000215 	stw	fp,8(sp)
 2004d1c:	df000204 	addi	fp,sp,8
 2004d20:	e13ffe15 	stw	r4,-8(fp)
 2004d24:	e17fff15 	stw	r5,-4(fp)
{
    CCarMessage::getBytes(pMessage);
 2004d28:	e13ffe17 	ldw	r4,-8(fp)
 2004d2c:	e17fff17 	ldw	r5,-4(fp)
 2004d30:	2006f040 	call	2006f04 <_ZN11CCarMessage8getBytesEPh>

    pMessage[4] = (m_iXAcceleration >> 0) & 0xFF;
 2004d34:	e0bfff17 	ldw	r2,-4(fp)
 2004d38:	11000104 	addi	r4,r2,4
 2004d3c:	e0bffe17 	ldw	r2,-8(fp)
 2004d40:	1080028b 	ldhu	r2,10(r2)
 2004d44:	1007883a 	mov	r3,r2
 2004d48:	00bfffc4 	movi	r2,-1
 2004d4c:	1884703a 	and	r2,r3,r2
 2004d50:	20800005 	stb	r2,0(r4)
    pMessage[5] += (m_iXAcceleration >> 8) & 0xFF;
 2004d54:	e0bfff17 	ldw	r2,-4(fp)
 2004d58:	11000144 	addi	r4,r2,5
 2004d5c:	e0bfff17 	ldw	r2,-4(fp)
 2004d60:	10800144 	addi	r2,r2,5
 2004d64:	11400003 	ldbu	r5,0(r2)
 2004d68:	e0bffe17 	ldw	r2,-8(fp)
 2004d6c:	1080028b 	ldhu	r2,10(r2)
 2004d70:	10bfffcc 	andi	r2,r2,65535
 2004d74:	10a0001c 	xori	r2,r2,32768
 2004d78:	10a00004 	addi	r2,r2,-32768
 2004d7c:	1005d23a 	srai	r2,r2,8
 2004d80:	1007883a 	mov	r3,r2
 2004d84:	00bfffc4 	movi	r2,-1
 2004d88:	1884703a 	and	r2,r3,r2
 2004d8c:	2885883a 	add	r2,r5,r2
 2004d90:	20800005 	stb	r2,0(r4)
    pMessage[6] = (m_iYAcceleration >> 0) & 0xFF;
 2004d94:	e0bfff17 	ldw	r2,-4(fp)
 2004d98:	11000184 	addi	r4,r2,6
 2004d9c:	e0bffe17 	ldw	r2,-8(fp)
 2004da0:	1080030b 	ldhu	r2,12(r2)
 2004da4:	1007883a 	mov	r3,r2
 2004da8:	00bfffc4 	movi	r2,-1
 2004dac:	1884703a 	and	r2,r3,r2
 2004db0:	20800005 	stb	r2,0(r4)
    pMessage[7] += (m_iYAcceleration >> 8) & 0xFF;
 2004db4:	e0bfff17 	ldw	r2,-4(fp)
 2004db8:	110001c4 	addi	r4,r2,7
 2004dbc:	e0bfff17 	ldw	r2,-4(fp)
 2004dc0:	108001c4 	addi	r2,r2,7
 2004dc4:	11400003 	ldbu	r5,0(r2)
 2004dc8:	e0bffe17 	ldw	r2,-8(fp)
 2004dcc:	1080030b 	ldhu	r2,12(r2)
 2004dd0:	10bfffcc 	andi	r2,r2,65535
 2004dd4:	10a0001c 	xori	r2,r2,32768
 2004dd8:	10a00004 	addi	r2,r2,-32768
 2004ddc:	1005d23a 	srai	r2,r2,8
 2004de0:	1007883a 	mov	r3,r2
 2004de4:	00bfffc4 	movi	r2,-1
 2004de8:	1884703a 	and	r2,r3,r2
 2004dec:	2885883a 	add	r2,r5,r2
 2004df0:	20800005 	stb	r2,0(r4)
    pMessage[8] = (m_iZAcceleration >> 0) & 0xFF;
 2004df4:	e0bfff17 	ldw	r2,-4(fp)
 2004df8:	11000204 	addi	r4,r2,8
 2004dfc:	e0bffe17 	ldw	r2,-8(fp)
 2004e00:	1080038b 	ldhu	r2,14(r2)
 2004e04:	1007883a 	mov	r3,r2
 2004e08:	00bfffc4 	movi	r2,-1
 2004e0c:	1884703a 	and	r2,r3,r2
 2004e10:	20800005 	stb	r2,0(r4)
    pMessage[9] += (m_iZAcceleration >> 8) & 0xFF;
 2004e14:	e0bfff17 	ldw	r2,-4(fp)
 2004e18:	11000244 	addi	r4,r2,9
 2004e1c:	e0bfff17 	ldw	r2,-4(fp)
 2004e20:	10800244 	addi	r2,r2,9
 2004e24:	11400003 	ldbu	r5,0(r2)
 2004e28:	e0bffe17 	ldw	r2,-8(fp)
 2004e2c:	1080038b 	ldhu	r2,14(r2)
 2004e30:	10bfffcc 	andi	r2,r2,65535
 2004e34:	10a0001c 	xori	r2,r2,32768
 2004e38:	10a00004 	addi	r2,r2,-32768
 2004e3c:	1005d23a 	srai	r2,r2,8
 2004e40:	1007883a 	mov	r3,r2
 2004e44:	00bfffc4 	movi	r2,-1
 2004e48:	1884703a 	and	r2,r3,r2
 2004e4c:	2885883a 	add	r2,r5,r2
 2004e50:	20800005 	stb	r2,0(r4)
    pMessage[10] = 0;
 2004e54:	e0bfff17 	ldw	r2,-4(fp)
 2004e58:	10800284 	addi	r2,r2,10
 2004e5c:	10000005 	stb	zero,0(r2)
    pMessage[11] = m_uiAccelerationFlags;
 2004e60:	e0bfff17 	ldw	r2,-4(fp)
 2004e64:	10c002c4 	addi	r3,r2,11
 2004e68:	e0bffe17 	ldw	r2,-8(fp)
 2004e6c:	10800403 	ldbu	r2,16(r2)
 2004e70:	18800005 	stb	r2,0(r3)
    return m_bValid;
 2004e74:	e0bffe17 	ldw	r2,-8(fp)
 2004e78:	10800203 	ldbu	r2,8(r2)
 2004e7c:	10803fcc 	andi	r2,r2,255
}
 2004e80:	e037883a 	mov	sp,fp
 2004e84:	dfc00117 	ldw	ra,4(sp)
 2004e88:	df000017 	ldw	fp,0(sp)
 2004e8c:	dec00204 	addi	sp,sp,8
 2004e90:	f800283a 	ret

02004e94 <_ZN26CAccelerationValuesMessage8doActionEv>:
}

/*
 * Overrided from CCarMessage.
 */
void CAccelerationValuesMessage::doAction()
 2004e94:	defffa04 	addi	sp,sp,-24
 2004e98:	dfc00515 	stw	ra,20(sp)
 2004e9c:	df000415 	stw	fp,16(sp)
 2004ea0:	df000404 	addi	fp,sp,16
 2004ea4:	e13fff15 	stw	r4,-4(fp)
{
	alt_16 iAcceleration[3];
	bool bAccelerationValid = false;
 2004ea8:	e03ffd05 	stb	zero,-12(fp)

#ifndef CENTRAL_ECU_BUILD
	bAccelerationValid = getAcceleration(iAcceleration);
 2004eac:	e13ffd84 	addi	r4,fp,-10
 2004eb0:	20002f80 	call	20002f8 <_Z15getAccelerationPs>
 2004eb4:	e0bffd05 	stb	r2,-12(fp)
	if(bAccelerationValid)
 2004eb8:	e0bffd03 	ldbu	r2,-12(fp)
 2004ebc:	1005003a 	cmpeq	r2,r2,zero
 2004ec0:	1000111e 	bne	r2,zero,2004f08 <_ZN26CAccelerationValuesMessage8doActionEv+0x74>
		answerMessage(iAcceleration[0], iAcceleration[1], iAcceleration[2], 0x01);
 2004ec4:	e0bffd8b 	ldhu	r2,-10(fp)
 2004ec8:	117fffcc 	andi	r5,r2,65535
 2004ecc:	2960001c 	xori	r5,r5,32768
 2004ed0:	29600004 	addi	r5,r5,-32768
 2004ed4:	e0bffe0b 	ldhu	r2,-8(fp)
 2004ed8:	11bfffcc 	andi	r6,r2,65535
 2004edc:	31a0001c 	xori	r6,r6,32768
 2004ee0:	31a00004 	addi	r6,r6,-32768
 2004ee4:	e0bffe8b 	ldhu	r2,-6(fp)
 2004ee8:	11ffffcc 	andi	r7,r2,65535
 2004eec:	39e0001c 	xori	r7,r7,32768
 2004ef0:	39e00004 	addi	r7,r7,-32768
 2004ef4:	00800044 	movi	r2,1
 2004ef8:	d8800015 	stw	r2,0(sp)
 2004efc:	e13fff17 	ldw	r4,-4(fp)
 2004f00:	2004b780 	call	2004b78 <_ZN26CAccelerationValuesMessage13answerMessageEsssh>
 2004f04:	00000f06 	br	2004f44 <_ZN26CAccelerationValuesMessage8doActionEv+0xb0>
	else
		answerMessage(iAcceleration[0], iAcceleration[1], iAcceleration[2], 0x00);
 2004f08:	e0bffd8b 	ldhu	r2,-10(fp)
 2004f0c:	117fffcc 	andi	r5,r2,65535
 2004f10:	2960001c 	xori	r5,r5,32768
 2004f14:	29600004 	addi	r5,r5,-32768
 2004f18:	e0bffe0b 	ldhu	r2,-8(fp)
 2004f1c:	11bfffcc 	andi	r6,r2,65535
 2004f20:	31a0001c 	xori	r6,r6,32768
 2004f24:	31a00004 	addi	r6,r6,-32768
 2004f28:	e0bffe8b 	ldhu	r2,-6(fp)
 2004f2c:	11ffffcc 	andi	r7,r2,65535
 2004f30:	39e0001c 	xori	r7,r7,32768
 2004f34:	39e00004 	addi	r7,r7,-32768
 2004f38:	d8000015 	stw	zero,0(sp)
 2004f3c:	e13fff17 	ldw	r4,-4(fp)
 2004f40:	2004b780 	call	2004b78 <_ZN26CAccelerationValuesMessage13answerMessageEsssh>
#endif /* CENTRAL_ECU_BUILD */

}
 2004f44:	e037883a 	mov	sp,fp
 2004f48:	dfc00117 	ldw	ra,4(sp)
 2004f4c:	df000017 	ldw	fp,0(sp)
 2004f50:	dec00204 	addi	sp,sp,8
 2004f54:	f800283a 	ret

02004f58 <_ZN26CAccelerationValuesMessageD0Ev>:
}

/*
 * Basic Destructor.
 */
CAccelerationValuesMessage::~CAccelerationValuesMessage()
 2004f58:	defffd04 	addi	sp,sp,-12
 2004f5c:	dfc00215 	stw	ra,8(sp)
 2004f60:	df000115 	stw	fp,4(sp)
 2004f64:	df000104 	addi	fp,sp,4
 2004f68:	e13fff15 	stw	r4,-4(fp)
 2004f6c:	00c080b4 	movhi	r3,514
 2004f70:	18ee4204 	addi	r3,r3,-18168
 2004f74:	e0bfff17 	ldw	r2,-4(fp)
 2004f78:	10c00015 	stw	r3,0(r2)
{
}
 2004f7c:	e13fff17 	ldw	r4,-4(fp)
 2004f80:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 2004f84:	00800044 	movi	r2,1
 2004f88:	10803fcc 	andi	r2,r2,255
 2004f8c:	1005003a 	cmpeq	r2,r2,zero
 2004f90:	1000021e 	bne	r2,zero,2004f9c <_ZN26CAccelerationValuesMessageD0Ev+0x44>
 2004f94:	e13fff17 	ldw	r4,-4(fp)
 2004f98:	200c1380 	call	200c138 <_ZdlPv>
 2004f9c:	e037883a 	mov	sp,fp
 2004fa0:	dfc00117 	ldw	ra,4(sp)
 2004fa4:	df000017 	ldw	fp,0(sp)
 2004fa8:	dec00204 	addi	sp,sp,8
 2004fac:	f800283a 	ret

02004fb0 <_ZN26CAccelerationValuesMessageD1Ev>:
}

/*
 * Basic Destructor.
 */
CAccelerationValuesMessage::~CAccelerationValuesMessage()
 2004fb0:	defffd04 	addi	sp,sp,-12
 2004fb4:	dfc00215 	stw	ra,8(sp)
 2004fb8:	df000115 	stw	fp,4(sp)
 2004fbc:	df000104 	addi	fp,sp,4
 2004fc0:	e13fff15 	stw	r4,-4(fp)
 2004fc4:	00c080b4 	movhi	r3,514
 2004fc8:	18ee4204 	addi	r3,r3,-18168
 2004fcc:	e0bfff17 	ldw	r2,-4(fp)
 2004fd0:	10c00015 	stw	r3,0(r2)
{
}
 2004fd4:	e13fff17 	ldw	r4,-4(fp)
 2004fd8:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 2004fdc:	0005883a 	mov	r2,zero
 2004fe0:	10803fcc 	andi	r2,r2,255
 2004fe4:	1005003a 	cmpeq	r2,r2,zero
 2004fe8:	1000021e 	bne	r2,zero,2004ff4 <_ZN26CAccelerationValuesMessageD1Ev+0x44>
 2004fec:	e13fff17 	ldw	r4,-4(fp)
 2004ff0:	200c1380 	call	200c138 <_ZdlPv>
 2004ff4:	e037883a 	mov	sp,fp
 2004ff8:	dfc00117 	ldw	ra,4(sp)
 2004ffc:	df000017 	ldw	fp,0(sp)
 2005000:	dec00204 	addi	sp,sp,8
 2005004:	f800283a 	ret

02005008 <_ZN26CAccelerationValuesMessageD2Ev>:
}

/*
 * Basic Destructor.
 */
CAccelerationValuesMessage::~CAccelerationValuesMessage()
 2005008:	defffd04 	addi	sp,sp,-12
 200500c:	dfc00215 	stw	ra,8(sp)
 2005010:	df000115 	stw	fp,4(sp)
 2005014:	df000104 	addi	fp,sp,4
 2005018:	e13fff15 	stw	r4,-4(fp)
 200501c:	00c080b4 	movhi	r3,514
 2005020:	18ee4204 	addi	r3,r3,-18168
 2005024:	e0bfff17 	ldw	r2,-4(fp)
 2005028:	10c00015 	stw	r3,0(r2)
{
}
 200502c:	e13fff17 	ldw	r4,-4(fp)
 2005030:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 2005034:	0005883a 	mov	r2,zero
 2005038:	10803fcc 	andi	r2,r2,255
 200503c:	1005003a 	cmpeq	r2,r2,zero
 2005040:	1000021e 	bne	r2,zero,200504c <_ZN26CAccelerationValuesMessageD2Ev+0x44>
 2005044:	e13fff17 	ldw	r4,-4(fp)
 2005048:	200c1380 	call	200c138 <_ZdlPv>
 200504c:	e037883a 	mov	sp,fp
 2005050:	dfc00117 	ldw	ra,4(sp)
 2005054:	df000017 	ldw	fp,0(sp)
 2005058:	dec00204 	addi	sp,sp,8
 200505c:	f800283a 	ret

02005060 <_ZN26CAccelerationValuesMessageC1EPhi>:
/*
 * Constructor. Used to reassemble object from Byte stream.
 * pMessage : Byte-Array containing the fields of the subMessage
 * iLength  : Length of the said array
 */
CAccelerationValuesMessage::CAccelerationValuesMessage(alt_u8 *pMessage, int iLength)
 2005060:	deffe404 	addi	sp,sp,-112
 2005064:	dfc01b15 	stw	ra,108(sp)
 2005068:	df001a15 	stw	fp,104(sp)
 200506c:	ddc01915 	stw	r23,100(sp)
 2005070:	dd801815 	stw	r22,96(sp)
 2005074:	dd401715 	stw	r21,92(sp)
 2005078:	dd001615 	stw	r20,88(sp)
 200507c:	dcc01515 	stw	r19,84(sp)
 2005080:	dc801415 	stw	r18,80(sp)
 2005084:	dc401315 	stw	r17,76(sp)
 2005088:	dc001215 	stw	r16,72(sp)
 200508c:	df001204 	addi	fp,sp,72
 2005090:	e13fee15 	stw	r4,-72(fp)
 2005094:	e17fef15 	stw	r5,-68(fp)
 2005098:	e1bff015 	stw	r6,-64(fp)
 200509c:	00808074 	movhi	r2,513
 20050a0:	10ae5a04 	addi	r2,r2,-18072
 20050a4:	e0bff715 	stw	r2,-36(fp)
 20050a8:	008080b4 	movhi	r2,514
 20050ac:	10adbc84 	addi	r2,r2,-18702
 20050b0:	e0bff815 	stw	r2,-32(fp)
 20050b4:	e0bff904 	addi	r2,fp,-28
 20050b8:	e0ffee04 	addi	r3,fp,-72
 20050bc:	10c00015 	stw	r3,0(r2)
 20050c0:	00c08034 	movhi	r3,512
 20050c4:	18d45204 	addi	r3,r3,20808
 20050c8:	10c00115 	stw	r3,4(r2)
 20050cc:	16c00215 	stw	sp,8(r2)
 20050d0:	e13ff104 	addi	r4,fp,-60
 20050d4:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 20050d8:	e13fee17 	ldw	r4,-72(fp)
 20050dc:	00bfffc4 	movi	r2,-1
 20050e0:	e0bff215 	stw	r2,-56(fp)
 20050e4:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 20050e8:	00c080b4 	movhi	r3,514
 20050ec:	18ee4204 	addi	r3,r3,-18168
 20050f0:	e0bfee17 	ldw	r2,-72(fp)
 20050f4:	10c00015 	stw	r3,0(r2)
{
    parseHeader(pMessage, iLength);
 20050f8:	e13fee17 	ldw	r4,-72(fp)
 20050fc:	00800044 	movi	r2,1
 2005100:	e0bff215 	stw	r2,-56(fp)
 2005104:	e17fef17 	ldw	r5,-68(fp)
 2005108:	e1bff017 	ldw	r6,-64(fp)
 200510c:	20071cc0 	call	20071cc <_ZN11CCarMessage11parseHeaderEPhi>
    if(m_bValid)
 2005110:	e0bfee17 	ldw	r2,-72(fp)
 2005114:	10800203 	ldbu	r2,8(r2)
 2005118:	10803fcc 	andi	r2,r2,255
 200511c:	1005003a 	cmpeq	r2,r2,zero
 2005120:	1000171e 	bne	r2,zero,2005180 <_ZN26CAccelerationValuesMessageC1EPhi+0x120>
    {
        m_bValid = false;
 2005124:	e0bfee17 	ldw	r2,-72(fp)
 2005128:	10000205 	stb	zero,8(r2)
        parseMessage(pMessage+4, iLength-4);
 200512c:	e0bfef17 	ldw	r2,-68(fp)
 2005130:	11400104 	addi	r5,r2,4
 2005134:	e0bff017 	ldw	r2,-64(fp)
 2005138:	11bfff04 	addi	r6,r2,-4
 200513c:	e13fee17 	ldw	r4,-72(fp)
 2005140:	2004c180 	call	2004c18 <_ZN26CAccelerationValuesMessage12parseMessageEPhi>
    }

}
 2005144:	00000e06 	br	2005180 <_ZN26CAccelerationValuesMessageC1EPhi+0x120>
 2005148:	e7001204 	addi	fp,fp,72
 200514c:	e0bff317 	ldw	r2,-52(fp)
 2005150:	e0bfff15 	stw	r2,-4(fp)
 2005154:	e0ffff17 	ldw	r3,-4(fp)
 2005158:	e0fffe15 	stw	r3,-8(fp)
 200515c:	e13fee17 	ldw	r4,-72(fp)
 2005160:	e03ff215 	stw	zero,-56(fp)
 2005164:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 2005168:	e0bffe17 	ldw	r2,-8(fp)
 200516c:	e0bfff15 	stw	r2,-4(fp)
 2005170:	00bfffc4 	movi	r2,-1
 2005174:	e0bff215 	stw	r2,-56(fp)
 2005178:	e13fff17 	ldw	r4,-4(fp)
 200517c:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 2005180:	e13ff104 	addi	r4,fp,-60
 2005184:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 2005188:	e037883a 	mov	sp,fp
 200518c:	dfc00917 	ldw	ra,36(sp)
 2005190:	df000817 	ldw	fp,32(sp)
 2005194:	ddc00717 	ldw	r23,28(sp)
 2005198:	dd800617 	ldw	r22,24(sp)
 200519c:	dd400517 	ldw	r21,20(sp)
 20051a0:	dd000417 	ldw	r20,16(sp)
 20051a4:	dcc00317 	ldw	r19,12(sp)
 20051a8:	dc800217 	ldw	r18,8(sp)
 20051ac:	dc400117 	ldw	r17,4(sp)
 20051b0:	dc000017 	ldw	r16,0(sp)
 20051b4:	dec00a04 	addi	sp,sp,40
 20051b8:	f800283a 	ret

020051bc <_ZN26CAccelerationValuesMessageC2EPhi>:
/*
 * Constructor. Used to reassemble object from Byte stream.
 * pMessage : Byte-Array containing the fields of the subMessage
 * iLength  : Length of the said array
 */
CAccelerationValuesMessage::CAccelerationValuesMessage(alt_u8 *pMessage, int iLength)
 20051bc:	deffe404 	addi	sp,sp,-112
 20051c0:	dfc01b15 	stw	ra,108(sp)
 20051c4:	df001a15 	stw	fp,104(sp)
 20051c8:	ddc01915 	stw	r23,100(sp)
 20051cc:	dd801815 	stw	r22,96(sp)
 20051d0:	dd401715 	stw	r21,92(sp)
 20051d4:	dd001615 	stw	r20,88(sp)
 20051d8:	dcc01515 	stw	r19,84(sp)
 20051dc:	dc801415 	stw	r18,80(sp)
 20051e0:	dc401315 	stw	r17,76(sp)
 20051e4:	dc001215 	stw	r16,72(sp)
 20051e8:	df001204 	addi	fp,sp,72
 20051ec:	e13fee15 	stw	r4,-72(fp)
 20051f0:	e17fef15 	stw	r5,-68(fp)
 20051f4:	e1bff015 	stw	r6,-64(fp)
 20051f8:	00808074 	movhi	r2,513
 20051fc:	10ae5a04 	addi	r2,r2,-18072
 2005200:	e0bff715 	stw	r2,-36(fp)
 2005204:	008080b4 	movhi	r2,514
 2005208:	10adbe04 	addi	r2,r2,-18696
 200520c:	e0bff815 	stw	r2,-32(fp)
 2005210:	e0bff904 	addi	r2,fp,-28
 2005214:	e0ffee04 	addi	r3,fp,-72
 2005218:	10c00015 	stw	r3,0(r2)
 200521c:	00c08034 	movhi	r3,512
 2005220:	18d4a904 	addi	r3,r3,21156
 2005224:	10c00115 	stw	r3,4(r2)
 2005228:	16c00215 	stw	sp,8(r2)
 200522c:	e13ff104 	addi	r4,fp,-60
 2005230:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 2005234:	e13fee17 	ldw	r4,-72(fp)
 2005238:	00bfffc4 	movi	r2,-1
 200523c:	e0bff215 	stw	r2,-56(fp)
 2005240:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 2005244:	00c080b4 	movhi	r3,514
 2005248:	18ee4204 	addi	r3,r3,-18168
 200524c:	e0bfee17 	ldw	r2,-72(fp)
 2005250:	10c00015 	stw	r3,0(r2)
{
    parseHeader(pMessage, iLength);
 2005254:	e13fee17 	ldw	r4,-72(fp)
 2005258:	00800044 	movi	r2,1
 200525c:	e0bff215 	stw	r2,-56(fp)
 2005260:	e17fef17 	ldw	r5,-68(fp)
 2005264:	e1bff017 	ldw	r6,-64(fp)
 2005268:	20071cc0 	call	20071cc <_ZN11CCarMessage11parseHeaderEPhi>
    if(m_bValid)
 200526c:	e0bfee17 	ldw	r2,-72(fp)
 2005270:	10800203 	ldbu	r2,8(r2)
 2005274:	10803fcc 	andi	r2,r2,255
 2005278:	1005003a 	cmpeq	r2,r2,zero
 200527c:	1000171e 	bne	r2,zero,20052dc <_ZN26CAccelerationValuesMessageC2EPhi+0x120>
    {
        m_bValid = false;
 2005280:	e0bfee17 	ldw	r2,-72(fp)
 2005284:	10000205 	stb	zero,8(r2)
        parseMessage(pMessage+4, iLength-4);
 2005288:	e0bfef17 	ldw	r2,-68(fp)
 200528c:	11400104 	addi	r5,r2,4
 2005290:	e0bff017 	ldw	r2,-64(fp)
 2005294:	11bfff04 	addi	r6,r2,-4
 2005298:	e13fee17 	ldw	r4,-72(fp)
 200529c:	2004c180 	call	2004c18 <_ZN26CAccelerationValuesMessage12parseMessageEPhi>
    }

}
 20052a0:	00000e06 	br	20052dc <_ZN26CAccelerationValuesMessageC2EPhi+0x120>
 20052a4:	e7001204 	addi	fp,fp,72
 20052a8:	e0bff317 	ldw	r2,-52(fp)
 20052ac:	e0bfff15 	stw	r2,-4(fp)
 20052b0:	e0ffff17 	ldw	r3,-4(fp)
 20052b4:	e0fffe15 	stw	r3,-8(fp)
 20052b8:	e13fee17 	ldw	r4,-72(fp)
 20052bc:	e03ff215 	stw	zero,-56(fp)
 20052c0:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 20052c4:	e0bffe17 	ldw	r2,-8(fp)
 20052c8:	e0bfff15 	stw	r2,-4(fp)
 20052cc:	00bfffc4 	movi	r2,-1
 20052d0:	e0bff215 	stw	r2,-56(fp)
 20052d4:	e13fff17 	ldw	r4,-4(fp)
 20052d8:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 20052dc:	e13ff104 	addi	r4,fp,-60
 20052e0:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 20052e4:	e037883a 	mov	sp,fp
 20052e8:	dfc00917 	ldw	ra,36(sp)
 20052ec:	df000817 	ldw	fp,32(sp)
 20052f0:	ddc00717 	ldw	r23,28(sp)
 20052f4:	dd800617 	ldw	r22,24(sp)
 20052f8:	dd400517 	ldw	r21,20(sp)
 20052fc:	dd000417 	ldw	r20,16(sp)
 2005300:	dcc00317 	ldw	r19,12(sp)
 2005304:	dc800217 	ldw	r18,8(sp)
 2005308:	dc400117 	ldw	r17,4(sp)
 200530c:	dc000017 	ldw	r16,0(sp)
 2005310:	dec00a04 	addi	sp,sp,40
 2005314:	f800283a 	ret

02005318 <_ZN26CAccelerationValuesMessageC1Ev>:
// Import Interfaces

/*
 * Basic Constructor. Used to initialise new message-objects.
 */
CAccelerationValuesMessage::CAccelerationValuesMessage()
 2005318:	deffe504 	addi	sp,sp,-108
 200531c:	dfc01a15 	stw	ra,104(sp)
 2005320:	df001915 	stw	fp,100(sp)
 2005324:	ddc01815 	stw	r23,96(sp)
 2005328:	dd801715 	stw	r22,92(sp)
 200532c:	dd401615 	stw	r21,88(sp)
 2005330:	dd001515 	stw	r20,84(sp)
 2005334:	dcc01415 	stw	r19,80(sp)
 2005338:	dc801315 	stw	r18,76(sp)
 200533c:	dc401215 	stw	r17,72(sp)
 2005340:	dc001115 	stw	r16,68(sp)
 2005344:	df001104 	addi	fp,sp,68
 2005348:	e13fef15 	stw	r4,-68(fp)
 200534c:	00808074 	movhi	r2,513
 2005350:	10ae5a04 	addi	r2,r2,-18072
 2005354:	e0bff615 	stw	r2,-40(fp)
 2005358:	008080b4 	movhi	r2,514
 200535c:	10adbf84 	addi	r2,r2,-18690
 2005360:	e0bff715 	stw	r2,-36(fp)
 2005364:	e0bff804 	addi	r2,fp,-32
 2005368:	e0ffef04 	addi	r3,fp,-68
 200536c:	10c00015 	stw	r3,0(r2)
 2005370:	00c08034 	movhi	r3,512
 2005374:	18d4fe04 	addi	r3,r3,21496
 2005378:	10c00115 	stw	r3,4(r2)
 200537c:	16c00215 	stw	sp,8(r2)
 2005380:	e13ff004 	addi	r4,fp,-64
 2005384:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 2005388:	e13fef17 	ldw	r4,-68(fp)
 200538c:	00bfffc4 	movi	r2,-1
 2005390:	e0bff115 	stw	r2,-60(fp)
 2005394:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 2005398:	00c080b4 	movhi	r3,514
 200539c:	18ee4204 	addi	r3,r3,-18168
 20053a0:	e0bfef17 	ldw	r2,-68(fp)
 20053a4:	10c00015 	stw	r3,0(r2)
{
    setHeader(9, getLength(), 0);
 20053a8:	e0bfef17 	ldw	r2,-68(fp)
 20053ac:	e0bffe15 	stw	r2,-8(fp)
 20053b0:	e13fef17 	ldw	r4,-68(fp)
 20053b4:	2004bf40 	call	2004bf4 <_ZN26CAccelerationValuesMessage9getLengthEv>
 20053b8:	11803fcc 	andi	r6,r2,255
 20053bc:	00800044 	movi	r2,1
 20053c0:	e0bff115 	stw	r2,-60(fp)
 20053c4:	e13ffe17 	ldw	r4,-8(fp)
 20053c8:	01400244 	movi	r5,9
 20053cc:	000f883a 	mov	r7,zero
 20053d0:	20070480 	call	2007048 <_ZN11CCarMessage9setHeaderEhhb>

    m_iXAcceleration = 0;
 20053d4:	e0bfef17 	ldw	r2,-68(fp)
 20053d8:	1000028d 	sth	zero,10(r2)
	m_iYAcceleration = 0;
 20053dc:	e0bfef17 	ldw	r2,-68(fp)
 20053e0:	1000030d 	sth	zero,12(r2)
	m_iZAcceleration = 0;
 20053e4:	e0bfef17 	ldw	r2,-68(fp)
 20053e8:	1000038d 	sth	zero,14(r2)

	m_uiAccelerationFlags = 0;
 20053ec:	e0bfef17 	ldw	r2,-68(fp)
 20053f0:	10000405 	stb	zero,16(r2)
}
 20053f4:	00000e06 	br	2005430 <_ZN26CAccelerationValuesMessageC1Ev+0x118>
 20053f8:	e7001104 	addi	fp,fp,68
 20053fc:	e0fff217 	ldw	r3,-56(fp)
 2005400:	e0ffff15 	stw	r3,-4(fp)
 2005404:	e0bfff17 	ldw	r2,-4(fp)
 2005408:	e0bffd15 	stw	r2,-12(fp)
 200540c:	e13fef17 	ldw	r4,-68(fp)
 2005410:	e03ff115 	stw	zero,-60(fp)
 2005414:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 2005418:	e0fffd17 	ldw	r3,-12(fp)
 200541c:	e0ffff15 	stw	r3,-4(fp)
 2005420:	00bfffc4 	movi	r2,-1
 2005424:	e0bff115 	stw	r2,-60(fp)
 2005428:	e13fff17 	ldw	r4,-4(fp)
 200542c:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 2005430:	e13ff004 	addi	r4,fp,-64
 2005434:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 2005438:	e037883a 	mov	sp,fp
 200543c:	dfc00917 	ldw	ra,36(sp)
 2005440:	df000817 	ldw	fp,32(sp)
 2005444:	ddc00717 	ldw	r23,28(sp)
 2005448:	dd800617 	ldw	r22,24(sp)
 200544c:	dd400517 	ldw	r21,20(sp)
 2005450:	dd000417 	ldw	r20,16(sp)
 2005454:	dcc00317 	ldw	r19,12(sp)
 2005458:	dc800217 	ldw	r18,8(sp)
 200545c:	dc400117 	ldw	r17,4(sp)
 2005460:	dc000017 	ldw	r16,0(sp)
 2005464:	dec00a04 	addi	sp,sp,40
 2005468:	f800283a 	ret

0200546c <_ZN26CAccelerationValuesMessageC2Ev>:
// Import Interfaces

/*
 * Basic Constructor. Used to initialise new message-objects.
 */
CAccelerationValuesMessage::CAccelerationValuesMessage()
 200546c:	deffe504 	addi	sp,sp,-108
 2005470:	dfc01a15 	stw	ra,104(sp)
 2005474:	df001915 	stw	fp,100(sp)
 2005478:	ddc01815 	stw	r23,96(sp)
 200547c:	dd801715 	stw	r22,92(sp)
 2005480:	dd401615 	stw	r21,88(sp)
 2005484:	dd001515 	stw	r20,84(sp)
 2005488:	dcc01415 	stw	r19,80(sp)
 200548c:	dc801315 	stw	r18,76(sp)
 2005490:	dc401215 	stw	r17,72(sp)
 2005494:	dc001115 	stw	r16,68(sp)
 2005498:	df001104 	addi	fp,sp,68
 200549c:	e13fef15 	stw	r4,-68(fp)
 20054a0:	00808074 	movhi	r2,513
 20054a4:	10ae5a04 	addi	r2,r2,-18072
 20054a8:	e0bff615 	stw	r2,-40(fp)
 20054ac:	008080b4 	movhi	r2,514
 20054b0:	10adc104 	addi	r2,r2,-18684
 20054b4:	e0bff715 	stw	r2,-36(fp)
 20054b8:	e0bff804 	addi	r2,fp,-32
 20054bc:	e0ffef04 	addi	r3,fp,-68
 20054c0:	10c00015 	stw	r3,0(r2)
 20054c4:	00c08034 	movhi	r3,512
 20054c8:	18d55304 	addi	r3,r3,21836
 20054cc:	10c00115 	stw	r3,4(r2)
 20054d0:	16c00215 	stw	sp,8(r2)
 20054d4:	e13ff004 	addi	r4,fp,-64
 20054d8:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 20054dc:	e13fef17 	ldw	r4,-68(fp)
 20054e0:	00bfffc4 	movi	r2,-1
 20054e4:	e0bff115 	stw	r2,-60(fp)
 20054e8:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 20054ec:	00c080b4 	movhi	r3,514
 20054f0:	18ee4204 	addi	r3,r3,-18168
 20054f4:	e0bfef17 	ldw	r2,-68(fp)
 20054f8:	10c00015 	stw	r3,0(r2)
{
    setHeader(9, getLength(), 0);
 20054fc:	e0bfef17 	ldw	r2,-68(fp)
 2005500:	e0bffe15 	stw	r2,-8(fp)
 2005504:	e13fef17 	ldw	r4,-68(fp)
 2005508:	2004bf40 	call	2004bf4 <_ZN26CAccelerationValuesMessage9getLengthEv>
 200550c:	11803fcc 	andi	r6,r2,255
 2005510:	00800044 	movi	r2,1
 2005514:	e0bff115 	stw	r2,-60(fp)
 2005518:	e13ffe17 	ldw	r4,-8(fp)
 200551c:	01400244 	movi	r5,9
 2005520:	000f883a 	mov	r7,zero
 2005524:	20070480 	call	2007048 <_ZN11CCarMessage9setHeaderEhhb>

    m_iXAcceleration = 0;
 2005528:	e0bfef17 	ldw	r2,-68(fp)
 200552c:	1000028d 	sth	zero,10(r2)
	m_iYAcceleration = 0;
 2005530:	e0bfef17 	ldw	r2,-68(fp)
 2005534:	1000030d 	sth	zero,12(r2)
	m_iZAcceleration = 0;
 2005538:	e0bfef17 	ldw	r2,-68(fp)
 200553c:	1000038d 	sth	zero,14(r2)

	m_uiAccelerationFlags = 0;
 2005540:	e0bfef17 	ldw	r2,-68(fp)
 2005544:	10000405 	stb	zero,16(r2)
}
 2005548:	00000e06 	br	2005584 <_ZN26CAccelerationValuesMessageC2Ev+0x118>
 200554c:	e7001104 	addi	fp,fp,68
 2005550:	e0fff217 	ldw	r3,-56(fp)
 2005554:	e0ffff15 	stw	r3,-4(fp)
 2005558:	e0bfff17 	ldw	r2,-4(fp)
 200555c:	e0bffd15 	stw	r2,-12(fp)
 2005560:	e13fef17 	ldw	r4,-68(fp)
 2005564:	e03ff115 	stw	zero,-60(fp)
 2005568:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 200556c:	e0fffd17 	ldw	r3,-12(fp)
 2005570:	e0ffff15 	stw	r3,-4(fp)
 2005574:	00bfffc4 	movi	r2,-1
 2005578:	e0bff115 	stw	r2,-60(fp)
 200557c:	e13fff17 	ldw	r4,-4(fp)
 2005580:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 2005584:	e13ff004 	addi	r4,fp,-64
 2005588:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 200558c:	e037883a 	mov	sp,fp
 2005590:	dfc00917 	ldw	ra,36(sp)
 2005594:	df000817 	ldw	fp,32(sp)
 2005598:	ddc00717 	ldw	r23,28(sp)
 200559c:	dd800617 	ldw	r22,24(sp)
 20055a0:	dd400517 	ldw	r21,20(sp)
 20055a4:	dd000417 	ldw	r20,16(sp)
 20055a8:	dcc00317 	ldw	r19,12(sp)
 20055ac:	dc800217 	ldw	r18,8(sp)
 20055b0:	dc400117 	ldw	r17,4(sp)
 20055b4:	dc000017 	ldw	r16,0(sp)
 20055b8:	dec00a04 	addi	sp,sp,40
 20055bc:	f800283a 	ret

020055c0 <_ZN15CControlMessage13answerMessageEb>:
CControlMessage::~CControlMessage()
{

}

void CControlMessage::answerMessage(bool executed_b)
 20055c0:	defffd04 	addi	sp,sp,-12
 20055c4:	df000215 	stw	fp,8(sp)
 20055c8:	df000204 	addi	fp,sp,8
 20055cc:	e13ffe15 	stw	r4,-8(fp)
 20055d0:	e17fff05 	stb	r5,-4(fp)
{

}
 20055d4:	e037883a 	mov	sp,fp
 20055d8:	df000017 	ldw	fp,0(sp)
 20055dc:	dec00104 	addi	sp,sp,4
 20055e0:	f800283a 	ret

020055e4 <_ZN15CControlMessage8doActionEv>:

void CControlMessage::doAction()
 20055e4:	defffe04 	addi	sp,sp,-8
 20055e8:	df000115 	stw	fp,4(sp)
 20055ec:	df000104 	addi	fp,sp,4
 20055f0:	e13fff15 	stw	r4,-4(fp)
{

}
 20055f4:	e037883a 	mov	sp,fp
 20055f8:	df000017 	ldw	fp,0(sp)
 20055fc:	dec00104 	addi	sp,sp,4
 2005600:	f800283a 	ret

02005604 <_ZN15CControlMessage8getBytesEPh>:

bool CControlMessage::getBytes(alt_u8* pMessage)
 2005604:	defffd04 	addi	sp,sp,-12
 2005608:	df000215 	stw	fp,8(sp)
 200560c:	df000204 	addi	fp,sp,8
 2005610:	e13ffe15 	stw	r4,-8(fp)
 2005614:	e17fff15 	stw	r5,-4(fp)
{
	return true;
 2005618:	00800044 	movi	r2,1
}
 200561c:	e037883a 	mov	sp,fp
 2005620:	df000017 	ldw	fp,0(sp)
 2005624:	dec00104 	addi	sp,sp,4
 2005628:	f800283a 	ret

0200562c <_ZN15CControlMessage9getLengthEv>:

alt_u32 CControlMessage::getLength()
 200562c:	defffe04 	addi	sp,sp,-8
 2005630:	df000115 	stw	fp,4(sp)
 2005634:	df000104 	addi	fp,sp,4
 2005638:	e13fff15 	stw	r4,-4(fp)
{
	return 12;
 200563c:	00800304 	movi	r2,12
}
 2005640:	e037883a 	mov	sp,fp
 2005644:	df000017 	ldw	fp,0(sp)
 2005648:	dec00104 	addi	sp,sp,4
 200564c:	f800283a 	ret

02005650 <_ZN15CControlMessage12parseMessageEPhi>:


void CControlMessage::parseMessage(alt_u8 *pMessage, int iLength)
 2005650:	defffb04 	addi	sp,sp,-20
 2005654:	dfc00415 	stw	ra,16(sp)
 2005658:	df000315 	stw	fp,12(sp)
 200565c:	df000304 	addi	fp,sp,12
 2005660:	e13ffd15 	stw	r4,-12(fp)
 2005664:	e17ffe15 	stw	r5,-8(fp)
 2005668:	e1bfff15 	stw	r6,-4(fp)
{
	if(iLength < 8){
 200566c:	e0bfff17 	ldw	r2,-4(fp)
 2005670:	10800210 	cmplti	r2,r2,8
 2005674:	10002a1e 	bne	r2,zero,2005720 <_ZN15CControlMessage12parseMessageEPhi+0xd0>
		return;
	}


	m_siVelFrontLeft  = *((alt_16*) (pMessage));
 2005678:	e0bffe17 	ldw	r2,-8(fp)
 200567c:	10c0000b 	ldhu	r3,0(r2)
 2005680:	e0bffd17 	ldw	r2,-12(fp)
 2005684:	10c0028d 	sth	r3,10(r2)
	swapEndianess((alt_u8*) &m_siVelFrontLeft, 2);
 2005688:	e0bffd17 	ldw	r2,-12(fp)
 200568c:	10800284 	addi	r2,r2,10
 2005690:	1009883a 	mov	r4,r2
 2005694:	01400084 	movi	r5,2
 2005698:	20002480 	call	2000248 <_Z13swapEndianessPhm>
	m_siVelRearLeft   = *((alt_16*) (pMessage+2));
 200569c:	e0bffe17 	ldw	r2,-8(fp)
 20056a0:	10800084 	addi	r2,r2,2
 20056a4:	10c0000b 	ldhu	r3,0(r2)
 20056a8:	e0bffd17 	ldw	r2,-12(fp)
 20056ac:	10c0038d 	sth	r3,14(r2)
	swapEndianess((alt_u8*) &m_siVelRearLeft, 2);
 20056b0:	e0bffd17 	ldw	r2,-12(fp)
 20056b4:	10800384 	addi	r2,r2,14
 20056b8:	1009883a 	mov	r4,r2
 20056bc:	01400084 	movi	r5,2
 20056c0:	20002480 	call	2000248 <_Z13swapEndianessPhm>
	m_siVelFrontRight = *((alt_16*) (pMessage+4));
 20056c4:	e0bffe17 	ldw	r2,-8(fp)
 20056c8:	10800104 	addi	r2,r2,4
 20056cc:	10c0000b 	ldhu	r3,0(r2)
 20056d0:	e0bffd17 	ldw	r2,-12(fp)
 20056d4:	10c0030d 	sth	r3,12(r2)
	swapEndianess((alt_u8*) &m_siVelFrontRight, 2);
 20056d8:	e0bffd17 	ldw	r2,-12(fp)
 20056dc:	10800304 	addi	r2,r2,12
 20056e0:	1009883a 	mov	r4,r2
 20056e4:	01400084 	movi	r5,2
 20056e8:	20002480 	call	2000248 <_Z13swapEndianessPhm>
	m_siVelRearRight  = *((alt_16*) (pMessage+6));
 20056ec:	e0bffe17 	ldw	r2,-8(fp)
 20056f0:	10800184 	addi	r2,r2,6
 20056f4:	10c0000b 	ldhu	r3,0(r2)
 20056f8:	e0bffd17 	ldw	r2,-12(fp)
 20056fc:	10c0040d 	sth	r3,16(r2)
	swapEndianess((alt_u8*) &m_siVelRearRight, 2);
 2005700:	e0bffd17 	ldw	r2,-12(fp)
 2005704:	10800404 	addi	r2,r2,16
 2005708:	1009883a 	mov	r4,r2
 200570c:	01400084 	movi	r5,2
 2005710:	20002480 	call	2000248 <_Z13swapEndianessPhm>

	m_bValid = true;
 2005714:	e0fffd17 	ldw	r3,-12(fp)
 2005718:	00800044 	movi	r2,1
 200571c:	18800205 	stb	r2,8(r3)
}
 2005720:	e037883a 	mov	sp,fp
 2005724:	dfc00117 	ldw	ra,4(sp)
 2005728:	df000017 	ldw	fp,0(sp)
 200572c:	dec00204 	addi	sp,sp,8
 2005730:	f800283a 	ret

02005734 <_ZN15CControlMessageD0Ev>:
        m_bValid = false;
        parseMessage(pMessage+4, iLength-4);
    }
}

CControlMessage::~CControlMessage()
 2005734:	defffd04 	addi	sp,sp,-12
 2005738:	dfc00215 	stw	ra,8(sp)
 200573c:	df000115 	stw	fp,4(sp)
 2005740:	df000104 	addi	fp,sp,4
 2005744:	e13fff15 	stw	r4,-4(fp)
 2005748:	00c080b4 	movhi	r3,514
 200574c:	18ee5404 	addi	r3,r3,-18096
 2005750:	e0bfff17 	ldw	r2,-4(fp)
 2005754:	10c00015 	stw	r3,0(r2)
{

}
 2005758:	e13fff17 	ldw	r4,-4(fp)
 200575c:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 2005760:	00800044 	movi	r2,1
 2005764:	10803fcc 	andi	r2,r2,255
 2005768:	1005003a 	cmpeq	r2,r2,zero
 200576c:	1000021e 	bne	r2,zero,2005778 <_ZN15CControlMessageD0Ev+0x44>
 2005770:	e13fff17 	ldw	r4,-4(fp)
 2005774:	200c1380 	call	200c138 <_ZdlPv>
 2005778:	e037883a 	mov	sp,fp
 200577c:	dfc00117 	ldw	ra,4(sp)
 2005780:	df000017 	ldw	fp,0(sp)
 2005784:	dec00204 	addi	sp,sp,8
 2005788:	f800283a 	ret

0200578c <_ZN15CControlMessageD1Ev>:
        m_bValid = false;
        parseMessage(pMessage+4, iLength-4);
    }
}

CControlMessage::~CControlMessage()
 200578c:	defffd04 	addi	sp,sp,-12
 2005790:	dfc00215 	stw	ra,8(sp)
 2005794:	df000115 	stw	fp,4(sp)
 2005798:	df000104 	addi	fp,sp,4
 200579c:	e13fff15 	stw	r4,-4(fp)
 20057a0:	00c080b4 	movhi	r3,514
 20057a4:	18ee5404 	addi	r3,r3,-18096
 20057a8:	e0bfff17 	ldw	r2,-4(fp)
 20057ac:	10c00015 	stw	r3,0(r2)
{

}
 20057b0:	e13fff17 	ldw	r4,-4(fp)
 20057b4:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 20057b8:	0005883a 	mov	r2,zero
 20057bc:	10803fcc 	andi	r2,r2,255
 20057c0:	1005003a 	cmpeq	r2,r2,zero
 20057c4:	1000021e 	bne	r2,zero,20057d0 <_ZN15CControlMessageD1Ev+0x44>
 20057c8:	e13fff17 	ldw	r4,-4(fp)
 20057cc:	200c1380 	call	200c138 <_ZdlPv>
 20057d0:	e037883a 	mov	sp,fp
 20057d4:	dfc00117 	ldw	ra,4(sp)
 20057d8:	df000017 	ldw	fp,0(sp)
 20057dc:	dec00204 	addi	sp,sp,8
 20057e0:	f800283a 	ret

020057e4 <_ZN15CControlMessageD2Ev>:
        m_bValid = false;
        parseMessage(pMessage+4, iLength-4);
    }
}

CControlMessage::~CControlMessage()
 20057e4:	defffd04 	addi	sp,sp,-12
 20057e8:	dfc00215 	stw	ra,8(sp)
 20057ec:	df000115 	stw	fp,4(sp)
 20057f0:	df000104 	addi	fp,sp,4
 20057f4:	e13fff15 	stw	r4,-4(fp)
 20057f8:	00c080b4 	movhi	r3,514
 20057fc:	18ee5404 	addi	r3,r3,-18096
 2005800:	e0bfff17 	ldw	r2,-4(fp)
 2005804:	10c00015 	stw	r3,0(r2)
{

}
 2005808:	e13fff17 	ldw	r4,-4(fp)
 200580c:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 2005810:	0005883a 	mov	r2,zero
 2005814:	10803fcc 	andi	r2,r2,255
 2005818:	1005003a 	cmpeq	r2,r2,zero
 200581c:	1000021e 	bne	r2,zero,2005828 <_ZN15CControlMessageD2Ev+0x44>
 2005820:	e13fff17 	ldw	r4,-4(fp)
 2005824:	200c1380 	call	200c138 <_ZdlPv>
 2005828:	e037883a 	mov	sp,fp
 200582c:	dfc00117 	ldw	ra,4(sp)
 2005830:	df000017 	ldw	fp,0(sp)
 2005834:	dec00204 	addi	sp,sp,8
 2005838:	f800283a 	ret

0200583c <_ZN15CControlMessageC1Ev>:
#include "CControlMessage.h"
#include "ErrHandler.h"

CControlMessage::CControlMessage()
 200583c:	defffd04 	addi	sp,sp,-12
 2005840:	dfc00215 	stw	ra,8(sp)
 2005844:	df000115 	stw	fp,4(sp)
 2005848:	df000104 	addi	fp,sp,4
 200584c:	e13fff15 	stw	r4,-4(fp)
 2005850:	e13fff17 	ldw	r4,-4(fp)
 2005854:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 2005858:	00c080b4 	movhi	r3,514
 200585c:	18ee5404 	addi	r3,r3,-18096
 2005860:	e0bfff17 	ldw	r2,-4(fp)
 2005864:	10c00015 	stw	r3,0(r2)
{

}
 2005868:	e037883a 	mov	sp,fp
 200586c:	dfc00117 	ldw	ra,4(sp)
 2005870:	df000017 	ldw	fp,0(sp)
 2005874:	dec00204 	addi	sp,sp,8
 2005878:	f800283a 	ret

0200587c <_ZN15CControlMessageC2Ev>:
#include "CControlMessage.h"
#include "ErrHandler.h"

CControlMessage::CControlMessage()
 200587c:	defffd04 	addi	sp,sp,-12
 2005880:	dfc00215 	stw	ra,8(sp)
 2005884:	df000115 	stw	fp,4(sp)
 2005888:	df000104 	addi	fp,sp,4
 200588c:	e13fff15 	stw	r4,-4(fp)
 2005890:	e13fff17 	ldw	r4,-4(fp)
 2005894:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 2005898:	00c080b4 	movhi	r3,514
 200589c:	18ee5404 	addi	r3,r3,-18096
 20058a0:	e0bfff17 	ldw	r2,-4(fp)
 20058a4:	10c00015 	stw	r3,0(r2)
{

}
 20058a8:	e037883a 	mov	sp,fp
 20058ac:	dfc00117 	ldw	ra,4(sp)
 20058b0:	df000017 	ldw	fp,0(sp)
 20058b4:	dec00204 	addi	sp,sp,8
 20058b8:	f800283a 	ret

020058bc <_ZN15CControlMessageC1EPhi>:

CControlMessage::CControlMessage(alt_u8 * pMessage, int iLength)
 20058bc:	deffe404 	addi	sp,sp,-112
 20058c0:	dfc01b15 	stw	ra,108(sp)
 20058c4:	df001a15 	stw	fp,104(sp)
 20058c8:	ddc01915 	stw	r23,100(sp)
 20058cc:	dd801815 	stw	r22,96(sp)
 20058d0:	dd401715 	stw	r21,92(sp)
 20058d4:	dd001615 	stw	r20,88(sp)
 20058d8:	dcc01515 	stw	r19,84(sp)
 20058dc:	dc801415 	stw	r18,80(sp)
 20058e0:	dc401315 	stw	r17,76(sp)
 20058e4:	dc001215 	stw	r16,72(sp)
 20058e8:	df001204 	addi	fp,sp,72
 20058ec:	e13fee15 	stw	r4,-72(fp)
 20058f0:	e17fef15 	stw	r5,-68(fp)
 20058f4:	e1bff015 	stw	r6,-64(fp)
 20058f8:	00808074 	movhi	r2,513
 20058fc:	10ae5a04 	addi	r2,r2,-18072
 2005900:	e0bff715 	stw	r2,-36(fp)
 2005904:	008080b4 	movhi	r2,514
 2005908:	10adc284 	addi	r2,r2,-18678
 200590c:	e0bff815 	stw	r2,-32(fp)
 2005910:	e0bff904 	addi	r2,fp,-28
 2005914:	e0ffee04 	addi	r3,fp,-72
 2005918:	10c00015 	stw	r3,0(r2)
 200591c:	00c08034 	movhi	r3,512
 2005920:	18d66904 	addi	r3,r3,22948
 2005924:	10c00115 	stw	r3,4(r2)
 2005928:	16c00215 	stw	sp,8(r2)
 200592c:	e13ff104 	addi	r4,fp,-60
 2005930:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 2005934:	e13fee17 	ldw	r4,-72(fp)
 2005938:	00bfffc4 	movi	r2,-1
 200593c:	e0bff215 	stw	r2,-56(fp)
 2005940:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 2005944:	00c080b4 	movhi	r3,514
 2005948:	18ee5404 	addi	r3,r3,-18096
 200594c:	e0bfee17 	ldw	r2,-72(fp)
 2005950:	10c00015 	stw	r3,0(r2)
{
    parseHeader(pMessage, iLength);
 2005954:	e13fee17 	ldw	r4,-72(fp)
 2005958:	00800044 	movi	r2,1
 200595c:	e0bff215 	stw	r2,-56(fp)
 2005960:	e17fef17 	ldw	r5,-68(fp)
 2005964:	e1bff017 	ldw	r6,-64(fp)
 2005968:	20071cc0 	call	20071cc <_ZN11CCarMessage11parseHeaderEPhi>
    if(m_bValid)
 200596c:	e0bfee17 	ldw	r2,-72(fp)
 2005970:	10800203 	ldbu	r2,8(r2)
 2005974:	10803fcc 	andi	r2,r2,255
 2005978:	1005003a 	cmpeq	r2,r2,zero
 200597c:	1000171e 	bne	r2,zero,20059dc <_ZN15CControlMessageC1EPhi+0x120>
    {
        m_bValid = false;
 2005980:	e0bfee17 	ldw	r2,-72(fp)
 2005984:	10000205 	stb	zero,8(r2)
        parseMessage(pMessage+4, iLength-4);
 2005988:	e0bfef17 	ldw	r2,-68(fp)
 200598c:	11400104 	addi	r5,r2,4
 2005990:	e0bff017 	ldw	r2,-64(fp)
 2005994:	11bfff04 	addi	r6,r2,-4
 2005998:	e13fee17 	ldw	r4,-72(fp)
 200599c:	20056500 	call	2005650 <_ZN15CControlMessage12parseMessageEPhi>
    }
}
 20059a0:	00000e06 	br	20059dc <_ZN15CControlMessageC1EPhi+0x120>
 20059a4:	e7001204 	addi	fp,fp,72
 20059a8:	e0bff317 	ldw	r2,-52(fp)
 20059ac:	e0bfff15 	stw	r2,-4(fp)
 20059b0:	e0ffff17 	ldw	r3,-4(fp)
 20059b4:	e0fffe15 	stw	r3,-8(fp)
 20059b8:	e13fee17 	ldw	r4,-72(fp)
 20059bc:	e03ff215 	stw	zero,-56(fp)
 20059c0:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 20059c4:	e0bffe17 	ldw	r2,-8(fp)
 20059c8:	e0bfff15 	stw	r2,-4(fp)
 20059cc:	00bfffc4 	movi	r2,-1
 20059d0:	e0bff215 	stw	r2,-56(fp)
 20059d4:	e13fff17 	ldw	r4,-4(fp)
 20059d8:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 20059dc:	e13ff104 	addi	r4,fp,-60
 20059e0:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 20059e4:	e037883a 	mov	sp,fp
 20059e8:	dfc00917 	ldw	ra,36(sp)
 20059ec:	df000817 	ldw	fp,32(sp)
 20059f0:	ddc00717 	ldw	r23,28(sp)
 20059f4:	dd800617 	ldw	r22,24(sp)
 20059f8:	dd400517 	ldw	r21,20(sp)
 20059fc:	dd000417 	ldw	r20,16(sp)
 2005a00:	dcc00317 	ldw	r19,12(sp)
 2005a04:	dc800217 	ldw	r18,8(sp)
 2005a08:	dc400117 	ldw	r17,4(sp)
 2005a0c:	dc000017 	ldw	r16,0(sp)
 2005a10:	dec00a04 	addi	sp,sp,40
 2005a14:	f800283a 	ret

02005a18 <_ZN15CControlMessageC2EPhi>:
CControlMessage::CControlMessage()
{

}

CControlMessage::CControlMessage(alt_u8 * pMessage, int iLength)
 2005a18:	deffe404 	addi	sp,sp,-112
 2005a1c:	dfc01b15 	stw	ra,108(sp)
 2005a20:	df001a15 	stw	fp,104(sp)
 2005a24:	ddc01915 	stw	r23,100(sp)
 2005a28:	dd801815 	stw	r22,96(sp)
 2005a2c:	dd401715 	stw	r21,92(sp)
 2005a30:	dd001615 	stw	r20,88(sp)
 2005a34:	dcc01515 	stw	r19,84(sp)
 2005a38:	dc801415 	stw	r18,80(sp)
 2005a3c:	dc401315 	stw	r17,76(sp)
 2005a40:	dc001215 	stw	r16,72(sp)
 2005a44:	df001204 	addi	fp,sp,72
 2005a48:	e13fee15 	stw	r4,-72(fp)
 2005a4c:	e17fef15 	stw	r5,-68(fp)
 2005a50:	e1bff015 	stw	r6,-64(fp)
 2005a54:	00808074 	movhi	r2,513
 2005a58:	10ae5a04 	addi	r2,r2,-18072
 2005a5c:	e0bff715 	stw	r2,-36(fp)
 2005a60:	008080b4 	movhi	r2,514
 2005a64:	10adc404 	addi	r2,r2,-18672
 2005a68:	e0bff815 	stw	r2,-32(fp)
 2005a6c:	e0bff904 	addi	r2,fp,-28
 2005a70:	e0ffee04 	addi	r3,fp,-72
 2005a74:	10c00015 	stw	r3,0(r2)
 2005a78:	00c08034 	movhi	r3,512
 2005a7c:	18d6c004 	addi	r3,r3,23296
 2005a80:	10c00115 	stw	r3,4(r2)
 2005a84:	16c00215 	stw	sp,8(r2)
 2005a88:	e13ff104 	addi	r4,fp,-60
 2005a8c:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 2005a90:	e13fee17 	ldw	r4,-72(fp)
 2005a94:	00bfffc4 	movi	r2,-1
 2005a98:	e0bff215 	stw	r2,-56(fp)
 2005a9c:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 2005aa0:	00c080b4 	movhi	r3,514
 2005aa4:	18ee5404 	addi	r3,r3,-18096
 2005aa8:	e0bfee17 	ldw	r2,-72(fp)
 2005aac:	10c00015 	stw	r3,0(r2)
{
    parseHeader(pMessage, iLength);
 2005ab0:	e13fee17 	ldw	r4,-72(fp)
 2005ab4:	00800044 	movi	r2,1
 2005ab8:	e0bff215 	stw	r2,-56(fp)
 2005abc:	e17fef17 	ldw	r5,-68(fp)
 2005ac0:	e1bff017 	ldw	r6,-64(fp)
 2005ac4:	20071cc0 	call	20071cc <_ZN11CCarMessage11parseHeaderEPhi>
    if(m_bValid)
 2005ac8:	e0bfee17 	ldw	r2,-72(fp)
 2005acc:	10800203 	ldbu	r2,8(r2)
 2005ad0:	10803fcc 	andi	r2,r2,255
 2005ad4:	1005003a 	cmpeq	r2,r2,zero
 2005ad8:	1000171e 	bne	r2,zero,2005b38 <_ZN15CControlMessageC2EPhi+0x120>
    {
        m_bValid = false;
 2005adc:	e0bfee17 	ldw	r2,-72(fp)
 2005ae0:	10000205 	stb	zero,8(r2)
        parseMessage(pMessage+4, iLength-4);
 2005ae4:	e0bfef17 	ldw	r2,-68(fp)
 2005ae8:	11400104 	addi	r5,r2,4
 2005aec:	e0bff017 	ldw	r2,-64(fp)
 2005af0:	11bfff04 	addi	r6,r2,-4
 2005af4:	e13fee17 	ldw	r4,-72(fp)
 2005af8:	20056500 	call	2005650 <_ZN15CControlMessage12parseMessageEPhi>
    }
}
 2005afc:	00000e06 	br	2005b38 <_ZN15CControlMessageC2EPhi+0x120>
 2005b00:	e7001204 	addi	fp,fp,72
 2005b04:	e0bff317 	ldw	r2,-52(fp)
 2005b08:	e0bfff15 	stw	r2,-4(fp)
 2005b0c:	e0ffff17 	ldw	r3,-4(fp)
 2005b10:	e0fffe15 	stw	r3,-8(fp)
 2005b14:	e13fee17 	ldw	r4,-72(fp)
 2005b18:	e03ff215 	stw	zero,-56(fp)
 2005b1c:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 2005b20:	e0bffe17 	ldw	r2,-8(fp)
 2005b24:	e0bfff15 	stw	r2,-4(fp)
 2005b28:	00bfffc4 	movi	r2,-1
 2005b2c:	e0bff215 	stw	r2,-56(fp)
 2005b30:	e13fff17 	ldw	r4,-4(fp)
 2005b34:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 2005b38:	e13ff104 	addi	r4,fp,-60
 2005b3c:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 2005b40:	e037883a 	mov	sp,fp
 2005b44:	dfc00917 	ldw	ra,36(sp)
 2005b48:	df000817 	ldw	fp,32(sp)
 2005b4c:	ddc00717 	ldw	r23,28(sp)
 2005b50:	dd800617 	ldw	r22,24(sp)
 2005b54:	dd400517 	ldw	r21,20(sp)
 2005b58:	dd000417 	ldw	r20,16(sp)
 2005b5c:	dcc00317 	ldw	r19,12(sp)
 2005b60:	dc800217 	ldw	r18,8(sp)
 2005b64:	dc400117 	ldw	r17,4(sp)
 2005b68:	dc000017 	ldw	r16,0(sp)
 2005b6c:	dec00a04 	addi	sp,sp,40
 2005b70:	f800283a 	ret

02005b74 <_ZN22CEmergencyBrakeMessage13answerMessageEb>:
CEmergencyBrakeMessage::~CEmergencyBrakeMessage()
{

}

void CEmergencyBrakeMessage::answerMessage(bool executed_b)
 2005b74:	defffd04 	addi	sp,sp,-12
 2005b78:	df000215 	stw	fp,8(sp)
 2005b7c:	df000204 	addi	fp,sp,8
 2005b80:	e13ffe15 	stw	r4,-8(fp)
 2005b84:	e17fff05 	stb	r5,-4(fp)
{

}
 2005b88:	e037883a 	mov	sp,fp
 2005b8c:	df000017 	ldw	fp,0(sp)
 2005b90:	dec00104 	addi	sp,sp,4
 2005b94:	f800283a 	ret

02005b98 <_ZN22CEmergencyBrakeMessage8doActionEv>:

void CEmergencyBrakeMessage::doAction()
 2005b98:	defffe04 	addi	sp,sp,-8
 2005b9c:	df000115 	stw	fp,4(sp)
 2005ba0:	df000104 	addi	fp,sp,4
 2005ba4:	e13fff15 	stw	r4,-4(fp)
{

}
 2005ba8:	e037883a 	mov	sp,fp
 2005bac:	df000017 	ldw	fp,0(sp)
 2005bb0:	dec00104 	addi	sp,sp,4
 2005bb4:	f800283a 	ret

02005bb8 <_ZN22CEmergencyBrakeMessage8getBytesEPh>:

bool CEmergencyBrakeMessage::getBytes(alt_u8* pMessage)
 2005bb8:	defffd04 	addi	sp,sp,-12
 2005bbc:	df000215 	stw	fp,8(sp)
 2005bc0:	df000204 	addi	fp,sp,8
 2005bc4:	e13ffe15 	stw	r4,-8(fp)
 2005bc8:	e17fff15 	stw	r5,-4(fp)
{
	return true;
 2005bcc:	00800044 	movi	r2,1
}
 2005bd0:	e037883a 	mov	sp,fp
 2005bd4:	df000017 	ldw	fp,0(sp)
 2005bd8:	dec00104 	addi	sp,sp,4
 2005bdc:	f800283a 	ret

02005be0 <_ZN22CEmergencyBrakeMessage9getLengthEv>:

alt_u32 CEmergencyBrakeMessage::getLength()
 2005be0:	defffe04 	addi	sp,sp,-8
 2005be4:	df000115 	stw	fp,4(sp)
 2005be8:	df000104 	addi	fp,sp,4
 2005bec:	e13fff15 	stw	r4,-4(fp)
{
	return 0;
 2005bf0:	0005883a 	mov	r2,zero
}
 2005bf4:	e037883a 	mov	sp,fp
 2005bf8:	df000017 	ldw	fp,0(sp)
 2005bfc:	dec00104 	addi	sp,sp,4
 2005c00:	f800283a 	ret

02005c04 <_ZN22CEmergencyBrakeMessage12parseMessageEPhi>:

void CEmergencyBrakeMessage::parseMessage(alt_u8 *pMessage, int iLength)
 2005c04:	defffc04 	addi	sp,sp,-16
 2005c08:	df000315 	stw	fp,12(sp)
 2005c0c:	df000304 	addi	fp,sp,12
 2005c10:	e13ffd15 	stw	r4,-12(fp)
 2005c14:	e17ffe15 	stw	r5,-8(fp)
 2005c18:	e1bfff15 	stw	r6,-4(fp)
{

}
 2005c1c:	e037883a 	mov	sp,fp
 2005c20:	df000017 	ldw	fp,0(sp)
 2005c24:	dec00104 	addi	sp,sp,4
 2005c28:	f800283a 	ret

02005c2c <_ZN22CEmergencyBrakeMessageD0Ev>:
CEmergencyBrakeMessage::CEmergencyBrakeMessage(alt_u8* pMessage, int iLength)
{
	parseHeader(pMessage, iLength);
}

CEmergencyBrakeMessage::~CEmergencyBrakeMessage()
 2005c2c:	defffd04 	addi	sp,sp,-12
 2005c30:	dfc00215 	stw	ra,8(sp)
 2005c34:	df000115 	stw	fp,4(sp)
 2005c38:	df000104 	addi	fp,sp,4
 2005c3c:	e13fff15 	stw	r4,-4(fp)
 2005c40:	00c080b4 	movhi	r3,514
 2005c44:	18ee6304 	addi	r3,r3,-18036
 2005c48:	e0bfff17 	ldw	r2,-4(fp)
 2005c4c:	10c00015 	stw	r3,0(r2)
{

}
 2005c50:	e13fff17 	ldw	r4,-4(fp)
 2005c54:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 2005c58:	00800044 	movi	r2,1
 2005c5c:	10803fcc 	andi	r2,r2,255
 2005c60:	1005003a 	cmpeq	r2,r2,zero
 2005c64:	1000021e 	bne	r2,zero,2005c70 <_ZN22CEmergencyBrakeMessageD0Ev+0x44>
 2005c68:	e13fff17 	ldw	r4,-4(fp)
 2005c6c:	200c1380 	call	200c138 <_ZdlPv>
 2005c70:	e037883a 	mov	sp,fp
 2005c74:	dfc00117 	ldw	ra,4(sp)
 2005c78:	df000017 	ldw	fp,0(sp)
 2005c7c:	dec00204 	addi	sp,sp,8
 2005c80:	f800283a 	ret

02005c84 <_ZN22CEmergencyBrakeMessageD1Ev>:
CEmergencyBrakeMessage::CEmergencyBrakeMessage(alt_u8* pMessage, int iLength)
{
	parseHeader(pMessage, iLength);
}

CEmergencyBrakeMessage::~CEmergencyBrakeMessage()
 2005c84:	defffd04 	addi	sp,sp,-12
 2005c88:	dfc00215 	stw	ra,8(sp)
 2005c8c:	df000115 	stw	fp,4(sp)
 2005c90:	df000104 	addi	fp,sp,4
 2005c94:	e13fff15 	stw	r4,-4(fp)
 2005c98:	00c080b4 	movhi	r3,514
 2005c9c:	18ee6304 	addi	r3,r3,-18036
 2005ca0:	e0bfff17 	ldw	r2,-4(fp)
 2005ca4:	10c00015 	stw	r3,0(r2)
{

}
 2005ca8:	e13fff17 	ldw	r4,-4(fp)
 2005cac:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 2005cb0:	0005883a 	mov	r2,zero
 2005cb4:	10803fcc 	andi	r2,r2,255
 2005cb8:	1005003a 	cmpeq	r2,r2,zero
 2005cbc:	1000021e 	bne	r2,zero,2005cc8 <_ZN22CEmergencyBrakeMessageD1Ev+0x44>
 2005cc0:	e13fff17 	ldw	r4,-4(fp)
 2005cc4:	200c1380 	call	200c138 <_ZdlPv>
 2005cc8:	e037883a 	mov	sp,fp
 2005ccc:	dfc00117 	ldw	ra,4(sp)
 2005cd0:	df000017 	ldw	fp,0(sp)
 2005cd4:	dec00204 	addi	sp,sp,8
 2005cd8:	f800283a 	ret

02005cdc <_ZN22CEmergencyBrakeMessageD2Ev>:
CEmergencyBrakeMessage::CEmergencyBrakeMessage(alt_u8* pMessage, int iLength)
{
	parseHeader(pMessage, iLength);
}

CEmergencyBrakeMessage::~CEmergencyBrakeMessage()
 2005cdc:	defffd04 	addi	sp,sp,-12
 2005ce0:	dfc00215 	stw	ra,8(sp)
 2005ce4:	df000115 	stw	fp,4(sp)
 2005ce8:	df000104 	addi	fp,sp,4
 2005cec:	e13fff15 	stw	r4,-4(fp)
 2005cf0:	00c080b4 	movhi	r3,514
 2005cf4:	18ee6304 	addi	r3,r3,-18036
 2005cf8:	e0bfff17 	ldw	r2,-4(fp)
 2005cfc:	10c00015 	stw	r3,0(r2)
{

}
 2005d00:	e13fff17 	ldw	r4,-4(fp)
 2005d04:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 2005d08:	0005883a 	mov	r2,zero
 2005d0c:	10803fcc 	andi	r2,r2,255
 2005d10:	1005003a 	cmpeq	r2,r2,zero
 2005d14:	1000021e 	bne	r2,zero,2005d20 <_ZN22CEmergencyBrakeMessageD2Ev+0x44>
 2005d18:	e13fff17 	ldw	r4,-4(fp)
 2005d1c:	200c1380 	call	200c138 <_ZdlPv>
 2005d20:	e037883a 	mov	sp,fp
 2005d24:	dfc00117 	ldw	ra,4(sp)
 2005d28:	df000017 	ldw	fp,0(sp)
 2005d2c:	dec00204 	addi	sp,sp,8
 2005d30:	f800283a 	ret

02005d34 <_ZN22CEmergencyBrakeMessageC1Ev>:
#include "CEmergencyBrakeMessage.h"
CEmergencyBrakeMessage::CEmergencyBrakeMessage()
 2005d34:	defffd04 	addi	sp,sp,-12
 2005d38:	dfc00215 	stw	ra,8(sp)
 2005d3c:	df000115 	stw	fp,4(sp)
 2005d40:	df000104 	addi	fp,sp,4
 2005d44:	e13fff15 	stw	r4,-4(fp)
 2005d48:	e13fff17 	ldw	r4,-4(fp)
 2005d4c:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 2005d50:	00c080b4 	movhi	r3,514
 2005d54:	18ee6304 	addi	r3,r3,-18036
 2005d58:	e0bfff17 	ldw	r2,-4(fp)
 2005d5c:	10c00015 	stw	r3,0(r2)
{

}
 2005d60:	e037883a 	mov	sp,fp
 2005d64:	dfc00117 	ldw	ra,4(sp)
 2005d68:	df000017 	ldw	fp,0(sp)
 2005d6c:	dec00204 	addi	sp,sp,8
 2005d70:	f800283a 	ret

02005d74 <_ZN22CEmergencyBrakeMessageC2Ev>:
#include "CEmergencyBrakeMessage.h"
CEmergencyBrakeMessage::CEmergencyBrakeMessage()
 2005d74:	defffd04 	addi	sp,sp,-12
 2005d78:	dfc00215 	stw	ra,8(sp)
 2005d7c:	df000115 	stw	fp,4(sp)
 2005d80:	df000104 	addi	fp,sp,4
 2005d84:	e13fff15 	stw	r4,-4(fp)
 2005d88:	e13fff17 	ldw	r4,-4(fp)
 2005d8c:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 2005d90:	00c080b4 	movhi	r3,514
 2005d94:	18ee6304 	addi	r3,r3,-18036
 2005d98:	e0bfff17 	ldw	r2,-4(fp)
 2005d9c:	10c00015 	stw	r3,0(r2)
{

}
 2005da0:	e037883a 	mov	sp,fp
 2005da4:	dfc00117 	ldw	ra,4(sp)
 2005da8:	df000017 	ldw	fp,0(sp)
 2005dac:	dec00204 	addi	sp,sp,8
 2005db0:	f800283a 	ret

02005db4 <_ZN22CEmergencyBrakeMessageC1EPhi>:

CEmergencyBrakeMessage::CEmergencyBrakeMessage(alt_u8* pMessage, int iLength)
 2005db4:	deffe404 	addi	sp,sp,-112
 2005db8:	dfc01b15 	stw	ra,108(sp)
 2005dbc:	df001a15 	stw	fp,104(sp)
 2005dc0:	ddc01915 	stw	r23,100(sp)
 2005dc4:	dd801815 	stw	r22,96(sp)
 2005dc8:	dd401715 	stw	r21,92(sp)
 2005dcc:	dd001615 	stw	r20,88(sp)
 2005dd0:	dcc01515 	stw	r19,84(sp)
 2005dd4:	dc801415 	stw	r18,80(sp)
 2005dd8:	dc401315 	stw	r17,76(sp)
 2005ddc:	dc001215 	stw	r16,72(sp)
 2005de0:	df001204 	addi	fp,sp,72
 2005de4:	e13fee15 	stw	r4,-72(fp)
 2005de8:	e17fef15 	stw	r5,-68(fp)
 2005dec:	e1bff015 	stw	r6,-64(fp)
 2005df0:	00808074 	movhi	r2,513
 2005df4:	10ae5a04 	addi	r2,r2,-18072
 2005df8:	e0bff715 	stw	r2,-36(fp)
 2005dfc:	008080b4 	movhi	r2,514
 2005e00:	10adc584 	addi	r2,r2,-18666
 2005e04:	e0bff815 	stw	r2,-32(fp)
 2005e08:	e0bff904 	addi	r2,fp,-28
 2005e0c:	e0ffee04 	addi	r3,fp,-72
 2005e10:	10c00015 	stw	r3,0(r2)
 2005e14:	00c08034 	movhi	r3,512
 2005e18:	18d79a04 	addi	r3,r3,24168
 2005e1c:	10c00115 	stw	r3,4(r2)
 2005e20:	16c00215 	stw	sp,8(r2)
 2005e24:	e13ff104 	addi	r4,fp,-60
 2005e28:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 2005e2c:	e13fee17 	ldw	r4,-72(fp)
 2005e30:	00bfffc4 	movi	r2,-1
 2005e34:	e0bff215 	stw	r2,-56(fp)
 2005e38:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 2005e3c:	00c080b4 	movhi	r3,514
 2005e40:	18ee6304 	addi	r3,r3,-18036
 2005e44:	e0bfee17 	ldw	r2,-72(fp)
 2005e48:	10c00015 	stw	r3,0(r2)
{
	parseHeader(pMessage, iLength);
 2005e4c:	e13fee17 	ldw	r4,-72(fp)
 2005e50:	00800044 	movi	r2,1
 2005e54:	e0bff215 	stw	r2,-56(fp)
 2005e58:	e17fef17 	ldw	r5,-68(fp)
 2005e5c:	e1bff017 	ldw	r6,-64(fp)
 2005e60:	20071cc0 	call	20071cc <_ZN11CCarMessage11parseHeaderEPhi>
}
 2005e64:	00000e06 	br	2005ea0 <_ZN22CEmergencyBrakeMessageC1EPhi+0xec>
 2005e68:	e7001204 	addi	fp,fp,72
 2005e6c:	e0bff317 	ldw	r2,-52(fp)
 2005e70:	e0bfff15 	stw	r2,-4(fp)
 2005e74:	e0ffff17 	ldw	r3,-4(fp)
 2005e78:	e0fffe15 	stw	r3,-8(fp)
 2005e7c:	e13fee17 	ldw	r4,-72(fp)
 2005e80:	e03ff215 	stw	zero,-56(fp)
 2005e84:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 2005e88:	e0bffe17 	ldw	r2,-8(fp)
 2005e8c:	e0bfff15 	stw	r2,-4(fp)
 2005e90:	00bfffc4 	movi	r2,-1
 2005e94:	e0bff215 	stw	r2,-56(fp)
 2005e98:	e13fff17 	ldw	r4,-4(fp)
 2005e9c:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 2005ea0:	e13ff104 	addi	r4,fp,-60
 2005ea4:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 2005ea8:	e037883a 	mov	sp,fp
 2005eac:	dfc00917 	ldw	ra,36(sp)
 2005eb0:	df000817 	ldw	fp,32(sp)
 2005eb4:	ddc00717 	ldw	r23,28(sp)
 2005eb8:	dd800617 	ldw	r22,24(sp)
 2005ebc:	dd400517 	ldw	r21,20(sp)
 2005ec0:	dd000417 	ldw	r20,16(sp)
 2005ec4:	dcc00317 	ldw	r19,12(sp)
 2005ec8:	dc800217 	ldw	r18,8(sp)
 2005ecc:	dc400117 	ldw	r17,4(sp)
 2005ed0:	dc000017 	ldw	r16,0(sp)
 2005ed4:	dec00a04 	addi	sp,sp,40
 2005ed8:	f800283a 	ret

02005edc <_ZN22CEmergencyBrakeMessageC2EPhi>:
CEmergencyBrakeMessage::CEmergencyBrakeMessage()
{

}

CEmergencyBrakeMessage::CEmergencyBrakeMessage(alt_u8* pMessage, int iLength)
 2005edc:	deffe404 	addi	sp,sp,-112
 2005ee0:	dfc01b15 	stw	ra,108(sp)
 2005ee4:	df001a15 	stw	fp,104(sp)
 2005ee8:	ddc01915 	stw	r23,100(sp)
 2005eec:	dd801815 	stw	r22,96(sp)
 2005ef0:	dd401715 	stw	r21,92(sp)
 2005ef4:	dd001615 	stw	r20,88(sp)
 2005ef8:	dcc01515 	stw	r19,84(sp)
 2005efc:	dc801415 	stw	r18,80(sp)
 2005f00:	dc401315 	stw	r17,76(sp)
 2005f04:	dc001215 	stw	r16,72(sp)
 2005f08:	df001204 	addi	fp,sp,72
 2005f0c:	e13fee15 	stw	r4,-72(fp)
 2005f10:	e17fef15 	stw	r5,-68(fp)
 2005f14:	e1bff015 	stw	r6,-64(fp)
 2005f18:	00808074 	movhi	r2,513
 2005f1c:	10ae5a04 	addi	r2,r2,-18072
 2005f20:	e0bff715 	stw	r2,-36(fp)
 2005f24:	008080b4 	movhi	r2,514
 2005f28:	10adc704 	addi	r2,r2,-18660
 2005f2c:	e0bff815 	stw	r2,-32(fp)
 2005f30:	e0bff904 	addi	r2,fp,-28
 2005f34:	e0ffee04 	addi	r3,fp,-72
 2005f38:	10c00015 	stw	r3,0(r2)
 2005f3c:	00c08034 	movhi	r3,512
 2005f40:	18d7e404 	addi	r3,r3,24464
 2005f44:	10c00115 	stw	r3,4(r2)
 2005f48:	16c00215 	stw	sp,8(r2)
 2005f4c:	e13ff104 	addi	r4,fp,-60
 2005f50:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 2005f54:	e13fee17 	ldw	r4,-72(fp)
 2005f58:	00bfffc4 	movi	r2,-1
 2005f5c:	e0bff215 	stw	r2,-56(fp)
 2005f60:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 2005f64:	00c080b4 	movhi	r3,514
 2005f68:	18ee6304 	addi	r3,r3,-18036
 2005f6c:	e0bfee17 	ldw	r2,-72(fp)
 2005f70:	10c00015 	stw	r3,0(r2)
{
	parseHeader(pMessage, iLength);
 2005f74:	e13fee17 	ldw	r4,-72(fp)
 2005f78:	00800044 	movi	r2,1
 2005f7c:	e0bff215 	stw	r2,-56(fp)
 2005f80:	e17fef17 	ldw	r5,-68(fp)
 2005f84:	e1bff017 	ldw	r6,-64(fp)
 2005f88:	20071cc0 	call	20071cc <_ZN11CCarMessage11parseHeaderEPhi>
}
 2005f8c:	00000e06 	br	2005fc8 <_ZN22CEmergencyBrakeMessageC2EPhi+0xec>
 2005f90:	e7001204 	addi	fp,fp,72
 2005f94:	e0bff317 	ldw	r2,-52(fp)
 2005f98:	e0bfff15 	stw	r2,-4(fp)
 2005f9c:	e0ffff17 	ldw	r3,-4(fp)
 2005fa0:	e0fffe15 	stw	r3,-8(fp)
 2005fa4:	e13fee17 	ldw	r4,-72(fp)
 2005fa8:	e03ff215 	stw	zero,-56(fp)
 2005fac:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 2005fb0:	e0bffe17 	ldw	r2,-8(fp)
 2005fb4:	e0bfff15 	stw	r2,-4(fp)
 2005fb8:	00bfffc4 	movi	r2,-1
 2005fbc:	e0bff215 	stw	r2,-56(fp)
 2005fc0:	e13fff17 	ldw	r4,-4(fp)
 2005fc4:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 2005fc8:	e13ff104 	addi	r4,fp,-60
 2005fcc:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 2005fd0:	e037883a 	mov	sp,fp
 2005fd4:	dfc00917 	ldw	ra,36(sp)
 2005fd8:	df000817 	ldw	fp,32(sp)
 2005fdc:	ddc00717 	ldw	r23,28(sp)
 2005fe0:	dd800617 	ldw	r22,24(sp)
 2005fe4:	dd400517 	ldw	r21,20(sp)
 2005fe8:	dd000417 	ldw	r20,16(sp)
 2005fec:	dcc00317 	ldw	r19,12(sp)
 2005ff0:	dc800217 	ldw	r18,8(sp)
 2005ff4:	dc400117 	ldw	r17,4(sp)
 2005ff8:	dc000017 	ldw	r16,0(sp)
 2005ffc:	dec00a04 	addi	sp,sp,40
 2006000:	f800283a 	ret

02006004 <_ZN18CInfoSensorMessage13answerMessageEb>:
CInfoSensorMessage::~CInfoSensorMessage()
{

}

void CInfoSensorMessage::answerMessage(bool executed_b)
 2006004:	defffd04 	addi	sp,sp,-12
 2006008:	df000215 	stw	fp,8(sp)
 200600c:	df000204 	addi	fp,sp,8
 2006010:	e13ffe15 	stw	r4,-8(fp)
 2006014:	e17fff05 	stb	r5,-4(fp)
{

}
 2006018:	e037883a 	mov	sp,fp
 200601c:	df000017 	ldw	fp,0(sp)
 2006020:	dec00104 	addi	sp,sp,4
 2006024:	f800283a 	ret

02006028 <_ZN18CInfoSensorMessage8doActionEv>:

void CInfoSensorMessage::doAction()
 2006028:	defffe04 	addi	sp,sp,-8
 200602c:	df000115 	stw	fp,4(sp)
 2006030:	df000104 	addi	fp,sp,4
 2006034:	e13fff15 	stw	r4,-4(fp)
{

}
 2006038:	e037883a 	mov	sp,fp
 200603c:	df000017 	ldw	fp,0(sp)
 2006040:	dec00104 	addi	sp,sp,4
 2006044:	f800283a 	ret

02006048 <_ZN18CInfoSensorMessage8getBytesEPh>:

bool CInfoSensorMessage::getBytes(alt_u8* pMessage)
 2006048:	defffd04 	addi	sp,sp,-12
 200604c:	df000215 	stw	fp,8(sp)
 2006050:	df000204 	addi	fp,sp,8
 2006054:	e13ffe15 	stw	r4,-8(fp)
 2006058:	e17fff15 	stw	r5,-4(fp)
{
	return true;
 200605c:	00800044 	movi	r2,1
}
 2006060:	e037883a 	mov	sp,fp
 2006064:	df000017 	ldw	fp,0(sp)
 2006068:	dec00104 	addi	sp,sp,4
 200606c:	f800283a 	ret

02006070 <_ZN18CInfoSensorMessage9getLengthEv>:

alt_u32 CInfoSensorMessage::getLength()
 2006070:	defffe04 	addi	sp,sp,-8
 2006074:	df000115 	stw	fp,4(sp)
 2006078:	df000104 	addi	fp,sp,4
 200607c:	e13fff15 	stw	r4,-4(fp)
{
	return 0;
 2006080:	0005883a 	mov	r2,zero
}
 2006084:	e037883a 	mov	sp,fp
 2006088:	df000017 	ldw	fp,0(sp)
 200608c:	dec00104 	addi	sp,sp,4
 2006090:	f800283a 	ret

02006094 <_ZN18CInfoSensorMessage12parseMessageEPhi>:

void CInfoSensorMessage::parseMessage(alt_u8 *pMessage, int iLength)
 2006094:	defffc04 	addi	sp,sp,-16
 2006098:	df000315 	stw	fp,12(sp)
 200609c:	df000304 	addi	fp,sp,12
 20060a0:	e13ffd15 	stw	r4,-12(fp)
 20060a4:	e17ffe15 	stw	r5,-8(fp)
 20060a8:	e1bfff15 	stw	r6,-4(fp)
{

}
 20060ac:	e037883a 	mov	sp,fp
 20060b0:	df000017 	ldw	fp,0(sp)
 20060b4:	dec00104 	addi	sp,sp,4
 20060b8:	f800283a 	ret

020060bc <_ZN18CInfoSensorMessageD0Ev>:
CInfoSensorMessage::CInfoSensorMessage(alt_u8* pMessage, int iLength)
{
	parseHeader(pMessage, iLength);
}

CInfoSensorMessage::~CInfoSensorMessage()
 20060bc:	defffd04 	addi	sp,sp,-12
 20060c0:	dfc00215 	stw	ra,8(sp)
 20060c4:	df000115 	stw	fp,4(sp)
 20060c8:	df000104 	addi	fp,sp,4
 20060cc:	e13fff15 	stw	r4,-4(fp)
 20060d0:	00c080b4 	movhi	r3,514
 20060d4:	18ee7404 	addi	r3,r3,-17968
 20060d8:	e0bfff17 	ldw	r2,-4(fp)
 20060dc:	10c00015 	stw	r3,0(r2)
{

}
 20060e0:	e13fff17 	ldw	r4,-4(fp)
 20060e4:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 20060e8:	00800044 	movi	r2,1
 20060ec:	10803fcc 	andi	r2,r2,255
 20060f0:	1005003a 	cmpeq	r2,r2,zero
 20060f4:	1000021e 	bne	r2,zero,2006100 <_ZN18CInfoSensorMessageD0Ev+0x44>
 20060f8:	e13fff17 	ldw	r4,-4(fp)
 20060fc:	200c1380 	call	200c138 <_ZdlPv>
 2006100:	e037883a 	mov	sp,fp
 2006104:	dfc00117 	ldw	ra,4(sp)
 2006108:	df000017 	ldw	fp,0(sp)
 200610c:	dec00204 	addi	sp,sp,8
 2006110:	f800283a 	ret

02006114 <_ZN18CInfoSensorMessageD1Ev>:
CInfoSensorMessage::CInfoSensorMessage(alt_u8* pMessage, int iLength)
{
	parseHeader(pMessage, iLength);
}

CInfoSensorMessage::~CInfoSensorMessage()
 2006114:	defffd04 	addi	sp,sp,-12
 2006118:	dfc00215 	stw	ra,8(sp)
 200611c:	df000115 	stw	fp,4(sp)
 2006120:	df000104 	addi	fp,sp,4
 2006124:	e13fff15 	stw	r4,-4(fp)
 2006128:	00c080b4 	movhi	r3,514
 200612c:	18ee7404 	addi	r3,r3,-17968
 2006130:	e0bfff17 	ldw	r2,-4(fp)
 2006134:	10c00015 	stw	r3,0(r2)
{

}
 2006138:	e13fff17 	ldw	r4,-4(fp)
 200613c:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 2006140:	0005883a 	mov	r2,zero
 2006144:	10803fcc 	andi	r2,r2,255
 2006148:	1005003a 	cmpeq	r2,r2,zero
 200614c:	1000021e 	bne	r2,zero,2006158 <_ZN18CInfoSensorMessageD1Ev+0x44>
 2006150:	e13fff17 	ldw	r4,-4(fp)
 2006154:	200c1380 	call	200c138 <_ZdlPv>
 2006158:	e037883a 	mov	sp,fp
 200615c:	dfc00117 	ldw	ra,4(sp)
 2006160:	df000017 	ldw	fp,0(sp)
 2006164:	dec00204 	addi	sp,sp,8
 2006168:	f800283a 	ret

0200616c <_ZN18CInfoSensorMessageD2Ev>:
CInfoSensorMessage::CInfoSensorMessage(alt_u8* pMessage, int iLength)
{
	parseHeader(pMessage, iLength);
}

CInfoSensorMessage::~CInfoSensorMessage()
 200616c:	defffd04 	addi	sp,sp,-12
 2006170:	dfc00215 	stw	ra,8(sp)
 2006174:	df000115 	stw	fp,4(sp)
 2006178:	df000104 	addi	fp,sp,4
 200617c:	e13fff15 	stw	r4,-4(fp)
 2006180:	00c080b4 	movhi	r3,514
 2006184:	18ee7404 	addi	r3,r3,-17968
 2006188:	e0bfff17 	ldw	r2,-4(fp)
 200618c:	10c00015 	stw	r3,0(r2)
{

}
 2006190:	e13fff17 	ldw	r4,-4(fp)
 2006194:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 2006198:	0005883a 	mov	r2,zero
 200619c:	10803fcc 	andi	r2,r2,255
 20061a0:	1005003a 	cmpeq	r2,r2,zero
 20061a4:	1000021e 	bne	r2,zero,20061b0 <_ZN18CInfoSensorMessageD2Ev+0x44>
 20061a8:	e13fff17 	ldw	r4,-4(fp)
 20061ac:	200c1380 	call	200c138 <_ZdlPv>
 20061b0:	e037883a 	mov	sp,fp
 20061b4:	dfc00117 	ldw	ra,4(sp)
 20061b8:	df000017 	ldw	fp,0(sp)
 20061bc:	dec00204 	addi	sp,sp,8
 20061c0:	f800283a 	ret

020061c4 <_ZN18CInfoSensorMessageC1Ev>:
#include "CInfoSensorMessage.h"
CInfoSensorMessage::CInfoSensorMessage()
 20061c4:	defffd04 	addi	sp,sp,-12
 20061c8:	dfc00215 	stw	ra,8(sp)
 20061cc:	df000115 	stw	fp,4(sp)
 20061d0:	df000104 	addi	fp,sp,4
 20061d4:	e13fff15 	stw	r4,-4(fp)
 20061d8:	e13fff17 	ldw	r4,-4(fp)
 20061dc:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 20061e0:	00c080b4 	movhi	r3,514
 20061e4:	18ee7404 	addi	r3,r3,-17968
 20061e8:	e0bfff17 	ldw	r2,-4(fp)
 20061ec:	10c00015 	stw	r3,0(r2)
{

}
 20061f0:	e037883a 	mov	sp,fp
 20061f4:	dfc00117 	ldw	ra,4(sp)
 20061f8:	df000017 	ldw	fp,0(sp)
 20061fc:	dec00204 	addi	sp,sp,8
 2006200:	f800283a 	ret

02006204 <_ZN18CInfoSensorMessageC2Ev>:
#include "CInfoSensorMessage.h"
CInfoSensorMessage::CInfoSensorMessage()
 2006204:	defffd04 	addi	sp,sp,-12
 2006208:	dfc00215 	stw	ra,8(sp)
 200620c:	df000115 	stw	fp,4(sp)
 2006210:	df000104 	addi	fp,sp,4
 2006214:	e13fff15 	stw	r4,-4(fp)
 2006218:	e13fff17 	ldw	r4,-4(fp)
 200621c:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 2006220:	00c080b4 	movhi	r3,514
 2006224:	18ee7404 	addi	r3,r3,-17968
 2006228:	e0bfff17 	ldw	r2,-4(fp)
 200622c:	10c00015 	stw	r3,0(r2)
{

}
 2006230:	e037883a 	mov	sp,fp
 2006234:	dfc00117 	ldw	ra,4(sp)
 2006238:	df000017 	ldw	fp,0(sp)
 200623c:	dec00204 	addi	sp,sp,8
 2006240:	f800283a 	ret

02006244 <_ZN18CInfoSensorMessageC1EPhi>:

CInfoSensorMessage::CInfoSensorMessage(alt_u8* pMessage, int iLength)
 2006244:	deffe404 	addi	sp,sp,-112
 2006248:	dfc01b15 	stw	ra,108(sp)
 200624c:	df001a15 	stw	fp,104(sp)
 2006250:	ddc01915 	stw	r23,100(sp)
 2006254:	dd801815 	stw	r22,96(sp)
 2006258:	dd401715 	stw	r21,92(sp)
 200625c:	dd001615 	stw	r20,88(sp)
 2006260:	dcc01515 	stw	r19,84(sp)
 2006264:	dc801415 	stw	r18,80(sp)
 2006268:	dc401315 	stw	r17,76(sp)
 200626c:	dc001215 	stw	r16,72(sp)
 2006270:	df001204 	addi	fp,sp,72
 2006274:	e13fee15 	stw	r4,-72(fp)
 2006278:	e17fef15 	stw	r5,-68(fp)
 200627c:	e1bff015 	stw	r6,-64(fp)
 2006280:	00808074 	movhi	r2,513
 2006284:	10ae5a04 	addi	r2,r2,-18072
 2006288:	e0bff715 	stw	r2,-36(fp)
 200628c:	008080b4 	movhi	r2,514
 2006290:	10adc884 	addi	r2,r2,-18654
 2006294:	e0bff815 	stw	r2,-32(fp)
 2006298:	e0bff904 	addi	r2,fp,-28
 200629c:	e0ffee04 	addi	r3,fp,-72
 20062a0:	10c00015 	stw	r3,0(r2)
 20062a4:	00c08034 	movhi	r3,512
 20062a8:	18d8be04 	addi	r3,r3,25336
 20062ac:	10c00115 	stw	r3,4(r2)
 20062b0:	16c00215 	stw	sp,8(r2)
 20062b4:	e13ff104 	addi	r4,fp,-60
 20062b8:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 20062bc:	e13fee17 	ldw	r4,-72(fp)
 20062c0:	00bfffc4 	movi	r2,-1
 20062c4:	e0bff215 	stw	r2,-56(fp)
 20062c8:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 20062cc:	00c080b4 	movhi	r3,514
 20062d0:	18ee7404 	addi	r3,r3,-17968
 20062d4:	e0bfee17 	ldw	r2,-72(fp)
 20062d8:	10c00015 	stw	r3,0(r2)
{
	parseHeader(pMessage, iLength);
 20062dc:	e13fee17 	ldw	r4,-72(fp)
 20062e0:	00800044 	movi	r2,1
 20062e4:	e0bff215 	stw	r2,-56(fp)
 20062e8:	e17fef17 	ldw	r5,-68(fp)
 20062ec:	e1bff017 	ldw	r6,-64(fp)
 20062f0:	20071cc0 	call	20071cc <_ZN11CCarMessage11parseHeaderEPhi>
}
 20062f4:	00000e06 	br	2006330 <_ZN18CInfoSensorMessageC1EPhi+0xec>
 20062f8:	e7001204 	addi	fp,fp,72
 20062fc:	e0bff317 	ldw	r2,-52(fp)
 2006300:	e0bfff15 	stw	r2,-4(fp)
 2006304:	e0ffff17 	ldw	r3,-4(fp)
 2006308:	e0fffe15 	stw	r3,-8(fp)
 200630c:	e13fee17 	ldw	r4,-72(fp)
 2006310:	e03ff215 	stw	zero,-56(fp)
 2006314:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 2006318:	e0bffe17 	ldw	r2,-8(fp)
 200631c:	e0bfff15 	stw	r2,-4(fp)
 2006320:	00bfffc4 	movi	r2,-1
 2006324:	e0bff215 	stw	r2,-56(fp)
 2006328:	e13fff17 	ldw	r4,-4(fp)
 200632c:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 2006330:	e13ff104 	addi	r4,fp,-60
 2006334:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 2006338:	e037883a 	mov	sp,fp
 200633c:	dfc00917 	ldw	ra,36(sp)
 2006340:	df000817 	ldw	fp,32(sp)
 2006344:	ddc00717 	ldw	r23,28(sp)
 2006348:	dd800617 	ldw	r22,24(sp)
 200634c:	dd400517 	ldw	r21,20(sp)
 2006350:	dd000417 	ldw	r20,16(sp)
 2006354:	dcc00317 	ldw	r19,12(sp)
 2006358:	dc800217 	ldw	r18,8(sp)
 200635c:	dc400117 	ldw	r17,4(sp)
 2006360:	dc000017 	ldw	r16,0(sp)
 2006364:	dec00a04 	addi	sp,sp,40
 2006368:	f800283a 	ret

0200636c <_ZN18CInfoSensorMessageC2EPhi>:
CInfoSensorMessage::CInfoSensorMessage()
{

}

CInfoSensorMessage::CInfoSensorMessage(alt_u8* pMessage, int iLength)
 200636c:	deffe404 	addi	sp,sp,-112
 2006370:	dfc01b15 	stw	ra,108(sp)
 2006374:	df001a15 	stw	fp,104(sp)
 2006378:	ddc01915 	stw	r23,100(sp)
 200637c:	dd801815 	stw	r22,96(sp)
 2006380:	dd401715 	stw	r21,92(sp)
 2006384:	dd001615 	stw	r20,88(sp)
 2006388:	dcc01515 	stw	r19,84(sp)
 200638c:	dc801415 	stw	r18,80(sp)
 2006390:	dc401315 	stw	r17,76(sp)
 2006394:	dc001215 	stw	r16,72(sp)
 2006398:	df001204 	addi	fp,sp,72
 200639c:	e13fee15 	stw	r4,-72(fp)
 20063a0:	e17fef15 	stw	r5,-68(fp)
 20063a4:	e1bff015 	stw	r6,-64(fp)
 20063a8:	00808074 	movhi	r2,513
 20063ac:	10ae5a04 	addi	r2,r2,-18072
 20063b0:	e0bff715 	stw	r2,-36(fp)
 20063b4:	008080b4 	movhi	r2,514
 20063b8:	10adca04 	addi	r2,r2,-18648
 20063bc:	e0bff815 	stw	r2,-32(fp)
 20063c0:	e0bff904 	addi	r2,fp,-28
 20063c4:	e0ffee04 	addi	r3,fp,-72
 20063c8:	10c00015 	stw	r3,0(r2)
 20063cc:	00c08034 	movhi	r3,512
 20063d0:	18d90804 	addi	r3,r3,25632
 20063d4:	10c00115 	stw	r3,4(r2)
 20063d8:	16c00215 	stw	sp,8(r2)
 20063dc:	e13ff104 	addi	r4,fp,-60
 20063e0:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 20063e4:	e13fee17 	ldw	r4,-72(fp)
 20063e8:	00bfffc4 	movi	r2,-1
 20063ec:	e0bff215 	stw	r2,-56(fp)
 20063f0:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 20063f4:	00c080b4 	movhi	r3,514
 20063f8:	18ee7404 	addi	r3,r3,-17968
 20063fc:	e0bfee17 	ldw	r2,-72(fp)
 2006400:	10c00015 	stw	r3,0(r2)
{
	parseHeader(pMessage, iLength);
 2006404:	e13fee17 	ldw	r4,-72(fp)
 2006408:	00800044 	movi	r2,1
 200640c:	e0bff215 	stw	r2,-56(fp)
 2006410:	e17fef17 	ldw	r5,-68(fp)
 2006414:	e1bff017 	ldw	r6,-64(fp)
 2006418:	20071cc0 	call	20071cc <_ZN11CCarMessage11parseHeaderEPhi>
}
 200641c:	00000e06 	br	2006458 <_ZN18CInfoSensorMessageC2EPhi+0xec>
 2006420:	e7001204 	addi	fp,fp,72
 2006424:	e0bff317 	ldw	r2,-52(fp)
 2006428:	e0bfff15 	stw	r2,-4(fp)
 200642c:	e0ffff17 	ldw	r3,-4(fp)
 2006430:	e0fffe15 	stw	r3,-8(fp)
 2006434:	e13fee17 	ldw	r4,-72(fp)
 2006438:	e03ff215 	stw	zero,-56(fp)
 200643c:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 2006440:	e0bffe17 	ldw	r2,-8(fp)
 2006444:	e0bfff15 	stw	r2,-4(fp)
 2006448:	00bfffc4 	movi	r2,-1
 200644c:	e0bff215 	stw	r2,-56(fp)
 2006450:	e13fff17 	ldw	r4,-4(fp)
 2006454:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 2006458:	e13ff104 	addi	r4,fp,-60
 200645c:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 2006460:	e037883a 	mov	sp,fp
 2006464:	dfc00917 	ldw	ra,36(sp)
 2006468:	df000817 	ldw	fp,32(sp)
 200646c:	ddc00717 	ldw	r23,28(sp)
 2006470:	dd800617 	ldw	r22,24(sp)
 2006474:	dd400517 	ldw	r21,20(sp)
 2006478:	dd000417 	ldw	r20,16(sp)
 200647c:	dcc00317 	ldw	r19,12(sp)
 2006480:	dc800217 	ldw	r18,8(sp)
 2006484:	dc400117 	ldw	r17,4(sp)
 2006488:	dc000017 	ldw	r16,0(sp)
 200648c:	dec00a04 	addi	sp,sp,40
 2006490:	f800283a 	ret

02006494 <_ZN17CInfoStateMessage13answerMessageEb>:
CInfoStateMessage::~CInfoStateMessage()
{

}

void CInfoStateMessage::answerMessage(bool executed_b)
 2006494:	defffd04 	addi	sp,sp,-12
 2006498:	df000215 	stw	fp,8(sp)
 200649c:	df000204 	addi	fp,sp,8
 20064a0:	e13ffe15 	stw	r4,-8(fp)
 20064a4:	e17fff05 	stb	r5,-4(fp)
{

}
 20064a8:	e037883a 	mov	sp,fp
 20064ac:	df000017 	ldw	fp,0(sp)
 20064b0:	dec00104 	addi	sp,sp,4
 20064b4:	f800283a 	ret

020064b8 <_ZN17CInfoStateMessage8doActionEv>:

void CInfoStateMessage::doAction()
 20064b8:	defffe04 	addi	sp,sp,-8
 20064bc:	df000115 	stw	fp,4(sp)
 20064c0:	df000104 	addi	fp,sp,4
 20064c4:	e13fff15 	stw	r4,-4(fp)
{

}
 20064c8:	e037883a 	mov	sp,fp
 20064cc:	df000017 	ldw	fp,0(sp)
 20064d0:	dec00104 	addi	sp,sp,4
 20064d4:	f800283a 	ret

020064d8 <_ZN17CInfoStateMessage8getBytesEPh>:

bool CInfoStateMessage::getBytes(alt_u8* pMessage)
 20064d8:	defffd04 	addi	sp,sp,-12
 20064dc:	df000215 	stw	fp,8(sp)
 20064e0:	df000204 	addi	fp,sp,8
 20064e4:	e13ffe15 	stw	r4,-8(fp)
 20064e8:	e17fff15 	stw	r5,-4(fp)
{
	return true;
 20064ec:	00800044 	movi	r2,1
}
 20064f0:	e037883a 	mov	sp,fp
 20064f4:	df000017 	ldw	fp,0(sp)
 20064f8:	dec00104 	addi	sp,sp,4
 20064fc:	f800283a 	ret

02006500 <_ZN17CInfoStateMessage9getLengthEv>:

alt_u32 CInfoStateMessage::getLength()
 2006500:	defffe04 	addi	sp,sp,-8
 2006504:	df000115 	stw	fp,4(sp)
 2006508:	df000104 	addi	fp,sp,4
 200650c:	e13fff15 	stw	r4,-4(fp)
{
	return 0;
 2006510:	0005883a 	mov	r2,zero
}
 2006514:	e037883a 	mov	sp,fp
 2006518:	df000017 	ldw	fp,0(sp)
 200651c:	dec00104 	addi	sp,sp,4
 2006520:	f800283a 	ret

02006524 <_ZN17CInfoStateMessage12parseMessageEPhi>:

void CInfoStateMessage::parseMessage(alt_u8 *pMessage, int iLength)
 2006524:	defffc04 	addi	sp,sp,-16
 2006528:	df000315 	stw	fp,12(sp)
 200652c:	df000304 	addi	fp,sp,12
 2006530:	e13ffd15 	stw	r4,-12(fp)
 2006534:	e17ffe15 	stw	r5,-8(fp)
 2006538:	e1bfff15 	stw	r6,-4(fp)
{

}
 200653c:	e037883a 	mov	sp,fp
 2006540:	df000017 	ldw	fp,0(sp)
 2006544:	dec00104 	addi	sp,sp,4
 2006548:	f800283a 	ret

0200654c <_ZN17CInfoStateMessageD0Ev>:
CInfoStateMessage::CInfoStateMessage(alt_u8* pMessage, int iLength)
{
	parseHeader(pMessage, iLength);
}

CInfoStateMessage::~CInfoStateMessage()
 200654c:	defffd04 	addi	sp,sp,-12
 2006550:	dfc00215 	stw	ra,8(sp)
 2006554:	df000115 	stw	fp,4(sp)
 2006558:	df000104 	addi	fp,sp,4
 200655c:	e13fff15 	stw	r4,-4(fp)
 2006560:	00c080b4 	movhi	r3,514
 2006564:	18ee8404 	addi	r3,r3,-17904
 2006568:	e0bfff17 	ldw	r2,-4(fp)
 200656c:	10c00015 	stw	r3,0(r2)
{

}
 2006570:	e13fff17 	ldw	r4,-4(fp)
 2006574:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 2006578:	00800044 	movi	r2,1
 200657c:	10803fcc 	andi	r2,r2,255
 2006580:	1005003a 	cmpeq	r2,r2,zero
 2006584:	1000021e 	bne	r2,zero,2006590 <_ZN17CInfoStateMessageD0Ev+0x44>
 2006588:	e13fff17 	ldw	r4,-4(fp)
 200658c:	200c1380 	call	200c138 <_ZdlPv>
 2006590:	e037883a 	mov	sp,fp
 2006594:	dfc00117 	ldw	ra,4(sp)
 2006598:	df000017 	ldw	fp,0(sp)
 200659c:	dec00204 	addi	sp,sp,8
 20065a0:	f800283a 	ret

020065a4 <_ZN17CInfoStateMessageD1Ev>:
CInfoStateMessage::CInfoStateMessage(alt_u8* pMessage, int iLength)
{
	parseHeader(pMessage, iLength);
}

CInfoStateMessage::~CInfoStateMessage()
 20065a4:	defffd04 	addi	sp,sp,-12
 20065a8:	dfc00215 	stw	ra,8(sp)
 20065ac:	df000115 	stw	fp,4(sp)
 20065b0:	df000104 	addi	fp,sp,4
 20065b4:	e13fff15 	stw	r4,-4(fp)
 20065b8:	00c080b4 	movhi	r3,514
 20065bc:	18ee8404 	addi	r3,r3,-17904
 20065c0:	e0bfff17 	ldw	r2,-4(fp)
 20065c4:	10c00015 	stw	r3,0(r2)
{

}
 20065c8:	e13fff17 	ldw	r4,-4(fp)
 20065cc:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 20065d0:	0005883a 	mov	r2,zero
 20065d4:	10803fcc 	andi	r2,r2,255
 20065d8:	1005003a 	cmpeq	r2,r2,zero
 20065dc:	1000021e 	bne	r2,zero,20065e8 <_ZN17CInfoStateMessageD1Ev+0x44>
 20065e0:	e13fff17 	ldw	r4,-4(fp)
 20065e4:	200c1380 	call	200c138 <_ZdlPv>
 20065e8:	e037883a 	mov	sp,fp
 20065ec:	dfc00117 	ldw	ra,4(sp)
 20065f0:	df000017 	ldw	fp,0(sp)
 20065f4:	dec00204 	addi	sp,sp,8
 20065f8:	f800283a 	ret

020065fc <_ZN17CInfoStateMessageD2Ev>:
CInfoStateMessage::CInfoStateMessage(alt_u8* pMessage, int iLength)
{
	parseHeader(pMessage, iLength);
}

CInfoStateMessage::~CInfoStateMessage()
 20065fc:	defffd04 	addi	sp,sp,-12
 2006600:	dfc00215 	stw	ra,8(sp)
 2006604:	df000115 	stw	fp,4(sp)
 2006608:	df000104 	addi	fp,sp,4
 200660c:	e13fff15 	stw	r4,-4(fp)
 2006610:	00c080b4 	movhi	r3,514
 2006614:	18ee8404 	addi	r3,r3,-17904
 2006618:	e0bfff17 	ldw	r2,-4(fp)
 200661c:	10c00015 	stw	r3,0(r2)
{

}
 2006620:	e13fff17 	ldw	r4,-4(fp)
 2006624:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 2006628:	0005883a 	mov	r2,zero
 200662c:	10803fcc 	andi	r2,r2,255
 2006630:	1005003a 	cmpeq	r2,r2,zero
 2006634:	1000021e 	bne	r2,zero,2006640 <_ZN17CInfoStateMessageD2Ev+0x44>
 2006638:	e13fff17 	ldw	r4,-4(fp)
 200663c:	200c1380 	call	200c138 <_ZdlPv>
 2006640:	e037883a 	mov	sp,fp
 2006644:	dfc00117 	ldw	ra,4(sp)
 2006648:	df000017 	ldw	fp,0(sp)
 200664c:	dec00204 	addi	sp,sp,8
 2006650:	f800283a 	ret

02006654 <_ZN17CInfoStateMessageC1Ev>:
#include "CInfoStateMessage.h"
CInfoStateMessage::CInfoStateMessage()
 2006654:	defffd04 	addi	sp,sp,-12
 2006658:	dfc00215 	stw	ra,8(sp)
 200665c:	df000115 	stw	fp,4(sp)
 2006660:	df000104 	addi	fp,sp,4
 2006664:	e13fff15 	stw	r4,-4(fp)
 2006668:	e13fff17 	ldw	r4,-4(fp)
 200666c:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 2006670:	00c080b4 	movhi	r3,514
 2006674:	18ee8404 	addi	r3,r3,-17904
 2006678:	e0bfff17 	ldw	r2,-4(fp)
 200667c:	10c00015 	stw	r3,0(r2)
{

}
 2006680:	e037883a 	mov	sp,fp
 2006684:	dfc00117 	ldw	ra,4(sp)
 2006688:	df000017 	ldw	fp,0(sp)
 200668c:	dec00204 	addi	sp,sp,8
 2006690:	f800283a 	ret

02006694 <_ZN17CInfoStateMessageC2Ev>:
#include "CInfoStateMessage.h"
CInfoStateMessage::CInfoStateMessage()
 2006694:	defffd04 	addi	sp,sp,-12
 2006698:	dfc00215 	stw	ra,8(sp)
 200669c:	df000115 	stw	fp,4(sp)
 20066a0:	df000104 	addi	fp,sp,4
 20066a4:	e13fff15 	stw	r4,-4(fp)
 20066a8:	e13fff17 	ldw	r4,-4(fp)
 20066ac:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 20066b0:	00c080b4 	movhi	r3,514
 20066b4:	18ee8404 	addi	r3,r3,-17904
 20066b8:	e0bfff17 	ldw	r2,-4(fp)
 20066bc:	10c00015 	stw	r3,0(r2)
{

}
 20066c0:	e037883a 	mov	sp,fp
 20066c4:	dfc00117 	ldw	ra,4(sp)
 20066c8:	df000017 	ldw	fp,0(sp)
 20066cc:	dec00204 	addi	sp,sp,8
 20066d0:	f800283a 	ret

020066d4 <_ZN17CInfoStateMessageC1EPhi>:

CInfoStateMessage::CInfoStateMessage(alt_u8* pMessage, int iLength)
 20066d4:	deffe404 	addi	sp,sp,-112
 20066d8:	dfc01b15 	stw	ra,108(sp)
 20066dc:	df001a15 	stw	fp,104(sp)
 20066e0:	ddc01915 	stw	r23,100(sp)
 20066e4:	dd801815 	stw	r22,96(sp)
 20066e8:	dd401715 	stw	r21,92(sp)
 20066ec:	dd001615 	stw	r20,88(sp)
 20066f0:	dcc01515 	stw	r19,84(sp)
 20066f4:	dc801415 	stw	r18,80(sp)
 20066f8:	dc401315 	stw	r17,76(sp)
 20066fc:	dc001215 	stw	r16,72(sp)
 2006700:	df001204 	addi	fp,sp,72
 2006704:	e13fee15 	stw	r4,-72(fp)
 2006708:	e17fef15 	stw	r5,-68(fp)
 200670c:	e1bff015 	stw	r6,-64(fp)
 2006710:	00808074 	movhi	r2,513
 2006714:	10ae5a04 	addi	r2,r2,-18072
 2006718:	e0bff715 	stw	r2,-36(fp)
 200671c:	008080b4 	movhi	r2,514
 2006720:	10adcb84 	addi	r2,r2,-18642
 2006724:	e0bff815 	stw	r2,-32(fp)
 2006728:	e0bff904 	addi	r2,fp,-28
 200672c:	e0ffee04 	addi	r3,fp,-72
 2006730:	10c00015 	stw	r3,0(r2)
 2006734:	00c08034 	movhi	r3,512
 2006738:	18d9e204 	addi	r3,r3,26504
 200673c:	10c00115 	stw	r3,4(r2)
 2006740:	16c00215 	stw	sp,8(r2)
 2006744:	e13ff104 	addi	r4,fp,-60
 2006748:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 200674c:	e13fee17 	ldw	r4,-72(fp)
 2006750:	00bfffc4 	movi	r2,-1
 2006754:	e0bff215 	stw	r2,-56(fp)
 2006758:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 200675c:	00c080b4 	movhi	r3,514
 2006760:	18ee8404 	addi	r3,r3,-17904
 2006764:	e0bfee17 	ldw	r2,-72(fp)
 2006768:	10c00015 	stw	r3,0(r2)
{
	parseHeader(pMessage, iLength);
 200676c:	e13fee17 	ldw	r4,-72(fp)
 2006770:	00800044 	movi	r2,1
 2006774:	e0bff215 	stw	r2,-56(fp)
 2006778:	e17fef17 	ldw	r5,-68(fp)
 200677c:	e1bff017 	ldw	r6,-64(fp)
 2006780:	20071cc0 	call	20071cc <_ZN11CCarMessage11parseHeaderEPhi>
}
 2006784:	00000e06 	br	20067c0 <_ZN17CInfoStateMessageC1EPhi+0xec>
 2006788:	e7001204 	addi	fp,fp,72
 200678c:	e0bff317 	ldw	r2,-52(fp)
 2006790:	e0bfff15 	stw	r2,-4(fp)
 2006794:	e0ffff17 	ldw	r3,-4(fp)
 2006798:	e0fffe15 	stw	r3,-8(fp)
 200679c:	e13fee17 	ldw	r4,-72(fp)
 20067a0:	e03ff215 	stw	zero,-56(fp)
 20067a4:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 20067a8:	e0bffe17 	ldw	r2,-8(fp)
 20067ac:	e0bfff15 	stw	r2,-4(fp)
 20067b0:	00bfffc4 	movi	r2,-1
 20067b4:	e0bff215 	stw	r2,-56(fp)
 20067b8:	e13fff17 	ldw	r4,-4(fp)
 20067bc:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 20067c0:	e13ff104 	addi	r4,fp,-60
 20067c4:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 20067c8:	e037883a 	mov	sp,fp
 20067cc:	dfc00917 	ldw	ra,36(sp)
 20067d0:	df000817 	ldw	fp,32(sp)
 20067d4:	ddc00717 	ldw	r23,28(sp)
 20067d8:	dd800617 	ldw	r22,24(sp)
 20067dc:	dd400517 	ldw	r21,20(sp)
 20067e0:	dd000417 	ldw	r20,16(sp)
 20067e4:	dcc00317 	ldw	r19,12(sp)
 20067e8:	dc800217 	ldw	r18,8(sp)
 20067ec:	dc400117 	ldw	r17,4(sp)
 20067f0:	dc000017 	ldw	r16,0(sp)
 20067f4:	dec00a04 	addi	sp,sp,40
 20067f8:	f800283a 	ret

020067fc <_ZN17CInfoStateMessageC2EPhi>:
CInfoStateMessage::CInfoStateMessage()
{

}

CInfoStateMessage::CInfoStateMessage(alt_u8* pMessage, int iLength)
 20067fc:	deffe404 	addi	sp,sp,-112
 2006800:	dfc01b15 	stw	ra,108(sp)
 2006804:	df001a15 	stw	fp,104(sp)
 2006808:	ddc01915 	stw	r23,100(sp)
 200680c:	dd801815 	stw	r22,96(sp)
 2006810:	dd401715 	stw	r21,92(sp)
 2006814:	dd001615 	stw	r20,88(sp)
 2006818:	dcc01515 	stw	r19,84(sp)
 200681c:	dc801415 	stw	r18,80(sp)
 2006820:	dc401315 	stw	r17,76(sp)
 2006824:	dc001215 	stw	r16,72(sp)
 2006828:	df001204 	addi	fp,sp,72
 200682c:	e13fee15 	stw	r4,-72(fp)
 2006830:	e17fef15 	stw	r5,-68(fp)
 2006834:	e1bff015 	stw	r6,-64(fp)
 2006838:	00808074 	movhi	r2,513
 200683c:	10ae5a04 	addi	r2,r2,-18072
 2006840:	e0bff715 	stw	r2,-36(fp)
 2006844:	008080b4 	movhi	r2,514
 2006848:	10adcd04 	addi	r2,r2,-18636
 200684c:	e0bff815 	stw	r2,-32(fp)
 2006850:	e0bff904 	addi	r2,fp,-28
 2006854:	e0ffee04 	addi	r3,fp,-72
 2006858:	10c00015 	stw	r3,0(r2)
 200685c:	00c08034 	movhi	r3,512
 2006860:	18da2c04 	addi	r3,r3,26800
 2006864:	10c00115 	stw	r3,4(r2)
 2006868:	16c00215 	stw	sp,8(r2)
 200686c:	e13ff104 	addi	r4,fp,-60
 2006870:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 2006874:	e13fee17 	ldw	r4,-72(fp)
 2006878:	00bfffc4 	movi	r2,-1
 200687c:	e0bff215 	stw	r2,-56(fp)
 2006880:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 2006884:	00c080b4 	movhi	r3,514
 2006888:	18ee8404 	addi	r3,r3,-17904
 200688c:	e0bfee17 	ldw	r2,-72(fp)
 2006890:	10c00015 	stw	r3,0(r2)
{
	parseHeader(pMessage, iLength);
 2006894:	e13fee17 	ldw	r4,-72(fp)
 2006898:	00800044 	movi	r2,1
 200689c:	e0bff215 	stw	r2,-56(fp)
 20068a0:	e17fef17 	ldw	r5,-68(fp)
 20068a4:	e1bff017 	ldw	r6,-64(fp)
 20068a8:	20071cc0 	call	20071cc <_ZN11CCarMessage11parseHeaderEPhi>
}
 20068ac:	00000e06 	br	20068e8 <_ZN17CInfoStateMessageC2EPhi+0xec>
 20068b0:	e7001204 	addi	fp,fp,72
 20068b4:	e0bff317 	ldw	r2,-52(fp)
 20068b8:	e0bfff15 	stw	r2,-4(fp)
 20068bc:	e0ffff17 	ldw	r3,-4(fp)
 20068c0:	e0fffe15 	stw	r3,-8(fp)
 20068c4:	e13fee17 	ldw	r4,-72(fp)
 20068c8:	e03ff215 	stw	zero,-56(fp)
 20068cc:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 20068d0:	e0bffe17 	ldw	r2,-8(fp)
 20068d4:	e0bfff15 	stw	r2,-4(fp)
 20068d8:	00bfffc4 	movi	r2,-1
 20068dc:	e0bff215 	stw	r2,-56(fp)
 20068e0:	e13fff17 	ldw	r4,-4(fp)
 20068e4:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 20068e8:	e13ff104 	addi	r4,fp,-60
 20068ec:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 20068f0:	e037883a 	mov	sp,fp
 20068f4:	dfc00917 	ldw	ra,36(sp)
 20068f8:	df000817 	ldw	fp,32(sp)
 20068fc:	ddc00717 	ldw	r23,28(sp)
 2006900:	dd800617 	ldw	r22,24(sp)
 2006904:	dd400517 	ldw	r21,20(sp)
 2006908:	dd000417 	ldw	r20,16(sp)
 200690c:	dcc00317 	ldw	r19,12(sp)
 2006910:	dc800217 	ldw	r18,8(sp)
 2006914:	dc400117 	ldw	r17,4(sp)
 2006918:	dc000017 	ldw	r16,0(sp)
 200691c:	dec00a04 	addi	sp,sp,40
 2006920:	f800283a 	ret

02006924 <_ZN21CRemoteControlMessage13answerMessageEb>:
CRemoteControlMessage::~CRemoteControlMessage()
{

}

void CRemoteControlMessage::answerMessage(bool executed_b)
 2006924:	defffd04 	addi	sp,sp,-12
 2006928:	df000215 	stw	fp,8(sp)
 200692c:	df000204 	addi	fp,sp,8
 2006930:	e13ffe15 	stw	r4,-8(fp)
 2006934:	e17fff05 	stb	r5,-4(fp)
{

}
 2006938:	e037883a 	mov	sp,fp
 200693c:	df000017 	ldw	fp,0(sp)
 2006940:	dec00104 	addi	sp,sp,4
 2006944:	f800283a 	ret

02006948 <_ZN21CRemoteControlMessage8doActionEv>:

void CRemoteControlMessage::doAction()
 2006948:	defffe04 	addi	sp,sp,-8
 200694c:	df000115 	stw	fp,4(sp)
 2006950:	df000104 	addi	fp,sp,4
 2006954:	e13fff15 	stw	r4,-4(fp)
{

}
 2006958:	e037883a 	mov	sp,fp
 200695c:	df000017 	ldw	fp,0(sp)
 2006960:	dec00104 	addi	sp,sp,4
 2006964:	f800283a 	ret

02006968 <_ZN21CRemoteControlMessage8getBytesEPh>:

bool CRemoteControlMessage::getBytes(alt_u8* pMessage)
 2006968:	defffd04 	addi	sp,sp,-12
 200696c:	df000215 	stw	fp,8(sp)
 2006970:	df000204 	addi	fp,sp,8
 2006974:	e13ffe15 	stw	r4,-8(fp)
 2006978:	e17fff15 	stw	r5,-4(fp)
{
	return true;
 200697c:	00800044 	movi	r2,1
}
 2006980:	e037883a 	mov	sp,fp
 2006984:	df000017 	ldw	fp,0(sp)
 2006988:	dec00104 	addi	sp,sp,4
 200698c:	f800283a 	ret

02006990 <_ZN21CRemoteControlMessage9getLengthEv>:

alt_u32 CRemoteControlMessage::getLength()
 2006990:	defffe04 	addi	sp,sp,-8
 2006994:	df000115 	stw	fp,4(sp)
 2006998:	df000104 	addi	fp,sp,4
 200699c:	e13fff15 	stw	r4,-4(fp)
{
	return 0;
 20069a0:	0005883a 	mov	r2,zero
}
 20069a4:	e037883a 	mov	sp,fp
 20069a8:	df000017 	ldw	fp,0(sp)
 20069ac:	dec00104 	addi	sp,sp,4
 20069b0:	f800283a 	ret

020069b4 <_ZN21CRemoteControlMessage12parseMessageEPhi>:

void CRemoteControlMessage::parseMessage(alt_u8 *pMessage, int iLength)
 20069b4:	defffc04 	addi	sp,sp,-16
 20069b8:	df000315 	stw	fp,12(sp)
 20069bc:	df000304 	addi	fp,sp,12
 20069c0:	e13ffd15 	stw	r4,-12(fp)
 20069c4:	e17ffe15 	stw	r5,-8(fp)
 20069c8:	e1bfff15 	stw	r6,-4(fp)
{
	m_bValid = true;
 20069cc:	e0fffd17 	ldw	r3,-12(fp)
 20069d0:	00800044 	movi	r2,1
 20069d4:	18800205 	stb	r2,8(r3)
	m_ipPart1=pMessage[0];
 20069d8:	e0bffe17 	ldw	r2,-8(fp)
 20069dc:	10c00003 	ldbu	r3,0(r2)
 20069e0:	e0bffd17 	ldw	r2,-12(fp)
 20069e4:	10c00405 	stb	r3,16(r2)
	m_ipPart2=pMessage[1];
 20069e8:	e0bffe17 	ldw	r2,-8(fp)
 20069ec:	10800044 	addi	r2,r2,1
 20069f0:	10c00003 	ldbu	r3,0(r2)
 20069f4:	e0bffd17 	ldw	r2,-12(fp)
 20069f8:	10c00445 	stb	r3,17(r2)
	m_ipPart3=pMessage[2];
 20069fc:	e0bffe17 	ldw	r2,-8(fp)
 2006a00:	10800084 	addi	r2,r2,2
 2006a04:	10c00003 	ldbu	r3,0(r2)
 2006a08:	e0bffd17 	ldw	r2,-12(fp)
 2006a0c:	10c00485 	stb	r3,18(r2)
	m_ipPart4=pMessage[3];
 2006a10:	e0bffe17 	ldw	r2,-8(fp)
 2006a14:	108000c4 	addi	r2,r2,3
 2006a18:	10c00003 	ldbu	r3,0(r2)
 2006a1c:	e0bffd17 	ldw	r2,-12(fp)
 2006a20:	10c004c5 	stb	r3,19(r2)
}
 2006a24:	e037883a 	mov	sp,fp
 2006a28:	df000017 	ldw	fp,0(sp)
 2006a2c:	dec00104 	addi	sp,sp,4
 2006a30:	f800283a 	ret

02006a34 <_ZN21CRemoteControlMessageD0Ev>:
    {
        m_bValid = false;
        parseMessage(pMessage+4, iLength-4);
    }}

CRemoteControlMessage::~CRemoteControlMessage()
 2006a34:	defffd04 	addi	sp,sp,-12
 2006a38:	dfc00215 	stw	ra,8(sp)
 2006a3c:	df000115 	stw	fp,4(sp)
 2006a40:	df000104 	addi	fp,sp,4
 2006a44:	e13fff15 	stw	r4,-4(fp)
 2006a48:	00c080b4 	movhi	r3,514
 2006a4c:	18ee9304 	addi	r3,r3,-17844
 2006a50:	e0bfff17 	ldw	r2,-4(fp)
 2006a54:	10c00015 	stw	r3,0(r2)
{

}
 2006a58:	e13fff17 	ldw	r4,-4(fp)
 2006a5c:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 2006a60:	00800044 	movi	r2,1
 2006a64:	10803fcc 	andi	r2,r2,255
 2006a68:	1005003a 	cmpeq	r2,r2,zero
 2006a6c:	1000021e 	bne	r2,zero,2006a78 <_ZN21CRemoteControlMessageD0Ev+0x44>
 2006a70:	e13fff17 	ldw	r4,-4(fp)
 2006a74:	200c1380 	call	200c138 <_ZdlPv>
 2006a78:	e037883a 	mov	sp,fp
 2006a7c:	dfc00117 	ldw	ra,4(sp)
 2006a80:	df000017 	ldw	fp,0(sp)
 2006a84:	dec00204 	addi	sp,sp,8
 2006a88:	f800283a 	ret

02006a8c <_ZN21CRemoteControlMessageD1Ev>:
    {
        m_bValid = false;
        parseMessage(pMessage+4, iLength-4);
    }}

CRemoteControlMessage::~CRemoteControlMessage()
 2006a8c:	defffd04 	addi	sp,sp,-12
 2006a90:	dfc00215 	stw	ra,8(sp)
 2006a94:	df000115 	stw	fp,4(sp)
 2006a98:	df000104 	addi	fp,sp,4
 2006a9c:	e13fff15 	stw	r4,-4(fp)
 2006aa0:	00c080b4 	movhi	r3,514
 2006aa4:	18ee9304 	addi	r3,r3,-17844
 2006aa8:	e0bfff17 	ldw	r2,-4(fp)
 2006aac:	10c00015 	stw	r3,0(r2)
{

}
 2006ab0:	e13fff17 	ldw	r4,-4(fp)
 2006ab4:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 2006ab8:	0005883a 	mov	r2,zero
 2006abc:	10803fcc 	andi	r2,r2,255
 2006ac0:	1005003a 	cmpeq	r2,r2,zero
 2006ac4:	1000021e 	bne	r2,zero,2006ad0 <_ZN21CRemoteControlMessageD1Ev+0x44>
 2006ac8:	e13fff17 	ldw	r4,-4(fp)
 2006acc:	200c1380 	call	200c138 <_ZdlPv>
 2006ad0:	e037883a 	mov	sp,fp
 2006ad4:	dfc00117 	ldw	ra,4(sp)
 2006ad8:	df000017 	ldw	fp,0(sp)
 2006adc:	dec00204 	addi	sp,sp,8
 2006ae0:	f800283a 	ret

02006ae4 <_ZN21CRemoteControlMessageD2Ev>:
    {
        m_bValid = false;
        parseMessage(pMessage+4, iLength-4);
    }}

CRemoteControlMessage::~CRemoteControlMessage()
 2006ae4:	defffd04 	addi	sp,sp,-12
 2006ae8:	dfc00215 	stw	ra,8(sp)
 2006aec:	df000115 	stw	fp,4(sp)
 2006af0:	df000104 	addi	fp,sp,4
 2006af4:	e13fff15 	stw	r4,-4(fp)
 2006af8:	00c080b4 	movhi	r3,514
 2006afc:	18ee9304 	addi	r3,r3,-17844
 2006b00:	e0bfff17 	ldw	r2,-4(fp)
 2006b04:	10c00015 	stw	r3,0(r2)
{

}
 2006b08:	e13fff17 	ldw	r4,-4(fp)
 2006b0c:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 2006b10:	0005883a 	mov	r2,zero
 2006b14:	10803fcc 	andi	r2,r2,255
 2006b18:	1005003a 	cmpeq	r2,r2,zero
 2006b1c:	1000021e 	bne	r2,zero,2006b28 <_ZN21CRemoteControlMessageD2Ev+0x44>
 2006b20:	e13fff17 	ldw	r4,-4(fp)
 2006b24:	200c1380 	call	200c138 <_ZdlPv>
 2006b28:	e037883a 	mov	sp,fp
 2006b2c:	dfc00117 	ldw	ra,4(sp)
 2006b30:	df000017 	ldw	fp,0(sp)
 2006b34:	dec00204 	addi	sp,sp,8
 2006b38:	f800283a 	ret

02006b3c <_ZN21CRemoteControlMessageC1Ev>:
#include "CRemoteControlMessage.h"
CRemoteControlMessage::CRemoteControlMessage()
 2006b3c:	defffd04 	addi	sp,sp,-12
 2006b40:	dfc00215 	stw	ra,8(sp)
 2006b44:	df000115 	stw	fp,4(sp)
 2006b48:	df000104 	addi	fp,sp,4
 2006b4c:	e13fff15 	stw	r4,-4(fp)
 2006b50:	e13fff17 	ldw	r4,-4(fp)
 2006b54:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 2006b58:	00c080b4 	movhi	r3,514
 2006b5c:	18ee9304 	addi	r3,r3,-17844
 2006b60:	e0bfff17 	ldw	r2,-4(fp)
 2006b64:	10c00015 	stw	r3,0(r2)
{

}
 2006b68:	e037883a 	mov	sp,fp
 2006b6c:	dfc00117 	ldw	ra,4(sp)
 2006b70:	df000017 	ldw	fp,0(sp)
 2006b74:	dec00204 	addi	sp,sp,8
 2006b78:	f800283a 	ret

02006b7c <_ZN21CRemoteControlMessageC2Ev>:
#include "CRemoteControlMessage.h"
CRemoteControlMessage::CRemoteControlMessage()
 2006b7c:	defffd04 	addi	sp,sp,-12
 2006b80:	dfc00215 	stw	ra,8(sp)
 2006b84:	df000115 	stw	fp,4(sp)
 2006b88:	df000104 	addi	fp,sp,4
 2006b8c:	e13fff15 	stw	r4,-4(fp)
 2006b90:	e13fff17 	ldw	r4,-4(fp)
 2006b94:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 2006b98:	00c080b4 	movhi	r3,514
 2006b9c:	18ee9304 	addi	r3,r3,-17844
 2006ba0:	e0bfff17 	ldw	r2,-4(fp)
 2006ba4:	10c00015 	stw	r3,0(r2)
{

}
 2006ba8:	e037883a 	mov	sp,fp
 2006bac:	dfc00117 	ldw	ra,4(sp)
 2006bb0:	df000017 	ldw	fp,0(sp)
 2006bb4:	dec00204 	addi	sp,sp,8
 2006bb8:	f800283a 	ret

02006bbc <_ZN21CRemoteControlMessageC1EPhi>:

CRemoteControlMessage::CRemoteControlMessage(alt_u8* pMessage, int iLength)
 2006bbc:	deffe404 	addi	sp,sp,-112
 2006bc0:	dfc01b15 	stw	ra,108(sp)
 2006bc4:	df001a15 	stw	fp,104(sp)
 2006bc8:	ddc01915 	stw	r23,100(sp)
 2006bcc:	dd801815 	stw	r22,96(sp)
 2006bd0:	dd401715 	stw	r21,92(sp)
 2006bd4:	dd001615 	stw	r20,88(sp)
 2006bd8:	dcc01515 	stw	r19,84(sp)
 2006bdc:	dc801415 	stw	r18,80(sp)
 2006be0:	dc401315 	stw	r17,76(sp)
 2006be4:	dc001215 	stw	r16,72(sp)
 2006be8:	df001204 	addi	fp,sp,72
 2006bec:	e13fee15 	stw	r4,-72(fp)
 2006bf0:	e17fef15 	stw	r5,-68(fp)
 2006bf4:	e1bff015 	stw	r6,-64(fp)
 2006bf8:	00808074 	movhi	r2,513
 2006bfc:	10ae5a04 	addi	r2,r2,-18072
 2006c00:	e0bff715 	stw	r2,-36(fp)
 2006c04:	008080b4 	movhi	r2,514
 2006c08:	10adce84 	addi	r2,r2,-18630
 2006c0c:	e0bff815 	stw	r2,-32(fp)
 2006c10:	e0bff904 	addi	r2,fp,-28
 2006c14:	e0ffee04 	addi	r3,fp,-72
 2006c18:	10c00015 	stw	r3,0(r2)
 2006c1c:	00c08034 	movhi	r3,512
 2006c20:	18db2904 	addi	r3,r3,27812
 2006c24:	10c00115 	stw	r3,4(r2)
 2006c28:	16c00215 	stw	sp,8(r2)
 2006c2c:	e13ff104 	addi	r4,fp,-60
 2006c30:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 2006c34:	e13fee17 	ldw	r4,-72(fp)
 2006c38:	00bfffc4 	movi	r2,-1
 2006c3c:	e0bff215 	stw	r2,-56(fp)
 2006c40:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 2006c44:	00c080b4 	movhi	r3,514
 2006c48:	18ee9304 	addi	r3,r3,-17844
 2006c4c:	e0bfee17 	ldw	r2,-72(fp)
 2006c50:	10c00015 	stw	r3,0(r2)
{
    parseHeader(pMessage, iLength);
 2006c54:	e13fee17 	ldw	r4,-72(fp)
 2006c58:	00800044 	movi	r2,1
 2006c5c:	e0bff215 	stw	r2,-56(fp)
 2006c60:	e17fef17 	ldw	r5,-68(fp)
 2006c64:	e1bff017 	ldw	r6,-64(fp)
 2006c68:	20071cc0 	call	20071cc <_ZN11CCarMessage11parseHeaderEPhi>
    if(m_bValid)
 2006c6c:	e0bfee17 	ldw	r2,-72(fp)
 2006c70:	10800203 	ldbu	r2,8(r2)
 2006c74:	10803fcc 	andi	r2,r2,255
 2006c78:	1005003a 	cmpeq	r2,r2,zero
 2006c7c:	1000171e 	bne	r2,zero,2006cdc <_ZN21CRemoteControlMessageC1EPhi+0x120>
    {
        m_bValid = false;
 2006c80:	e0bfee17 	ldw	r2,-72(fp)
 2006c84:	10000205 	stb	zero,8(r2)
        parseMessage(pMessage+4, iLength-4);
 2006c88:	e0bfef17 	ldw	r2,-68(fp)
 2006c8c:	11400104 	addi	r5,r2,4
 2006c90:	e0bff017 	ldw	r2,-64(fp)
 2006c94:	11bfff04 	addi	r6,r2,-4
 2006c98:	e13fee17 	ldw	r4,-72(fp)
 2006c9c:	20069b40 	call	20069b4 <_ZN21CRemoteControlMessage12parseMessageEPhi>
    }}
 2006ca0:	00000e06 	br	2006cdc <_ZN21CRemoteControlMessageC1EPhi+0x120>
 2006ca4:	e7001204 	addi	fp,fp,72
 2006ca8:	e0bff317 	ldw	r2,-52(fp)
 2006cac:	e0bfff15 	stw	r2,-4(fp)
 2006cb0:	e0ffff17 	ldw	r3,-4(fp)
 2006cb4:	e0fffe15 	stw	r3,-8(fp)
 2006cb8:	e13fee17 	ldw	r4,-72(fp)
 2006cbc:	e03ff215 	stw	zero,-56(fp)
 2006cc0:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 2006cc4:	e0bffe17 	ldw	r2,-8(fp)
 2006cc8:	e0bfff15 	stw	r2,-4(fp)
 2006ccc:	00bfffc4 	movi	r2,-1
 2006cd0:	e0bff215 	stw	r2,-56(fp)
 2006cd4:	e13fff17 	ldw	r4,-4(fp)
 2006cd8:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 2006cdc:	e13ff104 	addi	r4,fp,-60
 2006ce0:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 2006ce4:	e037883a 	mov	sp,fp
 2006ce8:	dfc00917 	ldw	ra,36(sp)
 2006cec:	df000817 	ldw	fp,32(sp)
 2006cf0:	ddc00717 	ldw	r23,28(sp)
 2006cf4:	dd800617 	ldw	r22,24(sp)
 2006cf8:	dd400517 	ldw	r21,20(sp)
 2006cfc:	dd000417 	ldw	r20,16(sp)
 2006d00:	dcc00317 	ldw	r19,12(sp)
 2006d04:	dc800217 	ldw	r18,8(sp)
 2006d08:	dc400117 	ldw	r17,4(sp)
 2006d0c:	dc000017 	ldw	r16,0(sp)
 2006d10:	dec00a04 	addi	sp,sp,40
 2006d14:	f800283a 	ret

02006d18 <_ZN21CRemoteControlMessageC2EPhi>:
CRemoteControlMessage::CRemoteControlMessage()
{

}

CRemoteControlMessage::CRemoteControlMessage(alt_u8* pMessage, int iLength)
 2006d18:	deffe404 	addi	sp,sp,-112
 2006d1c:	dfc01b15 	stw	ra,108(sp)
 2006d20:	df001a15 	stw	fp,104(sp)
 2006d24:	ddc01915 	stw	r23,100(sp)
 2006d28:	dd801815 	stw	r22,96(sp)
 2006d2c:	dd401715 	stw	r21,92(sp)
 2006d30:	dd001615 	stw	r20,88(sp)
 2006d34:	dcc01515 	stw	r19,84(sp)
 2006d38:	dc801415 	stw	r18,80(sp)
 2006d3c:	dc401315 	stw	r17,76(sp)
 2006d40:	dc001215 	stw	r16,72(sp)
 2006d44:	df001204 	addi	fp,sp,72
 2006d48:	e13fee15 	stw	r4,-72(fp)
 2006d4c:	e17fef15 	stw	r5,-68(fp)
 2006d50:	e1bff015 	stw	r6,-64(fp)
 2006d54:	00808074 	movhi	r2,513
 2006d58:	10ae5a04 	addi	r2,r2,-18072
 2006d5c:	e0bff715 	stw	r2,-36(fp)
 2006d60:	008080b4 	movhi	r2,514
 2006d64:	10add004 	addi	r2,r2,-18624
 2006d68:	e0bff815 	stw	r2,-32(fp)
 2006d6c:	e0bff904 	addi	r2,fp,-28
 2006d70:	e0ffee04 	addi	r3,fp,-72
 2006d74:	10c00015 	stw	r3,0(r2)
 2006d78:	00c08034 	movhi	r3,512
 2006d7c:	18db8004 	addi	r3,r3,28160
 2006d80:	10c00115 	stw	r3,4(r2)
 2006d84:	16c00215 	stw	sp,8(r2)
 2006d88:	e13ff104 	addi	r4,fp,-60
 2006d8c:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 2006d90:	e13fee17 	ldw	r4,-72(fp)
 2006d94:	00bfffc4 	movi	r2,-1
 2006d98:	e0bff215 	stw	r2,-56(fp)
 2006d9c:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 2006da0:	00c080b4 	movhi	r3,514
 2006da4:	18ee9304 	addi	r3,r3,-17844
 2006da8:	e0bfee17 	ldw	r2,-72(fp)
 2006dac:	10c00015 	stw	r3,0(r2)
{
    parseHeader(pMessage, iLength);
 2006db0:	e13fee17 	ldw	r4,-72(fp)
 2006db4:	00800044 	movi	r2,1
 2006db8:	e0bff215 	stw	r2,-56(fp)
 2006dbc:	e17fef17 	ldw	r5,-68(fp)
 2006dc0:	e1bff017 	ldw	r6,-64(fp)
 2006dc4:	20071cc0 	call	20071cc <_ZN11CCarMessage11parseHeaderEPhi>
    if(m_bValid)
 2006dc8:	e0bfee17 	ldw	r2,-72(fp)
 2006dcc:	10800203 	ldbu	r2,8(r2)
 2006dd0:	10803fcc 	andi	r2,r2,255
 2006dd4:	1005003a 	cmpeq	r2,r2,zero
 2006dd8:	1000171e 	bne	r2,zero,2006e38 <_ZN21CRemoteControlMessageC2EPhi+0x120>
    {
        m_bValid = false;
 2006ddc:	e0bfee17 	ldw	r2,-72(fp)
 2006de0:	10000205 	stb	zero,8(r2)
        parseMessage(pMessage+4, iLength-4);
 2006de4:	e0bfef17 	ldw	r2,-68(fp)
 2006de8:	11400104 	addi	r5,r2,4
 2006dec:	e0bff017 	ldw	r2,-64(fp)
 2006df0:	11bfff04 	addi	r6,r2,-4
 2006df4:	e13fee17 	ldw	r4,-72(fp)
 2006df8:	20069b40 	call	20069b4 <_ZN21CRemoteControlMessage12parseMessageEPhi>
    }}
 2006dfc:	00000e06 	br	2006e38 <_ZN21CRemoteControlMessageC2EPhi+0x120>
 2006e00:	e7001204 	addi	fp,fp,72
 2006e04:	e0bff317 	ldw	r2,-52(fp)
 2006e08:	e0bfff15 	stw	r2,-4(fp)
 2006e0c:	e0ffff17 	ldw	r3,-4(fp)
 2006e10:	e0fffe15 	stw	r3,-8(fp)
 2006e14:	e13fee17 	ldw	r4,-72(fp)
 2006e18:	e03ff215 	stw	zero,-56(fp)
 2006e1c:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 2006e20:	e0bffe17 	ldw	r2,-8(fp)
 2006e24:	e0bfff15 	stw	r2,-4(fp)
 2006e28:	00bfffc4 	movi	r2,-1
 2006e2c:	e0bff215 	stw	r2,-56(fp)
 2006e30:	e13fff17 	ldw	r4,-4(fp)
 2006e34:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 2006e38:	e13ff104 	addi	r4,fp,-60
 2006e3c:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 2006e40:	e037883a 	mov	sp,fp
 2006e44:	dfc00917 	ldw	ra,36(sp)
 2006e48:	df000817 	ldw	fp,32(sp)
 2006e4c:	ddc00717 	ldw	r23,28(sp)
 2006e50:	dd800617 	ldw	r22,24(sp)
 2006e54:	dd400517 	ldw	r21,20(sp)
 2006e58:	dd000417 	ldw	r20,16(sp)
 2006e5c:	dcc00317 	ldw	r19,12(sp)
 2006e60:	dc800217 	ldw	r18,8(sp)
 2006e64:	dc400117 	ldw	r17,4(sp)
 2006e68:	dc000017 	ldw	r16,0(sp)
 2006e6c:	dec00a04 	addi	sp,sp,40
 2006e70:	f800283a 	ret

02006e74 <_ZN11CCarMessageC2Ev>:
 *      Author: Florian
 */

#include "CarProtocol.h"

CCarMessage::CCarMessage()
 2006e74:	defffe04 	addi	sp,sp,-8
 2006e78:	df000115 	stw	fp,4(sp)
 2006e7c:	df000104 	addi	fp,sp,4
 2006e80:	e13fff15 	stw	r4,-4(fp)
 2006e84:	008080b4 	movhi	r2,514
 2006e88:	10aea304 	addi	r2,r2,-17780
 2006e8c:	e0ffff17 	ldw	r3,-4(fp)
 2006e90:	18800015 	stw	r2,0(r3)
{
	m_bValid = false;
 2006e94:	e0bfff17 	ldw	r2,-4(fp)
 2006e98:	10000205 	stb	zero,8(r2)

}
 2006e9c:	e037883a 	mov	sp,fp
 2006ea0:	df000017 	ldw	fp,0(sp)
 2006ea4:	dec00104 	addi	sp,sp,4
 2006ea8:	f800283a 	ret

02006eac <_ZN11CCarMessageC1Ev>:
 *      Author: Florian
 */

#include "CarProtocol.h"

CCarMessage::CCarMessage()
 2006eac:	defffe04 	addi	sp,sp,-8
 2006eb0:	df000115 	stw	fp,4(sp)
 2006eb4:	df000104 	addi	fp,sp,4
 2006eb8:	e13fff15 	stw	r4,-4(fp)
 2006ebc:	008080b4 	movhi	r2,514
 2006ec0:	10aea304 	addi	r2,r2,-17780
 2006ec4:	e0ffff17 	ldw	r3,-4(fp)
 2006ec8:	18800015 	stw	r2,0(r3)
{
	m_bValid = false;
 2006ecc:	e0bfff17 	ldw	r2,-4(fp)
 2006ed0:	10000205 	stb	zero,8(r2)

}
 2006ed4:	e037883a 	mov	sp,fp
 2006ed8:	df000017 	ldw	fp,0(sp)
 2006edc:	dec00104 	addi	sp,sp,4
 2006ee0:	f800283a 	ret

02006ee4 <_ZN11CCarMessage8doActionEv>:
CCarMessage::~CCarMessage()
{

}

void CCarMessage::doAction()
 2006ee4:	defffe04 	addi	sp,sp,-8
 2006ee8:	df000115 	stw	fp,4(sp)
 2006eec:	df000104 	addi	fp,sp,4
 2006ef0:	e13fff15 	stw	r4,-4(fp)
{
	// Do nothing!
}
 2006ef4:	e037883a 	mov	sp,fp
 2006ef8:	df000017 	ldw	fp,0(sp)
 2006efc:	dec00104 	addi	sp,sp,4
 2006f00:	f800283a 	ret

02006f04 <_ZN11CCarMessage8getBytesEPh>:


bool CCarMessage::getBytes(alt_u8 *pMessage)
 2006f04:	defffb04 	addi	sp,sp,-20
 2006f08:	dfc00415 	stw	ra,16(sp)
 2006f0c:	df000315 	stw	fp,12(sp)
 2006f10:	dc000215 	stw	r16,8(sp)
 2006f14:	df000204 	addi	fp,sp,8
 2006f18:	e13ffe15 	stw	r4,-8(fp)
 2006f1c:	e17fff15 	stw	r5,-4(fp)
{
	pMessage[0] = m_uiType;
 2006f20:	e0bffe17 	ldw	r2,-8(fp)
 2006f24:	10c00103 	ldbu	r3,4(r2)
 2006f28:	e0bfff17 	ldw	r2,-4(fp)
 2006f2c:	10c00005 	stb	r3,0(r2)
	pMessage[1] = getLength();
 2006f30:	e0bfff17 	ldw	r2,-4(fp)
 2006f34:	14000044 	addi	r16,r2,1
 2006f38:	e0bffe17 	ldw	r2,-8(fp)
 2006f3c:	10800017 	ldw	r2,0(r2)
 2006f40:	10800404 	addi	r2,r2,16
 2006f44:	10800017 	ldw	r2,0(r2)
 2006f48:	e13ffe17 	ldw	r4,-8(fp)
 2006f4c:	103ee83a 	callr	r2
 2006f50:	80800005 	stb	r2,0(r16)
	pMessage[2] = m_uiSubType;
 2006f54:	e0bfff17 	ldw	r2,-4(fp)
 2006f58:	10c00084 	addi	r3,r2,2
 2006f5c:	e0bffe17 	ldw	r2,-8(fp)
 2006f60:	10800183 	ldbu	r2,6(r2)
 2006f64:	18800005 	stb	r2,0(r3)
	pMessage[3] = m_uiFlags;
 2006f68:	e0bfff17 	ldw	r2,-4(fp)
 2006f6c:	10c000c4 	addi	r3,r2,3
 2006f70:	e0bffe17 	ldw	r2,-8(fp)
 2006f74:	108001c3 	ldbu	r2,7(r2)
 2006f78:	18800005 	stb	r2,0(r3)

	return m_bValid;
 2006f7c:	e0bffe17 	ldw	r2,-8(fp)
 2006f80:	10800203 	ldbu	r2,8(r2)
 2006f84:	10803fcc 	andi	r2,r2,255
}
 2006f88:	e037883a 	mov	sp,fp
 2006f8c:	dfc00217 	ldw	ra,8(sp)
 2006f90:	df000117 	ldw	fp,4(sp)
 2006f94:	dc000017 	ldw	r16,0(sp)
 2006f98:	dec00304 	addi	sp,sp,12
 2006f9c:	f800283a 	ret

02006fa0 <_ZN11CCarMessage9getLengthEv>:


alt_u32 CCarMessage::getLength()
 2006fa0:	defffe04 	addi	sp,sp,-8
 2006fa4:	df000115 	stw	fp,4(sp)
 2006fa8:	df000104 	addi	fp,sp,4
 2006fac:	e13fff15 	stw	r4,-4(fp)
{
	return 4;
 2006fb0:	00800104 	movi	r2,4
}
 2006fb4:	e037883a 	mov	sp,fp
 2006fb8:	df000017 	ldw	fp,0(sp)
 2006fbc:	dec00104 	addi	sp,sp,4
 2006fc0:	f800283a 	ret

02006fc4 <_ZN11CCarMessage7getTypeEv>:


alt_u8 CCarMessage::getType()
 2006fc4:	defffe04 	addi	sp,sp,-8
 2006fc8:	df000115 	stw	fp,4(sp)
 2006fcc:	df000104 	addi	fp,sp,4
 2006fd0:	e13fff15 	stw	r4,-4(fp)
{
	return m_uiType;
 2006fd4:	e0bfff17 	ldw	r2,-4(fp)
 2006fd8:	10800103 	ldbu	r2,4(r2)
 2006fdc:	10803fcc 	andi	r2,r2,255
}
 2006fe0:	e037883a 	mov	sp,fp
 2006fe4:	df000017 	ldw	fp,0(sp)
 2006fe8:	dec00104 	addi	sp,sp,4
 2006fec:	f800283a 	ret

02006ff0 <_ZN11CCarMessage10getSubTypeEv>:

alt_u8 CCarMessage::getSubType()
 2006ff0:	defffe04 	addi	sp,sp,-8
 2006ff4:	df000115 	stw	fp,4(sp)
 2006ff8:	df000104 	addi	fp,sp,4
 2006ffc:	e13fff15 	stw	r4,-4(fp)
{
	return m_uiSubType;
 2007000:	e0bfff17 	ldw	r2,-4(fp)
 2007004:	10800183 	ldbu	r2,6(r2)
 2007008:	10803fcc 	andi	r2,r2,255
}
 200700c:	e037883a 	mov	sp,fp
 2007010:	df000017 	ldw	fp,0(sp)
 2007014:	dec00104 	addi	sp,sp,4
 2007018:	f800283a 	ret

0200701c <_ZN11CCarMessage7isValidEv>:

bool CCarMessage::isValid()
 200701c:	defffe04 	addi	sp,sp,-8
 2007020:	df000115 	stw	fp,4(sp)
 2007024:	df000104 	addi	fp,sp,4
 2007028:	e13fff15 	stw	r4,-4(fp)
{
	return m_bValid;
 200702c:	e0bfff17 	ldw	r2,-4(fp)
 2007030:	10800203 	ldbu	r2,8(r2)
 2007034:	10803fcc 	andi	r2,r2,255
}
 2007038:	e037883a 	mov	sp,fp
 200703c:	df000017 	ldw	fp,0(sp)
 2007040:	dec00104 	addi	sp,sp,4
 2007044:	f800283a 	ret

02007048 <_ZN11CCarMessage9setHeaderEhhb>:

void CCarMessage::setHeader(alt_u8 uiType, alt_u8 uiLength, bool bResponse)
 2007048:	defffb04 	addi	sp,sp,-20
 200704c:	df000415 	stw	fp,16(sp)
 2007050:	df000404 	addi	fp,sp,16
 2007054:	e13ffc15 	stw	r4,-16(fp)
 2007058:	e17ffd05 	stb	r5,-12(fp)
 200705c:	e1bffe05 	stb	r6,-8(fp)
 2007060:	e1ffff05 	stb	r7,-4(fp)
{
	m_uiType = uiType;
 2007064:	e0fffc17 	ldw	r3,-16(fp)
 2007068:	e0bffd03 	ldbu	r2,-12(fp)
 200706c:	18800105 	stb	r2,4(r3)
	m_uiLength = uiLength;
 2007070:	e0fffc17 	ldw	r3,-16(fp)
 2007074:	e0bffe03 	ldbu	r2,-8(fp)
 2007078:	18800145 	stb	r2,5(r3)
	m_uiSubType = 0;
 200707c:	e0bffc17 	ldw	r2,-16(fp)
 2007080:	10000185 	stb	zero,6(r2)
	m_uiFlags = bResponse;
 2007084:	e0ffff03 	ldbu	r3,-4(fp)
 2007088:	e0bffc17 	ldw	r2,-16(fp)
 200708c:	10c001c5 	stb	r3,7(r2)

	m_bValid = true;
 2007090:	e0fffc17 	ldw	r3,-16(fp)
 2007094:	00800044 	movi	r2,1
 2007098:	18800205 	stb	r2,8(r3)
}
 200709c:	e037883a 	mov	sp,fp
 20070a0:	df000017 	ldw	fp,0(sp)
 20070a4:	dec00104 	addi	sp,sp,4
 20070a8:	f800283a 	ret

020070ac <_ZN11CCarMessageC1Ehhb>:
{
	m_bValid = false;
	parseHeader(pMessage, iLength);
}

CCarMessage::CCarMessage(alt_u8 uiType, alt_u8 uiLength, bool bResponse)
 20070ac:	defffa04 	addi	sp,sp,-24
 20070b0:	dfc00515 	stw	ra,20(sp)
 20070b4:	df000415 	stw	fp,16(sp)
 20070b8:	df000404 	addi	fp,sp,16
 20070bc:	e13ffc15 	stw	r4,-16(fp)
 20070c0:	e17ffd05 	stb	r5,-12(fp)
 20070c4:	e1bffe05 	stb	r6,-8(fp)
 20070c8:	e1ffff05 	stb	r7,-4(fp)
 20070cc:	00c080b4 	movhi	r3,514
 20070d0:	18eea304 	addi	r3,r3,-17780
 20070d4:	e0bffc17 	ldw	r2,-16(fp)
 20070d8:	10c00015 	stw	r3,0(r2)
{
	setHeader(uiType, uiLength, bResponse);
 20070dc:	e17ffd03 	ldbu	r5,-12(fp)
 20070e0:	e1bffe03 	ldbu	r6,-8(fp)
 20070e4:	e1ffff03 	ldbu	r7,-4(fp)
 20070e8:	e13ffc17 	ldw	r4,-16(fp)
 20070ec:	20070480 	call	2007048 <_ZN11CCarMessage9setHeaderEhhb>
}
 20070f0:	e037883a 	mov	sp,fp
 20070f4:	dfc00117 	ldw	ra,4(sp)
 20070f8:	df000017 	ldw	fp,0(sp)
 20070fc:	dec00204 	addi	sp,sp,8
 2007100:	f800283a 	ret

02007104 <_ZN11CCarMessageC2Ehhb>:
{
	m_bValid = false;
	parseHeader(pMessage, iLength);
}

CCarMessage::CCarMessage(alt_u8 uiType, alt_u8 uiLength, bool bResponse)
 2007104:	defffa04 	addi	sp,sp,-24
 2007108:	dfc00515 	stw	ra,20(sp)
 200710c:	df000415 	stw	fp,16(sp)
 2007110:	df000404 	addi	fp,sp,16
 2007114:	e13ffc15 	stw	r4,-16(fp)
 2007118:	e17ffd05 	stb	r5,-12(fp)
 200711c:	e1bffe05 	stb	r6,-8(fp)
 2007120:	e1ffff05 	stb	r7,-4(fp)
 2007124:	00c080b4 	movhi	r3,514
 2007128:	18eea304 	addi	r3,r3,-17780
 200712c:	e0bffc17 	ldw	r2,-16(fp)
 2007130:	10c00015 	stw	r3,0(r2)
{
	setHeader(uiType, uiLength, bResponse);
 2007134:	e17ffd03 	ldbu	r5,-12(fp)
 2007138:	e1bffe03 	ldbu	r6,-8(fp)
 200713c:	e1ffff03 	ldbu	r7,-4(fp)
 2007140:	e13ffc17 	ldw	r4,-16(fp)
 2007144:	20070480 	call	2007048 <_ZN11CCarMessage9setHeaderEhhb>
}
 2007148:	e037883a 	mov	sp,fp
 200714c:	dfc00117 	ldw	ra,4(sp)
 2007150:	df000017 	ldw	fp,0(sp)
 2007154:	dec00204 	addi	sp,sp,8
 2007158:	f800283a 	ret

0200715c <_ZN11CCarMessage9setHeaderEhhhb>:
	m_uiFlags = bResponse;

	m_bValid = true;
}

void CCarMessage::setHeader(alt_u8 uiType, alt_u8 uiLength, alt_u8 uiSubType, bool bResponse)
 200715c:	defffa04 	addi	sp,sp,-24
 2007160:	df000515 	stw	fp,20(sp)
 2007164:	df000504 	addi	fp,sp,20
 2007168:	e13ffb15 	stw	r4,-20(fp)
 200716c:	e0800117 	ldw	r2,4(fp)
 2007170:	e17ffc05 	stb	r5,-16(fp)
 2007174:	e1bffd05 	stb	r6,-12(fp)
 2007178:	e1fffe05 	stb	r7,-8(fp)
 200717c:	e0bfff05 	stb	r2,-4(fp)
{
	m_uiType = uiType;
 2007180:	e0fffb17 	ldw	r3,-20(fp)
 2007184:	e0bffc03 	ldbu	r2,-16(fp)
 2007188:	18800105 	stb	r2,4(r3)
	m_uiLength = uiLength;
 200718c:	e0fffb17 	ldw	r3,-20(fp)
 2007190:	e0bffd03 	ldbu	r2,-12(fp)
 2007194:	18800145 	stb	r2,5(r3)
	m_uiSubType = uiSubType;
 2007198:	e0fffb17 	ldw	r3,-20(fp)
 200719c:	e0bffe03 	ldbu	r2,-8(fp)
 20071a0:	18800185 	stb	r2,6(r3)
	m_uiFlags = bResponse;
 20071a4:	e0ffff03 	ldbu	r3,-4(fp)
 20071a8:	e0bffb17 	ldw	r2,-20(fp)
 20071ac:	10c001c5 	stb	r3,7(r2)

	m_bValid = true;
 20071b0:	e0fffb17 	ldw	r3,-20(fp)
 20071b4:	00800044 	movi	r2,1
 20071b8:	18800205 	stb	r2,8(r3)
}
 20071bc:	e037883a 	mov	sp,fp
 20071c0:	df000017 	ldw	fp,0(sp)
 20071c4:	dec00104 	addi	sp,sp,4
 20071c8:	f800283a 	ret

020071cc <_ZN11CCarMessage11parseHeaderEPhi>:

void CCarMessage::parseHeader(alt_u8 *pMessage, int iLength)
 20071cc:	defffc04 	addi	sp,sp,-16
 20071d0:	df000315 	stw	fp,12(sp)
 20071d4:	df000304 	addi	fp,sp,12
 20071d8:	e13ffd15 	stw	r4,-12(fp)
 20071dc:	e17ffe15 	stw	r5,-8(fp)
 20071e0:	e1bfff15 	stw	r6,-4(fp)
{
	if(iLength < 3)
 20071e4:	e0bfff17 	ldw	r2,-4(fp)
 20071e8:	108000d0 	cmplti	r2,r2,3
 20071ec:	1000161e 	bne	r2,zero,2007248 <_ZN11CCarMessage11parseHeaderEPhi+0x7c>
		return;

	m_uiType = pMessage[0];
 20071f0:	e0bffe17 	ldw	r2,-8(fp)
 20071f4:	10c00003 	ldbu	r3,0(r2)
 20071f8:	e0bffd17 	ldw	r2,-12(fp)
 20071fc:	10c00105 	stb	r3,4(r2)
	m_uiLength = pMessage[1];
 2007200:	e0bffe17 	ldw	r2,-8(fp)
 2007204:	10800044 	addi	r2,r2,1
 2007208:	10c00003 	ldbu	r3,0(r2)
 200720c:	e0bffd17 	ldw	r2,-12(fp)
 2007210:	10c00145 	stb	r3,5(r2)
	m_uiSubType = pMessage[2];
 2007214:	e0bffe17 	ldw	r2,-8(fp)
 2007218:	10800084 	addi	r2,r2,2
 200721c:	10c00003 	ldbu	r3,0(r2)
 2007220:	e0bffd17 	ldw	r2,-12(fp)
 2007224:	10c00185 	stb	r3,6(r2)
	m_uiFlags = pMessage[3];
 2007228:	e0bffe17 	ldw	r2,-8(fp)
 200722c:	108000c4 	addi	r2,r2,3
 2007230:	10c00003 	ldbu	r3,0(r2)
 2007234:	e0bffd17 	ldw	r2,-12(fp)
 2007238:	10c001c5 	stb	r3,7(r2)

	m_bValid = true;
 200723c:	e0fffd17 	ldw	r3,-12(fp)
 2007240:	00800044 	movi	r2,1
 2007244:	18800205 	stb	r2,8(r3)
}
 2007248:	e037883a 	mov	sp,fp
 200724c:	df000017 	ldw	fp,0(sp)
 2007250:	dec00104 	addi	sp,sp,4
 2007254:	f800283a 	ret

02007258 <_ZN11CCarMessageC1EPhi>:
{
	m_bValid = false;

}

CCarMessage::CCarMessage(alt_u8 *pMessage, int iLength)
 2007258:	defffb04 	addi	sp,sp,-20
 200725c:	dfc00415 	stw	ra,16(sp)
 2007260:	df000315 	stw	fp,12(sp)
 2007264:	df000304 	addi	fp,sp,12
 2007268:	e13ffd15 	stw	r4,-12(fp)
 200726c:	e17ffe15 	stw	r5,-8(fp)
 2007270:	e1bfff15 	stw	r6,-4(fp)
 2007274:	008080b4 	movhi	r2,514
 2007278:	10aea304 	addi	r2,r2,-17780
 200727c:	e0fffd17 	ldw	r3,-12(fp)
 2007280:	18800015 	stw	r2,0(r3)
{
	m_bValid = false;
 2007284:	e0bffd17 	ldw	r2,-12(fp)
 2007288:	10000205 	stb	zero,8(r2)
	parseHeader(pMessage, iLength);
 200728c:	e13ffd17 	ldw	r4,-12(fp)
 2007290:	e17ffe17 	ldw	r5,-8(fp)
 2007294:	e1bfff17 	ldw	r6,-4(fp)
 2007298:	20071cc0 	call	20071cc <_ZN11CCarMessage11parseHeaderEPhi>
}
 200729c:	e037883a 	mov	sp,fp
 20072a0:	dfc00117 	ldw	ra,4(sp)
 20072a4:	df000017 	ldw	fp,0(sp)
 20072a8:	dec00204 	addi	sp,sp,8
 20072ac:	f800283a 	ret

020072b0 <_ZN11CCarMessageC2EPhi>:
{
	m_bValid = false;

}

CCarMessage::CCarMessage(alt_u8 *pMessage, int iLength)
 20072b0:	defffb04 	addi	sp,sp,-20
 20072b4:	dfc00415 	stw	ra,16(sp)
 20072b8:	df000315 	stw	fp,12(sp)
 20072bc:	df000304 	addi	fp,sp,12
 20072c0:	e13ffd15 	stw	r4,-12(fp)
 20072c4:	e17ffe15 	stw	r5,-8(fp)
 20072c8:	e1bfff15 	stw	r6,-4(fp)
 20072cc:	008080b4 	movhi	r2,514
 20072d0:	10aea304 	addi	r2,r2,-17780
 20072d4:	e0fffd17 	ldw	r3,-12(fp)
 20072d8:	18800015 	stw	r2,0(r3)
{
	m_bValid = false;
 20072dc:	e0bffd17 	ldw	r2,-12(fp)
 20072e0:	10000205 	stb	zero,8(r2)
	parseHeader(pMessage, iLength);
 20072e4:	e13ffd17 	ldw	r4,-12(fp)
 20072e8:	e17ffe17 	ldw	r5,-8(fp)
 20072ec:	e1bfff17 	ldw	r6,-4(fp)
 20072f0:	20071cc0 	call	20071cc <_ZN11CCarMessage11parseHeaderEPhi>
}
 20072f4:	e037883a 	mov	sp,fp
 20072f8:	dfc00117 	ldw	ra,4(sp)
 20072fc:	df000017 	ldw	fp,0(sp)
 2007300:	dec00204 	addi	sp,sp,8
 2007304:	f800283a 	ret

02007308 <_ZN11CCarMessage19writeHeaderToBufferEPhi>:
	m_uiFlags = pMessage[3];

	m_bValid = true;
}

alt_32 CCarMessage::writeHeaderToBuffer(alt_u8 *pMessage, int iLength)
 2007308:	defffb04 	addi	sp,sp,-20
 200730c:	df000415 	stw	fp,16(sp)
 2007310:	df000404 	addi	fp,sp,16
 2007314:	e13ffc15 	stw	r4,-16(fp)
 2007318:	e17ffd15 	stw	r5,-12(fp)
 200731c:	e1bffe15 	stw	r6,-8(fp)
{
	if(iLength < 4)
 2007320:	e0bffe17 	ldw	r2,-8(fp)
 2007324:	10800108 	cmpgei	r2,r2,4
 2007328:	1000031e 	bne	r2,zero,2007338 <_ZN11CCarMessage19writeHeaderToBufferEPhi+0x30>
		return -1;
 200732c:	00bfffc4 	movi	r2,-1
 2007330:	e0bfff15 	stw	r2,-4(fp)
 2007334:	00001306 	br	2007384 <_ZN11CCarMessage19writeHeaderToBufferEPhi+0x7c>

	pMessage[0] = m_uiType;
 2007338:	e0bffc17 	ldw	r2,-16(fp)
 200733c:	10c00103 	ldbu	r3,4(r2)
 2007340:	e0bffd17 	ldw	r2,-12(fp)
 2007344:	10c00005 	stb	r3,0(r2)
	pMessage[1] = m_uiLength;
 2007348:	e0bffd17 	ldw	r2,-12(fp)
 200734c:	10c00044 	addi	r3,r2,1
 2007350:	e0bffc17 	ldw	r2,-16(fp)
 2007354:	10800143 	ldbu	r2,5(r2)
 2007358:	18800005 	stb	r2,0(r3)
	pMessage[2] = 0;
 200735c:	e0bffd17 	ldw	r2,-12(fp)
 2007360:	10800084 	addi	r2,r2,2
 2007364:	10000005 	stb	zero,0(r2)
	pMessage[3] = m_uiFlags;
 2007368:	e0bffd17 	ldw	r2,-12(fp)
 200736c:	10c000c4 	addi	r3,r2,3
 2007370:	e0bffc17 	ldw	r2,-16(fp)
 2007374:	108001c3 	ldbu	r2,7(r2)
 2007378:	18800005 	stb	r2,0(r3)

	return 4;
 200737c:	00800104 	movi	r2,4
 2007380:	e0bfff15 	stw	r2,-4(fp)
 2007384:	e0bfff17 	ldw	r2,-4(fp)
}
 2007388:	e037883a 	mov	sp,fp
 200738c:	df000017 	ldw	fp,0(sp)
 2007390:	dec00104 	addi	sp,sp,4
 2007394:	f800283a 	ret

02007398 <_ZN11CCarMessageD0Ev>:
CCarMessage::CCarMessage(alt_u8 uiType, alt_u8 uiLength, bool bResponse)
{
	setHeader(uiType, uiLength, bResponse);
}

CCarMessage::~CCarMessage()
 2007398:	defffd04 	addi	sp,sp,-12
 200739c:	dfc00215 	stw	ra,8(sp)
 20073a0:	df000115 	stw	fp,4(sp)
 20073a4:	df000104 	addi	fp,sp,4
 20073a8:	e13fff15 	stw	r4,-4(fp)
 20073ac:	00c080b4 	movhi	r3,514
 20073b0:	18eea304 	addi	r3,r3,-17780
 20073b4:	e0bfff17 	ldw	r2,-4(fp)
 20073b8:	10c00015 	stw	r3,0(r2)
{

}
 20073bc:	00800044 	movi	r2,1
 20073c0:	10803fcc 	andi	r2,r2,255
 20073c4:	1005003a 	cmpeq	r2,r2,zero
 20073c8:	1000021e 	bne	r2,zero,20073d4 <_ZN11CCarMessageD0Ev+0x3c>
 20073cc:	e13fff17 	ldw	r4,-4(fp)
 20073d0:	200c1380 	call	200c138 <_ZdlPv>
 20073d4:	e037883a 	mov	sp,fp
 20073d8:	dfc00117 	ldw	ra,4(sp)
 20073dc:	df000017 	ldw	fp,0(sp)
 20073e0:	dec00204 	addi	sp,sp,8
 20073e4:	f800283a 	ret

020073e8 <_ZN11CCarMessageD1Ev>:
CCarMessage::CCarMessage(alt_u8 uiType, alt_u8 uiLength, bool bResponse)
{
	setHeader(uiType, uiLength, bResponse);
}

CCarMessage::~CCarMessage()
 20073e8:	defffd04 	addi	sp,sp,-12
 20073ec:	dfc00215 	stw	ra,8(sp)
 20073f0:	df000115 	stw	fp,4(sp)
 20073f4:	df000104 	addi	fp,sp,4
 20073f8:	e13fff15 	stw	r4,-4(fp)
 20073fc:	00c080b4 	movhi	r3,514
 2007400:	18eea304 	addi	r3,r3,-17780
 2007404:	e0bfff17 	ldw	r2,-4(fp)
 2007408:	10c00015 	stw	r3,0(r2)
{

}
 200740c:	0005883a 	mov	r2,zero
 2007410:	10803fcc 	andi	r2,r2,255
 2007414:	1005003a 	cmpeq	r2,r2,zero
 2007418:	1000021e 	bne	r2,zero,2007424 <_ZN11CCarMessageD1Ev+0x3c>
 200741c:	e13fff17 	ldw	r4,-4(fp)
 2007420:	200c1380 	call	200c138 <_ZdlPv>
 2007424:	e037883a 	mov	sp,fp
 2007428:	dfc00117 	ldw	ra,4(sp)
 200742c:	df000017 	ldw	fp,0(sp)
 2007430:	dec00204 	addi	sp,sp,8
 2007434:	f800283a 	ret

02007438 <_ZN11CCarMessageD2Ev>:
CCarMessage::CCarMessage(alt_u8 uiType, alt_u8 uiLength, bool bResponse)
{
	setHeader(uiType, uiLength, bResponse);
}

CCarMessage::~CCarMessage()
 2007438:	defffd04 	addi	sp,sp,-12
 200743c:	dfc00215 	stw	ra,8(sp)
 2007440:	df000115 	stw	fp,4(sp)
 2007444:	df000104 	addi	fp,sp,4
 2007448:	e13fff15 	stw	r4,-4(fp)
 200744c:	00c080b4 	movhi	r3,514
 2007450:	18eea304 	addi	r3,r3,-17780
 2007454:	e0bfff17 	ldw	r2,-4(fp)
 2007458:	10c00015 	stw	r3,0(r2)
{

}
 200745c:	0005883a 	mov	r2,zero
 2007460:	10803fcc 	andi	r2,r2,255
 2007464:	1005003a 	cmpeq	r2,r2,zero
 2007468:	1000021e 	bne	r2,zero,2007474 <_ZN11CCarMessageD2Ev+0x3c>
 200746c:	e13fff17 	ldw	r4,-4(fp)
 2007470:	200c1380 	call	200c138 <_ZdlPv>
 2007474:	e037883a 	mov	sp,fp
 2007478:	dfc00117 	ldw	ra,4(sp)
 200747c:	df000017 	ldw	fp,0(sp)
 2007480:	dec00204 	addi	sp,sp,8
 2007484:	f800283a 	ret

02007488 <_ZN12CCarProtocolC2EtPP11CCarMessagem>:

	parsePacket(pPacket, iLength);
}

CCarProtocol::CCarProtocol(alt_u16 uiPacketNumber, CCarMessage **pMessages,
		alt_u32 uiMessageCount) {
 2007488:	defffa04 	addi	sp,sp,-24
 200748c:	df000515 	stw	fp,20(sp)
 2007490:	df000504 	addi	fp,sp,20
 2007494:	e13ffc15 	stw	r4,-16(fp)
 2007498:	e1bffe15 	stw	r6,-8(fp)
 200749c:	e1ffff15 	stw	r7,-4(fp)
 20074a0:	e17ffd0d 	sth	r5,-12(fp)
 20074a4:	00c080b4 	movhi	r3,514
 20074a8:	18eeae04 	addi	r3,r3,-17736
 20074ac:	e0bffc17 	ldw	r2,-16(fp)
 20074b0:	10c00015 	stw	r3,0(r2)
	m_uiPacketNumber = uiPacketNumber;
 20074b4:	e0fffc17 	ldw	r3,-16(fp)
 20074b8:	e0bffd0b 	ldhu	r2,-12(fp)
 20074bc:	1880018d 	sth	r2,6(r3)

	for (alt_u32 i = 0; i < uiMessageCount; i++) {
 20074c0:	e03ffb15 	stw	zero,-20(fp)
 20074c4:	00001106 	br	200750c <_ZN12CCarProtocolC2EtPP11CCarMessagem+0x84>
		m_pMessages[i] = pMessages[i];
 20074c8:	e13ffb17 	ldw	r4,-20(fp)
 20074cc:	e0bffb17 	ldw	r2,-20(fp)
 20074d0:	1085883a 	add	r2,r2,r2
 20074d4:	1085883a 	add	r2,r2,r2
 20074d8:	1007883a 	mov	r3,r2
 20074dc:	e0bffe17 	ldw	r2,-8(fp)
 20074e0:	1885883a 	add	r2,r3,r2
 20074e4:	11400017 	ldw	r5,0(r2)
 20074e8:	e0fffc17 	ldw	r3,-16(fp)
 20074ec:	2105883a 	add	r2,r4,r4
 20074f0:	1085883a 	add	r2,r2,r2
 20074f4:	10c5883a 	add	r2,r2,r3
 20074f8:	10800204 	addi	r2,r2,8
 20074fc:	11400015 	stw	r5,0(r2)

CCarProtocol::CCarProtocol(alt_u16 uiPacketNumber, CCarMessage **pMessages,
		alt_u32 uiMessageCount) {
	m_uiPacketNumber = uiPacketNumber;

	for (alt_u32 i = 0; i < uiMessageCount; i++) {
 2007500:	e0bffb17 	ldw	r2,-20(fp)
 2007504:	10800044 	addi	r2,r2,1
 2007508:	e0bffb15 	stw	r2,-20(fp)
 200750c:	e0fffb17 	ldw	r3,-20(fp)
 2007510:	e0bfff17 	ldw	r2,-4(fp)
 2007514:	18bfec36 	bltu	r3,r2,20074c8 <_ZN12CCarProtocolC2EtPP11CCarMessagem+0x40>
		m_pMessages[i] = pMessages[i];
	}

	m_uiMessageCount = uiMessageCount;
 2007518:	e0fffc17 	ldw	r3,-16(fp)
 200751c:	e0bfff17 	ldw	r2,-4(fp)
 2007520:	18800a15 	stw	r2,40(r3)

	m_bValid = true;
 2007524:	e0fffc17 	ldw	r3,-16(fp)
 2007528:	00800044 	movi	r2,1
 200752c:	18800105 	stb	r2,4(r3)
	m_bThereIsMore = false;
 2007530:	e0bffc17 	ldw	r2,-16(fp)
 2007534:	10000145 	stb	zero,5(r2)
}
 2007538:	e037883a 	mov	sp,fp
 200753c:	df000017 	ldw	fp,0(sp)
 2007540:	dec00104 	addi	sp,sp,4
 2007544:	f800283a 	ret

02007548 <_ZN12CCarProtocolC1EtPP11CCarMessagem>:

	parsePacket(pPacket, iLength);
}

CCarProtocol::CCarProtocol(alt_u16 uiPacketNumber, CCarMessage **pMessages,
		alt_u32 uiMessageCount) {
 2007548:	defffa04 	addi	sp,sp,-24
 200754c:	df000515 	stw	fp,20(sp)
 2007550:	df000504 	addi	fp,sp,20
 2007554:	e13ffc15 	stw	r4,-16(fp)
 2007558:	e1bffe15 	stw	r6,-8(fp)
 200755c:	e1ffff15 	stw	r7,-4(fp)
 2007560:	e17ffd0d 	sth	r5,-12(fp)
 2007564:	00c080b4 	movhi	r3,514
 2007568:	18eeae04 	addi	r3,r3,-17736
 200756c:	e0bffc17 	ldw	r2,-16(fp)
 2007570:	10c00015 	stw	r3,0(r2)
	m_uiPacketNumber = uiPacketNumber;
 2007574:	e0fffc17 	ldw	r3,-16(fp)
 2007578:	e0bffd0b 	ldhu	r2,-12(fp)
 200757c:	1880018d 	sth	r2,6(r3)

	for (alt_u32 i = 0; i < uiMessageCount; i++) {
 2007580:	e03ffb15 	stw	zero,-20(fp)
 2007584:	00001106 	br	20075cc <_ZN12CCarProtocolC1EtPP11CCarMessagem+0x84>
		m_pMessages[i] = pMessages[i];
 2007588:	e13ffb17 	ldw	r4,-20(fp)
 200758c:	e0bffb17 	ldw	r2,-20(fp)
 2007590:	1085883a 	add	r2,r2,r2
 2007594:	1085883a 	add	r2,r2,r2
 2007598:	1007883a 	mov	r3,r2
 200759c:	e0bffe17 	ldw	r2,-8(fp)
 20075a0:	1885883a 	add	r2,r3,r2
 20075a4:	11400017 	ldw	r5,0(r2)
 20075a8:	e0fffc17 	ldw	r3,-16(fp)
 20075ac:	2105883a 	add	r2,r4,r4
 20075b0:	1085883a 	add	r2,r2,r2
 20075b4:	10c5883a 	add	r2,r2,r3
 20075b8:	10800204 	addi	r2,r2,8
 20075bc:	11400015 	stw	r5,0(r2)

CCarProtocol::CCarProtocol(alt_u16 uiPacketNumber, CCarMessage **pMessages,
		alt_u32 uiMessageCount) {
	m_uiPacketNumber = uiPacketNumber;

	for (alt_u32 i = 0; i < uiMessageCount; i++) {
 20075c0:	e0bffb17 	ldw	r2,-20(fp)
 20075c4:	10800044 	addi	r2,r2,1
 20075c8:	e0bffb15 	stw	r2,-20(fp)
 20075cc:	e0fffb17 	ldw	r3,-20(fp)
 20075d0:	e0bfff17 	ldw	r2,-4(fp)
 20075d4:	18bfec36 	bltu	r3,r2,2007588 <_ZN12CCarProtocolC1EtPP11CCarMessagem+0x40>
		m_pMessages[i] = pMessages[i];
	}

	m_uiMessageCount = uiMessageCount;
 20075d8:	e0fffc17 	ldw	r3,-16(fp)
 20075dc:	e0bfff17 	ldw	r2,-4(fp)
 20075e0:	18800a15 	stw	r2,40(r3)

	m_bValid = true;
 20075e4:	e0fffc17 	ldw	r3,-16(fp)
 20075e8:	00800044 	movi	r2,1
 20075ec:	18800105 	stb	r2,4(r3)
	m_bThereIsMore = false;
 20075f0:	e0bffc17 	ldw	r2,-16(fp)
 20075f4:	10000145 	stb	zero,5(r2)
}
 20075f8:	e037883a 	mov	sp,fp
 20075fc:	df000017 	ldw	fp,0(sp)
 2007600:	dec00104 	addi	sp,sp,4
 2007604:	f800283a 	ret

02007608 <_ZN12CCarProtocol7isValidEv>:
		}
	}

}

bool CCarProtocol::isValid() {
 2007608:	defffe04 	addi	sp,sp,-8
 200760c:	df000115 	stw	fp,4(sp)
 2007610:	df000104 	addi	fp,sp,4
 2007614:	e13fff15 	stw	r4,-4(fp)
	return m_bValid;
 2007618:	e0bfff17 	ldw	r2,-4(fp)
 200761c:	10800103 	ldbu	r2,4(r2)
 2007620:	10803fcc 	andi	r2,r2,255
}
 2007624:	e037883a 	mov	sp,fp
 2007628:	df000017 	ldw	fp,0(sp)
 200762c:	dec00104 	addi	sp,sp,4
 2007630:	f800283a 	ret

02007634 <_ZN12CCarProtocol9getLengthEv>:
	}

	return m_bValid;
}

alt_u32 CCarProtocol::getLength() {
 2007634:	defffb04 	addi	sp,sp,-20
 2007638:	dfc00415 	stw	ra,16(sp)
 200763c:	df000315 	stw	fp,12(sp)
 2007640:	df000304 	addi	fp,sp,12
 2007644:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uiLength = 8;
 2007648:	00800204 	movi	r2,8
 200764c:	e0bffe15 	stw	r2,-8(fp)

	for (alt_u32 i = 0; i < m_uiMessageCount; i++) {
 2007650:	e03ffd15 	stw	zero,-12(fp)
 2007654:	00001906 	br	20076bc <_ZN12CCarProtocol9getLengthEv+0x88>
		uiLength += m_pMessages[i]->getLength();
 2007658:	e0bffd17 	ldw	r2,-12(fp)
 200765c:	e0ffff17 	ldw	r3,-4(fp)
 2007660:	1085883a 	add	r2,r2,r2
 2007664:	1085883a 	add	r2,r2,r2
 2007668:	10c5883a 	add	r2,r2,r3
 200766c:	10800204 	addi	r2,r2,8
 2007670:	10800017 	ldw	r2,0(r2)
 2007674:	10800017 	ldw	r2,0(r2)
 2007678:	10800404 	addi	r2,r2,16
 200767c:	11400017 	ldw	r5,0(r2)
 2007680:	e0bffd17 	ldw	r2,-12(fp)
 2007684:	e0ffff17 	ldw	r3,-4(fp)
 2007688:	1085883a 	add	r2,r2,r2
 200768c:	1085883a 	add	r2,r2,r2
 2007690:	10c5883a 	add	r2,r2,r3
 2007694:	10800204 	addi	r2,r2,8
 2007698:	11000017 	ldw	r4,0(r2)
 200769c:	283ee83a 	callr	r5
 20076a0:	1007883a 	mov	r3,r2
 20076a4:	e0bffe17 	ldw	r2,-8(fp)
 20076a8:	10c5883a 	add	r2,r2,r3
 20076ac:	e0bffe15 	stw	r2,-8(fp)
}

alt_u32 CCarProtocol::getLength() {
	alt_u32 uiLength = 8;

	for (alt_u32 i = 0; i < m_uiMessageCount; i++) {
 20076b0:	e0bffd17 	ldw	r2,-12(fp)
 20076b4:	10800044 	addi	r2,r2,1
 20076b8:	e0bffd15 	stw	r2,-12(fp)
 20076bc:	e0bfff17 	ldw	r2,-4(fp)
 20076c0:	10c00a17 	ldw	r3,40(r2)
 20076c4:	e0bffd17 	ldw	r2,-12(fp)
 20076c8:	10ffe336 	bltu	r2,r3,2007658 <_ZN12CCarProtocol9getLengthEv+0x24>
		uiLength += m_pMessages[i]->getLength();
	}

	return uiLength;
 20076cc:	e0bffe17 	ldw	r2,-8(fp)
}
 20076d0:	e037883a 	mov	sp,fp
 20076d4:	dfc00117 	ldw	ra,4(sp)
 20076d8:	df000017 	ldw	fp,0(sp)
 20076dc:	dec00204 	addi	sp,sp,8
 20076e0:	f800283a 	ret

020076e4 <_ZN12CCarProtocol13getNthMessageEm>:

CCarMessage *CCarProtocol::getNthMessage(alt_u32 uiIdx) {
 20076e4:	defffc04 	addi	sp,sp,-16
 20076e8:	df000315 	stw	fp,12(sp)
 20076ec:	df000304 	addi	fp,sp,12
 20076f0:	e13ffd15 	stw	r4,-12(fp)
 20076f4:	e17ffe15 	stw	r5,-8(fp)
	if (uiIdx >= m_uiMessageCount)
 20076f8:	e0bffd17 	ldw	r2,-12(fp)
 20076fc:	10c00a17 	ldw	r3,40(r2)
 2007700:	e0bffe17 	ldw	r2,-8(fp)
 2007704:	10c00236 	bltu	r2,r3,2007710 <_ZN12CCarProtocol13getNthMessageEm+0x2c>
		return 0;
 2007708:	e03fff15 	stw	zero,-4(fp)
 200770c:	00000806 	br	2007730 <_ZN12CCarProtocol13getNthMessageEm+0x4c>

	return m_pMessages[uiIdx];
 2007710:	e0bffe17 	ldw	r2,-8(fp)
 2007714:	e0fffd17 	ldw	r3,-12(fp)
 2007718:	1085883a 	add	r2,r2,r2
 200771c:	1085883a 	add	r2,r2,r2
 2007720:	10c5883a 	add	r2,r2,r3
 2007724:	10800204 	addi	r2,r2,8
 2007728:	10800017 	ldw	r2,0(r2)
 200772c:	e0bfff15 	stw	r2,-4(fp)
 2007730:	e0bfff17 	ldw	r2,-4(fp)
}
 2007734:	e037883a 	mov	sp,fp
 2007738:	df000017 	ldw	fp,0(sp)
 200773c:	dec00104 	addi	sp,sp,4
 2007740:	f800283a 	ret

02007744 <_ZN12CCarProtocol15getMessageCountEv>:

alt_u32 CCarProtocol::getMessageCount() {
 2007744:	defffe04 	addi	sp,sp,-8
 2007748:	df000115 	stw	fp,4(sp)
 200774c:	df000104 	addi	fp,sp,4
 2007750:	e13fff15 	stw	r4,-4(fp)
	return m_uiMessageCount;
 2007754:	e0bfff17 	ldw	r2,-4(fp)
 2007758:	10800a17 	ldw	r2,40(r2)
}
 200775c:	e037883a 	mov	sp,fp
 2007760:	df000017 	ldw	fp,0(sp)
 2007764:	dec00104 	addi	sp,sp,4
 2007768:	f800283a 	ret

0200776c <_ZN12CCarProtocol8getBytesEPh>:

bool CCarProtocol::isValid() {
	return m_bValid;
}

bool CCarProtocol::getBytes(alt_u8 *pPacket) {
 200776c:	defff804 	addi	sp,sp,-32
 2007770:	dfc00715 	stw	ra,28(sp)
 2007774:	df000615 	stw	fp,24(sp)
 2007778:	dc000515 	stw	r16,20(sp)
 200777c:	df000504 	addi	fp,sp,20
 2007780:	e13ffd15 	stw	r4,-12(fp)
 2007784:	e17ffe15 	stw	r5,-8(fp)
	alt_u16 uiLength = (alt_u16) getLength();
 2007788:	e13ffd17 	ldw	r4,-12(fp)
 200778c:	20076340 	call	2007634 <_ZN12CCarProtocol9getLengthEv>
 2007790:	e0bffc8d 	sth	r2,-14(fp)
	alt_u16 uiOffset = 8;
 2007794:	00800204 	movi	r2,8
 2007798:	e0bffc0d 	sth	r2,-16(fp)

	if (!m_bValid)
 200779c:	e0bffd17 	ldw	r2,-12(fp)
 20077a0:	10800103 	ldbu	r2,4(r2)
 20077a4:	1080005c 	xori	r2,r2,1
 20077a8:	10803fcc 	andi	r2,r2,255
 20077ac:	1005003a 	cmpeq	r2,r2,zero
 20077b0:	1000051e 	bne	r2,zero,20077c8 <_ZN12CCarProtocol8getBytesEPh+0x5c>
		return m_bValid;
 20077b4:	e0bffd17 	ldw	r2,-12(fp)
 20077b8:	10800103 	ldbu	r2,4(r2)
 20077bc:	10803fcc 	andi	r2,r2,255
 20077c0:	e0bfff15 	stw	r2,-4(fp)
 20077c4:	00006506 	br	200795c <_ZN12CCarProtocol8getBytesEPh+0x1f0>

	pPacket[0] = 'C';
 20077c8:	e0fffe17 	ldw	r3,-8(fp)
 20077cc:	008010c4 	movi	r2,67
 20077d0:	18800005 	stb	r2,0(r3)
	pPacket[1] = 'A';
 20077d4:	e0bffe17 	ldw	r2,-8(fp)
 20077d8:	10c00044 	addi	r3,r2,1
 20077dc:	00801044 	movi	r2,65
 20077e0:	18800005 	stb	r2,0(r3)
	pPacket[2] = 'R';
 20077e4:	e0bffe17 	ldw	r2,-8(fp)
 20077e8:	10c00084 	addi	r3,r2,2
 20077ec:	00801484 	movi	r2,82
 20077f0:	18800005 	stb	r2,0(r3)
	pPacket[3] = 'P';
 20077f4:	e0bffe17 	ldw	r2,-8(fp)
 20077f8:	10c000c4 	addi	r3,r2,3
 20077fc:	00801404 	movi	r2,80
 2007800:	18800005 	stb	r2,0(r3)

	*((alt_u16*) (pPacket + 4)) = m_uiPacketNumber;
 2007804:	e0bffe17 	ldw	r2,-8(fp)
 2007808:	10800104 	addi	r2,r2,4
 200780c:	1007883a 	mov	r3,r2
 2007810:	e0bffd17 	ldw	r2,-12(fp)
 2007814:	1080018b 	ldhu	r2,6(r2)
 2007818:	1880000d 	sth	r2,0(r3)
	swapEndianess(pPacket + 4, 2);
 200781c:	e0bffe17 	ldw	r2,-8(fp)
 2007820:	11000104 	addi	r4,r2,4
 2007824:	01400084 	movi	r5,2
 2007828:	20002480 	call	2000248 <_Z13swapEndianessPhm>

	*((alt_u16*) (pPacket + 6)) = uiLength - 8;
 200782c:	e0bffe17 	ldw	r2,-8(fp)
 2007830:	10800184 	addi	r2,r2,6
 2007834:	1007883a 	mov	r3,r2
 2007838:	e0bffc8b 	ldhu	r2,-14(fp)
 200783c:	10bffe04 	addi	r2,r2,-8
 2007840:	1880000d 	sth	r2,0(r3)
	swapEndianess(pPacket + 6, 2);
 2007844:	e0bffe17 	ldw	r2,-8(fp)
 2007848:	11000184 	addi	r4,r2,6
 200784c:	01400084 	movi	r5,2
 2007850:	20002480 	call	2000248 <_Z13swapEndianessPhm>

	for (alt_u32 i = 0; i < m_uiMessageCount; i++) {
 2007854:	e03ffb15 	stw	zero,-20(fp)
 2007858:	00003806 	br	200793c <_ZN12CCarProtocol8getBytesEPh+0x1d0>
		m_bValid &= m_pMessages[i]->getBytes(pPacket + uiOffset);
 200785c:	e0bffd17 	ldw	r2,-12(fp)
 2007860:	10800103 	ldbu	r2,4(r2)
 2007864:	14003fcc 	andi	r16,r2,255
 2007868:	e0bffb17 	ldw	r2,-20(fp)
 200786c:	e0fffd17 	ldw	r3,-12(fp)
 2007870:	1085883a 	add	r2,r2,r2
 2007874:	1085883a 	add	r2,r2,r2
 2007878:	10c5883a 	add	r2,r2,r3
 200787c:	10800204 	addi	r2,r2,8
 2007880:	10800017 	ldw	r2,0(r2)
 2007884:	10800017 	ldw	r2,0(r2)
 2007888:	10800304 	addi	r2,r2,12
 200788c:	11800017 	ldw	r6,0(r2)
 2007890:	e0bffb17 	ldw	r2,-20(fp)
 2007894:	e0fffd17 	ldw	r3,-12(fp)
 2007898:	1085883a 	add	r2,r2,r2
 200789c:	1085883a 	add	r2,r2,r2
 20078a0:	10c5883a 	add	r2,r2,r3
 20078a4:	10800204 	addi	r2,r2,8
 20078a8:	11000017 	ldw	r4,0(r2)
 20078ac:	e0bffc0b 	ldhu	r2,-16(fp)
 20078b0:	1007883a 	mov	r3,r2
 20078b4:	e0bffe17 	ldw	r2,-8(fp)
 20078b8:	188b883a 	add	r5,r3,r2
 20078bc:	303ee83a 	callr	r6
 20078c0:	10803fcc 	andi	r2,r2,255
 20078c4:	8084703a 	and	r2,r16,r2
 20078c8:	1004c03a 	cmpne	r2,r2,zero
 20078cc:	1007883a 	mov	r3,r2
 20078d0:	e0bffd17 	ldw	r2,-12(fp)
 20078d4:	10c00105 	stb	r3,4(r2)
		uiOffset += m_pMessages[i]->getLength();
 20078d8:	e0bffb17 	ldw	r2,-20(fp)
 20078dc:	e0fffd17 	ldw	r3,-12(fp)
 20078e0:	1085883a 	add	r2,r2,r2
 20078e4:	1085883a 	add	r2,r2,r2
 20078e8:	10c5883a 	add	r2,r2,r3
 20078ec:	10800204 	addi	r2,r2,8
 20078f0:	10800017 	ldw	r2,0(r2)
 20078f4:	10800017 	ldw	r2,0(r2)
 20078f8:	10800404 	addi	r2,r2,16
 20078fc:	11400017 	ldw	r5,0(r2)
 2007900:	e0bffb17 	ldw	r2,-20(fp)
 2007904:	e0fffd17 	ldw	r3,-12(fp)
 2007908:	1085883a 	add	r2,r2,r2
 200790c:	1085883a 	add	r2,r2,r2
 2007910:	10c5883a 	add	r2,r2,r3
 2007914:	10800204 	addi	r2,r2,8
 2007918:	11000017 	ldw	r4,0(r2)
 200791c:	283ee83a 	callr	r5
 2007920:	1007883a 	mov	r3,r2
 2007924:	e0bffc0b 	ldhu	r2,-16(fp)
 2007928:	10c5883a 	add	r2,r2,r3
 200792c:	e0bffc0d 	sth	r2,-16(fp)
	swapEndianess(pPacket + 4, 2);

	*((alt_u16*) (pPacket + 6)) = uiLength - 8;
	swapEndianess(pPacket + 6, 2);

	for (alt_u32 i = 0; i < m_uiMessageCount; i++) {
 2007930:	e0bffb17 	ldw	r2,-20(fp)
 2007934:	10800044 	addi	r2,r2,1
 2007938:	e0bffb15 	stw	r2,-20(fp)
 200793c:	e0bffd17 	ldw	r2,-12(fp)
 2007940:	10c00a17 	ldw	r3,40(r2)
 2007944:	e0bffb17 	ldw	r2,-20(fp)
 2007948:	10ffc436 	bltu	r2,r3,200785c <_ZN12CCarProtocol8getBytesEPh+0xf0>
		m_bValid &= m_pMessages[i]->getBytes(pPacket + uiOffset);
		uiOffset += m_pMessages[i]->getLength();
	}

	return m_bValid;
 200794c:	e0bffd17 	ldw	r2,-12(fp)
 2007950:	10800103 	ldbu	r2,4(r2)
 2007954:	10803fcc 	andi	r2,r2,255
 2007958:	e0bfff15 	stw	r2,-4(fp)
 200795c:	e0bfff17 	ldw	r2,-4(fp)
}
 2007960:	e037883a 	mov	sp,fp
 2007964:	dfc00217 	ldw	ra,8(sp)
 2007968:	df000117 	ldw	fp,4(sp)
 200796c:	dc000017 	ldw	r16,0(sp)
 2007970:	dec00304 	addi	sp,sp,12
 2007974:	f800283a 	ret

02007978 <_ZN12CCarProtocolD0Ev>:

	m_bValid = true;
	m_bThereIsMore = false;
}

CCarProtocol::~CCarProtocol() {
 2007978:	defffc04 	addi	sp,sp,-16
 200797c:	dfc00315 	stw	ra,12(sp)
 2007980:	df000215 	stw	fp,8(sp)
 2007984:	df000204 	addi	fp,sp,8
 2007988:	e13fff15 	stw	r4,-4(fp)
 200798c:	00c080b4 	movhi	r3,514
 2007990:	18eeae04 	addi	r3,r3,-17736
 2007994:	e0bfff17 	ldw	r2,-4(fp)
 2007998:	10c00015 	stw	r3,0(r2)
	for (alt_u32 i = 0; i < m_uiMessageCount; i++) {
 200799c:	e03ffe15 	stw	zero,-8(fp)
 20079a0:	00002e06 	br	2007a5c <_ZN12CCarProtocolD0Ev+0xe4>
		if (m_pMessages[i] != 0)
 20079a4:	e0bffe17 	ldw	r2,-8(fp)
 20079a8:	e0ffff17 	ldw	r3,-4(fp)
 20079ac:	1085883a 	add	r2,r2,r2
 20079b0:	1085883a 	add	r2,r2,r2
 20079b4:	10c5883a 	add	r2,r2,r3
 20079b8:	10800204 	addi	r2,r2,8
 20079bc:	10800017 	ldw	r2,0(r2)
 20079c0:	1005003a 	cmpeq	r2,r2,zero
 20079c4:	10001b1e 	bne	r2,zero,2007a34 <_ZN12CCarProtocolD0Ev+0xbc>
			delete (m_pMessages[i]);
 20079c8:	e0bffe17 	ldw	r2,-8(fp)
 20079cc:	e0ffff17 	ldw	r3,-4(fp)
 20079d0:	1085883a 	add	r2,r2,r2
 20079d4:	1085883a 	add	r2,r2,r2
 20079d8:	10c5883a 	add	r2,r2,r3
 20079dc:	10800204 	addi	r2,r2,8
 20079e0:	10800017 	ldw	r2,0(r2)
 20079e4:	1005003a 	cmpeq	r2,r2,zero
 20079e8:	1000121e 	bne	r2,zero,2007a34 <_ZN12CCarProtocolD0Ev+0xbc>
 20079ec:	e0bffe17 	ldw	r2,-8(fp)
 20079f0:	e0ffff17 	ldw	r3,-4(fp)
 20079f4:	1085883a 	add	r2,r2,r2
 20079f8:	1085883a 	add	r2,r2,r2
 20079fc:	10c5883a 	add	r2,r2,r3
 2007a00:	10800204 	addi	r2,r2,8
 2007a04:	10800017 	ldw	r2,0(r2)
 2007a08:	10800017 	ldw	r2,0(r2)
 2007a0c:	10800104 	addi	r2,r2,4
 2007a10:	11400017 	ldw	r5,0(r2)
 2007a14:	e0bffe17 	ldw	r2,-8(fp)
 2007a18:	e0ffff17 	ldw	r3,-4(fp)
 2007a1c:	1085883a 	add	r2,r2,r2
 2007a20:	1085883a 	add	r2,r2,r2
 2007a24:	10c5883a 	add	r2,r2,r3
 2007a28:	10800204 	addi	r2,r2,8
 2007a2c:	11000017 	ldw	r4,0(r2)
 2007a30:	283ee83a 	callr	r5
		m_pMessages[i] = 0;
 2007a34:	e0bffe17 	ldw	r2,-8(fp)
 2007a38:	e0ffff17 	ldw	r3,-4(fp)
 2007a3c:	1085883a 	add	r2,r2,r2
 2007a40:	1085883a 	add	r2,r2,r2
 2007a44:	10c5883a 	add	r2,r2,r3
 2007a48:	10800204 	addi	r2,r2,8
 2007a4c:	10000015 	stw	zero,0(r2)
	m_bValid = true;
	m_bThereIsMore = false;
}

CCarProtocol::~CCarProtocol() {
	for (alt_u32 i = 0; i < m_uiMessageCount; i++) {
 2007a50:	e0bffe17 	ldw	r2,-8(fp)
 2007a54:	10800044 	addi	r2,r2,1
 2007a58:	e0bffe15 	stw	r2,-8(fp)
 2007a5c:	e0bfff17 	ldw	r2,-4(fp)
 2007a60:	10c00a17 	ldw	r3,40(r2)
 2007a64:	e0bffe17 	ldw	r2,-8(fp)
 2007a68:	10ffce36 	bltu	r2,r3,20079a4 <_ZN12CCarProtocolD0Ev+0x2c>
		if (m_pMessages[i] != 0)
			delete (m_pMessages[i]);
		m_pMessages[i] = 0;
	}
}
 2007a6c:	00800044 	movi	r2,1
 2007a70:	10803fcc 	andi	r2,r2,255
 2007a74:	1005003a 	cmpeq	r2,r2,zero
 2007a78:	1000021e 	bne	r2,zero,2007a84 <_ZN12CCarProtocolD0Ev+0x10c>
 2007a7c:	e13fff17 	ldw	r4,-4(fp)
 2007a80:	200c1380 	call	200c138 <_ZdlPv>
 2007a84:	e037883a 	mov	sp,fp
 2007a88:	dfc00117 	ldw	ra,4(sp)
 2007a8c:	df000017 	ldw	fp,0(sp)
 2007a90:	dec00204 	addi	sp,sp,8
 2007a94:	f800283a 	ret

02007a98 <_ZN12CCarProtocolD1Ev>:

	m_bValid = true;
	m_bThereIsMore = false;
}

CCarProtocol::~CCarProtocol() {
 2007a98:	defffc04 	addi	sp,sp,-16
 2007a9c:	dfc00315 	stw	ra,12(sp)
 2007aa0:	df000215 	stw	fp,8(sp)
 2007aa4:	df000204 	addi	fp,sp,8
 2007aa8:	e13fff15 	stw	r4,-4(fp)
 2007aac:	00c080b4 	movhi	r3,514
 2007ab0:	18eeae04 	addi	r3,r3,-17736
 2007ab4:	e0bfff17 	ldw	r2,-4(fp)
 2007ab8:	10c00015 	stw	r3,0(r2)
	for (alt_u32 i = 0; i < m_uiMessageCount; i++) {
 2007abc:	e03ffe15 	stw	zero,-8(fp)
 2007ac0:	00002e06 	br	2007b7c <_ZN12CCarProtocolD1Ev+0xe4>
		if (m_pMessages[i] != 0)
 2007ac4:	e0bffe17 	ldw	r2,-8(fp)
 2007ac8:	e0ffff17 	ldw	r3,-4(fp)
 2007acc:	1085883a 	add	r2,r2,r2
 2007ad0:	1085883a 	add	r2,r2,r2
 2007ad4:	10c5883a 	add	r2,r2,r3
 2007ad8:	10800204 	addi	r2,r2,8
 2007adc:	10800017 	ldw	r2,0(r2)
 2007ae0:	1005003a 	cmpeq	r2,r2,zero
 2007ae4:	10001b1e 	bne	r2,zero,2007b54 <_ZN12CCarProtocolD1Ev+0xbc>
			delete (m_pMessages[i]);
 2007ae8:	e0bffe17 	ldw	r2,-8(fp)
 2007aec:	e0ffff17 	ldw	r3,-4(fp)
 2007af0:	1085883a 	add	r2,r2,r2
 2007af4:	1085883a 	add	r2,r2,r2
 2007af8:	10c5883a 	add	r2,r2,r3
 2007afc:	10800204 	addi	r2,r2,8
 2007b00:	10800017 	ldw	r2,0(r2)
 2007b04:	1005003a 	cmpeq	r2,r2,zero
 2007b08:	1000121e 	bne	r2,zero,2007b54 <_ZN12CCarProtocolD1Ev+0xbc>
 2007b0c:	e0bffe17 	ldw	r2,-8(fp)
 2007b10:	e0ffff17 	ldw	r3,-4(fp)
 2007b14:	1085883a 	add	r2,r2,r2
 2007b18:	1085883a 	add	r2,r2,r2
 2007b1c:	10c5883a 	add	r2,r2,r3
 2007b20:	10800204 	addi	r2,r2,8
 2007b24:	10800017 	ldw	r2,0(r2)
 2007b28:	10800017 	ldw	r2,0(r2)
 2007b2c:	10800104 	addi	r2,r2,4
 2007b30:	11400017 	ldw	r5,0(r2)
 2007b34:	e0bffe17 	ldw	r2,-8(fp)
 2007b38:	e0ffff17 	ldw	r3,-4(fp)
 2007b3c:	1085883a 	add	r2,r2,r2
 2007b40:	1085883a 	add	r2,r2,r2
 2007b44:	10c5883a 	add	r2,r2,r3
 2007b48:	10800204 	addi	r2,r2,8
 2007b4c:	11000017 	ldw	r4,0(r2)
 2007b50:	283ee83a 	callr	r5
		m_pMessages[i] = 0;
 2007b54:	e0bffe17 	ldw	r2,-8(fp)
 2007b58:	e0ffff17 	ldw	r3,-4(fp)
 2007b5c:	1085883a 	add	r2,r2,r2
 2007b60:	1085883a 	add	r2,r2,r2
 2007b64:	10c5883a 	add	r2,r2,r3
 2007b68:	10800204 	addi	r2,r2,8
 2007b6c:	10000015 	stw	zero,0(r2)
	m_bValid = true;
	m_bThereIsMore = false;
}

CCarProtocol::~CCarProtocol() {
	for (alt_u32 i = 0; i < m_uiMessageCount; i++) {
 2007b70:	e0bffe17 	ldw	r2,-8(fp)
 2007b74:	10800044 	addi	r2,r2,1
 2007b78:	e0bffe15 	stw	r2,-8(fp)
 2007b7c:	e0bfff17 	ldw	r2,-4(fp)
 2007b80:	10c00a17 	ldw	r3,40(r2)
 2007b84:	e0bffe17 	ldw	r2,-8(fp)
 2007b88:	10ffce36 	bltu	r2,r3,2007ac4 <_ZN12CCarProtocolD1Ev+0x2c>
		if (m_pMessages[i] != 0)
			delete (m_pMessages[i]);
		m_pMessages[i] = 0;
	}
}
 2007b8c:	0005883a 	mov	r2,zero
 2007b90:	10803fcc 	andi	r2,r2,255
 2007b94:	1005003a 	cmpeq	r2,r2,zero
 2007b98:	1000021e 	bne	r2,zero,2007ba4 <_ZN12CCarProtocolD1Ev+0x10c>
 2007b9c:	e13fff17 	ldw	r4,-4(fp)
 2007ba0:	200c1380 	call	200c138 <_ZdlPv>
 2007ba4:	e037883a 	mov	sp,fp
 2007ba8:	dfc00117 	ldw	ra,4(sp)
 2007bac:	df000017 	ldw	fp,0(sp)
 2007bb0:	dec00204 	addi	sp,sp,8
 2007bb4:	f800283a 	ret

02007bb8 <_ZN12CCarProtocolD2Ev>:

	m_bValid = true;
	m_bThereIsMore = false;
}

CCarProtocol::~CCarProtocol() {
 2007bb8:	defffc04 	addi	sp,sp,-16
 2007bbc:	dfc00315 	stw	ra,12(sp)
 2007bc0:	df000215 	stw	fp,8(sp)
 2007bc4:	df000204 	addi	fp,sp,8
 2007bc8:	e13fff15 	stw	r4,-4(fp)
 2007bcc:	00c080b4 	movhi	r3,514
 2007bd0:	18eeae04 	addi	r3,r3,-17736
 2007bd4:	e0bfff17 	ldw	r2,-4(fp)
 2007bd8:	10c00015 	stw	r3,0(r2)
	for (alt_u32 i = 0; i < m_uiMessageCount; i++) {
 2007bdc:	e03ffe15 	stw	zero,-8(fp)
 2007be0:	00002e06 	br	2007c9c <_ZN12CCarProtocolD2Ev+0xe4>
		if (m_pMessages[i] != 0)
 2007be4:	e0bffe17 	ldw	r2,-8(fp)
 2007be8:	e0ffff17 	ldw	r3,-4(fp)
 2007bec:	1085883a 	add	r2,r2,r2
 2007bf0:	1085883a 	add	r2,r2,r2
 2007bf4:	10c5883a 	add	r2,r2,r3
 2007bf8:	10800204 	addi	r2,r2,8
 2007bfc:	10800017 	ldw	r2,0(r2)
 2007c00:	1005003a 	cmpeq	r2,r2,zero
 2007c04:	10001b1e 	bne	r2,zero,2007c74 <_ZN12CCarProtocolD2Ev+0xbc>
			delete (m_pMessages[i]);
 2007c08:	e0bffe17 	ldw	r2,-8(fp)
 2007c0c:	e0ffff17 	ldw	r3,-4(fp)
 2007c10:	1085883a 	add	r2,r2,r2
 2007c14:	1085883a 	add	r2,r2,r2
 2007c18:	10c5883a 	add	r2,r2,r3
 2007c1c:	10800204 	addi	r2,r2,8
 2007c20:	10800017 	ldw	r2,0(r2)
 2007c24:	1005003a 	cmpeq	r2,r2,zero
 2007c28:	1000121e 	bne	r2,zero,2007c74 <_ZN12CCarProtocolD2Ev+0xbc>
 2007c2c:	e0bffe17 	ldw	r2,-8(fp)
 2007c30:	e0ffff17 	ldw	r3,-4(fp)
 2007c34:	1085883a 	add	r2,r2,r2
 2007c38:	1085883a 	add	r2,r2,r2
 2007c3c:	10c5883a 	add	r2,r2,r3
 2007c40:	10800204 	addi	r2,r2,8
 2007c44:	10800017 	ldw	r2,0(r2)
 2007c48:	10800017 	ldw	r2,0(r2)
 2007c4c:	10800104 	addi	r2,r2,4
 2007c50:	11400017 	ldw	r5,0(r2)
 2007c54:	e0bffe17 	ldw	r2,-8(fp)
 2007c58:	e0ffff17 	ldw	r3,-4(fp)
 2007c5c:	1085883a 	add	r2,r2,r2
 2007c60:	1085883a 	add	r2,r2,r2
 2007c64:	10c5883a 	add	r2,r2,r3
 2007c68:	10800204 	addi	r2,r2,8
 2007c6c:	11000017 	ldw	r4,0(r2)
 2007c70:	283ee83a 	callr	r5
		m_pMessages[i] = 0;
 2007c74:	e0bffe17 	ldw	r2,-8(fp)
 2007c78:	e0ffff17 	ldw	r3,-4(fp)
 2007c7c:	1085883a 	add	r2,r2,r2
 2007c80:	1085883a 	add	r2,r2,r2
 2007c84:	10c5883a 	add	r2,r2,r3
 2007c88:	10800204 	addi	r2,r2,8
 2007c8c:	10000015 	stw	zero,0(r2)
	m_bValid = true;
	m_bThereIsMore = false;
}

CCarProtocol::~CCarProtocol() {
	for (alt_u32 i = 0; i < m_uiMessageCount; i++) {
 2007c90:	e0bffe17 	ldw	r2,-8(fp)
 2007c94:	10800044 	addi	r2,r2,1
 2007c98:	e0bffe15 	stw	r2,-8(fp)
 2007c9c:	e0bfff17 	ldw	r2,-4(fp)
 2007ca0:	10c00a17 	ldw	r3,40(r2)
 2007ca4:	e0bffe17 	ldw	r2,-8(fp)
 2007ca8:	10ffce36 	bltu	r2,r3,2007be4 <_ZN12CCarProtocolD2Ev+0x2c>
		if (m_pMessages[i] != 0)
			delete (m_pMessages[i]);
		m_pMessages[i] = 0;
	}
}
 2007cac:	0005883a 	mov	r2,zero
 2007cb0:	10803fcc 	andi	r2,r2,255
 2007cb4:	1005003a 	cmpeq	r2,r2,zero
 2007cb8:	1000021e 	bne	r2,zero,2007cc4 <_ZN12CCarProtocolD2Ev+0x10c>
 2007cbc:	e13fff17 	ldw	r4,-4(fp)
 2007cc0:	200c1380 	call	200c138 <_ZdlPv>
 2007cc4:	e037883a 	mov	sp,fp
 2007cc8:	dfc00117 	ldw	ra,4(sp)
 2007ccc:	df000017 	ldw	fp,0(sp)
 2007cd0:	dec00204 	addi	sp,sp,8
 2007cd4:	f800283a 	ret

02007cd8 <_ZN12CCarProtocol11parsePacketEPhi>:
 * packets will be ignored!
 *
 * pPacket: byte array containing the byte (network) representation of the packet.
 * iLength: length of the byte stream.
 */
void CCarProtocol::parsePacket(alt_u8 *pPacket, int iLength) {
 2007cd8:	deffbd04 	addi	sp,sp,-268
 2007cdc:	dfc04215 	stw	ra,264(sp)
 2007ce0:	df004115 	stw	fp,260(sp)
 2007ce4:	ddc04015 	stw	r23,256(sp)
 2007ce8:	dd803f15 	stw	r22,252(sp)
 2007cec:	dd403e15 	stw	r21,248(sp)
 2007cf0:	dd003d15 	stw	r20,244(sp)
 2007cf4:	dcc03c15 	stw	r19,240(sp)
 2007cf8:	dc803b15 	stw	r18,236(sp)
 2007cfc:	dc403a15 	stw	r17,232(sp)
 2007d00:	dc003915 	stw	r16,228(sp)
 2007d04:	df003904 	addi	fp,sp,228
 2007d08:	e13fc915 	stw	r4,-220(fp)
 2007d0c:	e17fca15 	stw	r5,-216(fp)
 2007d10:	e1bfcb15 	stw	r6,-212(fp)
 2007d14:	00808074 	movhi	r2,513
 2007d18:	10ae5a04 	addi	r2,r2,-18072
 2007d1c:	e0bfd215 	stw	r2,-184(fp)
 2007d20:	008080b4 	movhi	r2,514
 2007d24:	10add184 	addi	r2,r2,-18618
 2007d28:	e0bfd315 	stw	r2,-180(fp)
 2007d2c:	e0bfd404 	addi	r2,fp,-176
 2007d30:	e0ffc704 	addi	r3,fp,-228
 2007d34:	10c00015 	stw	r3,0(r2)
 2007d38:	00c08074 	movhi	r3,513
 2007d3c:	18e29904 	addi	r3,r3,-30108
 2007d40:	10c00115 	stw	r3,4(r2)
 2007d44:	16c00215 	stw	sp,8(r2)
 2007d48:	e13fcc04 	addi	r4,fp,-208
 2007d4c:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
	alt_u16 uiPayloadLength; // Payload length as read out of the byte array
	alt_u16 uiPayloadOffset; // Current working point for parsing of the next message
// Will be increment along the message lengths!

// Check Minimum Length 8 (which is the packet-header)
	if (iLength < 8)
 2007d50:	e0bfcb17 	ldw	r2,-212(fp)
 2007d54:	10800210 	cmplti	r2,r2,8
 2007d58:	10037d1e 	bne	r2,zero,2008b50 <_ZN12CCarProtocol11parsePacketEPhi+0xe78>
		return;

// Search for 'C' 'A' 'R' 'P'
	for (uiStartIdx = 0; uiStartIdx < iLength; uiStartIdx++) {
 2007d5c:	e03fc78d 	sth	zero,-226(fp)
 2007d60:	00002606 	br	2007dfc <_ZN12CCarProtocol11parsePacketEPhi+0x124>
		if (pPacket[uiStartIdx] == 'C' && pPacket[uiStartIdx + 1] == 'A'
 2007d64:	e0bfc78b 	ldhu	r2,-226(fp)
 2007d68:	1007883a 	mov	r3,r2
 2007d6c:	e0bfca17 	ldw	r2,-216(fp)
 2007d70:	1885883a 	add	r2,r3,r2
 2007d74:	10800003 	ldbu	r2,0(r2)
 2007d78:	10803fcc 	andi	r2,r2,255
 2007d7c:	108010d8 	cmpnei	r2,r2,67
 2007d80:	10001b1e 	bne	r2,zero,2007df0 <_ZN12CCarProtocol11parsePacketEPhi+0x118>
 2007d84:	e0bfc78b 	ldhu	r2,-226(fp)
 2007d88:	1007883a 	mov	r3,r2
 2007d8c:	e0bfca17 	ldw	r2,-216(fp)
 2007d90:	1885883a 	add	r2,r3,r2
 2007d94:	10800044 	addi	r2,r2,1
 2007d98:	10800003 	ldbu	r2,0(r2)
 2007d9c:	10803fcc 	andi	r2,r2,255
 2007da0:	10801058 	cmpnei	r2,r2,65
 2007da4:	1000121e 	bne	r2,zero,2007df0 <_ZN12CCarProtocol11parsePacketEPhi+0x118>
 2007da8:	e0bfc78b 	ldhu	r2,-226(fp)
 2007dac:	1007883a 	mov	r3,r2
 2007db0:	e0bfca17 	ldw	r2,-216(fp)
 2007db4:	1885883a 	add	r2,r3,r2
 2007db8:	10800084 	addi	r2,r2,2
 2007dbc:	10800003 	ldbu	r2,0(r2)
 2007dc0:	10803fcc 	andi	r2,r2,255
 2007dc4:	10801498 	cmpnei	r2,r2,82
 2007dc8:	1000091e 	bne	r2,zero,2007df0 <_ZN12CCarProtocol11parsePacketEPhi+0x118>
 2007dcc:	e0bfc78b 	ldhu	r2,-226(fp)
 2007dd0:	1007883a 	mov	r3,r2
 2007dd4:	e0bfca17 	ldw	r2,-216(fp)
 2007dd8:	1885883a 	add	r2,r3,r2
 2007ddc:	108000c4 	addi	r2,r2,3
 2007de0:	10800003 	ldbu	r2,0(r2)
 2007de4:	10803fcc 	andi	r2,r2,255
 2007de8:	10801420 	cmpeqi	r2,r2,80
 2007dec:	1000061e 	bne	r2,zero,2007e08 <_ZN12CCarProtocol11parsePacketEPhi+0x130>
// Check Minimum Length 8 (which is the packet-header)
	if (iLength < 8)
		return;

// Search for 'C' 'A' 'R' 'P'
	for (uiStartIdx = 0; uiStartIdx < iLength; uiStartIdx++) {
 2007df0:	e0bfc78b 	ldhu	r2,-226(fp)
 2007df4:	10800044 	addi	r2,r2,1
 2007df8:	e0bfc78d 	sth	r2,-226(fp)
 2007dfc:	e0ffc78b 	ldhu	r3,-226(fp)
 2007e00:	e0bfcb17 	ldw	r2,-212(fp)
 2007e04:	18bfd716 	blt	r3,r2,2007d64 <_ZN12CCarProtocol11parsePacketEPhi+0x8c>
				&& pPacket[uiStartIdx + 3] == 'P')
			break;
	}

// Enough space for the header?
	if (uiStartIdx + 8 > iLength)
 2007e08:	e0bfc78b 	ldhu	r2,-226(fp)
 2007e0c:	10c00204 	addi	r3,r2,8
 2007e10:	e0bfcb17 	ldw	r2,-212(fp)
 2007e14:	10c34e16 	blt	r2,r3,2008b50 <_ZN12CCarProtocol11parsePacketEPhi+0xe78>
		return;

// Here starts the parsing:
// Parse the payload-Length
	uiPayloadLength = *((alt_u16*) (pPacket + uiStartIdx + 6));
 2007e18:	e0bfc78b 	ldhu	r2,-226(fp)
 2007e1c:	1007883a 	mov	r3,r2
 2007e20:	e0bfca17 	ldw	r2,-216(fp)
 2007e24:	1885883a 	add	r2,r3,r2
 2007e28:	10800184 	addi	r2,r2,6
 2007e2c:	1080000b 	ldhu	r2,0(r2)
 2007e30:	e0bfc80d 	sth	r2,-224(fp)
	swapEndianess((alt_u8*) &uiPayloadLength, 2);
 2007e34:	e13fc804 	addi	r4,fp,-224
 2007e38:	00bfffc4 	movi	r2,-1
 2007e3c:	e0bfcd15 	stw	r2,-204(fp)
 2007e40:	01400084 	movi	r5,2
 2007e44:	20002480 	call	2000248 <_Z13swapEndianessPhm>

// Parse the PacketNumber
	m_uiPacketNumber = *((alt_u16*) (pPacket + uiStartIdx + 4));
 2007e48:	e0bfc78b 	ldhu	r2,-226(fp)
 2007e4c:	1007883a 	mov	r3,r2
 2007e50:	e0bfca17 	ldw	r2,-216(fp)
 2007e54:	1885883a 	add	r2,r3,r2
 2007e58:	10800104 	addi	r2,r2,4
 2007e5c:	10c0000b 	ldhu	r3,0(r2)
 2007e60:	e0bfc917 	ldw	r2,-220(fp)
 2007e64:	10c0018d 	sth	r3,6(r2)
	swapEndianess((alt_u8*) &m_uiPacketNumber, 2);
 2007e68:	e0bfc917 	ldw	r2,-220(fp)
 2007e6c:	10800184 	addi	r2,r2,6
 2007e70:	1009883a 	mov	r4,r2
 2007e74:	01400084 	movi	r5,2
 2007e78:	20002480 	call	2000248 <_Z13swapEndianessPhm>

// Set the initial member values
	m_bValid = true;
 2007e7c:	e0ffc917 	ldw	r3,-220(fp)
 2007e80:	00800044 	movi	r2,1
 2007e84:	18800105 	stb	r2,4(r3)
	m_uiMessageCount = 0;
 2007e88:	e0bfc917 	ldw	r2,-220(fp)
 2007e8c:	10000a15 	stw	zero,40(r2)

// Is there a payload?
	if (uiPayloadLength > 0) {
 2007e90:	e0bfc80b 	ldhu	r2,-224(fp)
 2007e94:	10bfffcc 	andi	r2,r2,65535
 2007e98:	1005003a 	cmpeq	r2,r2,zero
 2007e9c:	10032c1e 	bne	r2,zero,2008b50 <_ZN12CCarProtocol11parsePacketEPhi+0xe78>
// Enough space for the payload?
		if (uiStartIdx + 8 + uiPayloadLength > iLength) {
 2007ea0:	e0ffc78b 	ldhu	r3,-226(fp)
 2007ea4:	e0bfc80b 	ldhu	r2,-224(fp)
 2007ea8:	10bfffcc 	andi	r2,r2,65535
 2007eac:	1885883a 	add	r2,r3,r2
 2007eb0:	10c00204 	addi	r3,r2,8
 2007eb4:	e0bfcb17 	ldw	r2,-212(fp)
 2007eb8:	10c0060e 	bge	r2,r3,2007ed4 <_ZN12CCarProtocol11parsePacketEPhi+0x1fc>
			m_bThereIsMore = true;
 2007ebc:	e0bfc917 	ldw	r2,-220(fp)
 2007ec0:	00c00044 	movi	r3,1
 2007ec4:	10c00145 	stb	r3,5(r2)
			m_bValid = false;
 2007ec8:	e0bfc917 	ldw	r2,-220(fp)
 2007ecc:	10000105 	stb	zero,4(r2)
			return;
 2007ed0:	00031f06 	br	2008b50 <_ZN12CCarProtocol11parsePacketEPhi+0xe78>
		}

// Increment uiStartIdx to the working point (the first message position)
		uiStartIdx += 8;
 2007ed4:	e0bfc78b 	ldhu	r2,-226(fp)
 2007ed8:	10800204 	addi	r2,r2,8
 2007edc:	e0bfc78d 	sth	r2,-226(fp)

// Initialize uiPayloadOffset to 0
		uiPayloadOffset = 0;
 2007ee0:	e03fc70d 	sth	zero,-228(fp)

// Do as long there are messages (payload bytes) left and the count of messages dont exceeds 8.
		while (uiPayloadOffset < uiPayloadLength && m_uiMessageCount < 8) {
 2007ee4:	00031206 	br	2008b30 <_ZN12CCarProtocol11parsePacketEPhi+0xe58>
// Parse the message type and switch along it
		switch (pPacket[uiStartIdx + uiPayloadOffset]) {
 2007ee8:	e0ffc78b 	ldhu	r3,-226(fp)
 2007eec:	e0bfc70b 	ldhu	r2,-228(fp)
 2007ef0:	1885883a 	add	r2,r3,r2
 2007ef4:	1007883a 	mov	r3,r2
 2007ef8:	e0bfca17 	ldw	r2,-216(fp)
 2007efc:	1885883a 	add	r2,r3,r2
 2007f00:	10800003 	ldbu	r2,0(r2)
 2007f04:	10803fcc 	andi	r2,r2,255
 2007f08:	e0bffd15 	stw	r2,-12(fp)
 2007f0c:	e13ffd17 	ldw	r4,-12(fp)
 2007f10:	20801868 	cmpgeui	r2,r4,97
 2007f14:	1003031e 	bne	r2,zero,2008b24 <_ZN12CCarProtocol11parsePacketEPhi+0xe4c>
 2007f18:	e17ffd17 	ldw	r5,-12(fp)
 2007f1c:	e17ffd17 	ldw	r5,-12(fp)
 2007f20:	2945883a 	add	r2,r5,r5
 2007f24:	1087883a 	add	r3,r2,r2
 2007f28:	00808034 	movhi	r2,512
 2007f2c:	109fcf04 	addi	r2,r2,32572
 2007f30:	1885883a 	add	r2,r3,r2
 2007f34:	10800017 	ldw	r2,0(r2)
 2007f38:	1000683a 	jmp	r2
 2007f3c:	02008b24 	muli	r8,zero,556
 2007f40:	020080c0 	call	20080c <__reset-0x1dff7f4>
 2007f44:	02008b24 	muli	r8,zero,556
 2007f48:	02008b24 	muli	r8,zero,556
 2007f4c:	02008188 	cmpgei	r8,zero,518
 2007f50:	02008250 	cmplti	r8,zero,521
 2007f54:	02008b24 	muli	r8,zero,556
 2007f58:	02008b24 	muli	r8,zero,556
 2007f5c:	02008318 	cmpnei	r8,zero,524
 2007f60:	020083e0 	cmpeqi	r8,zero,527
 2007f64:	020084a8 	cmpgeui	r8,zero,530
 2007f68:	02008b24 	muli	r8,zero,556
 2007f6c:	02008b24 	muli	r8,zero,556
 2007f70:	02008b24 	muli	r8,zero,556
 2007f74:	02008b24 	muli	r8,zero,556
 2007f78:	02008b24 	muli	r8,zero,556
 2007f7c:	02008b24 	muli	r8,zero,556
 2007f80:	02008b24 	muli	r8,zero,556
 2007f84:	02008b24 	muli	r8,zero,556
 2007f88:	02008b24 	muli	r8,zero,556
 2007f8c:	02008b24 	muli	r8,zero,556
 2007f90:	02008b24 	muli	r8,zero,556
 2007f94:	02008b24 	muli	r8,zero,556
 2007f98:	02008b24 	muli	r8,zero,556
 2007f9c:	02008b24 	muli	r8,zero,556
 2007fa0:	02008b24 	muli	r8,zero,556
 2007fa4:	02008b24 	muli	r8,zero,556
 2007fa8:	02008b24 	muli	r8,zero,556
 2007fac:	02008b24 	muli	r8,zero,556
 2007fb0:	02008b24 	muli	r8,zero,556
 2007fb4:	02008b24 	muli	r8,zero,556
 2007fb8:	02008b24 	muli	r8,zero,556
 2007fbc:	020086a4 	muli	r8,zero,538
 2007fc0:	02008b24 	muli	r8,zero,556
 2007fc4:	02008b24 	muli	r8,zero,556
 2007fc8:	02008b24 	muli	r8,zero,556
 2007fcc:	02008b24 	muli	r8,zero,556
 2007fd0:	02008b24 	muli	r8,zero,556
 2007fd4:	02008b24 	muli	r8,zero,556
 2007fd8:	02008b24 	muli	r8,zero,556
 2007fdc:	02008b24 	muli	r8,zero,556
 2007fe0:	02008b24 	muli	r8,zero,556
 2007fe4:	02008b24 	muli	r8,zero,556
 2007fe8:	02008b24 	muli	r8,zero,556
 2007fec:	02008b24 	muli	r8,zero,556
 2007ff0:	02008b24 	muli	r8,zero,556
 2007ff4:	02008b24 	muli	r8,zero,556
 2007ff8:	02008b24 	muli	r8,zero,556
 2007ffc:	0200876c 	andhi	r8,zero,541
 2008000:	02008b24 	muli	r8,zero,556
 2008004:	02008b24 	muli	r8,zero,556
 2008008:	02008b24 	muli	r8,zero,556
 200800c:	02008b24 	muli	r8,zero,556
 2008010:	02008b24 	muli	r8,zero,556
 2008014:	02008b24 	muli	r8,zero,556
 2008018:	02008b24 	muli	r8,zero,556
 200801c:	02008b24 	muli	r8,zero,556
 2008020:	02008b24 	muli	r8,zero,556
 2008024:	02008b24 	muli	r8,zero,556
 2008028:	02008b24 	muli	r8,zero,556
 200802c:	02008b24 	muli	r8,zero,556
 2008030:	02008b24 	muli	r8,zero,556
 2008034:	02008b24 	muli	r8,zero,556
 2008038:	02008b24 	muli	r8,zero,556
 200803c:	02008834 	movhi	r8,544
 2008040:	02008b24 	muli	r8,zero,556
 2008044:	02008b24 	muli	r8,zero,556
 2008048:	02008b24 	muli	r8,zero,556
 200804c:	02008b24 	muli	r8,zero,556
 2008050:	02008b24 	muli	r8,zero,556
 2008054:	02008b24 	muli	r8,zero,556
 2008058:	02008b24 	muli	r8,zero,556
 200805c:	02008b24 	muli	r8,zero,556
 2008060:	02008b24 	muli	r8,zero,556
 2008064:	02008b24 	muli	r8,zero,556
 2008068:	02008b24 	muli	r8,zero,556
 200806c:	02008b24 	muli	r8,zero,556
 2008070:	02008b24 	muli	r8,zero,556
 2008074:	02008b24 	muli	r8,zero,556
 2008078:	02008b24 	muli	r8,zero,556
 200807c:	020088fc 	xorhi	r8,zero,547
 2008080:	02008b24 	muli	r8,zero,556
 2008084:	02008b24 	muli	r8,zero,556
 2008088:	02008b24 	muli	r8,zero,556
 200808c:	02008b24 	muli	r8,zero,556
 2008090:	02008b24 	muli	r8,zero,556
 2008094:	02008b24 	muli	r8,zero,556
 2008098:	02008b24 	muli	r8,zero,556
 200809c:	02008b24 	muli	r8,zero,556
 20080a0:	02008b24 	muli	r8,zero,556
 20080a4:	02008b24 	muli	r8,zero,556
 20080a8:	02008b24 	muli	r8,zero,556
 20080ac:	02008b24 	muli	r8,zero,556
 20080b0:	02008b24 	muli	r8,zero,556
 20080b4:	02008b24 	muli	r8,zero,556
 20080b8:	02008b24 	muli	r8,zero,556
 20080bc:	020089c4 	movi	r8,551

// WelcomeMessage
			case CARP_MSGID_WELCOME:
				m_pMessages[m_uiMessageCount] = new CWelcomeMessage(
						pPacket + uiStartIdx + uiPayloadOffset,
						uiPayloadLength - uiPayloadOffset);
 20080c0:	e0bfc917 	ldw	r2,-220(fp)
 20080c4:	10800a17 	ldw	r2,40(r2)
 20080c8:	e0bffc15 	stw	r2,-16(fp)
 20080cc:	00bfffc4 	movi	r2,-1
 20080d0:	e0bfcd15 	stw	r2,-204(fp)
 20080d4:	01000504 	movi	r4,20
 20080d8:	200c6200 	call	200c620 <_Znwm>
 20080dc:	e0bffb15 	stw	r2,-20(fp)
 20080e0:	e0bfc78b 	ldhu	r2,-226(fp)
 20080e4:	1007883a 	mov	r3,r2
 20080e8:	e0bfca17 	ldw	r2,-216(fp)
 20080ec:	1887883a 	add	r3,r3,r2
 20080f0:	e0bfc70b 	ldhu	r2,-228(fp)
 20080f4:	188b883a 	add	r5,r3,r2
 20080f8:	e0bfc80b 	ldhu	r2,-224(fp)
 20080fc:	10ffffcc 	andi	r3,r2,65535
 2008100:	e0bfc70b 	ldhu	r2,-228(fp)
 2008104:	188dc83a 	sub	r6,r3,r2
 2008108:	00800304 	movi	r2,12
 200810c:	e0bfcd15 	stw	r2,-204(fp)
 2008110:	e13ffb17 	ldw	r4,-20(fp)
 2008114:	200ade80 	call	200ade8 <_ZN15CWelcomeMessageC1EPhi>
 2008118:	e13ffb17 	ldw	r4,-20(fp)
 200811c:	e0ffc917 	ldw	r3,-220(fp)
 2008120:	e1bffc17 	ldw	r6,-16(fp)
 2008124:	e1bffc17 	ldw	r6,-16(fp)
 2008128:	3185883a 	add	r2,r6,r6
 200812c:	1085883a 	add	r2,r2,r2
 2008130:	10c5883a 	add	r2,r2,r3
 2008134:	10800204 	addi	r2,r2,8
 2008138:	11000015 	stw	r4,0(r2)
				uiPayloadOffset += 12;
 200813c:	e0bfc70b 	ldhu	r2,-228(fp)
 2008140:	10800304 	addi	r2,r2,12
 2008144:	e0bfc70d 	sth	r2,-228(fp)
				m_uiMessageCount++;
 2008148:	e0bfc917 	ldw	r2,-220(fp)
 200814c:	10800a17 	ldw	r2,40(r2)
 2008150:	10c00044 	addi	r3,r2,1
 2008154:	e0bfc917 	ldw	r2,-220(fp)
 2008158:	10c00a15 	stw	r3,40(r2)
				break;
 200815c:	00027406 	br	2008b30 <_ZN12CCarProtocol11parsePacketEPhi+0xe58>
 2008160:	e0bffe17 	ldw	r2,-8(fp)
 2008164:	e0bfe415 	stw	r2,-112(fp)

// WelcomeMessage
			case CARP_MSGID_WELCOME:
				m_pMessages[m_uiMessageCount] = new CWelcomeMessage(
						pPacket + uiStartIdx + uiPayloadOffset,
						uiPayloadLength - uiPayloadOffset);
 2008168:	e13ffb17 	ldw	r4,-20(fp)
 200816c:	200c1380 	call	200c138 <_ZdlPv>
 2008170:	e0ffe417 	ldw	r3,-112(fp)
 2008174:	e0fffe15 	stw	r3,-8(fp)
 2008178:	00bfffc4 	movi	r2,-1
 200817c:	e0bfcd15 	stw	r2,-204(fp)
 2008180:	e13ffe17 	ldw	r4,-8(fp)
 2008184:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>

// MotorVelocity
			case CARP_MSGID_MOTORVELOCITY:
				m_pMessages[m_uiMessageCount] = new CMotorVelocityMessage(
						pPacket + uiStartIdx + uiPayloadOffset,
						uiPayloadLength - uiPayloadOffset);
 2008188:	e0bfc917 	ldw	r2,-220(fp)
 200818c:	10800a17 	ldw	r2,40(r2)
 2008190:	e0bffa15 	stw	r2,-24(fp)
 2008194:	00bfffc4 	movi	r2,-1
 2008198:	e0bfcd15 	stw	r2,-204(fp)
 200819c:	01000404 	movi	r4,16
 20081a0:	200c6200 	call	200c620 <_Znwm>
 20081a4:	e0bff915 	stw	r2,-28(fp)
 20081a8:	e0bfc78b 	ldhu	r2,-226(fp)
 20081ac:	1007883a 	mov	r3,r2
 20081b0:	e0bfca17 	ldw	r2,-216(fp)
 20081b4:	1887883a 	add	r3,r3,r2
 20081b8:	e0bfc70b 	ldhu	r2,-228(fp)
 20081bc:	188b883a 	add	r5,r3,r2
 20081c0:	e0bfc80b 	ldhu	r2,-224(fp)
 20081c4:	10ffffcc 	andi	r3,r2,65535
 20081c8:	e0bfc70b 	ldhu	r2,-228(fp)
 20081cc:	188dc83a 	sub	r6,r3,r2
 20081d0:	008002c4 	movi	r2,11
 20081d4:	e0bfcd15 	stw	r2,-204(fp)
 20081d8:	e13ff917 	ldw	r4,-28(fp)
 20081dc:	20098e80 	call	20098e8 <_ZN21CMotorVelocityMessageC1EPhi>
 20081e0:	e13ff917 	ldw	r4,-28(fp)
 20081e4:	e0ffc917 	ldw	r3,-220(fp)
 20081e8:	e17ffa17 	ldw	r5,-24(fp)
 20081ec:	e17ffa17 	ldw	r5,-24(fp)
 20081f0:	2945883a 	add	r2,r5,r5
 20081f4:	1085883a 	add	r2,r2,r2
 20081f8:	10c5883a 	add	r2,r2,r3
 20081fc:	10800204 	addi	r2,r2,8
 2008200:	11000015 	stw	r4,0(r2)
				uiPayloadOffset += 8;
 2008204:	e0bfc70b 	ldhu	r2,-228(fp)
 2008208:	10800204 	addi	r2,r2,8
 200820c:	e0bfc70d 	sth	r2,-228(fp)
				m_uiMessageCount++;
 2008210:	e0bfc917 	ldw	r2,-220(fp)
 2008214:	10800a17 	ldw	r2,40(r2)
 2008218:	10c00044 	addi	r3,r2,1
 200821c:	e0bfc917 	ldw	r2,-220(fp)
 2008220:	10c00a15 	stw	r3,40(r2)
				break;
 2008224:	00024206 	br	2008b30 <_ZN12CCarProtocol11parsePacketEPhi+0xe58>
 2008228:	e1bffe17 	ldw	r6,-8(fp)
 200822c:	e1bfe315 	stw	r6,-116(fp)

// MotorVelocity
			case CARP_MSGID_MOTORVELOCITY:
				m_pMessages[m_uiMessageCount] = new CMotorVelocityMessage(
						pPacket + uiStartIdx + uiPayloadOffset,
						uiPayloadLength - uiPayloadOffset);
 2008230:	e13ff917 	ldw	r4,-28(fp)
 2008234:	200c1380 	call	200c138 <_ZdlPv>
 2008238:	e0bfe317 	ldw	r2,-116(fp)
 200823c:	e0bffe15 	stw	r2,-8(fp)
 2008240:	00bfffc4 	movi	r2,-1
 2008244:	e0bfcd15 	stw	r2,-204(fp)
 2008248:	e13ffe17 	ldw	r4,-8(fp)
 200824c:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>

// MotorMeasurement
			case CARP_MSGID_MOTORMEASUREMENT:
				m_pMessages[m_uiMessageCount] = new CMotorMeasurementMessage(
						pPacket + uiStartIdx + uiPayloadOffset,
						uiPayloadLength - uiPayloadOffset);
 2008250:	e0bfc917 	ldw	r2,-220(fp)
 2008254:	10800a17 	ldw	r2,40(r2)
 2008258:	e0bff815 	stw	r2,-32(fp)
 200825c:	00bfffc4 	movi	r2,-1
 2008260:	e0bfcd15 	stw	r2,-204(fp)
 2008264:	01000604 	movi	r4,24
 2008268:	200c6200 	call	200c620 <_Znwm>
 200826c:	e0bff715 	stw	r2,-36(fp)
 2008270:	e0bfc78b 	ldhu	r2,-226(fp)
 2008274:	1007883a 	mov	r3,r2
 2008278:	e0bfca17 	ldw	r2,-216(fp)
 200827c:	1887883a 	add	r3,r3,r2
 2008280:	e0bfc70b 	ldhu	r2,-228(fp)
 2008284:	188b883a 	add	r5,r3,r2
 2008288:	e0bfc80b 	ldhu	r2,-224(fp)
 200828c:	10ffffcc 	andi	r3,r2,65535
 2008290:	e0bfc70b 	ldhu	r2,-228(fp)
 2008294:	188dc83a 	sub	r6,r3,r2
 2008298:	00800284 	movi	r2,10
 200829c:	e0bfcd15 	stw	r2,-204(fp)
 20082a0:	e13ff717 	ldw	r4,-36(fp)
 20082a4:	20090940 	call	2009094 <_ZN24CMotorMeasurementMessageC1EPhi>
 20082a8:	e13ff717 	ldw	r4,-36(fp)
 20082ac:	e0ffc917 	ldw	r3,-220(fp)
 20082b0:	e17ff817 	ldw	r5,-32(fp)
 20082b4:	e17ff817 	ldw	r5,-32(fp)
 20082b8:	2945883a 	add	r2,r5,r5
 20082bc:	1085883a 	add	r2,r2,r2
 20082c0:	10c5883a 	add	r2,r2,r3
 20082c4:	10800204 	addi	r2,r2,8
 20082c8:	11000015 	stw	r4,0(r2)
				uiPayloadOffset += 16;
 20082cc:	e0bfc70b 	ldhu	r2,-228(fp)
 20082d0:	10800404 	addi	r2,r2,16
 20082d4:	e0bfc70d 	sth	r2,-228(fp)
				m_uiMessageCount++;
 20082d8:	e0bfc917 	ldw	r2,-220(fp)
 20082dc:	10800a17 	ldw	r2,40(r2)
 20082e0:	10c00044 	addi	r3,r2,1
 20082e4:	e0bfc917 	ldw	r2,-220(fp)
 20082e8:	10c00a15 	stw	r3,40(r2)
				break;
 20082ec:	00021006 	br	2008b30 <_ZN12CCarProtocol11parsePacketEPhi+0xe58>
 20082f0:	e1bffe17 	ldw	r6,-8(fp)
 20082f4:	e1bfe215 	stw	r6,-120(fp)

// MotorMeasurement
			case CARP_MSGID_MOTORMEASUREMENT:
				m_pMessages[m_uiMessageCount] = new CMotorMeasurementMessage(
						pPacket + uiStartIdx + uiPayloadOffset,
						uiPayloadLength - uiPayloadOffset);
 20082f8:	e13ff717 	ldw	r4,-36(fp)
 20082fc:	200c1380 	call	200c138 <_ZdlPv>
 2008300:	e0bfe217 	ldw	r2,-120(fp)
 2008304:	e0bffe15 	stw	r2,-8(fp)
 2008308:	00bfffc4 	movi	r2,-1
 200830c:	e0bfcd15 	stw	r2,-204(fp)
 2008310:	e13ffe17 	ldw	r4,-8(fp)
 2008314:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>

// Ultrasound-Sensor
			case CARP_MSGID_ULTRASOUNDSENSOR:
				m_pMessages[m_uiMessageCount] = new CUltrasoundDistanceMessage(
						pPacket + uiStartIdx + uiPayloadOffset,
						uiPayloadLength - uiPayloadOffset);
 2008318:	e0bfc917 	ldw	r2,-220(fp)
 200831c:	10800a17 	ldw	r2,40(r2)
 2008320:	e0bff615 	stw	r2,-40(fp)
 2008324:	00bfffc4 	movi	r2,-1
 2008328:	e0bfcd15 	stw	r2,-204(fp)
 200832c:	01000404 	movi	r4,16
 2008330:	200c6200 	call	200c620 <_Znwm>
 2008334:	e0bff515 	stw	r2,-44(fp)
 2008338:	e0bfc78b 	ldhu	r2,-226(fp)
 200833c:	1007883a 	mov	r3,r2
 2008340:	e0bfca17 	ldw	r2,-216(fp)
 2008344:	1887883a 	add	r3,r3,r2
 2008348:	e0bfc70b 	ldhu	r2,-228(fp)
 200834c:	188b883a 	add	r5,r3,r2
 2008350:	e0bfc80b 	ldhu	r2,-224(fp)
 2008354:	10ffffcc 	andi	r3,r2,65535
 2008358:	e0bfc70b 	ldhu	r2,-228(fp)
 200835c:	188dc83a 	sub	r6,r3,r2
 2008360:	00800244 	movi	r2,9
 2008364:	e0bfcd15 	stw	r2,-204(fp)
 2008368:	e13ff517 	ldw	r4,-44(fp)
 200836c:	200a1800 	call	200a180 <_ZN26CUltrasoundDistanceMessageC1EPhi>
 2008370:	e13ff517 	ldw	r4,-44(fp)
 2008374:	e0ffc917 	ldw	r3,-220(fp)
 2008378:	e17ff617 	ldw	r5,-40(fp)
 200837c:	e17ff617 	ldw	r5,-40(fp)
 2008380:	2945883a 	add	r2,r5,r5
 2008384:	1085883a 	add	r2,r2,r2
 2008388:	10c5883a 	add	r2,r2,r3
 200838c:	10800204 	addi	r2,r2,8
 2008390:	11000015 	stw	r4,0(r2)
				uiPayloadOffset += 8;
 2008394:	e0bfc70b 	ldhu	r2,-228(fp)
 2008398:	10800204 	addi	r2,r2,8
 200839c:	e0bfc70d 	sth	r2,-228(fp)
				m_uiMessageCount++;
 20083a0:	e0bfc917 	ldw	r2,-220(fp)
 20083a4:	10800a17 	ldw	r2,40(r2)
 20083a8:	10c00044 	addi	r3,r2,1
 20083ac:	e0bfc917 	ldw	r2,-220(fp)
 20083b0:	10c00a15 	stw	r3,40(r2)
				break;
 20083b4:	0001de06 	br	2008b30 <_ZN12CCarProtocol11parsePacketEPhi+0xe58>
 20083b8:	e1bffe17 	ldw	r6,-8(fp)
 20083bc:	e1bfe115 	stw	r6,-124(fp)

// Ultrasound-Sensor
			case CARP_MSGID_ULTRASOUNDSENSOR:
				m_pMessages[m_uiMessageCount] = new CUltrasoundDistanceMessage(
						pPacket + uiStartIdx + uiPayloadOffset,
						uiPayloadLength - uiPayloadOffset);
 20083c0:	e13ff517 	ldw	r4,-44(fp)
 20083c4:	200c1380 	call	200c138 <_ZdlPv>
 20083c8:	e0bfe117 	ldw	r2,-124(fp)
 20083cc:	e0bffe15 	stw	r2,-8(fp)
 20083d0:	00bfffc4 	movi	r2,-1
 20083d4:	e0bfcd15 	stw	r2,-204(fp)
 20083d8:	e13ffe17 	ldw	r4,-8(fp)
 20083dc:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>

// Acceleration-Sensor
			case CARP_MSGID_ACCELERATIONSENSOR:
				m_pMessages[m_uiMessageCount] = new CAccelerationValuesMessage(
						pPacket + uiStartIdx + uiPayloadOffset,
						uiPayloadLength - uiPayloadOffset);
 20083e0:	e0bfc917 	ldw	r2,-220(fp)
 20083e4:	10800a17 	ldw	r2,40(r2)
 20083e8:	e0bff415 	stw	r2,-48(fp)
 20083ec:	00bfffc4 	movi	r2,-1
 20083f0:	e0bfcd15 	stw	r2,-204(fp)
 20083f4:	01000504 	movi	r4,20
 20083f8:	200c6200 	call	200c620 <_Znwm>
 20083fc:	e0bff315 	stw	r2,-52(fp)
 2008400:	e0bfc78b 	ldhu	r2,-226(fp)
 2008404:	1007883a 	mov	r3,r2
 2008408:	e0bfca17 	ldw	r2,-216(fp)
 200840c:	1887883a 	add	r3,r3,r2
 2008410:	e0bfc70b 	ldhu	r2,-228(fp)
 2008414:	188b883a 	add	r5,r3,r2
 2008418:	e0bfc80b 	ldhu	r2,-224(fp)
 200841c:	10ffffcc 	andi	r3,r2,65535
 2008420:	e0bfc70b 	ldhu	r2,-228(fp)
 2008424:	188dc83a 	sub	r6,r3,r2
 2008428:	00800204 	movi	r2,8
 200842c:	e0bfcd15 	stw	r2,-204(fp)
 2008430:	e13ff317 	ldw	r4,-52(fp)
 2008434:	20050600 	call	2005060 <_ZN26CAccelerationValuesMessageC1EPhi>
 2008438:	e13ff317 	ldw	r4,-52(fp)
 200843c:	e0ffc917 	ldw	r3,-220(fp)
 2008440:	e17ff417 	ldw	r5,-48(fp)
 2008444:	e17ff417 	ldw	r5,-48(fp)
 2008448:	2945883a 	add	r2,r5,r5
 200844c:	1085883a 	add	r2,r2,r2
 2008450:	10c5883a 	add	r2,r2,r3
 2008454:	10800204 	addi	r2,r2,8
 2008458:	11000015 	stw	r4,0(r2)
				uiPayloadOffset += 12;
 200845c:	e0bfc70b 	ldhu	r2,-228(fp)
 2008460:	10800304 	addi	r2,r2,12
 2008464:	e0bfc70d 	sth	r2,-228(fp)
				m_uiMessageCount++;
 2008468:	e0bfc917 	ldw	r2,-220(fp)
 200846c:	10800a17 	ldw	r2,40(r2)
 2008470:	10c00044 	addi	r3,r2,1
 2008474:	e0bfc917 	ldw	r2,-220(fp)
 2008478:	10c00a15 	stw	r3,40(r2)
				break;
 200847c:	0001ac06 	br	2008b30 <_ZN12CCarProtocol11parsePacketEPhi+0xe58>
 2008480:	e1bffe17 	ldw	r6,-8(fp)
 2008484:	e1bfe015 	stw	r6,-128(fp)

// Acceleration-Sensor
			case CARP_MSGID_ACCELERATIONSENSOR:
				m_pMessages[m_uiMessageCount] = new CAccelerationValuesMessage(
						pPacket + uiStartIdx + uiPayloadOffset,
						uiPayloadLength - uiPayloadOffset);
 2008488:	e13ff317 	ldw	r4,-52(fp)
 200848c:	200c1380 	call	200c138 <_ZdlPv>
 2008490:	e0bfe017 	ldw	r2,-128(fp)
 2008494:	e0bffe15 	stw	r2,-8(fp)
 2008498:	00bfffc4 	movi	r2,-1
 200849c:	e0bfcd15 	stw	r2,-204(fp)
 20084a0:	e13ffe17 	ldw	r4,-8(fp)
 20084a4:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>

// ADC-Sensor
			case CARP_MSGID_ADCSENSOR:
			{
// If subtype is 0 then it's a InfoMessage otherwise a ValuesMessage
				if (pPacket[uiStartIdx + uiPayloadOffset + 2] == 0)
 20084a8:	e0ffc78b 	ldhu	r3,-226(fp)
 20084ac:	e0bfc70b 	ldhu	r2,-228(fp)
 20084b0:	1885883a 	add	r2,r3,r2
 20084b4:	1007883a 	mov	r3,r2
 20084b8:	e0bfca17 	ldw	r2,-216(fp)
 20084bc:	1885883a 	add	r2,r3,r2
 20084c0:	10800084 	addi	r2,r2,2
 20084c4:	10800003 	ldbu	r2,0(r2)
 20084c8:	10803fcc 	andi	r2,r2,255
 20084cc:	1004c03a 	cmpne	r2,r2,zero
 20084d0:	10002a1e 	bne	r2,zero,200857c <_ZN12CCarProtocol11parsePacketEPhi+0x8a4>
					m_pMessages[m_uiMessageCount] = new CADCInfoMessage(
							pPacket + uiStartIdx + uiPayloadOffset,
							uiPayloadLength - uiPayloadOffset);
 20084d4:	e0bfc917 	ldw	r2,-220(fp)
 20084d8:	10800a17 	ldw	r2,40(r2)
 20084dc:	e0bff215 	stw	r2,-56(fp)
 20084e0:	00bfffc4 	movi	r2,-1
 20084e4:	e0bfcd15 	stw	r2,-204(fp)
 20084e8:	01000704 	movi	r4,28
 20084ec:	200c6200 	call	200c620 <_Znwm>
 20084f0:	e0bff115 	stw	r2,-60(fp)
 20084f4:	e0bfc78b 	ldhu	r2,-226(fp)
 20084f8:	1007883a 	mov	r3,r2
 20084fc:	e0bfca17 	ldw	r2,-216(fp)
 2008500:	1887883a 	add	r3,r3,r2
 2008504:	e0bfc70b 	ldhu	r2,-228(fp)
 2008508:	188b883a 	add	r5,r3,r2
 200850c:	e0bfc80b 	ldhu	r2,-224(fp)
 2008510:	10ffffcc 	andi	r3,r2,65535
 2008514:	e0bfc70b 	ldhu	r2,-228(fp)
 2008518:	188dc83a 	sub	r6,r3,r2
 200851c:	008001c4 	movi	r2,7
 2008520:	e0bfcd15 	stw	r2,-204(fp)
 2008524:	e13ff117 	ldw	r4,-60(fp)
 2008528:	2003ce40 	call	2003ce4 <_ZN15CADCInfoMessageC1EPhi>
 200852c:	e13ff117 	ldw	r4,-60(fp)
 2008530:	e0ffc917 	ldw	r3,-220(fp)
 2008534:	e17ff217 	ldw	r5,-56(fp)
 2008538:	e17ff217 	ldw	r5,-56(fp)
 200853c:	2945883a 	add	r2,r5,r5
 2008540:	1085883a 	add	r2,r2,r2
 2008544:	10c5883a 	add	r2,r2,r3
 2008548:	10800204 	addi	r2,r2,8
 200854c:	11000015 	stw	r4,0(r2)
 2008550:	00003406 	br	2008624 <_ZN12CCarProtocol11parsePacketEPhi+0x94c>
 2008554:	e1bffe17 	ldw	r6,-8(fp)
 2008558:	e1bfdf15 	stw	r6,-132(fp)
 200855c:	e13ff117 	ldw	r4,-60(fp)
 2008560:	200c1380 	call	200c138 <_ZdlPv>
 2008564:	e0bfdf17 	ldw	r2,-132(fp)
 2008568:	e0bffe15 	stw	r2,-8(fp)
 200856c:	00bfffc4 	movi	r2,-1
 2008570:	e0bfcd15 	stw	r2,-204(fp)
 2008574:	e13ffe17 	ldw	r4,-8(fp)
 2008578:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
				else
					m_pMessages[m_uiMessageCount] = new CADCValuesMessage(
							pPacket + uiStartIdx + uiPayloadOffset,
							uiPayloadLength - uiPayloadOffset);
 200857c:	e0bfc917 	ldw	r2,-220(fp)
 2008580:	10800a17 	ldw	r2,40(r2)
 2008584:	e0bff015 	stw	r2,-64(fp)
 2008588:	00bfffc4 	movi	r2,-1
 200858c:	e0bfcd15 	stw	r2,-204(fp)
 2008590:	01000404 	movi	r4,16
 2008594:	200c6200 	call	200c620 <_Znwm>
 2008598:	e0bfef15 	stw	r2,-68(fp)
 200859c:	e0bfc78b 	ldhu	r2,-226(fp)
 20085a0:	1007883a 	mov	r3,r2
 20085a4:	e0bfca17 	ldw	r2,-216(fp)
 20085a8:	1887883a 	add	r3,r3,r2
 20085ac:	e0bfc70b 	ldhu	r2,-228(fp)
 20085b0:	188b883a 	add	r5,r3,r2
 20085b4:	e0bfc80b 	ldhu	r2,-224(fp)
 20085b8:	10ffffcc 	andi	r3,r2,65535
 20085bc:	e0bfc70b 	ldhu	r2,-228(fp)
 20085c0:	188dc83a 	sub	r6,r3,r2
 20085c4:	00800184 	movi	r2,6
 20085c8:	e0bfcd15 	stw	r2,-204(fp)
 20085cc:	e13fef17 	ldw	r4,-68(fp)
 20085d0:	20046080 	call	2004608 <_ZN17CADCValuesMessageC1EPhi>
 20085d4:	e13fef17 	ldw	r4,-68(fp)
 20085d8:	e0ffc917 	ldw	r3,-220(fp)
 20085dc:	e17ff017 	ldw	r5,-64(fp)
 20085e0:	e17ff017 	ldw	r5,-64(fp)
 20085e4:	2945883a 	add	r2,r5,r5
 20085e8:	1085883a 	add	r2,r2,r2
 20085ec:	10c5883a 	add	r2,r2,r3
 20085f0:	10800204 	addi	r2,r2,8
 20085f4:	11000015 	stw	r4,0(r2)
 20085f8:	00000a06 	br	2008624 <_ZN12CCarProtocol11parsePacketEPhi+0x94c>
 20085fc:	e1bffe17 	ldw	r6,-8(fp)
 2008600:	e1bfde15 	stw	r6,-136(fp)
 2008604:	e13fef17 	ldw	r4,-68(fp)
 2008608:	200c1380 	call	200c138 <_ZdlPv>
 200860c:	e0bfde17 	ldw	r2,-136(fp)
 2008610:	e0bffe15 	stw	r2,-8(fp)
 2008614:	00bfffc4 	movi	r2,-1
 2008618:	e0bfcd15 	stw	r2,-204(fp)
 200861c:	e13ffe17 	ldw	r4,-8(fp)
 2008620:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>

// Make sure you add the right length to the offset!
				uiPayloadOffset += m_pMessages[m_uiMessageCount]->getLength();
 2008624:	e0bfc917 	ldw	r2,-220(fp)
 2008628:	10800a17 	ldw	r2,40(r2)
 200862c:	e0ffc917 	ldw	r3,-220(fp)
 2008630:	1085883a 	add	r2,r2,r2
 2008634:	1085883a 	add	r2,r2,r2
 2008638:	10c5883a 	add	r2,r2,r3
 200863c:	10800204 	addi	r2,r2,8
 2008640:	10800017 	ldw	r2,0(r2)
 2008644:	10800017 	ldw	r2,0(r2)
 2008648:	10800404 	addi	r2,r2,16
 200864c:	11400017 	ldw	r5,0(r2)
 2008650:	e0bfc917 	ldw	r2,-220(fp)
 2008654:	10800a17 	ldw	r2,40(r2)
 2008658:	e0ffc917 	ldw	r3,-220(fp)
 200865c:	1085883a 	add	r2,r2,r2
 2008660:	1085883a 	add	r2,r2,r2
 2008664:	10c5883a 	add	r2,r2,r3
 2008668:	10800204 	addi	r2,r2,8
 200866c:	11000017 	ldw	r4,0(r2)
 2008670:	00bfffc4 	movi	r2,-1
 2008674:	e0bfcd15 	stw	r2,-204(fp)
 2008678:	283ee83a 	callr	r5
 200867c:	1007883a 	mov	r3,r2
 2008680:	e0bfc70b 	ldhu	r2,-228(fp)
 2008684:	10c5883a 	add	r2,r2,r3
 2008688:	e0bfc70d 	sth	r2,-228(fp)
				m_uiMessageCount++;
 200868c:	e0bfc917 	ldw	r2,-220(fp)
 2008690:	10800a17 	ldw	r2,40(r2)
 2008694:	10c00044 	addi	r3,r2,1
 2008698:	e0bfc917 	ldw	r2,-220(fp)
 200869c:	10c00a15 	stw	r3,40(r2)
				break;
 20086a0:	00012306 	br	2008b30 <_ZN12CCarProtocol11parsePacketEPhi+0xe58>
			}

//do emergency braking
			case C2X_MSGID_EMERGENCY_BRAKE: {
				m_pMessages[m_uiMessageCount] = new CEmergencyBrakeMessage(pPacket+uiStartIdx+uiPayloadOffset, uiPayloadLength-uiPayloadOffset);
 20086a4:	e0bfc917 	ldw	r2,-220(fp)
 20086a8:	10800a17 	ldw	r2,40(r2)
 20086ac:	e0bfee15 	stw	r2,-72(fp)
 20086b0:	00bfffc4 	movi	r2,-1
 20086b4:	e0bfcd15 	stw	r2,-204(fp)
 20086b8:	01000304 	movi	r4,12
 20086bc:	200c6200 	call	200c620 <_Znwm>
 20086c0:	e0bfed15 	stw	r2,-76(fp)
 20086c4:	e0bfc78b 	ldhu	r2,-226(fp)
 20086c8:	1007883a 	mov	r3,r2
 20086cc:	e0bfca17 	ldw	r2,-216(fp)
 20086d0:	1887883a 	add	r3,r3,r2
 20086d4:	e0bfc70b 	ldhu	r2,-228(fp)
 20086d8:	188b883a 	add	r5,r3,r2
 20086dc:	e0bfc80b 	ldhu	r2,-224(fp)
 20086e0:	10ffffcc 	andi	r3,r2,65535
 20086e4:	e0bfc70b 	ldhu	r2,-228(fp)
 20086e8:	188dc83a 	sub	r6,r3,r2
 20086ec:	00800144 	movi	r2,5
 20086f0:	e0bfcd15 	stw	r2,-204(fp)
 20086f4:	e13fed17 	ldw	r4,-76(fp)
 20086f8:	2005db40 	call	2005db4 <_ZN22CEmergencyBrakeMessageC1EPhi>
 20086fc:	e13fed17 	ldw	r4,-76(fp)
 2008700:	e0ffc917 	ldw	r3,-220(fp)
 2008704:	e17fee17 	ldw	r5,-72(fp)
 2008708:	e17fee17 	ldw	r5,-72(fp)
 200870c:	2945883a 	add	r2,r5,r5
 2008710:	1085883a 	add	r2,r2,r2
 2008714:	10c5883a 	add	r2,r2,r3
 2008718:	10800204 	addi	r2,r2,8
 200871c:	11000015 	stw	r4,0(r2)
				uiPayloadOffset += 4;
 2008720:	e0bfc70b 	ldhu	r2,-228(fp)
 2008724:	10800104 	addi	r2,r2,4
 2008728:	e0bfc70d 	sth	r2,-228(fp)
				m_uiMessageCount++;
 200872c:	e0bfc917 	ldw	r2,-220(fp)
 2008730:	10800a17 	ldw	r2,40(r2)
 2008734:	10c00044 	addi	r3,r2,1
 2008738:	e0bfc917 	ldw	r2,-220(fp)
 200873c:	10c00a15 	stw	r3,40(r2)
				break;
 2008740:	0000fb06 	br	2008b30 <_ZN12CCarProtocol11parsePacketEPhi+0xe58>
 2008744:	e1bffe17 	ldw	r6,-8(fp)
 2008748:	e1bfdd15 	stw	r6,-140(fp)
				break;
			}

//do emergency braking
			case C2X_MSGID_EMERGENCY_BRAKE: {
				m_pMessages[m_uiMessageCount] = new CEmergencyBrakeMessage(pPacket+uiStartIdx+uiPayloadOffset, uiPayloadLength-uiPayloadOffset);
 200874c:	e13fed17 	ldw	r4,-76(fp)
 2008750:	200c1380 	call	200c138 <_ZdlPv>
 2008754:	e0bfdd17 	ldw	r2,-140(fp)
 2008758:	e0bffe15 	stw	r2,-8(fp)
 200875c:	00bfffc4 	movi	r2,-1
 2008760:	e0bfcd15 	stw	r2,-204(fp)
 2008764:	e13ffe17 	ldw	r4,-8(fp)
 2008768:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
			}

			//set motor speeds from external source
			case C2X_MSGID_CONTROL: // remote control/autonomous driving mode TODO: implement control function somewhere
			{
				m_pMessages[m_uiMessageCount] = new CControlMessage(pPacket+uiStartIdx+uiPayloadOffset, uiPayloadLength-uiPayloadOffset);
 200876c:	e0bfc917 	ldw	r2,-220(fp)
 2008770:	10800a17 	ldw	r2,40(r2)
 2008774:	e0bfec15 	stw	r2,-80(fp)
 2008778:	00bfffc4 	movi	r2,-1
 200877c:	e0bfcd15 	stw	r2,-204(fp)
 2008780:	01000504 	movi	r4,20
 2008784:	200c6200 	call	200c620 <_Znwm>
 2008788:	e0bfeb15 	stw	r2,-84(fp)
 200878c:	e0bfc78b 	ldhu	r2,-226(fp)
 2008790:	1007883a 	mov	r3,r2
 2008794:	e0bfca17 	ldw	r2,-216(fp)
 2008798:	1887883a 	add	r3,r3,r2
 200879c:	e0bfc70b 	ldhu	r2,-228(fp)
 20087a0:	188b883a 	add	r5,r3,r2
 20087a4:	e0bfc80b 	ldhu	r2,-224(fp)
 20087a8:	10ffffcc 	andi	r3,r2,65535
 20087ac:	e0bfc70b 	ldhu	r2,-228(fp)
 20087b0:	188dc83a 	sub	r6,r3,r2
 20087b4:	00800104 	movi	r2,4
 20087b8:	e0bfcd15 	stw	r2,-204(fp)
 20087bc:	e13feb17 	ldw	r4,-84(fp)
 20087c0:	20058bc0 	call	20058bc <_ZN15CControlMessageC1EPhi>
 20087c4:	e13feb17 	ldw	r4,-84(fp)
 20087c8:	e0ffc917 	ldw	r3,-220(fp)
 20087cc:	e17fec17 	ldw	r5,-80(fp)
 20087d0:	e17fec17 	ldw	r5,-80(fp)
 20087d4:	2945883a 	add	r2,r5,r5
 20087d8:	1085883a 	add	r2,r2,r2
 20087dc:	10c5883a 	add	r2,r2,r3
 20087e0:	10800204 	addi	r2,r2,8
 20087e4:	11000015 	stw	r4,0(r2)
				uiPayloadOffset += 12;
 20087e8:	e0bfc70b 	ldhu	r2,-228(fp)
 20087ec:	10800304 	addi	r2,r2,12
 20087f0:	e0bfc70d 	sth	r2,-228(fp)
				m_uiMessageCount++;
 20087f4:	e0bfc917 	ldw	r2,-220(fp)
 20087f8:	10800a17 	ldw	r2,40(r2)
 20087fc:	10c00044 	addi	r3,r2,1
 2008800:	e0bfc917 	ldw	r2,-220(fp)
 2008804:	10c00a15 	stw	r3,40(r2)
				break;
 2008808:	0000c906 	br	2008b30 <_ZN12CCarProtocol11parsePacketEPhi+0xe58>
 200880c:	e1bffe17 	ldw	r6,-8(fp)
 2008810:	e1bfdc15 	stw	r6,-144(fp)
			}

			//set motor speeds from external source
			case C2X_MSGID_CONTROL: // remote control/autonomous driving mode TODO: implement control function somewhere
			{
				m_pMessages[m_uiMessageCount] = new CControlMessage(pPacket+uiStartIdx+uiPayloadOffset, uiPayloadLength-uiPayloadOffset);
 2008814:	e13feb17 	ldw	r4,-84(fp)
 2008818:	200c1380 	call	200c138 <_ZdlPv>
 200881c:	e0bfdc17 	ldw	r2,-144(fp)
 2008820:	e0bffe15 	stw	r2,-8(fp)
 2008824:	00bfffc4 	movi	r2,-1
 2008828:	e0bfcd15 	stw	r2,-204(fp)
 200882c:	e13ffe17 	ldw	r4,-8(fp)
 2008830:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
				break;
			}

			//tell our state
			case C2X_MSGID_INFO_STATE: {
				m_pMessages[m_uiMessageCount] = new CInfoStateMessage(pPacket+uiStartIdx+uiPayloadOffset, uiPayloadLength-uiPayloadOffset);
 2008834:	e0bfc917 	ldw	r2,-220(fp)
 2008838:	10800a17 	ldw	r2,40(r2)
 200883c:	e0bfea15 	stw	r2,-88(fp)
 2008840:	00bfffc4 	movi	r2,-1
 2008844:	e0bfcd15 	stw	r2,-204(fp)
 2008848:	01000304 	movi	r4,12
 200884c:	200c6200 	call	200c620 <_Znwm>
 2008850:	e0bfe915 	stw	r2,-92(fp)
 2008854:	e0bfc78b 	ldhu	r2,-226(fp)
 2008858:	1007883a 	mov	r3,r2
 200885c:	e0bfca17 	ldw	r2,-216(fp)
 2008860:	1887883a 	add	r3,r3,r2
 2008864:	e0bfc70b 	ldhu	r2,-228(fp)
 2008868:	188b883a 	add	r5,r3,r2
 200886c:	e0bfc80b 	ldhu	r2,-224(fp)
 2008870:	10ffffcc 	andi	r3,r2,65535
 2008874:	e0bfc70b 	ldhu	r2,-228(fp)
 2008878:	188dc83a 	sub	r6,r3,r2
 200887c:	008000c4 	movi	r2,3
 2008880:	e0bfcd15 	stw	r2,-204(fp)
 2008884:	e13fe917 	ldw	r4,-92(fp)
 2008888:	20066d40 	call	20066d4 <_ZN17CInfoStateMessageC1EPhi>
 200888c:	e13fe917 	ldw	r4,-92(fp)
 2008890:	e0ffc917 	ldw	r3,-220(fp)
 2008894:	e17fea17 	ldw	r5,-88(fp)
 2008898:	e17fea17 	ldw	r5,-88(fp)
 200889c:	2945883a 	add	r2,r5,r5
 20088a0:	1085883a 	add	r2,r2,r2
 20088a4:	10c5883a 	add	r2,r2,r3
 20088a8:	10800204 	addi	r2,r2,8
 20088ac:	11000015 	stw	r4,0(r2)
				uiPayloadOffset += 4;
 20088b0:	e0bfc70b 	ldhu	r2,-228(fp)
 20088b4:	10800104 	addi	r2,r2,4
 20088b8:	e0bfc70d 	sth	r2,-228(fp)
				m_uiMessageCount++;
 20088bc:	e0bfc917 	ldw	r2,-220(fp)
 20088c0:	10800a17 	ldw	r2,40(r2)
 20088c4:	10c00044 	addi	r3,r2,1
 20088c8:	e0bfc917 	ldw	r2,-220(fp)
 20088cc:	10c00a15 	stw	r3,40(r2)
				break;
 20088d0:	00009706 	br	2008b30 <_ZN12CCarProtocol11parsePacketEPhi+0xe58>
 20088d4:	e1bffe17 	ldw	r6,-8(fp)
 20088d8:	e1bfdb15 	stw	r6,-148(fp)
				break;
			}

			//tell our state
			case C2X_MSGID_INFO_STATE: {
				m_pMessages[m_uiMessageCount] = new CInfoStateMessage(pPacket+uiStartIdx+uiPayloadOffset, uiPayloadLength-uiPayloadOffset);
 20088dc:	e13fe917 	ldw	r4,-92(fp)
 20088e0:	200c1380 	call	200c138 <_ZdlPv>
 20088e4:	e0bfdb17 	ldw	r2,-148(fp)
 20088e8:	e0bffe15 	stw	r2,-8(fp)
 20088ec:	00bfffc4 	movi	r2,-1
 20088f0:	e0bfcd15 	stw	r2,-204(fp)
 20088f4:	e13ffe17 	ldw	r4,-8(fp)
 20088f8:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
				break;
			}

			//tell our sensor data
			case C2X_MSGID_INFO_SENSORS: {
				m_pMessages[m_uiMessageCount] = new CInfoSensorMessage(pPacket+uiStartIdx+uiPayloadOffset, uiPayloadLength-uiPayloadOffset);
 20088fc:	e0bfc917 	ldw	r2,-220(fp)
 2008900:	10800a17 	ldw	r2,40(r2)
 2008904:	e0bfe815 	stw	r2,-96(fp)
 2008908:	00bfffc4 	movi	r2,-1
 200890c:	e0bfcd15 	stw	r2,-204(fp)
 2008910:	01000304 	movi	r4,12
 2008914:	200c6200 	call	200c620 <_Znwm>
 2008918:	e0bfe715 	stw	r2,-100(fp)
 200891c:	e0bfc78b 	ldhu	r2,-226(fp)
 2008920:	1007883a 	mov	r3,r2
 2008924:	e0bfca17 	ldw	r2,-216(fp)
 2008928:	1887883a 	add	r3,r3,r2
 200892c:	e0bfc70b 	ldhu	r2,-228(fp)
 2008930:	188b883a 	add	r5,r3,r2
 2008934:	e0bfc80b 	ldhu	r2,-224(fp)
 2008938:	10ffffcc 	andi	r3,r2,65535
 200893c:	e0bfc70b 	ldhu	r2,-228(fp)
 2008940:	188dc83a 	sub	r6,r3,r2
 2008944:	00800084 	movi	r2,2
 2008948:	e0bfcd15 	stw	r2,-204(fp)
 200894c:	e13fe717 	ldw	r4,-100(fp)
 2008950:	20062440 	call	2006244 <_ZN18CInfoSensorMessageC1EPhi>
 2008954:	e13fe717 	ldw	r4,-100(fp)
 2008958:	e0ffc917 	ldw	r3,-220(fp)
 200895c:	e17fe817 	ldw	r5,-96(fp)
 2008960:	e17fe817 	ldw	r5,-96(fp)
 2008964:	2945883a 	add	r2,r5,r5
 2008968:	1085883a 	add	r2,r2,r2
 200896c:	10c5883a 	add	r2,r2,r3
 2008970:	10800204 	addi	r2,r2,8
 2008974:	11000015 	stw	r4,0(r2)
				uiPayloadOffset += 4;
 2008978:	e0bfc70b 	ldhu	r2,-228(fp)
 200897c:	10800104 	addi	r2,r2,4
 2008980:	e0bfc70d 	sth	r2,-228(fp)
				m_uiMessageCount++;
 2008984:	e0bfc917 	ldw	r2,-220(fp)
 2008988:	10800a17 	ldw	r2,40(r2)
 200898c:	10c00044 	addi	r3,r2,1
 2008990:	e0bfc917 	ldw	r2,-220(fp)
 2008994:	10c00a15 	stw	r3,40(r2)
				break;
 2008998:	00006506 	br	2008b30 <_ZN12CCarProtocol11parsePacketEPhi+0xe58>
 200899c:	e1bffe17 	ldw	r6,-8(fp)
 20089a0:	e1bfda15 	stw	r6,-152(fp)
				break;
			}

			//tell our sensor data
			case C2X_MSGID_INFO_SENSORS: {
				m_pMessages[m_uiMessageCount] = new CInfoSensorMessage(pPacket+uiStartIdx+uiPayloadOffset, uiPayloadLength-uiPayloadOffset);
 20089a4:	e13fe717 	ldw	r4,-100(fp)
 20089a8:	200c1380 	call	200c138 <_ZdlPv>
 20089ac:	e0bfda17 	ldw	r2,-152(fp)
 20089b0:	e0bffe15 	stw	r2,-8(fp)
 20089b4:	00bfffc4 	movi	r2,-1
 20089b8:	e0bfcd15 	stw	r2,-204(fp)
 20089bc:	e13ffe17 	ldw	r4,-8(fp)
 20089c0:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
				break;
			}

			//set external source as controlling unit
			case C2X_MSGID_REMOTE_CONTROL: {
				m_pMessages[m_uiMessageCount] = new CRemoteControlMessage(pPacket+uiStartIdx+uiPayloadOffset, uiPayloadLength-uiPayloadOffset);
 20089c4:	e0bfc917 	ldw	r2,-220(fp)
 20089c8:	10800a17 	ldw	r2,40(r2)
 20089cc:	e0bfe615 	stw	r2,-104(fp)
 20089d0:	00bfffc4 	movi	r2,-1
 20089d4:	e0bfcd15 	stw	r2,-204(fp)
 20089d8:	01000604 	movi	r4,24
 20089dc:	200c6200 	call	200c620 <_Znwm>
 20089e0:	e0bfe515 	stw	r2,-108(fp)
 20089e4:	e0bfc78b 	ldhu	r2,-226(fp)
 20089e8:	1007883a 	mov	r3,r2
 20089ec:	e0bfca17 	ldw	r2,-216(fp)
 20089f0:	1887883a 	add	r3,r3,r2
 20089f4:	e0bfc70b 	ldhu	r2,-228(fp)
 20089f8:	188b883a 	add	r5,r3,r2
 20089fc:	e0bfc80b 	ldhu	r2,-224(fp)
 2008a00:	10ffffcc 	andi	r3,r2,65535
 2008a04:	e0bfc70b 	ldhu	r2,-228(fp)
 2008a08:	188dc83a 	sub	r6,r3,r2
 2008a0c:	00800044 	movi	r2,1
 2008a10:	e0bfcd15 	stw	r2,-204(fp)
 2008a14:	e13fe517 	ldw	r4,-108(fp)
 2008a18:	2006bbc0 	call	2006bbc <_ZN21CRemoteControlMessageC1EPhi>
 2008a1c:	e13fe517 	ldw	r4,-108(fp)
 2008a20:	e0ffc917 	ldw	r3,-220(fp)
 2008a24:	e17fe617 	ldw	r5,-104(fp)
 2008a28:	e17fe617 	ldw	r5,-104(fp)
 2008a2c:	2945883a 	add	r2,r5,r5
 2008a30:	1085883a 	add	r2,r2,r2
 2008a34:	10c5883a 	add	r2,r2,r3
 2008a38:	10800204 	addi	r2,r2,8
 2008a3c:	11000015 	stw	r4,0(r2)
				uiPayloadOffset += 8;
 2008a40:	e0bfc70b 	ldhu	r2,-228(fp)
 2008a44:	10800204 	addi	r2,r2,8
 2008a48:	e0bfc70d 	sth	r2,-228(fp)
				m_uiMessageCount++;
 2008a4c:	e0bfc917 	ldw	r2,-220(fp)
 2008a50:	10800a17 	ldw	r2,40(r2)
 2008a54:	10c00044 	addi	r3,r2,1
 2008a58:	e0bfc917 	ldw	r2,-220(fp)
 2008a5c:	10c00a15 	stw	r3,40(r2)
				break;
 2008a60:	00003306 	br	2008b30 <_ZN12CCarProtocol11parsePacketEPhi+0xe58>
 2008a64:	e7003904 	addi	fp,fp,228
 2008a68:	e1bfcd17 	ldw	r6,-204(fp)
 2008a6c:	e1bfff15 	stw	r6,-4(fp)
 2008a70:	e0bfce17 	ldw	r2,-200(fp)
 2008a74:	e0bffe15 	stw	r2,-8(fp)
 2008a78:	e0ffff17 	ldw	r3,-4(fp)
 2008a7c:	18800060 	cmpeqi	r2,r3,1
 2008a80:	103fc61e 	bne	r2,zero,200899c <_ZN12CCarProtocol11parsePacketEPhi+0xcc4>
 2008a84:	e13fff17 	ldw	r4,-4(fp)
 2008a88:	208000a0 	cmpeqi	r2,r4,2
 2008a8c:	103f911e 	bne	r2,zero,20088d4 <_ZN12CCarProtocol11parsePacketEPhi+0xbfc>
 2008a90:	e17fff17 	ldw	r5,-4(fp)
 2008a94:	288000e0 	cmpeqi	r2,r5,3
 2008a98:	103f5c1e 	bne	r2,zero,200880c <_ZN12CCarProtocol11parsePacketEPhi+0xb34>
 2008a9c:	e1bfff17 	ldw	r6,-4(fp)
 2008aa0:	30800120 	cmpeqi	r2,r6,4
 2008aa4:	103f271e 	bne	r2,zero,2008744 <_ZN12CCarProtocol11parsePacketEPhi+0xa6c>
 2008aa8:	e0ffff17 	ldw	r3,-4(fp)
 2008aac:	18800160 	cmpeqi	r2,r3,5
 2008ab0:	103ed21e 	bne	r2,zero,20085fc <_ZN12CCarProtocol11parsePacketEPhi+0x924>
 2008ab4:	e13fff17 	ldw	r4,-4(fp)
 2008ab8:	208001a0 	cmpeqi	r2,r4,6
 2008abc:	103ea51e 	bne	r2,zero,2008554 <_ZN12CCarProtocol11parsePacketEPhi+0x87c>
 2008ac0:	e17fff17 	ldw	r5,-4(fp)
 2008ac4:	288001e0 	cmpeqi	r2,r5,7
 2008ac8:	103e6d1e 	bne	r2,zero,2008480 <_ZN12CCarProtocol11parsePacketEPhi+0x7a8>
 2008acc:	e1bfff17 	ldw	r6,-4(fp)
 2008ad0:	30800220 	cmpeqi	r2,r6,8
 2008ad4:	103e381e 	bne	r2,zero,20083b8 <_ZN12CCarProtocol11parsePacketEPhi+0x6e0>
 2008ad8:	e0ffff17 	ldw	r3,-4(fp)
 2008adc:	18800260 	cmpeqi	r2,r3,9
 2008ae0:	103e031e 	bne	r2,zero,20082f0 <_ZN12CCarProtocol11parsePacketEPhi+0x618>
 2008ae4:	e13fff17 	ldw	r4,-4(fp)
 2008ae8:	208002a0 	cmpeqi	r2,r4,10
 2008aec:	103dce1e 	bne	r2,zero,2008228 <_ZN12CCarProtocol11parsePacketEPhi+0x550>
 2008af0:	e17fff17 	ldw	r5,-4(fp)
 2008af4:	288002e0 	cmpeqi	r2,r5,11
 2008af8:	103d991e 	bne	r2,zero,2008160 <_ZN12CCarProtocol11parsePacketEPhi+0x488>
 2008afc:	e1bffe17 	ldw	r6,-8(fp)
 2008b00:	e1bfd915 	stw	r6,-156(fp)
				break;
			}

			//set external source as controlling unit
			case C2X_MSGID_REMOTE_CONTROL: {
				m_pMessages[m_uiMessageCount] = new CRemoteControlMessage(pPacket+uiStartIdx+uiPayloadOffset, uiPayloadLength-uiPayloadOffset);
 2008b04:	e13fe517 	ldw	r4,-108(fp)
 2008b08:	200c1380 	call	200c138 <_ZdlPv>
 2008b0c:	e0bfd917 	ldw	r2,-156(fp)
 2008b10:	e0bffe15 	stw	r2,-8(fp)
 2008b14:	00bfffc4 	movi	r2,-1
 2008b18:	e0bfcd15 	stw	r2,-204(fp)
 2008b1c:	e13ffe17 	ldw	r4,-8(fp)
 2008b20:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>

// Message ID is not known, so we also don't know the length of this message.
// We can't parse further, as we don't know the starting point of the next message.
// Set m_bValid false and return immediate!
			default:
				m_bValid = false;
 2008b24:	e0bfc917 	ldw	r2,-220(fp)
 2008b28:	10000105 	stb	zero,4(r2)
				return;
 2008b2c:	00000806 	br	2008b50 <_ZN12CCarProtocol11parsePacketEPhi+0xe78>

// Initialize uiPayloadOffset to 0
		uiPayloadOffset = 0;

// Do as long there are messages (payload bytes) left and the count of messages dont exceeds 8.
		while (uiPayloadOffset < uiPayloadLength && m_uiMessageCount < 8) {
 2008b30:	e0bfc80b 	ldhu	r2,-224(fp)
 2008b34:	e0ffc70b 	ldhu	r3,-228(fp)
 2008b38:	10bfffcc 	andi	r2,r2,65535
 2008b3c:	1880042e 	bgeu	r3,r2,2008b50 <_ZN12CCarProtocol11parsePacketEPhi+0xe78>
 2008b40:	e0bfc917 	ldw	r2,-220(fp)
 2008b44:	10800a17 	ldw	r2,40(r2)
 2008b48:	10800230 	cmpltui	r2,r2,8
 2008b4c:	103ce61e 	bne	r2,zero,2007ee8 <_ZN12CCarProtocol11parsePacketEPhi+0x210>
 2008b50:	e13fcc04 	addi	r4,fp,-208
 2008b54:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
				return;
			}
		}
	}

}
 2008b58:	e037883a 	mov	sp,fp
 2008b5c:	dfc00917 	ldw	ra,36(sp)
 2008b60:	df000817 	ldw	fp,32(sp)
 2008b64:	ddc00717 	ldw	r23,28(sp)
 2008b68:	dd800617 	ldw	r22,24(sp)
 2008b6c:	dd400517 	ldw	r21,20(sp)
 2008b70:	dd000417 	ldw	r20,16(sp)
 2008b74:	dcc00317 	ldw	r19,12(sp)
 2008b78:	dc800217 	ldw	r18,8(sp)
 2008b7c:	dc400117 	ldw	r17,4(sp)
 2008b80:	dc000017 	ldw	r16,0(sp)
 2008b84:	dec00a04 	addi	sp,sp,40
 2008b88:	f800283a 	ret

02008b8c <_ZN12CCarProtocolC1EPhi>:
#include "CInfoStateMessage.h"
#include "CInfoSensorMessage.h"

//end of includes

CCarProtocol::CCarProtocol(alt_u8 *pPacket, int iLength) {
 2008b8c:	defffb04 	addi	sp,sp,-20
 2008b90:	dfc00415 	stw	ra,16(sp)
 2008b94:	df000315 	stw	fp,12(sp)
 2008b98:	df000304 	addi	fp,sp,12
 2008b9c:	e13ffd15 	stw	r4,-12(fp)
 2008ba0:	e17ffe15 	stw	r5,-8(fp)
 2008ba4:	e1bfff15 	stw	r6,-4(fp)
 2008ba8:	00c080b4 	movhi	r3,514
 2008bac:	18eeae04 	addi	r3,r3,-17736
 2008bb0:	e0bffd17 	ldw	r2,-12(fp)
 2008bb4:	10c00015 	stw	r3,0(r2)
	m_bValid = false;
 2008bb8:	e0bffd17 	ldw	r2,-12(fp)
 2008bbc:	10000105 	stb	zero,4(r2)
	m_bThereIsMore = false;
 2008bc0:	e0bffd17 	ldw	r2,-12(fp)
 2008bc4:	10000145 	stb	zero,5(r2)

	parsePacket(pPacket, iLength);
 2008bc8:	e13ffd17 	ldw	r4,-12(fp)
 2008bcc:	e17ffe17 	ldw	r5,-8(fp)
 2008bd0:	e1bfff17 	ldw	r6,-4(fp)
 2008bd4:	2007cd80 	call	2007cd8 <_ZN12CCarProtocol11parsePacketEPhi>
}
 2008bd8:	e037883a 	mov	sp,fp
 2008bdc:	dfc00117 	ldw	ra,4(sp)
 2008be0:	df000017 	ldw	fp,0(sp)
 2008be4:	dec00204 	addi	sp,sp,8
 2008be8:	f800283a 	ret

02008bec <_ZN12CCarProtocolC2EPhi>:
#include "CInfoStateMessage.h"
#include "CInfoSensorMessage.h"

//end of includes

CCarProtocol::CCarProtocol(alt_u8 *pPacket, int iLength) {
 2008bec:	defffb04 	addi	sp,sp,-20
 2008bf0:	dfc00415 	stw	ra,16(sp)
 2008bf4:	df000315 	stw	fp,12(sp)
 2008bf8:	df000304 	addi	fp,sp,12
 2008bfc:	e13ffd15 	stw	r4,-12(fp)
 2008c00:	e17ffe15 	stw	r5,-8(fp)
 2008c04:	e1bfff15 	stw	r6,-4(fp)
 2008c08:	00c080b4 	movhi	r3,514
 2008c0c:	18eeae04 	addi	r3,r3,-17736
 2008c10:	e0bffd17 	ldw	r2,-12(fp)
 2008c14:	10c00015 	stw	r3,0(r2)
	m_bValid = false;
 2008c18:	e0bffd17 	ldw	r2,-12(fp)
 2008c1c:	10000105 	stb	zero,4(r2)
	m_bThereIsMore = false;
 2008c20:	e0bffd17 	ldw	r2,-12(fp)
 2008c24:	10000145 	stb	zero,5(r2)

	parsePacket(pPacket, iLength);
 2008c28:	e13ffd17 	ldw	r4,-12(fp)
 2008c2c:	e17ffe17 	ldw	r5,-8(fp)
 2008c30:	e1bfff17 	ldw	r6,-4(fp)
 2008c34:	2007cd80 	call	2007cd8 <_ZN12CCarProtocol11parsePacketEPhi>
}
 2008c38:	e037883a 	mov	sp,fp
 2008c3c:	dfc00117 	ldw	ra,4(sp)
 2008c40:	df000017 	ldw	fp,0(sp)
 2008c44:	dec00204 	addi	sp,sp,8
 2008c48:	f800283a 	ret

02008c4c <_ZN24CMotorMeasurementMessage8doActionEv>:

CMotorMeasurementMessage::~CMotorMeasurementMessage()
{
}

void CMotorMeasurementMessage::doAction()
 2008c4c:	defffe04 	addi	sp,sp,-8
 2008c50:	df000115 	stw	fp,4(sp)
 2008c54:	df000104 	addi	fp,sp,4
 2008c58:	e13fff15 	stw	r4,-4(fp)
{

}
 2008c5c:	e037883a 	mov	sp,fp
 2008c60:	df000017 	ldw	fp,0(sp)
 2008c64:	dec00104 	addi	sp,sp,4
 2008c68:	f800283a 	ret

02008c6c <_ZN24CMotorMeasurementMessage9getLengthEv>:

	return m_bValid;
}


alt_u32 CMotorMeasurementMessage::getLength()
 2008c6c:	defffe04 	addi	sp,sp,-8
 2008c70:	df000115 	stw	fp,4(sp)
 2008c74:	df000104 	addi	fp,sp,4
 2008c78:	e13fff15 	stw	r4,-4(fp)
{
	return 16;
 2008c7c:	00800404 	movi	r2,16
}
 2008c80:	e037883a 	mov	sp,fp
 2008c84:	df000017 	ldw	fp,0(sp)
 2008c88:	dec00104 	addi	sp,sp,4
 2008c8c:	f800283a 	ret

02008c90 <_ZN24CMotorMeasurementMessage13answerMessageEstsss>:


void CMotorMeasurementMessage::answerMessage(alt_16 iMaxSpeed, alt_u16 uiWheelCircumference, alt_16 iPType, alt_16 iIType, alt_16 iDType)
 2008c90:	defff904 	addi	sp,sp,-28
 2008c94:	df000615 	stw	fp,24(sp)
 2008c98:	df000604 	addi	fp,sp,24
 2008c9c:	e13ffa15 	stw	r4,-24(fp)
 2008ca0:	e0800117 	ldw	r2,4(fp)
 2008ca4:	e0c00217 	ldw	r3,8(fp)
 2008ca8:	e17ffb0d 	sth	r5,-20(fp)
 2008cac:	e1bffc0d 	sth	r6,-16(fp)
 2008cb0:	e1fffd0d 	sth	r7,-12(fp)
 2008cb4:	e0bffe0d 	sth	r2,-8(fp)
 2008cb8:	e0ffff0d 	sth	r3,-4(fp)
{
	m_iMaxSpeed = iMaxSpeed;
 2008cbc:	e0fffa17 	ldw	r3,-24(fp)
 2008cc0:	e0bffb0b 	ldhu	r2,-20(fp)
 2008cc4:	1880028d 	sth	r2,10(r3)

	m_uiWheelCircumference = uiWheelCircumference;
 2008cc8:	e0fffa17 	ldw	r3,-24(fp)
 2008ccc:	e0bffc0b 	ldhu	r2,-16(fp)
 2008cd0:	1880030d 	sth	r2,12(r3)

	m_iPType = iPType;
 2008cd4:	e0fffa17 	ldw	r3,-24(fp)
 2008cd8:	e0bffd0b 	ldhu	r2,-12(fp)
 2008cdc:	1880038d 	sth	r2,14(r3)

	m_iIType = iIType;
 2008ce0:	e0fffa17 	ldw	r3,-24(fp)
 2008ce4:	e0bffe0b 	ldhu	r2,-8(fp)
 2008ce8:	1880040d 	sth	r2,16(r3)

	m_iDType = iDType;
 2008cec:	e0fffa17 	ldw	r3,-24(fp)
 2008cf0:	e0bfff0b 	ldhu	r2,-4(fp)
 2008cf4:	1880048d 	sth	r2,18(r3)

	m_uiFlags = m_uiFlags | 0x01; // Response-Flag setzen
 2008cf8:	e0bffa17 	ldw	r2,-24(fp)
 2008cfc:	108001c3 	ldbu	r2,7(r2)
 2008d00:	10800054 	ori	r2,r2,1
 2008d04:	1007883a 	mov	r3,r2
 2008d08:	e0bffa17 	ldw	r2,-24(fp)
 2008d0c:	10c001c5 	stb	r3,7(r2)

}
 2008d10:	e037883a 	mov	sp,fp
 2008d14:	df000017 	ldw	fp,0(sp)
 2008d18:	dec00104 	addi	sp,sp,4
 2008d1c:	f800283a 	ret

02008d20 <_ZN24CMotorMeasurementMessage8getBytesEPh>:

	m_bValid = true;

}

bool CMotorMeasurementMessage::getBytes(alt_u8 *pMessage)
 2008d20:	defffc04 	addi	sp,sp,-16
 2008d24:	dfc00315 	stw	ra,12(sp)
 2008d28:	df000215 	stw	fp,8(sp)
 2008d2c:	df000204 	addi	fp,sp,8
 2008d30:	e13ffe15 	stw	r4,-8(fp)
 2008d34:	e17fff15 	stw	r5,-4(fp)
{
	CCarMessage::getBytes(pMessage);
 2008d38:	e13ffe17 	ldw	r4,-8(fp)
 2008d3c:	e17fff17 	ldw	r5,-4(fp)
 2008d40:	2006f040 	call	2006f04 <_ZN11CCarMessage8getBytesEPh>

	*((alt_16*) (pMessage+4)) = m_iMaxSpeed;
 2008d44:	e0bfff17 	ldw	r2,-4(fp)
 2008d48:	10800104 	addi	r2,r2,4
 2008d4c:	1007883a 	mov	r3,r2
 2008d50:	e0bffe17 	ldw	r2,-8(fp)
 2008d54:	1080028b 	ldhu	r2,10(r2)
 2008d58:	1880000d 	sth	r2,0(r3)
	swapEndianess(pMessage+4, 2);
 2008d5c:	e0bfff17 	ldw	r2,-4(fp)
 2008d60:	11000104 	addi	r4,r2,4
 2008d64:	01400084 	movi	r5,2
 2008d68:	20002480 	call	2000248 <_Z13swapEndianessPhm>

	*((alt_16*) (pMessage+6)) = m_uiWheelCircumference;
 2008d6c:	e0bfff17 	ldw	r2,-4(fp)
 2008d70:	10800184 	addi	r2,r2,6
 2008d74:	1007883a 	mov	r3,r2
 2008d78:	e0bffe17 	ldw	r2,-8(fp)
 2008d7c:	1080030b 	ldhu	r2,12(r2)
 2008d80:	1880000d 	sth	r2,0(r3)
	swapEndianess(pMessage+6, 2);
 2008d84:	e0bfff17 	ldw	r2,-4(fp)
 2008d88:	11000184 	addi	r4,r2,6
 2008d8c:	01400084 	movi	r5,2
 2008d90:	20002480 	call	2000248 <_Z13swapEndianessPhm>

	*((alt_16*) (pMessage+8)) = m_iPType;
 2008d94:	e0bfff17 	ldw	r2,-4(fp)
 2008d98:	10800204 	addi	r2,r2,8
 2008d9c:	1007883a 	mov	r3,r2
 2008da0:	e0bffe17 	ldw	r2,-8(fp)
 2008da4:	1080038b 	ldhu	r2,14(r2)
 2008da8:	1880000d 	sth	r2,0(r3)
	swapEndianess(pMessage+8, 2);
 2008dac:	e0bfff17 	ldw	r2,-4(fp)
 2008db0:	11000204 	addi	r4,r2,8
 2008db4:	01400084 	movi	r5,2
 2008db8:	20002480 	call	2000248 <_Z13swapEndianessPhm>

	*((alt_16*) (pMessage+10)) = m_iIType;
 2008dbc:	e0bfff17 	ldw	r2,-4(fp)
 2008dc0:	10800284 	addi	r2,r2,10
 2008dc4:	1007883a 	mov	r3,r2
 2008dc8:	e0bffe17 	ldw	r2,-8(fp)
 2008dcc:	1080040b 	ldhu	r2,16(r2)
 2008dd0:	1880000d 	sth	r2,0(r3)
	swapEndianess(pMessage+10, 2);
 2008dd4:	e0bfff17 	ldw	r2,-4(fp)
 2008dd8:	11000284 	addi	r4,r2,10
 2008ddc:	01400084 	movi	r5,2
 2008de0:	20002480 	call	2000248 <_Z13swapEndianessPhm>

	*((alt_16*) (pMessage+12)) = m_iDType;
 2008de4:	e0bfff17 	ldw	r2,-4(fp)
 2008de8:	10800304 	addi	r2,r2,12
 2008dec:	1007883a 	mov	r3,r2
 2008df0:	e0bffe17 	ldw	r2,-8(fp)
 2008df4:	1080048b 	ldhu	r2,18(r2)
 2008df8:	1880000d 	sth	r2,0(r3)
	swapEndianess(pMessage+12, 2);
 2008dfc:	e0bfff17 	ldw	r2,-4(fp)
 2008e00:	11000304 	addi	r4,r2,12
 2008e04:	01400084 	movi	r5,2
 2008e08:	20002480 	call	2000248 <_Z13swapEndianessPhm>

	pMessage[14] = m_uiReserved;
 2008e0c:	e0bfff17 	ldw	r2,-4(fp)
 2008e10:	10c00384 	addi	r3,r2,14
 2008e14:	e0bffe17 	ldw	r2,-8(fp)
 2008e18:	10800503 	ldbu	r2,20(r2)
 2008e1c:	18800005 	stb	r2,0(r3)
	pMessage[15] = m_uiCommand;
 2008e20:	e0bfff17 	ldw	r2,-4(fp)
 2008e24:	10c003c4 	addi	r3,r2,15
 2008e28:	e0bffe17 	ldw	r2,-8(fp)
 2008e2c:	10800543 	ldbu	r2,21(r2)
 2008e30:	18800005 	stb	r2,0(r3)

	return m_bValid;
 2008e34:	e0bffe17 	ldw	r2,-8(fp)
 2008e38:	10800203 	ldbu	r2,8(r2)
 2008e3c:	10803fcc 	andi	r2,r2,255
}
 2008e40:	e037883a 	mov	sp,fp
 2008e44:	dfc00117 	ldw	ra,4(sp)
 2008e48:	df000017 	ldw	fp,0(sp)
 2008e4c:	dec00204 	addi	sp,sp,8
 2008e50:	f800283a 	ret

02008e54 <_ZN24CMotorMeasurementMessage12parseMessageEPhi>:
void CMotorMeasurementMessage::doAction()
{

}

void CMotorMeasurementMessage::parseMessage(alt_u8 *pMessage, int iLength)
 2008e54:	defffb04 	addi	sp,sp,-20
 2008e58:	dfc00415 	stw	ra,16(sp)
 2008e5c:	df000315 	stw	fp,12(sp)
 2008e60:	df000304 	addi	fp,sp,12
 2008e64:	e13ffd15 	stw	r4,-12(fp)
 2008e68:	e17ffe15 	stw	r5,-8(fp)
 2008e6c:	e1bfff15 	stw	r6,-4(fp)
{
	if(iLength < 12)
 2008e70:	e0bfff17 	ldw	r2,-4(fp)
 2008e74:	10800310 	cmplti	r2,r2,12
 2008e78:	10003f1e 	bne	r2,zero,2008f78 <_ZN24CMotorMeasurementMessage12parseMessageEPhi+0x124>
		return;

	m_iMaxSpeed = *((alt_16*) (pMessage));
 2008e7c:	e0bffe17 	ldw	r2,-8(fp)
 2008e80:	10c0000b 	ldhu	r3,0(r2)
 2008e84:	e0bffd17 	ldw	r2,-12(fp)
 2008e88:	10c0028d 	sth	r3,10(r2)
	swapEndianess((alt_u8*) &m_iMaxSpeed, 2);
 2008e8c:	e0bffd17 	ldw	r2,-12(fp)
 2008e90:	10800284 	addi	r2,r2,10
 2008e94:	1009883a 	mov	r4,r2
 2008e98:	01400084 	movi	r5,2
 2008e9c:	20002480 	call	2000248 <_Z13swapEndianessPhm>

	m_uiWheelCircumference = *((alt_16*) (pMessage+2));
 2008ea0:	e0bffe17 	ldw	r2,-8(fp)
 2008ea4:	10800084 	addi	r2,r2,2
 2008ea8:	1080000b 	ldhu	r2,0(r2)
 2008eac:	1007883a 	mov	r3,r2
 2008eb0:	e0bffd17 	ldw	r2,-12(fp)
 2008eb4:	10c0030d 	sth	r3,12(r2)
	swapEndianess((alt_u8*) &m_uiWheelCircumference, 2);
 2008eb8:	e0bffd17 	ldw	r2,-12(fp)
 2008ebc:	10800304 	addi	r2,r2,12
 2008ec0:	1009883a 	mov	r4,r2
 2008ec4:	01400084 	movi	r5,2
 2008ec8:	20002480 	call	2000248 <_Z13swapEndianessPhm>

	m_iPType = *((alt_16*) (pMessage+4));
 2008ecc:	e0bffe17 	ldw	r2,-8(fp)
 2008ed0:	10800104 	addi	r2,r2,4
 2008ed4:	10c0000b 	ldhu	r3,0(r2)
 2008ed8:	e0bffd17 	ldw	r2,-12(fp)
 2008edc:	10c0038d 	sth	r3,14(r2)
	swapEndianess((alt_u8*) &m_iPType, 2);
 2008ee0:	e0bffd17 	ldw	r2,-12(fp)
 2008ee4:	10800384 	addi	r2,r2,14
 2008ee8:	1009883a 	mov	r4,r2
 2008eec:	01400084 	movi	r5,2
 2008ef0:	20002480 	call	2000248 <_Z13swapEndianessPhm>

	m_iIType = *((alt_16*) (pMessage+6));
 2008ef4:	e0bffe17 	ldw	r2,-8(fp)
 2008ef8:	10800184 	addi	r2,r2,6
 2008efc:	10c0000b 	ldhu	r3,0(r2)
 2008f00:	e0bffd17 	ldw	r2,-12(fp)
 2008f04:	10c0040d 	sth	r3,16(r2)
	swapEndianess((alt_u8*) &m_iIType, 2);
 2008f08:	e0bffd17 	ldw	r2,-12(fp)
 2008f0c:	10800404 	addi	r2,r2,16
 2008f10:	1009883a 	mov	r4,r2
 2008f14:	01400084 	movi	r5,2
 2008f18:	20002480 	call	2000248 <_Z13swapEndianessPhm>

	m_iDType = *((alt_16*) (pMessage+8));
 2008f1c:	e0bffe17 	ldw	r2,-8(fp)
 2008f20:	10800204 	addi	r2,r2,8
 2008f24:	10c0000b 	ldhu	r3,0(r2)
 2008f28:	e0bffd17 	ldw	r2,-12(fp)
 2008f2c:	10c0048d 	sth	r3,18(r2)
	swapEndianess((alt_u8*) &m_iDType, 2);
 2008f30:	e0bffd17 	ldw	r2,-12(fp)
 2008f34:	10800484 	addi	r2,r2,18
 2008f38:	1009883a 	mov	r4,r2
 2008f3c:	01400084 	movi	r5,2
 2008f40:	20002480 	call	2000248 <_Z13swapEndianessPhm>

	m_uiReserved = pMessage[10];
 2008f44:	e0bffe17 	ldw	r2,-8(fp)
 2008f48:	10800284 	addi	r2,r2,10
 2008f4c:	10c00003 	ldbu	r3,0(r2)
 2008f50:	e0bffd17 	ldw	r2,-12(fp)
 2008f54:	10c00505 	stb	r3,20(r2)
	m_uiCommand = pMessage[11];
 2008f58:	e0bffe17 	ldw	r2,-8(fp)
 2008f5c:	108002c4 	addi	r2,r2,11
 2008f60:	10c00003 	ldbu	r3,0(r2)
 2008f64:	e0bffd17 	ldw	r2,-12(fp)
 2008f68:	10c00545 	stb	r3,21(r2)

	m_bValid = true;
 2008f6c:	e0fffd17 	ldw	r3,-12(fp)
 2008f70:	00800044 	movi	r2,1
 2008f74:	18800205 	stb	r2,8(r3)

}
 2008f78:	e037883a 	mov	sp,fp
 2008f7c:	dfc00117 	ldw	ra,4(sp)
 2008f80:	df000017 	ldw	fp,0(sp)
 2008f84:	dec00204 	addi	sp,sp,8
 2008f88:	f800283a 	ret

02008f8c <_ZN24CMotorMeasurementMessageD0Ev>:
		m_bValid = false;
		parseMessage(pMessage+4, iLength-4);
	}
}

CMotorMeasurementMessage::~CMotorMeasurementMessage()
 2008f8c:	defffd04 	addi	sp,sp,-12
 2008f90:	dfc00215 	stw	ra,8(sp)
 2008f94:	df000115 	stw	fp,4(sp)
 2008f98:	df000104 	addi	fp,sp,4
 2008f9c:	e13fff15 	stw	r4,-4(fp)
 2008fa0:	00c080b4 	movhi	r3,514
 2008fa4:	18eeb604 	addi	r3,r3,-17704
 2008fa8:	e0bfff17 	ldw	r2,-4(fp)
 2008fac:	10c00015 	stw	r3,0(r2)
{
}
 2008fb0:	e13fff17 	ldw	r4,-4(fp)
 2008fb4:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 2008fb8:	00800044 	movi	r2,1
 2008fbc:	10803fcc 	andi	r2,r2,255
 2008fc0:	1005003a 	cmpeq	r2,r2,zero
 2008fc4:	1000021e 	bne	r2,zero,2008fd0 <_ZN24CMotorMeasurementMessageD0Ev+0x44>
 2008fc8:	e13fff17 	ldw	r4,-4(fp)
 2008fcc:	200c1380 	call	200c138 <_ZdlPv>
 2008fd0:	e037883a 	mov	sp,fp
 2008fd4:	dfc00117 	ldw	ra,4(sp)
 2008fd8:	df000017 	ldw	fp,0(sp)
 2008fdc:	dec00204 	addi	sp,sp,8
 2008fe0:	f800283a 	ret

02008fe4 <_ZN24CMotorMeasurementMessageD1Ev>:
		m_bValid = false;
		parseMessage(pMessage+4, iLength-4);
	}
}

CMotorMeasurementMessage::~CMotorMeasurementMessage()
 2008fe4:	defffd04 	addi	sp,sp,-12
 2008fe8:	dfc00215 	stw	ra,8(sp)
 2008fec:	df000115 	stw	fp,4(sp)
 2008ff0:	df000104 	addi	fp,sp,4
 2008ff4:	e13fff15 	stw	r4,-4(fp)
 2008ff8:	00c080b4 	movhi	r3,514
 2008ffc:	18eeb604 	addi	r3,r3,-17704
 2009000:	e0bfff17 	ldw	r2,-4(fp)
 2009004:	10c00015 	stw	r3,0(r2)
{
}
 2009008:	e13fff17 	ldw	r4,-4(fp)
 200900c:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 2009010:	0005883a 	mov	r2,zero
 2009014:	10803fcc 	andi	r2,r2,255
 2009018:	1005003a 	cmpeq	r2,r2,zero
 200901c:	1000021e 	bne	r2,zero,2009028 <_ZN24CMotorMeasurementMessageD1Ev+0x44>
 2009020:	e13fff17 	ldw	r4,-4(fp)
 2009024:	200c1380 	call	200c138 <_ZdlPv>
 2009028:	e037883a 	mov	sp,fp
 200902c:	dfc00117 	ldw	ra,4(sp)
 2009030:	df000017 	ldw	fp,0(sp)
 2009034:	dec00204 	addi	sp,sp,8
 2009038:	f800283a 	ret

0200903c <_ZN24CMotorMeasurementMessageD2Ev>:
		m_bValid = false;
		parseMessage(pMessage+4, iLength-4);
	}
}

CMotorMeasurementMessage::~CMotorMeasurementMessage()
 200903c:	defffd04 	addi	sp,sp,-12
 2009040:	dfc00215 	stw	ra,8(sp)
 2009044:	df000115 	stw	fp,4(sp)
 2009048:	df000104 	addi	fp,sp,4
 200904c:	e13fff15 	stw	r4,-4(fp)
 2009050:	00c080b4 	movhi	r3,514
 2009054:	18eeb604 	addi	r3,r3,-17704
 2009058:	e0bfff17 	ldw	r2,-4(fp)
 200905c:	10c00015 	stw	r3,0(r2)
{
}
 2009060:	e13fff17 	ldw	r4,-4(fp)
 2009064:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 2009068:	0005883a 	mov	r2,zero
 200906c:	10803fcc 	andi	r2,r2,255
 2009070:	1005003a 	cmpeq	r2,r2,zero
 2009074:	1000021e 	bne	r2,zero,2009080 <_ZN24CMotorMeasurementMessageD2Ev+0x44>
 2009078:	e13fff17 	ldw	r4,-4(fp)
 200907c:	200c1380 	call	200c138 <_ZdlPv>
 2009080:	e037883a 	mov	sp,fp
 2009084:	dfc00117 	ldw	ra,4(sp)
 2009088:	df000017 	ldw	fp,0(sp)
 200908c:	dec00204 	addi	sp,sp,8
 2009090:	f800283a 	ret

02009094 <_ZN24CMotorMeasurementMessageC1EPhi>:
	m_uiCommand = 0;

	m_bValid = true;
}

CMotorMeasurementMessage::CMotorMeasurementMessage(alt_u8 *pMessage, int iLength)
 2009094:	deffe404 	addi	sp,sp,-112
 2009098:	dfc01b15 	stw	ra,108(sp)
 200909c:	df001a15 	stw	fp,104(sp)
 20090a0:	ddc01915 	stw	r23,100(sp)
 20090a4:	dd801815 	stw	r22,96(sp)
 20090a8:	dd401715 	stw	r21,92(sp)
 20090ac:	dd001615 	stw	r20,88(sp)
 20090b0:	dcc01515 	stw	r19,84(sp)
 20090b4:	dc801415 	stw	r18,80(sp)
 20090b8:	dc401315 	stw	r17,76(sp)
 20090bc:	dc001215 	stw	r16,72(sp)
 20090c0:	df001204 	addi	fp,sp,72
 20090c4:	e13fee15 	stw	r4,-72(fp)
 20090c8:	e17fef15 	stw	r5,-68(fp)
 20090cc:	e1bff015 	stw	r6,-64(fp)
 20090d0:	00808074 	movhi	r2,513
 20090d4:	10ae5a04 	addi	r2,r2,-18072
 20090d8:	e0bff715 	stw	r2,-36(fp)
 20090dc:	008080b4 	movhi	r2,514
 20090e0:	10add884 	addi	r2,r2,-18590
 20090e4:	e0bff815 	stw	r2,-32(fp)
 20090e8:	e0bff904 	addi	r2,fp,-28
 20090ec:	e0ffee04 	addi	r3,fp,-72
 20090f0:	10c00015 	stw	r3,0(r2)
 20090f4:	00c08074 	movhi	r3,513
 20090f8:	18e45f04 	addi	r3,r3,-28292
 20090fc:	10c00115 	stw	r3,4(r2)
 2009100:	16c00215 	stw	sp,8(r2)
 2009104:	e13ff104 	addi	r4,fp,-60
 2009108:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 200910c:	e13fee17 	ldw	r4,-72(fp)
 2009110:	00bfffc4 	movi	r2,-1
 2009114:	e0bff215 	stw	r2,-56(fp)
 2009118:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 200911c:	00c080b4 	movhi	r3,514
 2009120:	18eeb604 	addi	r3,r3,-17704
 2009124:	e0bfee17 	ldw	r2,-72(fp)
 2009128:	10c00015 	stw	r3,0(r2)
{
	parseHeader(pMessage, iLength);
 200912c:	e13fee17 	ldw	r4,-72(fp)
 2009130:	00800044 	movi	r2,1
 2009134:	e0bff215 	stw	r2,-56(fp)
 2009138:	e17fef17 	ldw	r5,-68(fp)
 200913c:	e1bff017 	ldw	r6,-64(fp)
 2009140:	20071cc0 	call	20071cc <_ZN11CCarMessage11parseHeaderEPhi>
	if(m_bValid)
 2009144:	e0bfee17 	ldw	r2,-72(fp)
 2009148:	10800203 	ldbu	r2,8(r2)
 200914c:	10803fcc 	andi	r2,r2,255
 2009150:	1005003a 	cmpeq	r2,r2,zero
 2009154:	1000171e 	bne	r2,zero,20091b4 <_ZN24CMotorMeasurementMessageC1EPhi+0x120>
	{
		m_bValid = false;
 2009158:	e0bfee17 	ldw	r2,-72(fp)
 200915c:	10000205 	stb	zero,8(r2)
		parseMessage(pMessage+4, iLength-4);
 2009160:	e0bfef17 	ldw	r2,-68(fp)
 2009164:	11400104 	addi	r5,r2,4
 2009168:	e0bff017 	ldw	r2,-64(fp)
 200916c:	11bfff04 	addi	r6,r2,-4
 2009170:	e13fee17 	ldw	r4,-72(fp)
 2009174:	2008e540 	call	2008e54 <_ZN24CMotorMeasurementMessage12parseMessageEPhi>
	}
}
 2009178:	00000e06 	br	20091b4 <_ZN24CMotorMeasurementMessageC1EPhi+0x120>
 200917c:	e7001204 	addi	fp,fp,72
 2009180:	e0bff317 	ldw	r2,-52(fp)
 2009184:	e0bfff15 	stw	r2,-4(fp)
 2009188:	e0ffff17 	ldw	r3,-4(fp)
 200918c:	e0fffe15 	stw	r3,-8(fp)
 2009190:	e13fee17 	ldw	r4,-72(fp)
 2009194:	e03ff215 	stw	zero,-56(fp)
 2009198:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 200919c:	e0bffe17 	ldw	r2,-8(fp)
 20091a0:	e0bfff15 	stw	r2,-4(fp)
 20091a4:	00bfffc4 	movi	r2,-1
 20091a8:	e0bff215 	stw	r2,-56(fp)
 20091ac:	e13fff17 	ldw	r4,-4(fp)
 20091b0:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 20091b4:	e13ff104 	addi	r4,fp,-60
 20091b8:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 20091bc:	e037883a 	mov	sp,fp
 20091c0:	dfc00917 	ldw	ra,36(sp)
 20091c4:	df000817 	ldw	fp,32(sp)
 20091c8:	ddc00717 	ldw	r23,28(sp)
 20091cc:	dd800617 	ldw	r22,24(sp)
 20091d0:	dd400517 	ldw	r21,20(sp)
 20091d4:	dd000417 	ldw	r20,16(sp)
 20091d8:	dcc00317 	ldw	r19,12(sp)
 20091dc:	dc800217 	ldw	r18,8(sp)
 20091e0:	dc400117 	ldw	r17,4(sp)
 20091e4:	dc000017 	ldw	r16,0(sp)
 20091e8:	dec00a04 	addi	sp,sp,40
 20091ec:	f800283a 	ret

020091f0 <_ZN24CMotorMeasurementMessageC2EPhi>:
	m_uiCommand = 0;

	m_bValid = true;
}

CMotorMeasurementMessage::CMotorMeasurementMessage(alt_u8 *pMessage, int iLength)
 20091f0:	deffe404 	addi	sp,sp,-112
 20091f4:	dfc01b15 	stw	ra,108(sp)
 20091f8:	df001a15 	stw	fp,104(sp)
 20091fc:	ddc01915 	stw	r23,100(sp)
 2009200:	dd801815 	stw	r22,96(sp)
 2009204:	dd401715 	stw	r21,92(sp)
 2009208:	dd001615 	stw	r20,88(sp)
 200920c:	dcc01515 	stw	r19,84(sp)
 2009210:	dc801415 	stw	r18,80(sp)
 2009214:	dc401315 	stw	r17,76(sp)
 2009218:	dc001215 	stw	r16,72(sp)
 200921c:	df001204 	addi	fp,sp,72
 2009220:	e13fee15 	stw	r4,-72(fp)
 2009224:	e17fef15 	stw	r5,-68(fp)
 2009228:	e1bff015 	stw	r6,-64(fp)
 200922c:	00808074 	movhi	r2,513
 2009230:	10ae5a04 	addi	r2,r2,-18072
 2009234:	e0bff715 	stw	r2,-36(fp)
 2009238:	008080b4 	movhi	r2,514
 200923c:	10adda04 	addi	r2,r2,-18584
 2009240:	e0bff815 	stw	r2,-32(fp)
 2009244:	e0bff904 	addi	r2,fp,-28
 2009248:	e0ffee04 	addi	r3,fp,-72
 200924c:	10c00015 	stw	r3,0(r2)
 2009250:	00c08074 	movhi	r3,513
 2009254:	18e4b604 	addi	r3,r3,-27944
 2009258:	10c00115 	stw	r3,4(r2)
 200925c:	16c00215 	stw	sp,8(r2)
 2009260:	e13ff104 	addi	r4,fp,-60
 2009264:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 2009268:	e13fee17 	ldw	r4,-72(fp)
 200926c:	00bfffc4 	movi	r2,-1
 2009270:	e0bff215 	stw	r2,-56(fp)
 2009274:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 2009278:	00c080b4 	movhi	r3,514
 200927c:	18eeb604 	addi	r3,r3,-17704
 2009280:	e0bfee17 	ldw	r2,-72(fp)
 2009284:	10c00015 	stw	r3,0(r2)
{
	parseHeader(pMessage, iLength);
 2009288:	e13fee17 	ldw	r4,-72(fp)
 200928c:	00800044 	movi	r2,1
 2009290:	e0bff215 	stw	r2,-56(fp)
 2009294:	e17fef17 	ldw	r5,-68(fp)
 2009298:	e1bff017 	ldw	r6,-64(fp)
 200929c:	20071cc0 	call	20071cc <_ZN11CCarMessage11parseHeaderEPhi>
	if(m_bValid)
 20092a0:	e0bfee17 	ldw	r2,-72(fp)
 20092a4:	10800203 	ldbu	r2,8(r2)
 20092a8:	10803fcc 	andi	r2,r2,255
 20092ac:	1005003a 	cmpeq	r2,r2,zero
 20092b0:	1000171e 	bne	r2,zero,2009310 <_ZN24CMotorMeasurementMessageC2EPhi+0x120>
	{
		m_bValid = false;
 20092b4:	e0bfee17 	ldw	r2,-72(fp)
 20092b8:	10000205 	stb	zero,8(r2)
		parseMessage(pMessage+4, iLength-4);
 20092bc:	e0bfef17 	ldw	r2,-68(fp)
 20092c0:	11400104 	addi	r5,r2,4
 20092c4:	e0bff017 	ldw	r2,-64(fp)
 20092c8:	11bfff04 	addi	r6,r2,-4
 20092cc:	e13fee17 	ldw	r4,-72(fp)
 20092d0:	2008e540 	call	2008e54 <_ZN24CMotorMeasurementMessage12parseMessageEPhi>
	}
}
 20092d4:	00000e06 	br	2009310 <_ZN24CMotorMeasurementMessageC2EPhi+0x120>
 20092d8:	e7001204 	addi	fp,fp,72
 20092dc:	e0bff317 	ldw	r2,-52(fp)
 20092e0:	e0bfff15 	stw	r2,-4(fp)
 20092e4:	e0ffff17 	ldw	r3,-4(fp)
 20092e8:	e0fffe15 	stw	r3,-8(fp)
 20092ec:	e13fee17 	ldw	r4,-72(fp)
 20092f0:	e03ff215 	stw	zero,-56(fp)
 20092f4:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 20092f8:	e0bffe17 	ldw	r2,-8(fp)
 20092fc:	e0bfff15 	stw	r2,-4(fp)
 2009300:	00bfffc4 	movi	r2,-1
 2009304:	e0bff215 	stw	r2,-56(fp)
 2009308:	e13fff17 	ldw	r4,-4(fp)
 200930c:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 2009310:	e13ff104 	addi	r4,fp,-60
 2009314:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 2009318:	e037883a 	mov	sp,fp
 200931c:	dfc00917 	ldw	ra,36(sp)
 2009320:	df000817 	ldw	fp,32(sp)
 2009324:	ddc00717 	ldw	r23,28(sp)
 2009328:	dd800617 	ldw	r22,24(sp)
 200932c:	dd400517 	ldw	r21,20(sp)
 2009330:	dd000417 	ldw	r20,16(sp)
 2009334:	dcc00317 	ldw	r19,12(sp)
 2009338:	dc800217 	ldw	r18,8(sp)
 200933c:	dc400117 	ldw	r17,4(sp)
 2009340:	dc000017 	ldw	r16,0(sp)
 2009344:	dec00a04 	addi	sp,sp,40
 2009348:	f800283a 	ret

0200934c <_ZN24CMotorMeasurementMessageC1Ev>:
 *      Author: Florian
 */

#include "MotorMeasurementMessage.h"

CMotorMeasurementMessage::CMotorMeasurementMessage()
 200934c:	deffe504 	addi	sp,sp,-108
 2009350:	dfc01a15 	stw	ra,104(sp)
 2009354:	df001915 	stw	fp,100(sp)
 2009358:	ddc01815 	stw	r23,96(sp)
 200935c:	dd801715 	stw	r22,92(sp)
 2009360:	dd401615 	stw	r21,88(sp)
 2009364:	dd001515 	stw	r20,84(sp)
 2009368:	dcc01415 	stw	r19,80(sp)
 200936c:	dc801315 	stw	r18,76(sp)
 2009370:	dc401215 	stw	r17,72(sp)
 2009374:	dc001115 	stw	r16,68(sp)
 2009378:	df001104 	addi	fp,sp,68
 200937c:	e13fef15 	stw	r4,-68(fp)
 2009380:	00808074 	movhi	r2,513
 2009384:	10ae5a04 	addi	r2,r2,-18072
 2009388:	e0bff615 	stw	r2,-40(fp)
 200938c:	008080b4 	movhi	r2,514
 2009390:	10addb84 	addi	r2,r2,-18578
 2009394:	e0bff715 	stw	r2,-36(fp)
 2009398:	e0bff804 	addi	r2,fp,-32
 200939c:	e0ffef04 	addi	r3,fp,-68
 20093a0:	10c00015 	stw	r3,0(r2)
 20093a4:	00c08074 	movhi	r3,513
 20093a8:	18e51204 	addi	r3,r3,-27576
 20093ac:	10c00115 	stw	r3,4(r2)
 20093b0:	16c00215 	stw	sp,8(r2)
 20093b4:	e13ff004 	addi	r4,fp,-64
 20093b8:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 20093bc:	e13fef17 	ldw	r4,-68(fp)
 20093c0:	00bfffc4 	movi	r2,-1
 20093c4:	e0bff115 	stw	r2,-60(fp)
 20093c8:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 20093cc:	00c080b4 	movhi	r3,514
 20093d0:	18eeb604 	addi	r3,r3,-17704
 20093d4:	e0bfef17 	ldw	r2,-68(fp)
 20093d8:	10c00015 	stw	r3,0(r2)
{
	setHeader(5, getLength(), 0);
 20093dc:	e0bfef17 	ldw	r2,-68(fp)
 20093e0:	e0bffe15 	stw	r2,-8(fp)
 20093e4:	e13fef17 	ldw	r4,-68(fp)
 20093e8:	2008c6c0 	call	2008c6c <_ZN24CMotorMeasurementMessage9getLengthEv>
 20093ec:	11803fcc 	andi	r6,r2,255
 20093f0:	00800044 	movi	r2,1
 20093f4:	e0bff115 	stw	r2,-60(fp)
 20093f8:	e13ffe17 	ldw	r4,-8(fp)
 20093fc:	01400144 	movi	r5,5
 2009400:	000f883a 	mov	r7,zero
 2009404:	20070480 	call	2007048 <_ZN11CCarMessage9setHeaderEhhb>

 	m_iMaxSpeed = 0;
 2009408:	e0bfef17 	ldw	r2,-68(fp)
 200940c:	1000028d 	sth	zero,10(r2)
	m_uiWheelCircumference = 0;
 2009410:	e0bfef17 	ldw	r2,-68(fp)
 2009414:	1000030d 	sth	zero,12(r2)
	m_iPType = 0;
 2009418:	e0bfef17 	ldw	r2,-68(fp)
 200941c:	1000038d 	sth	zero,14(r2)
	m_iIType = 0;
 2009420:	e0bfef17 	ldw	r2,-68(fp)
 2009424:	1000040d 	sth	zero,16(r2)
	m_iDType = 0;
 2009428:	e0bfef17 	ldw	r2,-68(fp)
 200942c:	1000048d 	sth	zero,18(r2)
	m_uiCommand = 0;
 2009430:	e0bfef17 	ldw	r2,-68(fp)
 2009434:	10000545 	stb	zero,21(r2)

	m_bValid = true;
 2009438:	e0ffef17 	ldw	r3,-68(fp)
 200943c:	00800044 	movi	r2,1
 2009440:	18800205 	stb	r2,8(r3)
}
 2009444:	00000e06 	br	2009480 <_ZN24CMotorMeasurementMessageC1Ev+0x134>
 2009448:	e7001104 	addi	fp,fp,68
 200944c:	e0fff217 	ldw	r3,-56(fp)
 2009450:	e0ffff15 	stw	r3,-4(fp)
 2009454:	e0bfff17 	ldw	r2,-4(fp)
 2009458:	e0bffd15 	stw	r2,-12(fp)
 200945c:	e13fef17 	ldw	r4,-68(fp)
 2009460:	e03ff115 	stw	zero,-60(fp)
 2009464:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 2009468:	e0fffd17 	ldw	r3,-12(fp)
 200946c:	e0ffff15 	stw	r3,-4(fp)
 2009470:	00bfffc4 	movi	r2,-1
 2009474:	e0bff115 	stw	r2,-60(fp)
 2009478:	e13fff17 	ldw	r4,-4(fp)
 200947c:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 2009480:	e13ff004 	addi	r4,fp,-64
 2009484:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 2009488:	e037883a 	mov	sp,fp
 200948c:	dfc00917 	ldw	ra,36(sp)
 2009490:	df000817 	ldw	fp,32(sp)
 2009494:	ddc00717 	ldw	r23,28(sp)
 2009498:	dd800617 	ldw	r22,24(sp)
 200949c:	dd400517 	ldw	r21,20(sp)
 20094a0:	dd000417 	ldw	r20,16(sp)
 20094a4:	dcc00317 	ldw	r19,12(sp)
 20094a8:	dc800217 	ldw	r18,8(sp)
 20094ac:	dc400117 	ldw	r17,4(sp)
 20094b0:	dc000017 	ldw	r16,0(sp)
 20094b4:	dec00a04 	addi	sp,sp,40
 20094b8:	f800283a 	ret

020094bc <_ZN24CMotorMeasurementMessageC2Ev>:
 *      Author: Florian
 */

#include "MotorMeasurementMessage.h"

CMotorMeasurementMessage::CMotorMeasurementMessage()
 20094bc:	deffe504 	addi	sp,sp,-108
 20094c0:	dfc01a15 	stw	ra,104(sp)
 20094c4:	df001915 	stw	fp,100(sp)
 20094c8:	ddc01815 	stw	r23,96(sp)
 20094cc:	dd801715 	stw	r22,92(sp)
 20094d0:	dd401615 	stw	r21,88(sp)
 20094d4:	dd001515 	stw	r20,84(sp)
 20094d8:	dcc01415 	stw	r19,80(sp)
 20094dc:	dc801315 	stw	r18,76(sp)
 20094e0:	dc401215 	stw	r17,72(sp)
 20094e4:	dc001115 	stw	r16,68(sp)
 20094e8:	df001104 	addi	fp,sp,68
 20094ec:	e13fef15 	stw	r4,-68(fp)
 20094f0:	00808074 	movhi	r2,513
 20094f4:	10ae5a04 	addi	r2,r2,-18072
 20094f8:	e0bff615 	stw	r2,-40(fp)
 20094fc:	008080b4 	movhi	r2,514
 2009500:	10addd04 	addi	r2,r2,-18572
 2009504:	e0bff715 	stw	r2,-36(fp)
 2009508:	e0bff804 	addi	r2,fp,-32
 200950c:	e0ffef04 	addi	r3,fp,-68
 2009510:	10c00015 	stw	r3,0(r2)
 2009514:	00c08074 	movhi	r3,513
 2009518:	18e56e04 	addi	r3,r3,-27208
 200951c:	10c00115 	stw	r3,4(r2)
 2009520:	16c00215 	stw	sp,8(r2)
 2009524:	e13ff004 	addi	r4,fp,-64
 2009528:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 200952c:	e13fef17 	ldw	r4,-68(fp)
 2009530:	00bfffc4 	movi	r2,-1
 2009534:	e0bff115 	stw	r2,-60(fp)
 2009538:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 200953c:	00c080b4 	movhi	r3,514
 2009540:	18eeb604 	addi	r3,r3,-17704
 2009544:	e0bfef17 	ldw	r2,-68(fp)
 2009548:	10c00015 	stw	r3,0(r2)
{
	setHeader(5, getLength(), 0);
 200954c:	e0bfef17 	ldw	r2,-68(fp)
 2009550:	e0bffe15 	stw	r2,-8(fp)
 2009554:	e13fef17 	ldw	r4,-68(fp)
 2009558:	2008c6c0 	call	2008c6c <_ZN24CMotorMeasurementMessage9getLengthEv>
 200955c:	11803fcc 	andi	r6,r2,255
 2009560:	00800044 	movi	r2,1
 2009564:	e0bff115 	stw	r2,-60(fp)
 2009568:	e13ffe17 	ldw	r4,-8(fp)
 200956c:	01400144 	movi	r5,5
 2009570:	000f883a 	mov	r7,zero
 2009574:	20070480 	call	2007048 <_ZN11CCarMessage9setHeaderEhhb>

 	m_iMaxSpeed = 0;
 2009578:	e0bfef17 	ldw	r2,-68(fp)
 200957c:	1000028d 	sth	zero,10(r2)
	m_uiWheelCircumference = 0;
 2009580:	e0bfef17 	ldw	r2,-68(fp)
 2009584:	1000030d 	sth	zero,12(r2)
	m_iPType = 0;
 2009588:	e0bfef17 	ldw	r2,-68(fp)
 200958c:	1000038d 	sth	zero,14(r2)
	m_iIType = 0;
 2009590:	e0bfef17 	ldw	r2,-68(fp)
 2009594:	1000040d 	sth	zero,16(r2)
	m_iDType = 0;
 2009598:	e0bfef17 	ldw	r2,-68(fp)
 200959c:	1000048d 	sth	zero,18(r2)
	m_uiCommand = 0;
 20095a0:	e0bfef17 	ldw	r2,-68(fp)
 20095a4:	10000545 	stb	zero,21(r2)

	m_bValid = true;
 20095a8:	e0ffef17 	ldw	r3,-68(fp)
 20095ac:	00800044 	movi	r2,1
 20095b0:	18800205 	stb	r2,8(r3)
}
 20095b4:	00000e06 	br	20095f0 <_ZN24CMotorMeasurementMessageC2Ev+0x134>
 20095b8:	e7001104 	addi	fp,fp,68
 20095bc:	e0fff217 	ldw	r3,-56(fp)
 20095c0:	e0ffff15 	stw	r3,-4(fp)
 20095c4:	e0bfff17 	ldw	r2,-4(fp)
 20095c8:	e0bffd15 	stw	r2,-12(fp)
 20095cc:	e13fef17 	ldw	r4,-68(fp)
 20095d0:	e03ff115 	stw	zero,-60(fp)
 20095d4:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 20095d8:	e0fffd17 	ldw	r3,-12(fp)
 20095dc:	e0ffff15 	stw	r3,-4(fp)
 20095e0:	00bfffc4 	movi	r2,-1
 20095e4:	e0bff115 	stw	r2,-60(fp)
 20095e8:	e13fff17 	ldw	r4,-4(fp)
 20095ec:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 20095f0:	e13ff004 	addi	r4,fp,-64
 20095f4:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 20095f8:	e037883a 	mov	sp,fp
 20095fc:	dfc00917 	ldw	ra,36(sp)
 2009600:	df000817 	ldw	fp,32(sp)
 2009604:	ddc00717 	ldw	r23,28(sp)
 2009608:	dd800617 	ldw	r22,24(sp)
 200960c:	dd400517 	ldw	r21,20(sp)
 2009610:	dd000417 	ldw	r20,16(sp)
 2009614:	dcc00317 	ldw	r19,12(sp)
 2009618:	dc800217 	ldw	r18,8(sp)
 200961c:	dc400117 	ldw	r17,4(sp)
 2009620:	dc000017 	ldw	r16,0(sp)
 2009624:	dec00a04 	addi	sp,sp,40
 2009628:	f800283a 	ret

0200962c <_ZN21CMotorVelocityMessage8doActionEv>:

CMotorVelocityMessage::~CMotorVelocityMessage()
{
}

void CMotorVelocityMessage::doAction()
 200962c:	defffe04 	addi	sp,sp,-8
 2009630:	df000115 	stw	fp,4(sp)
 2009634:	df000104 	addi	fp,sp,4
 2009638:	e13fff15 	stw	r4,-4(fp)
{

}
 200963c:	e037883a 	mov	sp,fp
 2009640:	df000017 	ldw	fp,0(sp)
 2009644:	dec00104 	addi	sp,sp,4
 2009648:	f800283a 	ret

0200964c <_ZN21CMotorVelocityMessage9getLengthEv>:

	return m_bValid;
}


alt_u32 CMotorVelocityMessage::getLength()
 200964c:	defffe04 	addi	sp,sp,-8
 2009650:	df000115 	stw	fp,4(sp)
 2009654:	df000104 	addi	fp,sp,4
 2009658:	e13fff15 	stw	r4,-4(fp)
{
	return 8;
 200965c:	00800204 	movi	r2,8
}
 2009660:	e037883a 	mov	sp,fp
 2009664:	df000017 	ldw	fp,0(sp)
 2009668:	dec00104 	addi	sp,sp,4
 200966c:	f800283a 	ret

02009670 <_ZN21CMotorVelocityMessage13answerMessageEs>:
	swapEndianess((alt_u8*) &m_iCurrentSpeed, 2);

	m_bValid = true;
}

void CMotorVelocityMessage::answerMessage(alt_16 iCurrentSpeed)
 2009670:	defffd04 	addi	sp,sp,-12
 2009674:	df000215 	stw	fp,8(sp)
 2009678:	df000204 	addi	fp,sp,8
 200967c:	e13ffe15 	stw	r4,-8(fp)
 2009680:	e17fff0d 	sth	r5,-4(fp)
{
	m_iCurrentSpeed = iCurrentSpeed;
 2009684:	e0fffe17 	ldw	r3,-8(fp)
 2009688:	e0bfff0b 	ldhu	r2,-4(fp)
 200968c:	1880030d 	sth	r2,12(r3)

	m_uiFlags = m_uiFlags | 0x01; // Response-Flag setzen
 2009690:	e0bffe17 	ldw	r2,-8(fp)
 2009694:	108001c3 	ldbu	r2,7(r2)
 2009698:	10800054 	ori	r2,r2,1
 200969c:	1007883a 	mov	r3,r2
 20096a0:	e0bffe17 	ldw	r2,-8(fp)
 20096a4:	10c001c5 	stb	r3,7(r2)
}
 20096a8:	e037883a 	mov	sp,fp
 20096ac:	df000017 	ldw	fp,0(sp)
 20096b0:	dec00104 	addi	sp,sp,4
 20096b4:	f800283a 	ret

020096b8 <_ZN21CMotorVelocityMessage12parseMessageEPhi>:
alt_u32 CMotorVelocityMessage::getLength()
{
	return 8;
}

void CMotorVelocityMessage::parseMessage(alt_u8 *pMessage, int iLength)
 20096b8:	defffb04 	addi	sp,sp,-20
 20096bc:	dfc00415 	stw	ra,16(sp)
 20096c0:	df000315 	stw	fp,12(sp)
 20096c4:	df000304 	addi	fp,sp,12
 20096c8:	e13ffd15 	stw	r4,-12(fp)
 20096cc:	e17ffe15 	stw	r5,-8(fp)
 20096d0:	e1bfff15 	stw	r6,-4(fp)
{
	if(iLength < 4)
 20096d4:	e0bfff17 	ldw	r2,-4(fp)
 20096d8:	10800110 	cmplti	r2,r2,4
 20096dc:	1000161e 	bne	r2,zero,2009738 <_ZN21CMotorVelocityMessage12parseMessageEPhi+0x80>
		return;

	m_iDesiredSpeed = *((alt_16*) (pMessage));
 20096e0:	e0bffe17 	ldw	r2,-8(fp)
 20096e4:	10c0000b 	ldhu	r3,0(r2)
 20096e8:	e0bffd17 	ldw	r2,-12(fp)
 20096ec:	10c0028d 	sth	r3,10(r2)
	swapEndianess((alt_u8*) &m_iDesiredSpeed, 2);
 20096f0:	e0bffd17 	ldw	r2,-12(fp)
 20096f4:	10800284 	addi	r2,r2,10
 20096f8:	1009883a 	mov	r4,r2
 20096fc:	01400084 	movi	r5,2
 2009700:	20002480 	call	2000248 <_Z13swapEndianessPhm>

	m_iCurrentSpeed = *((alt_16*) (pMessage+2));
 2009704:	e0bffe17 	ldw	r2,-8(fp)
 2009708:	10800084 	addi	r2,r2,2
 200970c:	10c0000b 	ldhu	r3,0(r2)
 2009710:	e0bffd17 	ldw	r2,-12(fp)
 2009714:	10c0030d 	sth	r3,12(r2)
	swapEndianess((alt_u8*) &m_iCurrentSpeed, 2);
 2009718:	e0bffd17 	ldw	r2,-12(fp)
 200971c:	10800304 	addi	r2,r2,12
 2009720:	1009883a 	mov	r4,r2
 2009724:	01400084 	movi	r5,2
 2009728:	20002480 	call	2000248 <_Z13swapEndianessPhm>

	m_bValid = true;
 200972c:	e0fffd17 	ldw	r3,-12(fp)
 2009730:	00800044 	movi	r2,1
 2009734:	18800205 	stb	r2,8(r3)
}
 2009738:	e037883a 	mov	sp,fp
 200973c:	dfc00117 	ldw	ra,4(sp)
 2009740:	df000017 	ldw	fp,0(sp)
 2009744:	dec00204 	addi	sp,sp,8
 2009748:	f800283a 	ret

0200974c <_ZN21CMotorVelocityMessage8getBytesEPh>:
void CMotorVelocityMessage::doAction()
{

}

bool CMotorVelocityMessage::getBytes(alt_u8 *pMessage)
 200974c:	defffc04 	addi	sp,sp,-16
 2009750:	dfc00315 	stw	ra,12(sp)
 2009754:	df000215 	stw	fp,8(sp)
 2009758:	df000204 	addi	fp,sp,8
 200975c:	e13ffe15 	stw	r4,-8(fp)
 2009760:	e17fff15 	stw	r5,-4(fp)
{
	CCarMessage::getBytes(pMessage);
 2009764:	e13ffe17 	ldw	r4,-8(fp)
 2009768:	e17fff17 	ldw	r5,-4(fp)
 200976c:	2006f040 	call	2006f04 <_ZN11CCarMessage8getBytesEPh>

	*((alt_16*) (pMessage+4)) = m_iDesiredSpeed;
 2009770:	e0bfff17 	ldw	r2,-4(fp)
 2009774:	10800104 	addi	r2,r2,4
 2009778:	1007883a 	mov	r3,r2
 200977c:	e0bffe17 	ldw	r2,-8(fp)
 2009780:	1080028b 	ldhu	r2,10(r2)
 2009784:	1880000d 	sth	r2,0(r3)
	swapEndianess(pMessage+4, 2);
 2009788:	e0bfff17 	ldw	r2,-4(fp)
 200978c:	11000104 	addi	r4,r2,4
 2009790:	01400084 	movi	r5,2
 2009794:	20002480 	call	2000248 <_Z13swapEndianessPhm>

	*((alt_16*) (pMessage+6)) = m_iCurrentSpeed;
 2009798:	e0bfff17 	ldw	r2,-4(fp)
 200979c:	10800184 	addi	r2,r2,6
 20097a0:	1007883a 	mov	r3,r2
 20097a4:	e0bffe17 	ldw	r2,-8(fp)
 20097a8:	1080030b 	ldhu	r2,12(r2)
 20097ac:	1880000d 	sth	r2,0(r3)
	swapEndianess(pMessage+6, 2);
 20097b0:	e0bfff17 	ldw	r2,-4(fp)
 20097b4:	11000184 	addi	r4,r2,6
 20097b8:	01400084 	movi	r5,2
 20097bc:	20002480 	call	2000248 <_Z13swapEndianessPhm>

	return m_bValid;
 20097c0:	e0bffe17 	ldw	r2,-8(fp)
 20097c4:	10800203 	ldbu	r2,8(r2)
 20097c8:	10803fcc 	andi	r2,r2,255
}
 20097cc:	e037883a 	mov	sp,fp
 20097d0:	dfc00117 	ldw	ra,4(sp)
 20097d4:	df000017 	ldw	fp,0(sp)
 20097d8:	dec00204 	addi	sp,sp,8
 20097dc:	f800283a 	ret

020097e0 <_ZN21CMotorVelocityMessageD0Ev>:
		m_bValid = false;
		parseMessage(pMessage+4, iLength-4);
	}
}

CMotorVelocityMessage::~CMotorVelocityMessage()
 20097e0:	defffd04 	addi	sp,sp,-12
 20097e4:	dfc00215 	stw	ra,8(sp)
 20097e8:	df000115 	stw	fp,4(sp)
 20097ec:	df000104 	addi	fp,sp,4
 20097f0:	e13fff15 	stw	r4,-4(fp)
 20097f4:	00c080b4 	movhi	r3,514
 20097f8:	18eec704 	addi	r3,r3,-17636
 20097fc:	e0bfff17 	ldw	r2,-4(fp)
 2009800:	10c00015 	stw	r3,0(r2)
{
}
 2009804:	e13fff17 	ldw	r4,-4(fp)
 2009808:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 200980c:	00800044 	movi	r2,1
 2009810:	10803fcc 	andi	r2,r2,255
 2009814:	1005003a 	cmpeq	r2,r2,zero
 2009818:	1000021e 	bne	r2,zero,2009824 <_ZN21CMotorVelocityMessageD0Ev+0x44>
 200981c:	e13fff17 	ldw	r4,-4(fp)
 2009820:	200c1380 	call	200c138 <_ZdlPv>
 2009824:	e037883a 	mov	sp,fp
 2009828:	dfc00117 	ldw	ra,4(sp)
 200982c:	df000017 	ldw	fp,0(sp)
 2009830:	dec00204 	addi	sp,sp,8
 2009834:	f800283a 	ret

02009838 <_ZN21CMotorVelocityMessageD1Ev>:
		m_bValid = false;
		parseMessage(pMessage+4, iLength-4);
	}
}

CMotorVelocityMessage::~CMotorVelocityMessage()
 2009838:	defffd04 	addi	sp,sp,-12
 200983c:	dfc00215 	stw	ra,8(sp)
 2009840:	df000115 	stw	fp,4(sp)
 2009844:	df000104 	addi	fp,sp,4
 2009848:	e13fff15 	stw	r4,-4(fp)
 200984c:	00c080b4 	movhi	r3,514
 2009850:	18eec704 	addi	r3,r3,-17636
 2009854:	e0bfff17 	ldw	r2,-4(fp)
 2009858:	10c00015 	stw	r3,0(r2)
{
}
 200985c:	e13fff17 	ldw	r4,-4(fp)
 2009860:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 2009864:	0005883a 	mov	r2,zero
 2009868:	10803fcc 	andi	r2,r2,255
 200986c:	1005003a 	cmpeq	r2,r2,zero
 2009870:	1000021e 	bne	r2,zero,200987c <_ZN21CMotorVelocityMessageD1Ev+0x44>
 2009874:	e13fff17 	ldw	r4,-4(fp)
 2009878:	200c1380 	call	200c138 <_ZdlPv>
 200987c:	e037883a 	mov	sp,fp
 2009880:	dfc00117 	ldw	ra,4(sp)
 2009884:	df000017 	ldw	fp,0(sp)
 2009888:	dec00204 	addi	sp,sp,8
 200988c:	f800283a 	ret

02009890 <_ZN21CMotorVelocityMessageD2Ev>:
		m_bValid = false;
		parseMessage(pMessage+4, iLength-4);
	}
}

CMotorVelocityMessage::~CMotorVelocityMessage()
 2009890:	defffd04 	addi	sp,sp,-12
 2009894:	dfc00215 	stw	ra,8(sp)
 2009898:	df000115 	stw	fp,4(sp)
 200989c:	df000104 	addi	fp,sp,4
 20098a0:	e13fff15 	stw	r4,-4(fp)
 20098a4:	00c080b4 	movhi	r3,514
 20098a8:	18eec704 	addi	r3,r3,-17636
 20098ac:	e0bfff17 	ldw	r2,-4(fp)
 20098b0:	10c00015 	stw	r3,0(r2)
{
}
 20098b4:	e13fff17 	ldw	r4,-4(fp)
 20098b8:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 20098bc:	0005883a 	mov	r2,zero
 20098c0:	10803fcc 	andi	r2,r2,255
 20098c4:	1005003a 	cmpeq	r2,r2,zero
 20098c8:	1000021e 	bne	r2,zero,20098d4 <_ZN21CMotorVelocityMessageD2Ev+0x44>
 20098cc:	e13fff17 	ldw	r4,-4(fp)
 20098d0:	200c1380 	call	200c138 <_ZdlPv>
 20098d4:	e037883a 	mov	sp,fp
 20098d8:	dfc00117 	ldw	ra,4(sp)
 20098dc:	df000017 	ldw	fp,0(sp)
 20098e0:	dec00204 	addi	sp,sp,8
 20098e4:	f800283a 	ret

020098e8 <_ZN21CMotorVelocityMessageC1EPhi>:
	m_bValid = true;

}


CMotorVelocityMessage::CMotorVelocityMessage(alt_u8 *pMessage, int iLength)
 20098e8:	deffe404 	addi	sp,sp,-112
 20098ec:	dfc01b15 	stw	ra,108(sp)
 20098f0:	df001a15 	stw	fp,104(sp)
 20098f4:	ddc01915 	stw	r23,100(sp)
 20098f8:	dd801815 	stw	r22,96(sp)
 20098fc:	dd401715 	stw	r21,92(sp)
 2009900:	dd001615 	stw	r20,88(sp)
 2009904:	dcc01515 	stw	r19,84(sp)
 2009908:	dc801415 	stw	r18,80(sp)
 200990c:	dc401315 	stw	r17,76(sp)
 2009910:	dc001215 	stw	r16,72(sp)
 2009914:	df001204 	addi	fp,sp,72
 2009918:	e13fee15 	stw	r4,-72(fp)
 200991c:	e17fef15 	stw	r5,-68(fp)
 2009920:	e1bff015 	stw	r6,-64(fp)
 2009924:	00808074 	movhi	r2,513
 2009928:	10ae5a04 	addi	r2,r2,-18072
 200992c:	e0bff715 	stw	r2,-36(fp)
 2009930:	008080b4 	movhi	r2,514
 2009934:	10adde84 	addi	r2,r2,-18566
 2009938:	e0bff815 	stw	r2,-32(fp)
 200993c:	e0bff904 	addi	r2,fp,-28
 2009940:	e0ffee04 	addi	r3,fp,-72
 2009944:	10c00015 	stw	r3,0(r2)
 2009948:	00c08074 	movhi	r3,513
 200994c:	18e67404 	addi	r3,r3,-26160
 2009950:	10c00115 	stw	r3,4(r2)
 2009954:	16c00215 	stw	sp,8(r2)
 2009958:	e13ff104 	addi	r4,fp,-60
 200995c:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 2009960:	e13fee17 	ldw	r4,-72(fp)
 2009964:	00bfffc4 	movi	r2,-1
 2009968:	e0bff215 	stw	r2,-56(fp)
 200996c:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 2009970:	00c080b4 	movhi	r3,514
 2009974:	18eec704 	addi	r3,r3,-17636
 2009978:	e0bfee17 	ldw	r2,-72(fp)
 200997c:	10c00015 	stw	r3,0(r2)
{
	parseHeader(pMessage, iLength);
 2009980:	e13fee17 	ldw	r4,-72(fp)
 2009984:	00800044 	movi	r2,1
 2009988:	e0bff215 	stw	r2,-56(fp)
 200998c:	e17fef17 	ldw	r5,-68(fp)
 2009990:	e1bff017 	ldw	r6,-64(fp)
 2009994:	20071cc0 	call	20071cc <_ZN11CCarMessage11parseHeaderEPhi>
	if(m_bValid)
 2009998:	e0bfee17 	ldw	r2,-72(fp)
 200999c:	10800203 	ldbu	r2,8(r2)
 20099a0:	10803fcc 	andi	r2,r2,255
 20099a4:	1005003a 	cmpeq	r2,r2,zero
 20099a8:	1000171e 	bne	r2,zero,2009a08 <_ZN21CMotorVelocityMessageC1EPhi+0x120>
	{
		m_bValid = false;
 20099ac:	e0bfee17 	ldw	r2,-72(fp)
 20099b0:	10000205 	stb	zero,8(r2)
		parseMessage(pMessage+4, iLength-4);
 20099b4:	e0bfef17 	ldw	r2,-68(fp)
 20099b8:	11400104 	addi	r5,r2,4
 20099bc:	e0bff017 	ldw	r2,-64(fp)
 20099c0:	11bfff04 	addi	r6,r2,-4
 20099c4:	e13fee17 	ldw	r4,-72(fp)
 20099c8:	20096b80 	call	20096b8 <_ZN21CMotorVelocityMessage12parseMessageEPhi>
	}
}
 20099cc:	00000e06 	br	2009a08 <_ZN21CMotorVelocityMessageC1EPhi+0x120>
 20099d0:	e7001204 	addi	fp,fp,72
 20099d4:	e0bff317 	ldw	r2,-52(fp)
 20099d8:	e0bfff15 	stw	r2,-4(fp)
 20099dc:	e0ffff17 	ldw	r3,-4(fp)
 20099e0:	e0fffe15 	stw	r3,-8(fp)
 20099e4:	e13fee17 	ldw	r4,-72(fp)
 20099e8:	e03ff215 	stw	zero,-56(fp)
 20099ec:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 20099f0:	e0bffe17 	ldw	r2,-8(fp)
 20099f4:	e0bfff15 	stw	r2,-4(fp)
 20099f8:	00bfffc4 	movi	r2,-1
 20099fc:	e0bff215 	stw	r2,-56(fp)
 2009a00:	e13fff17 	ldw	r4,-4(fp)
 2009a04:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 2009a08:	e13ff104 	addi	r4,fp,-60
 2009a0c:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 2009a10:	e037883a 	mov	sp,fp
 2009a14:	dfc00917 	ldw	ra,36(sp)
 2009a18:	df000817 	ldw	fp,32(sp)
 2009a1c:	ddc00717 	ldw	r23,28(sp)
 2009a20:	dd800617 	ldw	r22,24(sp)
 2009a24:	dd400517 	ldw	r21,20(sp)
 2009a28:	dd000417 	ldw	r20,16(sp)
 2009a2c:	dcc00317 	ldw	r19,12(sp)
 2009a30:	dc800217 	ldw	r18,8(sp)
 2009a34:	dc400117 	ldw	r17,4(sp)
 2009a38:	dc000017 	ldw	r16,0(sp)
 2009a3c:	dec00a04 	addi	sp,sp,40
 2009a40:	f800283a 	ret

02009a44 <_ZN21CMotorVelocityMessageC2EPhi>:
	m_bValid = true;

}


CMotorVelocityMessage::CMotorVelocityMessage(alt_u8 *pMessage, int iLength)
 2009a44:	deffe404 	addi	sp,sp,-112
 2009a48:	dfc01b15 	stw	ra,108(sp)
 2009a4c:	df001a15 	stw	fp,104(sp)
 2009a50:	ddc01915 	stw	r23,100(sp)
 2009a54:	dd801815 	stw	r22,96(sp)
 2009a58:	dd401715 	stw	r21,92(sp)
 2009a5c:	dd001615 	stw	r20,88(sp)
 2009a60:	dcc01515 	stw	r19,84(sp)
 2009a64:	dc801415 	stw	r18,80(sp)
 2009a68:	dc401315 	stw	r17,76(sp)
 2009a6c:	dc001215 	stw	r16,72(sp)
 2009a70:	df001204 	addi	fp,sp,72
 2009a74:	e13fee15 	stw	r4,-72(fp)
 2009a78:	e17fef15 	stw	r5,-68(fp)
 2009a7c:	e1bff015 	stw	r6,-64(fp)
 2009a80:	00808074 	movhi	r2,513
 2009a84:	10ae5a04 	addi	r2,r2,-18072
 2009a88:	e0bff715 	stw	r2,-36(fp)
 2009a8c:	008080b4 	movhi	r2,514
 2009a90:	10ade004 	addi	r2,r2,-18560
 2009a94:	e0bff815 	stw	r2,-32(fp)
 2009a98:	e0bff904 	addi	r2,fp,-28
 2009a9c:	e0ffee04 	addi	r3,fp,-72
 2009aa0:	10c00015 	stw	r3,0(r2)
 2009aa4:	00c08074 	movhi	r3,513
 2009aa8:	18e6cb04 	addi	r3,r3,-25812
 2009aac:	10c00115 	stw	r3,4(r2)
 2009ab0:	16c00215 	stw	sp,8(r2)
 2009ab4:	e13ff104 	addi	r4,fp,-60
 2009ab8:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 2009abc:	e13fee17 	ldw	r4,-72(fp)
 2009ac0:	00bfffc4 	movi	r2,-1
 2009ac4:	e0bff215 	stw	r2,-56(fp)
 2009ac8:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 2009acc:	00c080b4 	movhi	r3,514
 2009ad0:	18eec704 	addi	r3,r3,-17636
 2009ad4:	e0bfee17 	ldw	r2,-72(fp)
 2009ad8:	10c00015 	stw	r3,0(r2)
{
	parseHeader(pMessage, iLength);
 2009adc:	e13fee17 	ldw	r4,-72(fp)
 2009ae0:	00800044 	movi	r2,1
 2009ae4:	e0bff215 	stw	r2,-56(fp)
 2009ae8:	e17fef17 	ldw	r5,-68(fp)
 2009aec:	e1bff017 	ldw	r6,-64(fp)
 2009af0:	20071cc0 	call	20071cc <_ZN11CCarMessage11parseHeaderEPhi>
	if(m_bValid)
 2009af4:	e0bfee17 	ldw	r2,-72(fp)
 2009af8:	10800203 	ldbu	r2,8(r2)
 2009afc:	10803fcc 	andi	r2,r2,255
 2009b00:	1005003a 	cmpeq	r2,r2,zero
 2009b04:	1000171e 	bne	r2,zero,2009b64 <_ZN21CMotorVelocityMessageC2EPhi+0x120>
	{
		m_bValid = false;
 2009b08:	e0bfee17 	ldw	r2,-72(fp)
 2009b0c:	10000205 	stb	zero,8(r2)
		parseMessage(pMessage+4, iLength-4);
 2009b10:	e0bfef17 	ldw	r2,-68(fp)
 2009b14:	11400104 	addi	r5,r2,4
 2009b18:	e0bff017 	ldw	r2,-64(fp)
 2009b1c:	11bfff04 	addi	r6,r2,-4
 2009b20:	e13fee17 	ldw	r4,-72(fp)
 2009b24:	20096b80 	call	20096b8 <_ZN21CMotorVelocityMessage12parseMessageEPhi>
	}
}
 2009b28:	00000e06 	br	2009b64 <_ZN21CMotorVelocityMessageC2EPhi+0x120>
 2009b2c:	e7001204 	addi	fp,fp,72
 2009b30:	e0bff317 	ldw	r2,-52(fp)
 2009b34:	e0bfff15 	stw	r2,-4(fp)
 2009b38:	e0ffff17 	ldw	r3,-4(fp)
 2009b3c:	e0fffe15 	stw	r3,-8(fp)
 2009b40:	e13fee17 	ldw	r4,-72(fp)
 2009b44:	e03ff215 	stw	zero,-56(fp)
 2009b48:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 2009b4c:	e0bffe17 	ldw	r2,-8(fp)
 2009b50:	e0bfff15 	stw	r2,-4(fp)
 2009b54:	00bfffc4 	movi	r2,-1
 2009b58:	e0bff215 	stw	r2,-56(fp)
 2009b5c:	e13fff17 	ldw	r4,-4(fp)
 2009b60:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 2009b64:	e13ff104 	addi	r4,fp,-60
 2009b68:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 2009b6c:	e037883a 	mov	sp,fp
 2009b70:	dfc00917 	ldw	ra,36(sp)
 2009b74:	df000817 	ldw	fp,32(sp)
 2009b78:	ddc00717 	ldw	r23,28(sp)
 2009b7c:	dd800617 	ldw	r22,24(sp)
 2009b80:	dd400517 	ldw	r21,20(sp)
 2009b84:	dd000417 	ldw	r20,16(sp)
 2009b88:	dcc00317 	ldw	r19,12(sp)
 2009b8c:	dc800217 	ldw	r18,8(sp)
 2009b90:	dc400117 	ldw	r17,4(sp)
 2009b94:	dc000017 	ldw	r16,0(sp)
 2009b98:	dec00a04 	addi	sp,sp,40
 2009b9c:	f800283a 	ret

02009ba0 <_ZN21CMotorVelocityMessageC1Es>:
 *      Author: Florian
 */

#include "MotorVelocityMessage.h"

CMotorVelocityMessage::CMotorVelocityMessage(alt_16 iDesiredSpeed)
 2009ba0:	deffe404 	addi	sp,sp,-112
 2009ba4:	dfc01b15 	stw	ra,108(sp)
 2009ba8:	df001a15 	stw	fp,104(sp)
 2009bac:	ddc01915 	stw	r23,100(sp)
 2009bb0:	dd801815 	stw	r22,96(sp)
 2009bb4:	dd401715 	stw	r21,92(sp)
 2009bb8:	dd001615 	stw	r20,88(sp)
 2009bbc:	dcc01515 	stw	r19,84(sp)
 2009bc0:	dc801415 	stw	r18,80(sp)
 2009bc4:	dc401315 	stw	r17,76(sp)
 2009bc8:	dc001215 	stw	r16,72(sp)
 2009bcc:	df001204 	addi	fp,sp,72
 2009bd0:	e13fee15 	stw	r4,-72(fp)
 2009bd4:	e17fef0d 	sth	r5,-68(fp)
 2009bd8:	00808074 	movhi	r2,513
 2009bdc:	10ae5a04 	addi	r2,r2,-18072
 2009be0:	e0bff615 	stw	r2,-40(fp)
 2009be4:	008080b4 	movhi	r2,514
 2009be8:	10ade184 	addi	r2,r2,-18554
 2009bec:	e0bff715 	stw	r2,-36(fp)
 2009bf0:	e0bff804 	addi	r2,fp,-32
 2009bf4:	e0ffee04 	addi	r3,fp,-72
 2009bf8:	10c00015 	stw	r3,0(r2)
 2009bfc:	00c08074 	movhi	r3,513
 2009c00:	18e72104 	addi	r3,r3,-25468
 2009c04:	10c00115 	stw	r3,4(r2)
 2009c08:	16c00215 	stw	sp,8(r2)
 2009c0c:	e13ff004 	addi	r4,fp,-64
 2009c10:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 2009c14:	e13fee17 	ldw	r4,-72(fp)
 2009c18:	00bfffc4 	movi	r2,-1
 2009c1c:	e0bff115 	stw	r2,-60(fp)
 2009c20:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 2009c24:	00c080b4 	movhi	r3,514
 2009c28:	18eec704 	addi	r3,r3,-17636
 2009c2c:	e0bfee17 	ldw	r2,-72(fp)
 2009c30:	10c00015 	stw	r3,0(r2)
{
	setHeader(4, getLength(), 0);
 2009c34:	e0bfee17 	ldw	r2,-72(fp)
 2009c38:	e0bffe15 	stw	r2,-8(fp)
 2009c3c:	e13fee17 	ldw	r4,-72(fp)
 2009c40:	200964c0 	call	200964c <_ZN21CMotorVelocityMessage9getLengthEv>
 2009c44:	11803fcc 	andi	r6,r2,255
 2009c48:	00800044 	movi	r2,1
 2009c4c:	e0bff115 	stw	r2,-60(fp)
 2009c50:	e13ffe17 	ldw	r4,-8(fp)
 2009c54:	01400104 	movi	r5,4
 2009c58:	000f883a 	mov	r7,zero
 2009c5c:	20070480 	call	2007048 <_ZN11CCarMessage9setHeaderEhhb>

 	m_iDesiredSpeed = iDesiredSpeed;
 2009c60:	e0ffee17 	ldw	r3,-72(fp)
 2009c64:	e0bfef0b 	ldhu	r2,-68(fp)
 2009c68:	1880028d 	sth	r2,10(r3)
	m_iCurrentSpeed = 0;
 2009c6c:	e0bfee17 	ldw	r2,-72(fp)
 2009c70:	1000030d 	sth	zero,12(r2)

	m_bValid = true;
 2009c74:	e0ffee17 	ldw	r3,-72(fp)
 2009c78:	00800044 	movi	r2,1
 2009c7c:	18800205 	stb	r2,8(r3)

}
 2009c80:	00000e06 	br	2009cbc <_ZN21CMotorVelocityMessageC1Es+0x11c>
 2009c84:	e7001204 	addi	fp,fp,72
 2009c88:	e0fff217 	ldw	r3,-56(fp)
 2009c8c:	e0ffff15 	stw	r3,-4(fp)
 2009c90:	e0bfff17 	ldw	r2,-4(fp)
 2009c94:	e0bffd15 	stw	r2,-12(fp)
 2009c98:	e13fee17 	ldw	r4,-72(fp)
 2009c9c:	e03ff115 	stw	zero,-60(fp)
 2009ca0:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 2009ca4:	e0fffd17 	ldw	r3,-12(fp)
 2009ca8:	e0ffff15 	stw	r3,-4(fp)
 2009cac:	00bfffc4 	movi	r2,-1
 2009cb0:	e0bff115 	stw	r2,-60(fp)
 2009cb4:	e13fff17 	ldw	r4,-4(fp)
 2009cb8:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 2009cbc:	e13ff004 	addi	r4,fp,-64
 2009cc0:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 2009cc4:	e037883a 	mov	sp,fp
 2009cc8:	dfc00917 	ldw	ra,36(sp)
 2009ccc:	df000817 	ldw	fp,32(sp)
 2009cd0:	ddc00717 	ldw	r23,28(sp)
 2009cd4:	dd800617 	ldw	r22,24(sp)
 2009cd8:	dd400517 	ldw	r21,20(sp)
 2009cdc:	dd000417 	ldw	r20,16(sp)
 2009ce0:	dcc00317 	ldw	r19,12(sp)
 2009ce4:	dc800217 	ldw	r18,8(sp)
 2009ce8:	dc400117 	ldw	r17,4(sp)
 2009cec:	dc000017 	ldw	r16,0(sp)
 2009cf0:	dec00a04 	addi	sp,sp,40
 2009cf4:	f800283a 	ret

02009cf8 <_ZN21CMotorVelocityMessageC2Es>:
 *      Author: Florian
 */

#include "MotorVelocityMessage.h"

CMotorVelocityMessage::CMotorVelocityMessage(alt_16 iDesiredSpeed)
 2009cf8:	deffe404 	addi	sp,sp,-112
 2009cfc:	dfc01b15 	stw	ra,108(sp)
 2009d00:	df001a15 	stw	fp,104(sp)
 2009d04:	ddc01915 	stw	r23,100(sp)
 2009d08:	dd801815 	stw	r22,96(sp)
 2009d0c:	dd401715 	stw	r21,92(sp)
 2009d10:	dd001615 	stw	r20,88(sp)
 2009d14:	dcc01515 	stw	r19,84(sp)
 2009d18:	dc801415 	stw	r18,80(sp)
 2009d1c:	dc401315 	stw	r17,76(sp)
 2009d20:	dc001215 	stw	r16,72(sp)
 2009d24:	df001204 	addi	fp,sp,72
 2009d28:	e13fee15 	stw	r4,-72(fp)
 2009d2c:	e17fef0d 	sth	r5,-68(fp)
 2009d30:	00808074 	movhi	r2,513
 2009d34:	10ae5a04 	addi	r2,r2,-18072
 2009d38:	e0bff615 	stw	r2,-40(fp)
 2009d3c:	008080b4 	movhi	r2,514
 2009d40:	10ade304 	addi	r2,r2,-18548
 2009d44:	e0bff715 	stw	r2,-36(fp)
 2009d48:	e0bff804 	addi	r2,fp,-32
 2009d4c:	e0ffee04 	addi	r3,fp,-72
 2009d50:	10c00015 	stw	r3,0(r2)
 2009d54:	00c08074 	movhi	r3,513
 2009d58:	18e77704 	addi	r3,r3,-25124
 2009d5c:	10c00115 	stw	r3,4(r2)
 2009d60:	16c00215 	stw	sp,8(r2)
 2009d64:	e13ff004 	addi	r4,fp,-64
 2009d68:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 2009d6c:	e13fee17 	ldw	r4,-72(fp)
 2009d70:	00bfffc4 	movi	r2,-1
 2009d74:	e0bff115 	stw	r2,-60(fp)
 2009d78:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 2009d7c:	00c080b4 	movhi	r3,514
 2009d80:	18eec704 	addi	r3,r3,-17636
 2009d84:	e0bfee17 	ldw	r2,-72(fp)
 2009d88:	10c00015 	stw	r3,0(r2)
{
	setHeader(4, getLength(), 0);
 2009d8c:	e0bfee17 	ldw	r2,-72(fp)
 2009d90:	e0bffe15 	stw	r2,-8(fp)
 2009d94:	e13fee17 	ldw	r4,-72(fp)
 2009d98:	200964c0 	call	200964c <_ZN21CMotorVelocityMessage9getLengthEv>
 2009d9c:	11803fcc 	andi	r6,r2,255
 2009da0:	00800044 	movi	r2,1
 2009da4:	e0bff115 	stw	r2,-60(fp)
 2009da8:	e13ffe17 	ldw	r4,-8(fp)
 2009dac:	01400104 	movi	r5,4
 2009db0:	000f883a 	mov	r7,zero
 2009db4:	20070480 	call	2007048 <_ZN11CCarMessage9setHeaderEhhb>

 	m_iDesiredSpeed = iDesiredSpeed;
 2009db8:	e0ffee17 	ldw	r3,-72(fp)
 2009dbc:	e0bfef0b 	ldhu	r2,-68(fp)
 2009dc0:	1880028d 	sth	r2,10(r3)
	m_iCurrentSpeed = 0;
 2009dc4:	e0bfee17 	ldw	r2,-72(fp)
 2009dc8:	1000030d 	sth	zero,12(r2)

	m_bValid = true;
 2009dcc:	e0ffee17 	ldw	r3,-72(fp)
 2009dd0:	00800044 	movi	r2,1
 2009dd4:	18800205 	stb	r2,8(r3)

}
 2009dd8:	00000e06 	br	2009e14 <_ZN21CMotorVelocityMessageC2Es+0x11c>
 2009ddc:	e7001204 	addi	fp,fp,72
 2009de0:	e0fff217 	ldw	r3,-56(fp)
 2009de4:	e0ffff15 	stw	r3,-4(fp)
 2009de8:	e0bfff17 	ldw	r2,-4(fp)
 2009dec:	e0bffd15 	stw	r2,-12(fp)
 2009df0:	e13fee17 	ldw	r4,-72(fp)
 2009df4:	e03ff115 	stw	zero,-60(fp)
 2009df8:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 2009dfc:	e0fffd17 	ldw	r3,-12(fp)
 2009e00:	e0ffff15 	stw	r3,-4(fp)
 2009e04:	00bfffc4 	movi	r2,-1
 2009e08:	e0bff115 	stw	r2,-60(fp)
 2009e0c:	e13fff17 	ldw	r4,-4(fp)
 2009e10:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 2009e14:	e13ff004 	addi	r4,fp,-64
 2009e18:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 2009e1c:	e037883a 	mov	sp,fp
 2009e20:	dfc00917 	ldw	ra,36(sp)
 2009e24:	df000817 	ldw	fp,32(sp)
 2009e28:	ddc00717 	ldw	r23,28(sp)
 2009e2c:	dd800617 	ldw	r22,24(sp)
 2009e30:	dd400517 	ldw	r21,20(sp)
 2009e34:	dd000417 	ldw	r20,16(sp)
 2009e38:	dcc00317 	ldw	r19,12(sp)
 2009e3c:	dc800217 	ldw	r18,8(sp)
 2009e40:	dc400117 	ldw	r17,4(sp)
 2009e44:	dc000017 	ldw	r16,0(sp)
 2009e48:	dec00a04 	addi	sp,sp,40
 2009e4c:	f800283a 	ret

02009e50 <_ZN26CUltrasoundDistanceMessage13answerMessageEl>:
}

/*
 * Overrided from CCarMessage.
 */
void CUltrasoundDistanceMessage::answerMessage(alt_32 iDistance)
 2009e50:	defffd04 	addi	sp,sp,-12
 2009e54:	df000215 	stw	fp,8(sp)
 2009e58:	df000204 	addi	fp,sp,8
 2009e5c:	e13ffe15 	stw	r4,-8(fp)
 2009e60:	e17fff15 	stw	r5,-4(fp)
{
    m_uiDistance = iDistance;
 2009e64:	e0bfff17 	ldw	r2,-4(fp)
 2009e68:	1007883a 	mov	r3,r2
 2009e6c:	e0bffe17 	ldw	r2,-8(fp)
 2009e70:	10c0028d 	sth	r3,10(r2)
    if(iDistance >= 0)
 2009e74:	e0bfff17 	ldw	r2,-4(fp)
 2009e78:	1004803a 	cmplt	r2,r2,zero
 2009e7c:	1000041e 	bne	r2,zero,2009e90 <_ZN26CUltrasoundDistanceMessage13answerMessageEl+0x40>
		m_uiDistanceValid = 1;
 2009e80:	e0fffe17 	ldw	r3,-8(fp)
 2009e84:	00800044 	movi	r2,1
 2009e88:	18800305 	stb	r2,12(r3)
 2009e8c:	00000206 	br	2009e98 <_ZN26CUltrasoundDistanceMessage13answerMessageEl+0x48>
	else
		m_uiDistanceValid = 0;
 2009e90:	e0bffe17 	ldw	r2,-8(fp)
 2009e94:	10000305 	stb	zero,12(r2)
    m_uiFlags = m_uiFlags | 0x01; // Set response flag
 2009e98:	e0bffe17 	ldw	r2,-8(fp)
 2009e9c:	108001c3 	ldbu	r2,7(r2)
 2009ea0:	10800054 	ori	r2,r2,1
 2009ea4:	1007883a 	mov	r3,r2
 2009ea8:	e0bffe17 	ldw	r2,-8(fp)
 2009eac:	10c001c5 	stb	r3,7(r2)
}
 2009eb0:	e037883a 	mov	sp,fp
 2009eb4:	df000017 	ldw	fp,0(sp)
 2009eb8:	dec00104 	addi	sp,sp,4
 2009ebc:	f800283a 	ret

02009ec0 <_ZN26CUltrasoundDistanceMessage9getLengthEv>:
}

/*
 * Overrided from CCarMessage.
 */
alt_u32 CUltrasoundDistanceMessage::getLength()
 2009ec0:	defffe04 	addi	sp,sp,-8
 2009ec4:	df000115 	stw	fp,4(sp)
 2009ec8:	df000104 	addi	fp,sp,4
 2009ecc:	e13fff15 	stw	r4,-4(fp)
{
    return 8;
 2009ed0:	00800204 	movi	r2,8
}
 2009ed4:	e037883a 	mov	sp,fp
 2009ed8:	df000017 	ldw	fp,0(sp)
 2009edc:	dec00104 	addi	sp,sp,4
 2009ee0:	f800283a 	ret

02009ee4 <_ZN26CUltrasoundDistanceMessage12parseMessageEPhi>:

/*
 * Overrided from CCarMessage.
 */
void CUltrasoundDistanceMessage::parseMessage(alt_u8 *pMessage, int iLength)
 2009ee4:	defffc04 	addi	sp,sp,-16
 2009ee8:	df000315 	stw	fp,12(sp)
 2009eec:	df000304 	addi	fp,sp,12
 2009ef0:	e13ffd15 	stw	r4,-12(fp)
 2009ef4:	e17ffe15 	stw	r5,-8(fp)
 2009ef8:	e1bfff15 	stw	r6,-4(fp)
{
    if(iLength < 4)
 2009efc:	e0bfff17 	ldw	r2,-4(fp)
 2009f00:	10800110 	cmplti	r2,r2,4
 2009f04:	1000181e 	bne	r2,zero,2009f68 <_ZN26CUltrasoundDistanceMessage12parseMessageEPhi+0x84>
        return;

    m_uiDistance = ((alt_u32) pMessage[0]) << 0;
 2009f08:	e0bffe17 	ldw	r2,-8(fp)
 2009f0c:	10800003 	ldbu	r2,0(r2)
 2009f10:	10c03fcc 	andi	r3,r2,255
 2009f14:	e0bffd17 	ldw	r2,-12(fp)
 2009f18:	10c0028d 	sth	r3,10(r2)
    m_uiDistance |= ((alt_u32) pMessage[1]) << 8;
 2009f1c:	e0bffd17 	ldw	r2,-12(fp)
 2009f20:	10c0028b 	ldhu	r3,10(r2)
 2009f24:	e0bffe17 	ldw	r2,-8(fp)
 2009f28:	10800044 	addi	r2,r2,1
 2009f2c:	10800003 	ldbu	r2,0(r2)
 2009f30:	10803fcc 	andi	r2,r2,255
 2009f34:	1004923a 	slli	r2,r2,8
 2009f38:	1884b03a 	or	r2,r3,r2
 2009f3c:	1007883a 	mov	r3,r2
 2009f40:	e0bffd17 	ldw	r2,-12(fp)
 2009f44:	10c0028d 	sth	r3,10(r2)
    m_uiDistanceValid = pMessage[3];
 2009f48:	e0bffe17 	ldw	r2,-8(fp)
 2009f4c:	108000c4 	addi	r2,r2,3
 2009f50:	10c00003 	ldbu	r3,0(r2)
 2009f54:	e0bffd17 	ldw	r2,-12(fp)
 2009f58:	10c00305 	stb	r3,12(r2)

    m_bValid = true;
 2009f5c:	e0fffd17 	ldw	r3,-12(fp)
 2009f60:	00800044 	movi	r2,1
 2009f64:	18800205 	stb	r2,8(r3)
}
 2009f68:	e037883a 	mov	sp,fp
 2009f6c:	df000017 	ldw	fp,0(sp)
 2009f70:	dec00104 	addi	sp,sp,4
 2009f74:	f800283a 	ret

02009f78 <_ZN26CUltrasoundDistanceMessage8getBytesEPh>:
}

/*
 * Overrided from CCarMessage.
 */
bool CUltrasoundDistanceMessage::getBytes(alt_u8 *pMessage)
 2009f78:	defffc04 	addi	sp,sp,-16
 2009f7c:	dfc00315 	stw	ra,12(sp)
 2009f80:	df000215 	stw	fp,8(sp)
 2009f84:	df000204 	addi	fp,sp,8
 2009f88:	e13ffe15 	stw	r4,-8(fp)
 2009f8c:	e17fff15 	stw	r5,-4(fp)
{
    CCarMessage::getBytes(pMessage);
 2009f90:	e13ffe17 	ldw	r4,-8(fp)
 2009f94:	e17fff17 	ldw	r5,-4(fp)
 2009f98:	2006f040 	call	2006f04 <_ZN11CCarMessage8getBytesEPh>

    pMessage[4] = (m_uiDistance >> 0) & 0xFF;
 2009f9c:	e0bfff17 	ldw	r2,-4(fp)
 2009fa0:	11000104 	addi	r4,r2,4
 2009fa4:	e0bffe17 	ldw	r2,-8(fp)
 2009fa8:	1080028b 	ldhu	r2,10(r2)
 2009fac:	1007883a 	mov	r3,r2
 2009fb0:	00bfffc4 	movi	r2,-1
 2009fb4:	1884703a 	and	r2,r3,r2
 2009fb8:	20800005 	stb	r2,0(r4)
    pMessage[5] += (m_uiDistance >> 8) & 0xFF;
 2009fbc:	e0bfff17 	ldw	r2,-4(fp)
 2009fc0:	11000144 	addi	r4,r2,5
 2009fc4:	e0bfff17 	ldw	r2,-4(fp)
 2009fc8:	10800144 	addi	r2,r2,5
 2009fcc:	11400003 	ldbu	r5,0(r2)
 2009fd0:	e0bffe17 	ldw	r2,-8(fp)
 2009fd4:	1080028b 	ldhu	r2,10(r2)
 2009fd8:	10bfffcc 	andi	r2,r2,65535
 2009fdc:	1004d23a 	srli	r2,r2,8
 2009fe0:	1007883a 	mov	r3,r2
 2009fe4:	00bfffc4 	movi	r2,-1
 2009fe8:	1884703a 	and	r2,r3,r2
 2009fec:	2885883a 	add	r2,r5,r2
 2009ff0:	20800005 	stb	r2,0(r4)
    pMessage[6] = 0;
 2009ff4:	e0bfff17 	ldw	r2,-4(fp)
 2009ff8:	10800184 	addi	r2,r2,6
 2009ffc:	10000005 	stb	zero,0(r2)
    pMessage[7] = m_uiDistanceValid;
 200a000:	e0bfff17 	ldw	r2,-4(fp)
 200a004:	10c001c4 	addi	r3,r2,7
 200a008:	e0bffe17 	ldw	r2,-8(fp)
 200a00c:	10800303 	ldbu	r2,12(r2)
 200a010:	18800005 	stb	r2,0(r3)
    return m_bValid;
 200a014:	e0bffe17 	ldw	r2,-8(fp)
 200a018:	10800203 	ldbu	r2,8(r2)
 200a01c:	10803fcc 	andi	r2,r2,255
}
 200a020:	e037883a 	mov	sp,fp
 200a024:	dfc00117 	ldw	ra,4(sp)
 200a028:	df000017 	ldw	fp,0(sp)
 200a02c:	dec00204 	addi	sp,sp,8
 200a030:	f800283a 	ret

0200a034 <_ZN26CUltrasoundDistanceMessage8doActionEv>:
}

/*
 * Overrided from CCarMessage.
 */
void CUltrasoundDistanceMessage::doAction()
 200a034:	defffc04 	addi	sp,sp,-16
 200a038:	dfc00315 	stw	ra,12(sp)
 200a03c:	df000215 	stw	fp,8(sp)
 200a040:	df000204 	addi	fp,sp,8
 200a044:	e13fff15 	stw	r4,-4(fp)
{
#ifndef CENTRAL_ECU_BUILD
	alt_32 distance = measuredistance(0x6001120);
 200a048:	01018034 	movhi	r4,1536
 200a04c:	21044804 	addi	r4,r4,4384
 200a050:	2000d180 	call	2000d18 <_Z15measuredistancem>
 200a054:	e0bffe15 	stw	r2,-8(fp)
	answerMessage(distance);
 200a058:	e13fff17 	ldw	r4,-4(fp)
 200a05c:	e17ffe17 	ldw	r5,-8(fp)
 200a060:	2009e500 	call	2009e50 <_ZN26CUltrasoundDistanceMessage13answerMessageEl>
#endif /* CENTRAL_ECU_BUILD */

}
 200a064:	e037883a 	mov	sp,fp
 200a068:	dfc00117 	ldw	ra,4(sp)
 200a06c:	df000017 	ldw	fp,0(sp)
 200a070:	dec00204 	addi	sp,sp,8
 200a074:	f800283a 	ret

0200a078 <_ZN26CUltrasoundDistanceMessageD0Ev>:
}

/*
 * Basic Destructor.
 */
CUltrasoundDistanceMessage::~CUltrasoundDistanceMessage()
 200a078:	defffd04 	addi	sp,sp,-12
 200a07c:	dfc00215 	stw	ra,8(sp)
 200a080:	df000115 	stw	fp,4(sp)
 200a084:	df000104 	addi	fp,sp,4
 200a088:	e13fff15 	stw	r4,-4(fp)
 200a08c:	00c080b4 	movhi	r3,514
 200a090:	18eed704 	addi	r3,r3,-17572
 200a094:	e0bfff17 	ldw	r2,-4(fp)
 200a098:	10c00015 	stw	r3,0(r2)
{
}
 200a09c:	e13fff17 	ldw	r4,-4(fp)
 200a0a0:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 200a0a4:	00800044 	movi	r2,1
 200a0a8:	10803fcc 	andi	r2,r2,255
 200a0ac:	1005003a 	cmpeq	r2,r2,zero
 200a0b0:	1000021e 	bne	r2,zero,200a0bc <_ZN26CUltrasoundDistanceMessageD0Ev+0x44>
 200a0b4:	e13fff17 	ldw	r4,-4(fp)
 200a0b8:	200c1380 	call	200c138 <_ZdlPv>
 200a0bc:	e037883a 	mov	sp,fp
 200a0c0:	dfc00117 	ldw	ra,4(sp)
 200a0c4:	df000017 	ldw	fp,0(sp)
 200a0c8:	dec00204 	addi	sp,sp,8
 200a0cc:	f800283a 	ret

0200a0d0 <_ZN26CUltrasoundDistanceMessageD1Ev>:
}

/*
 * Basic Destructor.
 */
CUltrasoundDistanceMessage::~CUltrasoundDistanceMessage()
 200a0d0:	defffd04 	addi	sp,sp,-12
 200a0d4:	dfc00215 	stw	ra,8(sp)
 200a0d8:	df000115 	stw	fp,4(sp)
 200a0dc:	df000104 	addi	fp,sp,4
 200a0e0:	e13fff15 	stw	r4,-4(fp)
 200a0e4:	00c080b4 	movhi	r3,514
 200a0e8:	18eed704 	addi	r3,r3,-17572
 200a0ec:	e0bfff17 	ldw	r2,-4(fp)
 200a0f0:	10c00015 	stw	r3,0(r2)
{
}
 200a0f4:	e13fff17 	ldw	r4,-4(fp)
 200a0f8:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 200a0fc:	0005883a 	mov	r2,zero
 200a100:	10803fcc 	andi	r2,r2,255
 200a104:	1005003a 	cmpeq	r2,r2,zero
 200a108:	1000021e 	bne	r2,zero,200a114 <_ZN26CUltrasoundDistanceMessageD1Ev+0x44>
 200a10c:	e13fff17 	ldw	r4,-4(fp)
 200a110:	200c1380 	call	200c138 <_ZdlPv>
 200a114:	e037883a 	mov	sp,fp
 200a118:	dfc00117 	ldw	ra,4(sp)
 200a11c:	df000017 	ldw	fp,0(sp)
 200a120:	dec00204 	addi	sp,sp,8
 200a124:	f800283a 	ret

0200a128 <_ZN26CUltrasoundDistanceMessageD2Ev>:
}

/*
 * Basic Destructor.
 */
CUltrasoundDistanceMessage::~CUltrasoundDistanceMessage()
 200a128:	defffd04 	addi	sp,sp,-12
 200a12c:	dfc00215 	stw	ra,8(sp)
 200a130:	df000115 	stw	fp,4(sp)
 200a134:	df000104 	addi	fp,sp,4
 200a138:	e13fff15 	stw	r4,-4(fp)
 200a13c:	00c080b4 	movhi	r3,514
 200a140:	18eed704 	addi	r3,r3,-17572
 200a144:	e0bfff17 	ldw	r2,-4(fp)
 200a148:	10c00015 	stw	r3,0(r2)
{
}
 200a14c:	e13fff17 	ldw	r4,-4(fp)
 200a150:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 200a154:	0005883a 	mov	r2,zero
 200a158:	10803fcc 	andi	r2,r2,255
 200a15c:	1005003a 	cmpeq	r2,r2,zero
 200a160:	1000021e 	bne	r2,zero,200a16c <_ZN26CUltrasoundDistanceMessageD2Ev+0x44>
 200a164:	e13fff17 	ldw	r4,-4(fp)
 200a168:	200c1380 	call	200c138 <_ZdlPv>
 200a16c:	e037883a 	mov	sp,fp
 200a170:	dfc00117 	ldw	ra,4(sp)
 200a174:	df000017 	ldw	fp,0(sp)
 200a178:	dec00204 	addi	sp,sp,8
 200a17c:	f800283a 	ret

0200a180 <_ZN26CUltrasoundDistanceMessageC1EPhi>:
/*
 * Constructor. Used to reassemble object from Byte stream.
 * pMessage : Byte-Array containing the fields of the subMessage
 * iLength  : Length of the said array
 */
CUltrasoundDistanceMessage::CUltrasoundDistanceMessage(alt_u8 *pMessage, int iLength)
 200a180:	deffe404 	addi	sp,sp,-112
 200a184:	dfc01b15 	stw	ra,108(sp)
 200a188:	df001a15 	stw	fp,104(sp)
 200a18c:	ddc01915 	stw	r23,100(sp)
 200a190:	dd801815 	stw	r22,96(sp)
 200a194:	dd401715 	stw	r21,92(sp)
 200a198:	dd001615 	stw	r20,88(sp)
 200a19c:	dcc01515 	stw	r19,84(sp)
 200a1a0:	dc801415 	stw	r18,80(sp)
 200a1a4:	dc401315 	stw	r17,76(sp)
 200a1a8:	dc001215 	stw	r16,72(sp)
 200a1ac:	df001204 	addi	fp,sp,72
 200a1b0:	e13fee15 	stw	r4,-72(fp)
 200a1b4:	e17fef15 	stw	r5,-68(fp)
 200a1b8:	e1bff015 	stw	r6,-64(fp)
 200a1bc:	00808074 	movhi	r2,513
 200a1c0:	10ae5a04 	addi	r2,r2,-18072
 200a1c4:	e0bff715 	stw	r2,-36(fp)
 200a1c8:	008080b4 	movhi	r2,514
 200a1cc:	10ade484 	addi	r2,r2,-18542
 200a1d0:	e0bff815 	stw	r2,-32(fp)
 200a1d4:	e0bff904 	addi	r2,fp,-28
 200a1d8:	e0ffee04 	addi	r3,fp,-72
 200a1dc:	10c00015 	stw	r3,0(r2)
 200a1e0:	00c08074 	movhi	r3,513
 200a1e4:	18e89a04 	addi	r3,r3,-23960
 200a1e8:	10c00115 	stw	r3,4(r2)
 200a1ec:	16c00215 	stw	sp,8(r2)
 200a1f0:	e13ff104 	addi	r4,fp,-60
 200a1f4:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 200a1f8:	e13fee17 	ldw	r4,-72(fp)
 200a1fc:	00bfffc4 	movi	r2,-1
 200a200:	e0bff215 	stw	r2,-56(fp)
 200a204:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 200a208:	00c080b4 	movhi	r3,514
 200a20c:	18eed704 	addi	r3,r3,-17572
 200a210:	e0bfee17 	ldw	r2,-72(fp)
 200a214:	10c00015 	stw	r3,0(r2)
{
    parseHeader(pMessage, iLength);
 200a218:	e13fee17 	ldw	r4,-72(fp)
 200a21c:	00800044 	movi	r2,1
 200a220:	e0bff215 	stw	r2,-56(fp)
 200a224:	e17fef17 	ldw	r5,-68(fp)
 200a228:	e1bff017 	ldw	r6,-64(fp)
 200a22c:	20071cc0 	call	20071cc <_ZN11CCarMessage11parseHeaderEPhi>
    if(m_bValid)
 200a230:	e0bfee17 	ldw	r2,-72(fp)
 200a234:	10800203 	ldbu	r2,8(r2)
 200a238:	10803fcc 	andi	r2,r2,255
 200a23c:	1005003a 	cmpeq	r2,r2,zero
 200a240:	1000171e 	bne	r2,zero,200a2a0 <_ZN26CUltrasoundDistanceMessageC1EPhi+0x120>
    {
        m_bValid = false;
 200a244:	e0bfee17 	ldw	r2,-72(fp)
 200a248:	10000205 	stb	zero,8(r2)
        parseMessage(pMessage+4, iLength-4);
 200a24c:	e0bfef17 	ldw	r2,-68(fp)
 200a250:	11400104 	addi	r5,r2,4
 200a254:	e0bff017 	ldw	r2,-64(fp)
 200a258:	11bfff04 	addi	r6,r2,-4
 200a25c:	e13fee17 	ldw	r4,-72(fp)
 200a260:	2009ee40 	call	2009ee4 <_ZN26CUltrasoundDistanceMessage12parseMessageEPhi>
    }

}
 200a264:	00000e06 	br	200a2a0 <_ZN26CUltrasoundDistanceMessageC1EPhi+0x120>
 200a268:	e7001204 	addi	fp,fp,72
 200a26c:	e0bff317 	ldw	r2,-52(fp)
 200a270:	e0bfff15 	stw	r2,-4(fp)
 200a274:	e0ffff17 	ldw	r3,-4(fp)
 200a278:	e0fffe15 	stw	r3,-8(fp)
 200a27c:	e13fee17 	ldw	r4,-72(fp)
 200a280:	e03ff215 	stw	zero,-56(fp)
 200a284:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 200a288:	e0bffe17 	ldw	r2,-8(fp)
 200a28c:	e0bfff15 	stw	r2,-4(fp)
 200a290:	00bfffc4 	movi	r2,-1
 200a294:	e0bff215 	stw	r2,-56(fp)
 200a298:	e13fff17 	ldw	r4,-4(fp)
 200a29c:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 200a2a0:	e13ff104 	addi	r4,fp,-60
 200a2a4:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 200a2a8:	e037883a 	mov	sp,fp
 200a2ac:	dfc00917 	ldw	ra,36(sp)
 200a2b0:	df000817 	ldw	fp,32(sp)
 200a2b4:	ddc00717 	ldw	r23,28(sp)
 200a2b8:	dd800617 	ldw	r22,24(sp)
 200a2bc:	dd400517 	ldw	r21,20(sp)
 200a2c0:	dd000417 	ldw	r20,16(sp)
 200a2c4:	dcc00317 	ldw	r19,12(sp)
 200a2c8:	dc800217 	ldw	r18,8(sp)
 200a2cc:	dc400117 	ldw	r17,4(sp)
 200a2d0:	dc000017 	ldw	r16,0(sp)
 200a2d4:	dec00a04 	addi	sp,sp,40
 200a2d8:	f800283a 	ret

0200a2dc <_ZN26CUltrasoundDistanceMessageC2EPhi>:
/*
 * Constructor. Used to reassemble object from Byte stream.
 * pMessage : Byte-Array containing the fields of the subMessage
 * iLength  : Length of the said array
 */
CUltrasoundDistanceMessage::CUltrasoundDistanceMessage(alt_u8 *pMessage, int iLength)
 200a2dc:	deffe404 	addi	sp,sp,-112
 200a2e0:	dfc01b15 	stw	ra,108(sp)
 200a2e4:	df001a15 	stw	fp,104(sp)
 200a2e8:	ddc01915 	stw	r23,100(sp)
 200a2ec:	dd801815 	stw	r22,96(sp)
 200a2f0:	dd401715 	stw	r21,92(sp)
 200a2f4:	dd001615 	stw	r20,88(sp)
 200a2f8:	dcc01515 	stw	r19,84(sp)
 200a2fc:	dc801415 	stw	r18,80(sp)
 200a300:	dc401315 	stw	r17,76(sp)
 200a304:	dc001215 	stw	r16,72(sp)
 200a308:	df001204 	addi	fp,sp,72
 200a30c:	e13fee15 	stw	r4,-72(fp)
 200a310:	e17fef15 	stw	r5,-68(fp)
 200a314:	e1bff015 	stw	r6,-64(fp)
 200a318:	00808074 	movhi	r2,513
 200a31c:	10ae5a04 	addi	r2,r2,-18072
 200a320:	e0bff715 	stw	r2,-36(fp)
 200a324:	008080b4 	movhi	r2,514
 200a328:	10ade604 	addi	r2,r2,-18536
 200a32c:	e0bff815 	stw	r2,-32(fp)
 200a330:	e0bff904 	addi	r2,fp,-28
 200a334:	e0ffee04 	addi	r3,fp,-72
 200a338:	10c00015 	stw	r3,0(r2)
 200a33c:	00c08074 	movhi	r3,513
 200a340:	18e8f104 	addi	r3,r3,-23612
 200a344:	10c00115 	stw	r3,4(r2)
 200a348:	16c00215 	stw	sp,8(r2)
 200a34c:	e13ff104 	addi	r4,fp,-60
 200a350:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 200a354:	e13fee17 	ldw	r4,-72(fp)
 200a358:	00bfffc4 	movi	r2,-1
 200a35c:	e0bff215 	stw	r2,-56(fp)
 200a360:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 200a364:	00c080b4 	movhi	r3,514
 200a368:	18eed704 	addi	r3,r3,-17572
 200a36c:	e0bfee17 	ldw	r2,-72(fp)
 200a370:	10c00015 	stw	r3,0(r2)
{
    parseHeader(pMessage, iLength);
 200a374:	e13fee17 	ldw	r4,-72(fp)
 200a378:	00800044 	movi	r2,1
 200a37c:	e0bff215 	stw	r2,-56(fp)
 200a380:	e17fef17 	ldw	r5,-68(fp)
 200a384:	e1bff017 	ldw	r6,-64(fp)
 200a388:	20071cc0 	call	20071cc <_ZN11CCarMessage11parseHeaderEPhi>
    if(m_bValid)
 200a38c:	e0bfee17 	ldw	r2,-72(fp)
 200a390:	10800203 	ldbu	r2,8(r2)
 200a394:	10803fcc 	andi	r2,r2,255
 200a398:	1005003a 	cmpeq	r2,r2,zero
 200a39c:	1000171e 	bne	r2,zero,200a3fc <_ZN26CUltrasoundDistanceMessageC2EPhi+0x120>
    {
        m_bValid = false;
 200a3a0:	e0bfee17 	ldw	r2,-72(fp)
 200a3a4:	10000205 	stb	zero,8(r2)
        parseMessage(pMessage+4, iLength-4);
 200a3a8:	e0bfef17 	ldw	r2,-68(fp)
 200a3ac:	11400104 	addi	r5,r2,4
 200a3b0:	e0bff017 	ldw	r2,-64(fp)
 200a3b4:	11bfff04 	addi	r6,r2,-4
 200a3b8:	e13fee17 	ldw	r4,-72(fp)
 200a3bc:	2009ee40 	call	2009ee4 <_ZN26CUltrasoundDistanceMessage12parseMessageEPhi>
    }

}
 200a3c0:	00000e06 	br	200a3fc <_ZN26CUltrasoundDistanceMessageC2EPhi+0x120>
 200a3c4:	e7001204 	addi	fp,fp,72
 200a3c8:	e0bff317 	ldw	r2,-52(fp)
 200a3cc:	e0bfff15 	stw	r2,-4(fp)
 200a3d0:	e0ffff17 	ldw	r3,-4(fp)
 200a3d4:	e0fffe15 	stw	r3,-8(fp)
 200a3d8:	e13fee17 	ldw	r4,-72(fp)
 200a3dc:	e03ff215 	stw	zero,-56(fp)
 200a3e0:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 200a3e4:	e0bffe17 	ldw	r2,-8(fp)
 200a3e8:	e0bfff15 	stw	r2,-4(fp)
 200a3ec:	00bfffc4 	movi	r2,-1
 200a3f0:	e0bff215 	stw	r2,-56(fp)
 200a3f4:	e13fff17 	ldw	r4,-4(fp)
 200a3f8:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 200a3fc:	e13ff104 	addi	r4,fp,-60
 200a400:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 200a404:	e037883a 	mov	sp,fp
 200a408:	dfc00917 	ldw	ra,36(sp)
 200a40c:	df000817 	ldw	fp,32(sp)
 200a410:	ddc00717 	ldw	r23,28(sp)
 200a414:	dd800617 	ldw	r22,24(sp)
 200a418:	dd400517 	ldw	r21,20(sp)
 200a41c:	dd000417 	ldw	r20,16(sp)
 200a420:	dcc00317 	ldw	r19,12(sp)
 200a424:	dc800217 	ldw	r18,8(sp)
 200a428:	dc400117 	ldw	r17,4(sp)
 200a42c:	dc000017 	ldw	r16,0(sp)
 200a430:	dec00a04 	addi	sp,sp,40
 200a434:	f800283a 	ret

0200a438 <_ZN26CUltrasoundDistanceMessageC1Ev>:
// Import Interfaces

/*
 * Basic Constructor. Used to initialise new message-objects.
 */
CUltrasoundDistanceMessage::CUltrasoundDistanceMessage()
 200a438:	deffe504 	addi	sp,sp,-108
 200a43c:	dfc01a15 	stw	ra,104(sp)
 200a440:	df001915 	stw	fp,100(sp)
 200a444:	ddc01815 	stw	r23,96(sp)
 200a448:	dd801715 	stw	r22,92(sp)
 200a44c:	dd401615 	stw	r21,88(sp)
 200a450:	dd001515 	stw	r20,84(sp)
 200a454:	dcc01415 	stw	r19,80(sp)
 200a458:	dc801315 	stw	r18,76(sp)
 200a45c:	dc401215 	stw	r17,72(sp)
 200a460:	dc001115 	stw	r16,68(sp)
 200a464:	df001104 	addi	fp,sp,68
 200a468:	e13fef15 	stw	r4,-68(fp)
 200a46c:	00808074 	movhi	r2,513
 200a470:	10ae5a04 	addi	r2,r2,-18072
 200a474:	e0bff615 	stw	r2,-40(fp)
 200a478:	008080b4 	movhi	r2,514
 200a47c:	10ade784 	addi	r2,r2,-18530
 200a480:	e0bff715 	stw	r2,-36(fp)
 200a484:	e0bff804 	addi	r2,fp,-32
 200a488:	e0ffef04 	addi	r3,fp,-68
 200a48c:	10c00015 	stw	r3,0(r2)
 200a490:	00c08074 	movhi	r3,513
 200a494:	18e94504 	addi	r3,r3,-23276
 200a498:	10c00115 	stw	r3,4(r2)
 200a49c:	16c00215 	stw	sp,8(r2)
 200a4a0:	e13ff004 	addi	r4,fp,-64
 200a4a4:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 200a4a8:	e13fef17 	ldw	r4,-68(fp)
 200a4ac:	00bfffc4 	movi	r2,-1
 200a4b0:	e0bff115 	stw	r2,-60(fp)
 200a4b4:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 200a4b8:	00c080b4 	movhi	r3,514
 200a4bc:	18eed704 	addi	r3,r3,-17572
 200a4c0:	e0bfef17 	ldw	r2,-68(fp)
 200a4c4:	10c00015 	stw	r3,0(r2)
{
    setHeader(8, getLength(), 0);
 200a4c8:	e0bfef17 	ldw	r2,-68(fp)
 200a4cc:	e0bffe15 	stw	r2,-8(fp)
 200a4d0:	e13fef17 	ldw	r4,-68(fp)
 200a4d4:	2009ec00 	call	2009ec0 <_ZN26CUltrasoundDistanceMessage9getLengthEv>
 200a4d8:	11803fcc 	andi	r6,r2,255
 200a4dc:	00800044 	movi	r2,1
 200a4e0:	e0bff115 	stw	r2,-60(fp)
 200a4e4:	e13ffe17 	ldw	r4,-8(fp)
 200a4e8:	01400204 	movi	r5,8
 200a4ec:	000f883a 	mov	r7,zero
 200a4f0:	20070480 	call	2007048 <_ZN11CCarMessage9setHeaderEhhb>

    m_uiDistanceValid = 0;
 200a4f4:	e0bfef17 	ldw	r2,-68(fp)
 200a4f8:	10000305 	stb	zero,12(r2)
	m_uiDistance = 0;
 200a4fc:	e0bfef17 	ldw	r2,-68(fp)
 200a500:	1000028d 	sth	zero,10(r2)

    m_bValid = true;
 200a504:	e0ffef17 	ldw	r3,-68(fp)
 200a508:	00800044 	movi	r2,1
 200a50c:	18800205 	stb	r2,8(r3)
}
 200a510:	00000e06 	br	200a54c <_ZN26CUltrasoundDistanceMessageC1Ev+0x114>
 200a514:	e7001104 	addi	fp,fp,68
 200a518:	e0fff217 	ldw	r3,-56(fp)
 200a51c:	e0ffff15 	stw	r3,-4(fp)
 200a520:	e0bfff17 	ldw	r2,-4(fp)
 200a524:	e0bffd15 	stw	r2,-12(fp)
 200a528:	e13fef17 	ldw	r4,-68(fp)
 200a52c:	e03ff115 	stw	zero,-60(fp)
 200a530:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 200a534:	e0fffd17 	ldw	r3,-12(fp)
 200a538:	e0ffff15 	stw	r3,-4(fp)
 200a53c:	00bfffc4 	movi	r2,-1
 200a540:	e0bff115 	stw	r2,-60(fp)
 200a544:	e13fff17 	ldw	r4,-4(fp)
 200a548:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 200a54c:	e13ff004 	addi	r4,fp,-64
 200a550:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 200a554:	e037883a 	mov	sp,fp
 200a558:	dfc00917 	ldw	ra,36(sp)
 200a55c:	df000817 	ldw	fp,32(sp)
 200a560:	ddc00717 	ldw	r23,28(sp)
 200a564:	dd800617 	ldw	r22,24(sp)
 200a568:	dd400517 	ldw	r21,20(sp)
 200a56c:	dd000417 	ldw	r20,16(sp)
 200a570:	dcc00317 	ldw	r19,12(sp)
 200a574:	dc800217 	ldw	r18,8(sp)
 200a578:	dc400117 	ldw	r17,4(sp)
 200a57c:	dc000017 	ldw	r16,0(sp)
 200a580:	dec00a04 	addi	sp,sp,40
 200a584:	f800283a 	ret

0200a588 <_ZN26CUltrasoundDistanceMessageC2Ev>:
// Import Interfaces

/*
 * Basic Constructor. Used to initialise new message-objects.
 */
CUltrasoundDistanceMessage::CUltrasoundDistanceMessage()
 200a588:	deffe504 	addi	sp,sp,-108
 200a58c:	dfc01a15 	stw	ra,104(sp)
 200a590:	df001915 	stw	fp,100(sp)
 200a594:	ddc01815 	stw	r23,96(sp)
 200a598:	dd801715 	stw	r22,92(sp)
 200a59c:	dd401615 	stw	r21,88(sp)
 200a5a0:	dd001515 	stw	r20,84(sp)
 200a5a4:	dcc01415 	stw	r19,80(sp)
 200a5a8:	dc801315 	stw	r18,76(sp)
 200a5ac:	dc401215 	stw	r17,72(sp)
 200a5b0:	dc001115 	stw	r16,68(sp)
 200a5b4:	df001104 	addi	fp,sp,68
 200a5b8:	e13fef15 	stw	r4,-68(fp)
 200a5bc:	00808074 	movhi	r2,513
 200a5c0:	10ae5a04 	addi	r2,r2,-18072
 200a5c4:	e0bff615 	stw	r2,-40(fp)
 200a5c8:	008080b4 	movhi	r2,514
 200a5cc:	10ade904 	addi	r2,r2,-18524
 200a5d0:	e0bff715 	stw	r2,-36(fp)
 200a5d4:	e0bff804 	addi	r2,fp,-32
 200a5d8:	e0ffef04 	addi	r3,fp,-68
 200a5dc:	10c00015 	stw	r3,0(r2)
 200a5e0:	00c08074 	movhi	r3,513
 200a5e4:	18e99904 	addi	r3,r3,-22940
 200a5e8:	10c00115 	stw	r3,4(r2)
 200a5ec:	16c00215 	stw	sp,8(r2)
 200a5f0:	e13ff004 	addi	r4,fp,-64
 200a5f4:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 200a5f8:	e13fef17 	ldw	r4,-68(fp)
 200a5fc:	00bfffc4 	movi	r2,-1
 200a600:	e0bff115 	stw	r2,-60(fp)
 200a604:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 200a608:	00c080b4 	movhi	r3,514
 200a60c:	18eed704 	addi	r3,r3,-17572
 200a610:	e0bfef17 	ldw	r2,-68(fp)
 200a614:	10c00015 	stw	r3,0(r2)
{
    setHeader(8, getLength(), 0);
 200a618:	e0bfef17 	ldw	r2,-68(fp)
 200a61c:	e0bffe15 	stw	r2,-8(fp)
 200a620:	e13fef17 	ldw	r4,-68(fp)
 200a624:	2009ec00 	call	2009ec0 <_ZN26CUltrasoundDistanceMessage9getLengthEv>
 200a628:	11803fcc 	andi	r6,r2,255
 200a62c:	00800044 	movi	r2,1
 200a630:	e0bff115 	stw	r2,-60(fp)
 200a634:	e13ffe17 	ldw	r4,-8(fp)
 200a638:	01400204 	movi	r5,8
 200a63c:	000f883a 	mov	r7,zero
 200a640:	20070480 	call	2007048 <_ZN11CCarMessage9setHeaderEhhb>

    m_uiDistanceValid = 0;
 200a644:	e0bfef17 	ldw	r2,-68(fp)
 200a648:	10000305 	stb	zero,12(r2)
	m_uiDistance = 0;
 200a64c:	e0bfef17 	ldw	r2,-68(fp)
 200a650:	1000028d 	sth	zero,10(r2)

    m_bValid = true;
 200a654:	e0ffef17 	ldw	r3,-68(fp)
 200a658:	00800044 	movi	r2,1
 200a65c:	18800205 	stb	r2,8(r3)
}
 200a660:	00000e06 	br	200a69c <_ZN26CUltrasoundDistanceMessageC2Ev+0x114>
 200a664:	e7001104 	addi	fp,fp,68
 200a668:	e0fff217 	ldw	r3,-56(fp)
 200a66c:	e0ffff15 	stw	r3,-4(fp)
 200a670:	e0bfff17 	ldw	r2,-4(fp)
 200a674:	e0bffd15 	stw	r2,-12(fp)
 200a678:	e13fef17 	ldw	r4,-68(fp)
 200a67c:	e03ff115 	stw	zero,-60(fp)
 200a680:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 200a684:	e0fffd17 	ldw	r3,-12(fp)
 200a688:	e0ffff15 	stw	r3,-4(fp)
 200a68c:	00bfffc4 	movi	r2,-1
 200a690:	e0bff115 	stw	r2,-60(fp)
 200a694:	e13fff17 	ldw	r4,-4(fp)
 200a698:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 200a69c:	e13ff004 	addi	r4,fp,-64
 200a6a0:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 200a6a4:	e037883a 	mov	sp,fp
 200a6a8:	dfc00917 	ldw	ra,36(sp)
 200a6ac:	df000817 	ldw	fp,32(sp)
 200a6b0:	ddc00717 	ldw	r23,28(sp)
 200a6b4:	dd800617 	ldw	r22,24(sp)
 200a6b8:	dd400517 	ldw	r21,20(sp)
 200a6bc:	dd000417 	ldw	r20,16(sp)
 200a6c0:	dcc00317 	ldw	r19,12(sp)
 200a6c4:	dc800217 	ldw	r18,8(sp)
 200a6c8:	dc400117 	ldw	r17,4(sp)
 200a6cc:	dc000017 	ldw	r16,0(sp)
 200a6d0:	dec00a04 	addi	sp,sp,40
 200a6d4:	f800283a 	ret

0200a6d8 <_ZN15CWelcomeMessage8doActionEv>:
CWelcomeMessage::~CWelcomeMessage()
{

}

void CWelcomeMessage::doAction()
 200a6d8:	defffe04 	addi	sp,sp,-8
 200a6dc:	df000115 	stw	fp,4(sp)
 200a6e0:	df000104 	addi	fp,sp,4
 200a6e4:	e13fff15 	stw	r4,-4(fp)
{
	// Do nothing!
}
 200a6e8:	e037883a 	mov	sp,fp
 200a6ec:	df000017 	ldw	fp,0(sp)
 200a6f0:	dec00104 	addi	sp,sp,4
 200a6f4:	f800283a 	ret

0200a6f8 <_ZN15CWelcomeMessage9getLengthEv>:

	return m_bValid;
}


alt_u32 CWelcomeMessage::getLength()
 200a6f8:	defffe04 	addi	sp,sp,-8
 200a6fc:	df000115 	stw	fp,4(sp)
 200a700:	df000104 	addi	fp,sp,4
 200a704:	e13fff15 	stw	r4,-4(fp)
{
	return 12;
 200a708:	00800304 	movi	r2,12
}
 200a70c:	e037883a 	mov	sp,fp
 200a710:	df000017 	ldw	fp,0(sp)
 200a714:	dec00104 	addi	sp,sp,4
 200a718:	f800283a 	ret

0200a71c <_ZN15CWelcomeMessage12parseMessageEPhi>:

void CWelcomeMessage::parseMessage(alt_u8 *pMessage, int iLength)
 200a71c:	defffb04 	addi	sp,sp,-20
 200a720:	df000415 	stw	fp,16(sp)
 200a724:	df000404 	addi	fp,sp,16
 200a728:	e13ffd15 	stw	r4,-12(fp)
 200a72c:	e17ffe15 	stw	r5,-8(fp)
 200a730:	e1bfff15 	stw	r6,-4(fp)
{
	if(iLength < 8)
 200a734:	e0bfff17 	ldw	r2,-4(fp)
 200a738:	10800210 	cmplti	r2,r2,8
 200a73c:	1000281e 	bne	r2,zero,200a7e0 <_ZN15CWelcomeMessage12parseMessageEPhi+0xc4>
		return;

	m_uiVersionCentral = pMessage[0];
 200a740:	e0bffe17 	ldw	r2,-8(fp)
 200a744:	10c00003 	ldbu	r3,0(r2)
 200a748:	e0bffd17 	ldw	r2,-12(fp)
 200a74c:	10c00245 	stb	r3,9(r2)
	m_uiVersionComponent = pMessage[1];
 200a750:	e0bffe17 	ldw	r2,-8(fp)
 200a754:	10800044 	addi	r2,r2,1
 200a758:	10c00003 	ldbu	r3,0(r2)
 200a75c:	e0bffd17 	ldw	r2,-12(fp)
 200a760:	10c00285 	stb	r3,10(r2)
	m_uiComponentType = pMessage[2];
 200a764:	e0bffe17 	ldw	r2,-8(fp)
 200a768:	10800084 	addi	r2,r2,2
 200a76c:	10c00003 	ldbu	r3,0(r2)
 200a770:	e0bffd17 	ldw	r2,-12(fp)
 200a774:	10c002c5 	stb	r3,11(r2)
	m_uiComponentID = pMessage[3];
 200a778:	e0bffe17 	ldw	r2,-8(fp)
 200a77c:	108000c4 	addi	r2,r2,3
 200a780:	10c00003 	ldbu	r3,0(r2)
 200a784:	e0bffd17 	ldw	r2,-12(fp)
 200a788:	10c00305 	stb	r3,12(r2)

	for(alt_u32 i = 0; i < 4; i++)
 200a78c:	e03ffc15 	stw	zero,-16(fp)
 200a790:	00000d06 	br	200a7c8 <_ZN15CWelcomeMessage12parseMessageEPhi+0xac>
		m_uiOperations[i] = pMessage[i+4];
 200a794:	e13ffc17 	ldw	r4,-16(fp)
 200a798:	e0fffc17 	ldw	r3,-16(fp)
 200a79c:	e0bffe17 	ldw	r2,-8(fp)
 200a7a0:	1885883a 	add	r2,r3,r2
 200a7a4:	10800104 	addi	r2,r2,4
 200a7a8:	10c00003 	ldbu	r3,0(r2)
 200a7ac:	e0bffd17 	ldw	r2,-12(fp)
 200a7b0:	2085883a 	add	r2,r4,r2
 200a7b4:	10800304 	addi	r2,r2,12
 200a7b8:	10c00045 	stb	r3,1(r2)
	m_uiVersionCentral = pMessage[0];
	m_uiVersionComponent = pMessage[1];
	m_uiComponentType = pMessage[2];
	m_uiComponentID = pMessage[3];

	for(alt_u32 i = 0; i < 4; i++)
 200a7bc:	e0bffc17 	ldw	r2,-16(fp)
 200a7c0:	10800044 	addi	r2,r2,1
 200a7c4:	e0bffc15 	stw	r2,-16(fp)
 200a7c8:	e0bffc17 	ldw	r2,-16(fp)
 200a7cc:	10800130 	cmpltui	r2,r2,4
 200a7d0:	103ff01e 	bne	r2,zero,200a794 <_ZN15CWelcomeMessage12parseMessageEPhi+0x78>
		m_uiOperations[i] = pMessage[i+4];

	m_bValid = true;
 200a7d4:	e0fffd17 	ldw	r3,-12(fp)
 200a7d8:	00800044 	movi	r2,1
 200a7dc:	18800205 	stb	r2,8(r3)
}
 200a7e0:	e037883a 	mov	sp,fp
 200a7e4:	df000017 	ldw	fp,0(sp)
 200a7e8:	dec00104 	addi	sp,sp,4
 200a7ec:	f800283a 	ret

0200a7f0 <_ZN15CWelcomeMessage13answerMessageEh>:

void CWelcomeMessage::answerMessage(alt_u8 uiVersionCentral)
 200a7f0:	defffc04 	addi	sp,sp,-16
 200a7f4:	df000315 	stw	fp,12(sp)
 200a7f8:	df000304 	addi	fp,sp,12
 200a7fc:	e13ffe15 	stw	r4,-8(fp)
 200a800:	e17fff05 	stb	r5,-4(fp)
{
	if(!m_bValid)
 200a804:	e0bffe17 	ldw	r2,-8(fp)
 200a808:	10800203 	ldbu	r2,8(r2)
 200a80c:	1080005c 	xori	r2,r2,1
 200a810:	10803fcc 	andi	r2,r2,255
 200a814:	1004c03a 	cmpne	r2,r2,zero
 200a818:	10001c1e 	bne	r2,zero,200a88c <_ZN15CWelcomeMessage13answerMessageEh+0x9c>
		return;

	m_uiVersionCentral = uiVersionCentral;
 200a81c:	e0fffe17 	ldw	r3,-8(fp)
 200a820:	e0bfff03 	ldbu	r2,-4(fp)
 200a824:	18800245 	stb	r2,9(r3)
	m_uiVersionComponent = 0;
 200a828:	e0bffe17 	ldw	r2,-8(fp)
 200a82c:	10000285 	stb	zero,10(r2)
	m_uiComponentType = 0;
 200a830:	e0bffe17 	ldw	r2,-8(fp)
 200a834:	100002c5 	stb	zero,11(r2)
	m_uiComponentID = 0;
 200a838:	e0bffe17 	ldw	r2,-8(fp)
 200a83c:	10000305 	stb	zero,12(r2)

	for(alt_u32 i = 0; i < 4; i++)
 200a840:	e03ffd15 	stw	zero,-12(fp)
 200a844:	00000806 	br	200a868 <_ZN15CWelcomeMessage13answerMessageEh+0x78>
		m_uiOperations[i] = 0;
 200a848:	e0fffd17 	ldw	r3,-12(fp)
 200a84c:	e0bffe17 	ldw	r2,-8(fp)
 200a850:	1885883a 	add	r2,r3,r2
 200a854:	10800304 	addi	r2,r2,12
 200a858:	10000045 	stb	zero,1(r2)
	m_uiVersionCentral = uiVersionCentral;
	m_uiVersionComponent = 0;
	m_uiComponentType = 0;
	m_uiComponentID = 0;

	for(alt_u32 i = 0; i < 4; i++)
 200a85c:	e0bffd17 	ldw	r2,-12(fp)
 200a860:	10800044 	addi	r2,r2,1
 200a864:	e0bffd15 	stw	r2,-12(fp)
 200a868:	e0bffd17 	ldw	r2,-12(fp)
 200a86c:	10800130 	cmpltui	r2,r2,4
 200a870:	103ff51e 	bne	r2,zero,200a848 <_ZN15CWelcomeMessage13answerMessageEh+0x58>
		m_uiOperations[i] = 0;

	m_uiFlags = m_uiFlags | 0x01; // Set Response-Flag
 200a874:	e0bffe17 	ldw	r2,-8(fp)
 200a878:	108001c3 	ldbu	r2,7(r2)
 200a87c:	10800054 	ori	r2,r2,1
 200a880:	1007883a 	mov	r3,r2
 200a884:	e0bffe17 	ldw	r2,-8(fp)
 200a888:	10c001c5 	stb	r3,7(r2)
}
 200a88c:	e037883a 	mov	sp,fp
 200a890:	df000017 	ldw	fp,0(sp)
 200a894:	dec00104 	addi	sp,sp,4
 200a898:	f800283a 	ret

0200a89c <_ZN15CWelcomeMessage8getBytesEPh>:
void CWelcomeMessage::doAction()
{
	// Do nothing!
}

bool CWelcomeMessage::getBytes(alt_u8 *pMessage)
 200a89c:	defffb04 	addi	sp,sp,-20
 200a8a0:	dfc00415 	stw	ra,16(sp)
 200a8a4:	df000315 	stw	fp,12(sp)
 200a8a8:	df000304 	addi	fp,sp,12
 200a8ac:	e13ffe15 	stw	r4,-8(fp)
 200a8b0:	e17fff15 	stw	r5,-4(fp)
{
	CCarMessage::getBytes(pMessage);
 200a8b4:	e13ffe17 	ldw	r4,-8(fp)
 200a8b8:	e17fff17 	ldw	r5,-4(fp)
 200a8bc:	2006f040 	call	2006f04 <_ZN11CCarMessage8getBytesEPh>

	pMessage[4] = m_uiVersionCentral;
 200a8c0:	e0bfff17 	ldw	r2,-4(fp)
 200a8c4:	10c00104 	addi	r3,r2,4
 200a8c8:	e0bffe17 	ldw	r2,-8(fp)
 200a8cc:	10800243 	ldbu	r2,9(r2)
 200a8d0:	18800005 	stb	r2,0(r3)
	pMessage[5] = m_uiVersionComponent;
 200a8d4:	e0bfff17 	ldw	r2,-4(fp)
 200a8d8:	10c00144 	addi	r3,r2,5
 200a8dc:	e0bffe17 	ldw	r2,-8(fp)
 200a8e0:	10800283 	ldbu	r2,10(r2)
 200a8e4:	18800005 	stb	r2,0(r3)
	pMessage[6] = m_uiComponentType;
 200a8e8:	e0bfff17 	ldw	r2,-4(fp)
 200a8ec:	10c00184 	addi	r3,r2,6
 200a8f0:	e0bffe17 	ldw	r2,-8(fp)
 200a8f4:	108002c3 	ldbu	r2,11(r2)
 200a8f8:	18800005 	stb	r2,0(r3)
	pMessage[7] = m_uiComponentID;
 200a8fc:	e0bfff17 	ldw	r2,-4(fp)
 200a900:	10c001c4 	addi	r3,r2,7
 200a904:	e0bffe17 	ldw	r2,-8(fp)
 200a908:	10800303 	ldbu	r2,12(r2)
 200a90c:	18800005 	stb	r2,0(r3)

	for(alt_u32 i = 0; i < 4; i++)
 200a910:	e03ffd15 	stw	zero,-12(fp)
 200a914:	00000d06 	br	200a94c <_ZN15CWelcomeMessage8getBytesEPh+0xb0>
		pMessage[i+8] = m_uiOperations[i];
 200a918:	e0fffd17 	ldw	r3,-12(fp)
 200a91c:	e0bfff17 	ldw	r2,-4(fp)
 200a920:	1885883a 	add	r2,r3,r2
 200a924:	11000204 	addi	r4,r2,8
 200a928:	e0fffd17 	ldw	r3,-12(fp)
 200a92c:	e0bffe17 	ldw	r2,-8(fp)
 200a930:	1885883a 	add	r2,r3,r2
 200a934:	10800304 	addi	r2,r2,12
 200a938:	10800043 	ldbu	r2,1(r2)
 200a93c:	20800005 	stb	r2,0(r4)
	pMessage[4] = m_uiVersionCentral;
	pMessage[5] = m_uiVersionComponent;
	pMessage[6] = m_uiComponentType;
	pMessage[7] = m_uiComponentID;

	for(alt_u32 i = 0; i < 4; i++)
 200a940:	e0bffd17 	ldw	r2,-12(fp)
 200a944:	10800044 	addi	r2,r2,1
 200a948:	e0bffd15 	stw	r2,-12(fp)
 200a94c:	e0bffd17 	ldw	r2,-12(fp)
 200a950:	10800130 	cmpltui	r2,r2,4
 200a954:	103ff01e 	bne	r2,zero,200a918 <_ZN15CWelcomeMessage8getBytesEPh+0x7c>
		pMessage[i+8] = m_uiOperations[i];

	return m_bValid;
 200a958:	e0bffe17 	ldw	r2,-8(fp)
 200a95c:	10800203 	ldbu	r2,8(r2)
 200a960:	10803fcc 	andi	r2,r2,255
}
 200a964:	e037883a 	mov	sp,fp
 200a968:	dfc00117 	ldw	ra,4(sp)
 200a96c:	df000017 	ldw	fp,0(sp)
 200a970:	dec00204 	addi	sp,sp,8
 200a974:	f800283a 	ret

0200a978 <_ZN15CWelcomeMessageD0Ev>:
		m_uiOperations[i] = uiOperations[i];

	m_bValid = true;
}

CWelcomeMessage::~CWelcomeMessage()
 200a978:	defffd04 	addi	sp,sp,-12
 200a97c:	dfc00215 	stw	ra,8(sp)
 200a980:	df000115 	stw	fp,4(sp)
 200a984:	df000104 	addi	fp,sp,4
 200a988:	e13fff15 	stw	r4,-4(fp)
 200a98c:	00c080b4 	movhi	r3,514
 200a990:	18eee904 	addi	r3,r3,-17500
 200a994:	e0bfff17 	ldw	r2,-4(fp)
 200a998:	10c00015 	stw	r3,0(r2)
{

}
 200a99c:	e13fff17 	ldw	r4,-4(fp)
 200a9a0:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 200a9a4:	00800044 	movi	r2,1
 200a9a8:	10803fcc 	andi	r2,r2,255
 200a9ac:	1005003a 	cmpeq	r2,r2,zero
 200a9b0:	1000021e 	bne	r2,zero,200a9bc <_ZN15CWelcomeMessageD0Ev+0x44>
 200a9b4:	e13fff17 	ldw	r4,-4(fp)
 200a9b8:	200c1380 	call	200c138 <_ZdlPv>
 200a9bc:	e037883a 	mov	sp,fp
 200a9c0:	dfc00117 	ldw	ra,4(sp)
 200a9c4:	df000017 	ldw	fp,0(sp)
 200a9c8:	dec00204 	addi	sp,sp,8
 200a9cc:	f800283a 	ret

0200a9d0 <_ZN15CWelcomeMessageD1Ev>:
		m_uiOperations[i] = uiOperations[i];

	m_bValid = true;
}

CWelcomeMessage::~CWelcomeMessage()
 200a9d0:	defffd04 	addi	sp,sp,-12
 200a9d4:	dfc00215 	stw	ra,8(sp)
 200a9d8:	df000115 	stw	fp,4(sp)
 200a9dc:	df000104 	addi	fp,sp,4
 200a9e0:	e13fff15 	stw	r4,-4(fp)
 200a9e4:	00c080b4 	movhi	r3,514
 200a9e8:	18eee904 	addi	r3,r3,-17500
 200a9ec:	e0bfff17 	ldw	r2,-4(fp)
 200a9f0:	10c00015 	stw	r3,0(r2)
{

}
 200a9f4:	e13fff17 	ldw	r4,-4(fp)
 200a9f8:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 200a9fc:	0005883a 	mov	r2,zero
 200aa00:	10803fcc 	andi	r2,r2,255
 200aa04:	1005003a 	cmpeq	r2,r2,zero
 200aa08:	1000021e 	bne	r2,zero,200aa14 <_ZN15CWelcomeMessageD1Ev+0x44>
 200aa0c:	e13fff17 	ldw	r4,-4(fp)
 200aa10:	200c1380 	call	200c138 <_ZdlPv>
 200aa14:	e037883a 	mov	sp,fp
 200aa18:	dfc00117 	ldw	ra,4(sp)
 200aa1c:	df000017 	ldw	fp,0(sp)
 200aa20:	dec00204 	addi	sp,sp,8
 200aa24:	f800283a 	ret

0200aa28 <_ZN15CWelcomeMessageD2Ev>:
		m_uiOperations[i] = uiOperations[i];

	m_bValid = true;
}

CWelcomeMessage::~CWelcomeMessage()
 200aa28:	defffd04 	addi	sp,sp,-12
 200aa2c:	dfc00215 	stw	ra,8(sp)
 200aa30:	df000115 	stw	fp,4(sp)
 200aa34:	df000104 	addi	fp,sp,4
 200aa38:	e13fff15 	stw	r4,-4(fp)
 200aa3c:	00c080b4 	movhi	r3,514
 200aa40:	18eee904 	addi	r3,r3,-17500
 200aa44:	e0bfff17 	ldw	r2,-4(fp)
 200aa48:	10c00015 	stw	r3,0(r2)
{

}
 200aa4c:	e13fff17 	ldw	r4,-4(fp)
 200aa50:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 200aa54:	0005883a 	mov	r2,zero
 200aa58:	10803fcc 	andi	r2,r2,255
 200aa5c:	1005003a 	cmpeq	r2,r2,zero
 200aa60:	1000021e 	bne	r2,zero,200aa6c <_ZN15CWelcomeMessageD2Ev+0x44>
 200aa64:	e13fff17 	ldw	r4,-4(fp)
 200aa68:	200c1380 	call	200c138 <_ZdlPv>
 200aa6c:	e037883a 	mov	sp,fp
 200aa70:	dfc00117 	ldw	ra,4(sp)
 200aa74:	df000017 	ldw	fp,0(sp)
 200aa78:	dec00204 	addi	sp,sp,8
 200aa7c:	f800283a 	ret

0200aa80 <_ZN15CWelcomeMessageC1EhhhPh>:
		m_bValid = false;
		parseMessage(pMessage+4, iLength-4);
	}
}

CWelcomeMessage::CWelcomeMessage(alt_u8 uiVersionComponent, alt_u8 uiComponentType, alt_u8 uiComponentID, alt_u8 *uiOperations)
 200aa80:	deffe104 	addi	sp,sp,-124
 200aa84:	dfc01e15 	stw	ra,120(sp)
 200aa88:	df001d15 	stw	fp,116(sp)
 200aa8c:	ddc01c15 	stw	r23,112(sp)
 200aa90:	dd801b15 	stw	r22,108(sp)
 200aa94:	dd401a15 	stw	r21,104(sp)
 200aa98:	dd001915 	stw	r20,100(sp)
 200aa9c:	dcc01815 	stw	r19,96(sp)
 200aaa0:	dc801715 	stw	r18,92(sp)
 200aaa4:	dc401615 	stw	r17,88(sp)
 200aaa8:	dc001515 	stw	r16,84(sp)
 200aaac:	df001504 	addi	fp,sp,84
 200aab0:	e13fec15 	stw	r4,-80(fp)
 200aab4:	e17fed05 	stb	r5,-76(fp)
 200aab8:	e1bfee05 	stb	r6,-72(fp)
 200aabc:	e1ffef05 	stb	r7,-68(fp)
 200aac0:	00808074 	movhi	r2,513
 200aac4:	10ae5a04 	addi	r2,r2,-18072
 200aac8:	e0bff615 	stw	r2,-40(fp)
 200aacc:	008080b4 	movhi	r2,514
 200aad0:	10adea84 	addi	r2,r2,-18518
 200aad4:	e0bff715 	stw	r2,-36(fp)
 200aad8:	e0bff804 	addi	r2,fp,-32
 200aadc:	e0ffeb04 	addi	r3,fp,-84
 200aae0:	10c00015 	stw	r3,0(r2)
 200aae4:	00c08074 	movhi	r3,513
 200aae8:	18eaf004 	addi	r3,r3,-21568
 200aaec:	10c00115 	stw	r3,4(r2)
 200aaf0:	16c00215 	stw	sp,8(r2)
 200aaf4:	e13ff004 	addi	r4,fp,-64
 200aaf8:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 200aafc:	e13fec17 	ldw	r4,-80(fp)
 200ab00:	00bfffc4 	movi	r2,-1
 200ab04:	e0bff115 	stw	r2,-60(fp)
 200ab08:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 200ab0c:	00c080b4 	movhi	r3,514
 200ab10:	18eee904 	addi	r3,r3,-17500
 200ab14:	e0bfec17 	ldw	r2,-80(fp)
 200ab18:	10c00015 	stw	r3,0(r2)
{

	setHeader(1, getLength(), 0);
 200ab1c:	e0bfec17 	ldw	r2,-80(fp)
 200ab20:	e0bffe15 	stw	r2,-8(fp)
 200ab24:	e13fec17 	ldw	r4,-80(fp)
 200ab28:	200a6f80 	call	200a6f8 <_ZN15CWelcomeMessage9getLengthEv>
 200ab2c:	11803fcc 	andi	r6,r2,255
 200ab30:	00800044 	movi	r2,1
 200ab34:	e0bff115 	stw	r2,-60(fp)
 200ab38:	e13ffe17 	ldw	r4,-8(fp)
 200ab3c:	01400044 	movi	r5,1
 200ab40:	000f883a 	mov	r7,zero
 200ab44:	20070480 	call	2007048 <_ZN11CCarMessage9setHeaderEhhb>

	m_uiVersionComponent = uiVersionComponent;
 200ab48:	e0ffec17 	ldw	r3,-80(fp)
 200ab4c:	e0bfed03 	ldbu	r2,-76(fp)
 200ab50:	18800285 	stb	r2,10(r3)
	m_uiComponentType = uiComponentType;
 200ab54:	e0ffec17 	ldw	r3,-80(fp)
 200ab58:	e0bfee03 	ldbu	r2,-72(fp)
 200ab5c:	188002c5 	stb	r2,11(r3)
	m_uiComponentID = uiComponentID;
 200ab60:	e0ffec17 	ldw	r3,-80(fp)
 200ab64:	e0bfef03 	ldbu	r2,-68(fp)
 200ab68:	18800305 	stb	r2,12(r3)

	for(alt_u32 i = 0; i < 4; i++)
 200ab6c:	e03feb15 	stw	zero,-84(fp)
 200ab70:	00000c06 	br	200aba4 <_ZN15CWelcomeMessageC1EhhhPh+0x124>
		m_uiOperations[i] = uiOperations[i];
 200ab74:	e13feb17 	ldw	r4,-84(fp)
 200ab78:	e0ffeb17 	ldw	r3,-84(fp)
 200ab7c:	e0800a17 	ldw	r2,40(fp)
 200ab80:	1885883a 	add	r2,r3,r2
 200ab84:	10c00003 	ldbu	r3,0(r2)
 200ab88:	e0bfec17 	ldw	r2,-80(fp)
 200ab8c:	2085883a 	add	r2,r4,r2
 200ab90:	10800304 	addi	r2,r2,12
 200ab94:	10c00045 	stb	r3,1(r2)

	m_uiVersionComponent = uiVersionComponent;
	m_uiComponentType = uiComponentType;
	m_uiComponentID = uiComponentID;

	for(alt_u32 i = 0; i < 4; i++)
 200ab98:	e0bfeb17 	ldw	r2,-84(fp)
 200ab9c:	10800044 	addi	r2,r2,1
 200aba0:	e0bfeb15 	stw	r2,-84(fp)
 200aba4:	e0bfeb17 	ldw	r2,-84(fp)
 200aba8:	10800130 	cmpltui	r2,r2,4
 200abac:	103ff11e 	bne	r2,zero,200ab74 <_ZN15CWelcomeMessageC1EhhhPh+0xf4>
		m_uiOperations[i] = uiOperations[i];

	m_bValid = true;
 200abb0:	e0ffec17 	ldw	r3,-80(fp)
 200abb4:	00800044 	movi	r2,1
 200abb8:	18800205 	stb	r2,8(r3)
}
 200abbc:	00000e06 	br	200abf8 <_ZN15CWelcomeMessageC1EhhhPh+0x178>
 200abc0:	e7001504 	addi	fp,fp,84
 200abc4:	e0fff217 	ldw	r3,-56(fp)
 200abc8:	e0ffff15 	stw	r3,-4(fp)
 200abcc:	e0bfff17 	ldw	r2,-4(fp)
 200abd0:	e0bffd15 	stw	r2,-12(fp)
 200abd4:	e13fec17 	ldw	r4,-80(fp)
 200abd8:	e03ff115 	stw	zero,-60(fp)
 200abdc:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 200abe0:	e0fffd17 	ldw	r3,-12(fp)
 200abe4:	e0ffff15 	stw	r3,-4(fp)
 200abe8:	00bfffc4 	movi	r2,-1
 200abec:	e0bff115 	stw	r2,-60(fp)
 200abf0:	e13fff17 	ldw	r4,-4(fp)
 200abf4:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 200abf8:	e13ff004 	addi	r4,fp,-64
 200abfc:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 200ac00:	e037883a 	mov	sp,fp
 200ac04:	dfc00917 	ldw	ra,36(sp)
 200ac08:	df000817 	ldw	fp,32(sp)
 200ac0c:	ddc00717 	ldw	r23,28(sp)
 200ac10:	dd800617 	ldw	r22,24(sp)
 200ac14:	dd400517 	ldw	r21,20(sp)
 200ac18:	dd000417 	ldw	r20,16(sp)
 200ac1c:	dcc00317 	ldw	r19,12(sp)
 200ac20:	dc800217 	ldw	r18,8(sp)
 200ac24:	dc400117 	ldw	r17,4(sp)
 200ac28:	dc000017 	ldw	r16,0(sp)
 200ac2c:	dec00a04 	addi	sp,sp,40
 200ac30:	f800283a 	ret

0200ac34 <_ZN15CWelcomeMessageC2EhhhPh>:
		m_bValid = false;
		parseMessage(pMessage+4, iLength-4);
	}
}

CWelcomeMessage::CWelcomeMessage(alt_u8 uiVersionComponent, alt_u8 uiComponentType, alt_u8 uiComponentID, alt_u8 *uiOperations)
 200ac34:	deffe104 	addi	sp,sp,-124
 200ac38:	dfc01e15 	stw	ra,120(sp)
 200ac3c:	df001d15 	stw	fp,116(sp)
 200ac40:	ddc01c15 	stw	r23,112(sp)
 200ac44:	dd801b15 	stw	r22,108(sp)
 200ac48:	dd401a15 	stw	r21,104(sp)
 200ac4c:	dd001915 	stw	r20,100(sp)
 200ac50:	dcc01815 	stw	r19,96(sp)
 200ac54:	dc801715 	stw	r18,92(sp)
 200ac58:	dc401615 	stw	r17,88(sp)
 200ac5c:	dc001515 	stw	r16,84(sp)
 200ac60:	df001504 	addi	fp,sp,84
 200ac64:	e13fec15 	stw	r4,-80(fp)
 200ac68:	e17fed05 	stb	r5,-76(fp)
 200ac6c:	e1bfee05 	stb	r6,-72(fp)
 200ac70:	e1ffef05 	stb	r7,-68(fp)
 200ac74:	00808074 	movhi	r2,513
 200ac78:	10ae5a04 	addi	r2,r2,-18072
 200ac7c:	e0bff615 	stw	r2,-40(fp)
 200ac80:	008080b4 	movhi	r2,514
 200ac84:	10adec04 	addi	r2,r2,-18512
 200ac88:	e0bff715 	stw	r2,-36(fp)
 200ac8c:	e0bff804 	addi	r2,fp,-32
 200ac90:	e0ffeb04 	addi	r3,fp,-84
 200ac94:	10c00015 	stw	r3,0(r2)
 200ac98:	00c08074 	movhi	r3,513
 200ac9c:	18eb5d04 	addi	r3,r3,-21132
 200aca0:	10c00115 	stw	r3,4(r2)
 200aca4:	16c00215 	stw	sp,8(r2)
 200aca8:	e13ff004 	addi	r4,fp,-64
 200acac:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 200acb0:	e13fec17 	ldw	r4,-80(fp)
 200acb4:	00bfffc4 	movi	r2,-1
 200acb8:	e0bff115 	stw	r2,-60(fp)
 200acbc:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 200acc0:	00c080b4 	movhi	r3,514
 200acc4:	18eee904 	addi	r3,r3,-17500
 200acc8:	e0bfec17 	ldw	r2,-80(fp)
 200accc:	10c00015 	stw	r3,0(r2)
{

	setHeader(1, getLength(), 0);
 200acd0:	e0bfec17 	ldw	r2,-80(fp)
 200acd4:	e0bffe15 	stw	r2,-8(fp)
 200acd8:	e13fec17 	ldw	r4,-80(fp)
 200acdc:	200a6f80 	call	200a6f8 <_ZN15CWelcomeMessage9getLengthEv>
 200ace0:	11803fcc 	andi	r6,r2,255
 200ace4:	00800044 	movi	r2,1
 200ace8:	e0bff115 	stw	r2,-60(fp)
 200acec:	e13ffe17 	ldw	r4,-8(fp)
 200acf0:	01400044 	movi	r5,1
 200acf4:	000f883a 	mov	r7,zero
 200acf8:	20070480 	call	2007048 <_ZN11CCarMessage9setHeaderEhhb>

	m_uiVersionComponent = uiVersionComponent;
 200acfc:	e0ffec17 	ldw	r3,-80(fp)
 200ad00:	e0bfed03 	ldbu	r2,-76(fp)
 200ad04:	18800285 	stb	r2,10(r3)
	m_uiComponentType = uiComponentType;
 200ad08:	e0ffec17 	ldw	r3,-80(fp)
 200ad0c:	e0bfee03 	ldbu	r2,-72(fp)
 200ad10:	188002c5 	stb	r2,11(r3)
	m_uiComponentID = uiComponentID;
 200ad14:	e0ffec17 	ldw	r3,-80(fp)
 200ad18:	e0bfef03 	ldbu	r2,-68(fp)
 200ad1c:	18800305 	stb	r2,12(r3)

	for(alt_u32 i = 0; i < 4; i++)
 200ad20:	e03feb15 	stw	zero,-84(fp)
 200ad24:	00000c06 	br	200ad58 <_ZN15CWelcomeMessageC2EhhhPh+0x124>
		m_uiOperations[i] = uiOperations[i];
 200ad28:	e13feb17 	ldw	r4,-84(fp)
 200ad2c:	e0ffeb17 	ldw	r3,-84(fp)
 200ad30:	e0800a17 	ldw	r2,40(fp)
 200ad34:	1885883a 	add	r2,r3,r2
 200ad38:	10c00003 	ldbu	r3,0(r2)
 200ad3c:	e0bfec17 	ldw	r2,-80(fp)
 200ad40:	2085883a 	add	r2,r4,r2
 200ad44:	10800304 	addi	r2,r2,12
 200ad48:	10c00045 	stb	r3,1(r2)

	m_uiVersionComponent = uiVersionComponent;
	m_uiComponentType = uiComponentType;
	m_uiComponentID = uiComponentID;

	for(alt_u32 i = 0; i < 4; i++)
 200ad4c:	e0bfeb17 	ldw	r2,-84(fp)
 200ad50:	10800044 	addi	r2,r2,1
 200ad54:	e0bfeb15 	stw	r2,-84(fp)
 200ad58:	e0bfeb17 	ldw	r2,-84(fp)
 200ad5c:	10800130 	cmpltui	r2,r2,4
 200ad60:	103ff11e 	bne	r2,zero,200ad28 <_ZN15CWelcomeMessageC2EhhhPh+0xf4>
		m_uiOperations[i] = uiOperations[i];

	m_bValid = true;
 200ad64:	e0ffec17 	ldw	r3,-80(fp)
 200ad68:	00800044 	movi	r2,1
 200ad6c:	18800205 	stb	r2,8(r3)
}
 200ad70:	00000e06 	br	200adac <_ZN15CWelcomeMessageC2EhhhPh+0x178>
 200ad74:	e7001504 	addi	fp,fp,84
 200ad78:	e0fff217 	ldw	r3,-56(fp)
 200ad7c:	e0ffff15 	stw	r3,-4(fp)
 200ad80:	e0bfff17 	ldw	r2,-4(fp)
 200ad84:	e0bffd15 	stw	r2,-12(fp)
 200ad88:	e13fec17 	ldw	r4,-80(fp)
 200ad8c:	e03ff115 	stw	zero,-60(fp)
 200ad90:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 200ad94:	e0fffd17 	ldw	r3,-12(fp)
 200ad98:	e0ffff15 	stw	r3,-4(fp)
 200ad9c:	00bfffc4 	movi	r2,-1
 200ada0:	e0bff115 	stw	r2,-60(fp)
 200ada4:	e13fff17 	ldw	r4,-4(fp)
 200ada8:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 200adac:	e13ff004 	addi	r4,fp,-64
 200adb0:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 200adb4:	e037883a 	mov	sp,fp
 200adb8:	dfc00917 	ldw	ra,36(sp)
 200adbc:	df000817 	ldw	fp,32(sp)
 200adc0:	ddc00717 	ldw	r23,28(sp)
 200adc4:	dd800617 	ldw	r22,24(sp)
 200adc8:	dd400517 	ldw	r21,20(sp)
 200adcc:	dd000417 	ldw	r20,16(sp)
 200add0:	dcc00317 	ldw	r19,12(sp)
 200add4:	dc800217 	ldw	r18,8(sp)
 200add8:	dc400117 	ldw	r17,4(sp)
 200addc:	dc000017 	ldw	r16,0(sp)
 200ade0:	dec00a04 	addi	sp,sp,40
 200ade4:	f800283a 	ret

0200ade8 <_ZN15CWelcomeMessageC1EPhi>:
 *      Author: Florian
 */

#include "WelcomeMessage.h"

CWelcomeMessage::CWelcomeMessage(alt_u8 *pMessage, int iLength)
 200ade8:	deffe404 	addi	sp,sp,-112
 200adec:	dfc01b15 	stw	ra,108(sp)
 200adf0:	df001a15 	stw	fp,104(sp)
 200adf4:	ddc01915 	stw	r23,100(sp)
 200adf8:	dd801815 	stw	r22,96(sp)
 200adfc:	dd401715 	stw	r21,92(sp)
 200ae00:	dd001615 	stw	r20,88(sp)
 200ae04:	dcc01515 	stw	r19,84(sp)
 200ae08:	dc801415 	stw	r18,80(sp)
 200ae0c:	dc401315 	stw	r17,76(sp)
 200ae10:	dc001215 	stw	r16,72(sp)
 200ae14:	df001204 	addi	fp,sp,72
 200ae18:	e13fee15 	stw	r4,-72(fp)
 200ae1c:	e17fef15 	stw	r5,-68(fp)
 200ae20:	e1bff015 	stw	r6,-64(fp)
 200ae24:	00808074 	movhi	r2,513
 200ae28:	10ae5a04 	addi	r2,r2,-18072
 200ae2c:	e0bff715 	stw	r2,-36(fp)
 200ae30:	008080b4 	movhi	r2,514
 200ae34:	10aded84 	addi	r2,r2,-18506
 200ae38:	e0bff815 	stw	r2,-32(fp)
 200ae3c:	e0bff904 	addi	r2,fp,-28
 200ae40:	e0ffee04 	addi	r3,fp,-72
 200ae44:	10c00015 	stw	r3,0(r2)
 200ae48:	00c08074 	movhi	r3,513
 200ae4c:	18ebb404 	addi	r3,r3,-20784
 200ae50:	10c00115 	stw	r3,4(r2)
 200ae54:	16c00215 	stw	sp,8(r2)
 200ae58:	e13ff104 	addi	r4,fp,-60
 200ae5c:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 200ae60:	e13fee17 	ldw	r4,-72(fp)
 200ae64:	00bfffc4 	movi	r2,-1
 200ae68:	e0bff215 	stw	r2,-56(fp)
 200ae6c:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 200ae70:	00c080b4 	movhi	r3,514
 200ae74:	18eee904 	addi	r3,r3,-17500
 200ae78:	e0bfee17 	ldw	r2,-72(fp)
 200ae7c:	10c00015 	stw	r3,0(r2)
{
	parseHeader(pMessage, iLength);
 200ae80:	e13fee17 	ldw	r4,-72(fp)
 200ae84:	00800044 	movi	r2,1
 200ae88:	e0bff215 	stw	r2,-56(fp)
 200ae8c:	e17fef17 	ldw	r5,-68(fp)
 200ae90:	e1bff017 	ldw	r6,-64(fp)
 200ae94:	20071cc0 	call	20071cc <_ZN11CCarMessage11parseHeaderEPhi>
	if(m_bValid)
 200ae98:	e0bfee17 	ldw	r2,-72(fp)
 200ae9c:	10800203 	ldbu	r2,8(r2)
 200aea0:	10803fcc 	andi	r2,r2,255
 200aea4:	1005003a 	cmpeq	r2,r2,zero
 200aea8:	1000171e 	bne	r2,zero,200af08 <_ZN15CWelcomeMessageC1EPhi+0x120>
	{
		m_bValid = false;
 200aeac:	e0bfee17 	ldw	r2,-72(fp)
 200aeb0:	10000205 	stb	zero,8(r2)
		parseMessage(pMessage+4, iLength-4);
 200aeb4:	e0bfef17 	ldw	r2,-68(fp)
 200aeb8:	11400104 	addi	r5,r2,4
 200aebc:	e0bff017 	ldw	r2,-64(fp)
 200aec0:	11bfff04 	addi	r6,r2,-4
 200aec4:	e13fee17 	ldw	r4,-72(fp)
 200aec8:	200a71c0 	call	200a71c <_ZN15CWelcomeMessage12parseMessageEPhi>
	}
}
 200aecc:	00000e06 	br	200af08 <_ZN15CWelcomeMessageC1EPhi+0x120>
 200aed0:	e7001204 	addi	fp,fp,72
 200aed4:	e0bff317 	ldw	r2,-52(fp)
 200aed8:	e0bfff15 	stw	r2,-4(fp)
 200aedc:	e0ffff17 	ldw	r3,-4(fp)
 200aee0:	e0fffe15 	stw	r3,-8(fp)
 200aee4:	e13fee17 	ldw	r4,-72(fp)
 200aee8:	e03ff215 	stw	zero,-56(fp)
 200aeec:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 200aef0:	e0bffe17 	ldw	r2,-8(fp)
 200aef4:	e0bfff15 	stw	r2,-4(fp)
 200aef8:	00bfffc4 	movi	r2,-1
 200aefc:	e0bff215 	stw	r2,-56(fp)
 200af00:	e13fff17 	ldw	r4,-4(fp)
 200af04:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 200af08:	e13ff104 	addi	r4,fp,-60
 200af0c:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 200af10:	e037883a 	mov	sp,fp
 200af14:	dfc00917 	ldw	ra,36(sp)
 200af18:	df000817 	ldw	fp,32(sp)
 200af1c:	ddc00717 	ldw	r23,28(sp)
 200af20:	dd800617 	ldw	r22,24(sp)
 200af24:	dd400517 	ldw	r21,20(sp)
 200af28:	dd000417 	ldw	r20,16(sp)
 200af2c:	dcc00317 	ldw	r19,12(sp)
 200af30:	dc800217 	ldw	r18,8(sp)
 200af34:	dc400117 	ldw	r17,4(sp)
 200af38:	dc000017 	ldw	r16,0(sp)
 200af3c:	dec00a04 	addi	sp,sp,40
 200af40:	f800283a 	ret

0200af44 <_ZN15CWelcomeMessageC2EPhi>:
 *      Author: Florian
 */

#include "WelcomeMessage.h"

CWelcomeMessage::CWelcomeMessage(alt_u8 *pMessage, int iLength)
 200af44:	deffe404 	addi	sp,sp,-112
 200af48:	dfc01b15 	stw	ra,108(sp)
 200af4c:	df001a15 	stw	fp,104(sp)
 200af50:	ddc01915 	stw	r23,100(sp)
 200af54:	dd801815 	stw	r22,96(sp)
 200af58:	dd401715 	stw	r21,92(sp)
 200af5c:	dd001615 	stw	r20,88(sp)
 200af60:	dcc01515 	stw	r19,84(sp)
 200af64:	dc801415 	stw	r18,80(sp)
 200af68:	dc401315 	stw	r17,76(sp)
 200af6c:	dc001215 	stw	r16,72(sp)
 200af70:	df001204 	addi	fp,sp,72
 200af74:	e13fee15 	stw	r4,-72(fp)
 200af78:	e17fef15 	stw	r5,-68(fp)
 200af7c:	e1bff015 	stw	r6,-64(fp)
 200af80:	00808074 	movhi	r2,513
 200af84:	10ae5a04 	addi	r2,r2,-18072
 200af88:	e0bff715 	stw	r2,-36(fp)
 200af8c:	008080b4 	movhi	r2,514
 200af90:	10adef04 	addi	r2,r2,-18500
 200af94:	e0bff815 	stw	r2,-32(fp)
 200af98:	e0bff904 	addi	r2,fp,-28
 200af9c:	e0ffee04 	addi	r3,fp,-72
 200afa0:	10c00015 	stw	r3,0(r2)
 200afa4:	00c08074 	movhi	r3,513
 200afa8:	18ec0b04 	addi	r3,r3,-20436
 200afac:	10c00115 	stw	r3,4(r2)
 200afb0:	16c00215 	stw	sp,8(r2)
 200afb4:	e13ff104 	addi	r4,fp,-60
 200afb8:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 200afbc:	e13fee17 	ldw	r4,-72(fp)
 200afc0:	00bfffc4 	movi	r2,-1
 200afc4:	e0bff215 	stw	r2,-56(fp)
 200afc8:	2006e740 	call	2006e74 <_ZN11CCarMessageC2Ev>
 200afcc:	00c080b4 	movhi	r3,514
 200afd0:	18eee904 	addi	r3,r3,-17500
 200afd4:	e0bfee17 	ldw	r2,-72(fp)
 200afd8:	10c00015 	stw	r3,0(r2)
{
	parseHeader(pMessage, iLength);
 200afdc:	e13fee17 	ldw	r4,-72(fp)
 200afe0:	00800044 	movi	r2,1
 200afe4:	e0bff215 	stw	r2,-56(fp)
 200afe8:	e17fef17 	ldw	r5,-68(fp)
 200afec:	e1bff017 	ldw	r6,-64(fp)
 200aff0:	20071cc0 	call	20071cc <_ZN11CCarMessage11parseHeaderEPhi>
	if(m_bValid)
 200aff4:	e0bfee17 	ldw	r2,-72(fp)
 200aff8:	10800203 	ldbu	r2,8(r2)
 200affc:	10803fcc 	andi	r2,r2,255
 200b000:	1005003a 	cmpeq	r2,r2,zero
 200b004:	1000171e 	bne	r2,zero,200b064 <_ZN15CWelcomeMessageC2EPhi+0x120>
	{
		m_bValid = false;
 200b008:	e0bfee17 	ldw	r2,-72(fp)
 200b00c:	10000205 	stb	zero,8(r2)
		parseMessage(pMessage+4, iLength-4);
 200b010:	e0bfef17 	ldw	r2,-68(fp)
 200b014:	11400104 	addi	r5,r2,4
 200b018:	e0bff017 	ldw	r2,-64(fp)
 200b01c:	11bfff04 	addi	r6,r2,-4
 200b020:	e13fee17 	ldw	r4,-72(fp)
 200b024:	200a71c0 	call	200a71c <_ZN15CWelcomeMessage12parseMessageEPhi>
	}
}
 200b028:	00000e06 	br	200b064 <_ZN15CWelcomeMessageC2EPhi+0x120>
 200b02c:	e7001204 	addi	fp,fp,72
 200b030:	e0bff317 	ldw	r2,-52(fp)
 200b034:	e0bfff15 	stw	r2,-4(fp)
 200b038:	e0ffff17 	ldw	r3,-4(fp)
 200b03c:	e0fffe15 	stw	r3,-8(fp)
 200b040:	e13fee17 	ldw	r4,-72(fp)
 200b044:	e03ff215 	stw	zero,-56(fp)
 200b048:	20074380 	call	2007438 <_ZN11CCarMessageD2Ev>
 200b04c:	e0bffe17 	ldw	r2,-8(fp)
 200b050:	e0bfff15 	stw	r2,-4(fp)
 200b054:	00bfffc4 	movi	r2,-1
 200b058:	e0bff215 	stw	r2,-56(fp)
 200b05c:	e13fff17 	ldw	r4,-4(fp)
 200b060:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 200b064:	e13ff104 	addi	r4,fp,-60
 200b068:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 200b06c:	e037883a 	mov	sp,fp
 200b070:	dfc00917 	ldw	ra,36(sp)
 200b074:	df000817 	ldw	fp,32(sp)
 200b078:	ddc00717 	ldw	r23,28(sp)
 200b07c:	dd800617 	ldw	r22,24(sp)
 200b080:	dd400517 	ldw	r21,20(sp)
 200b084:	dd000417 	ldw	r20,16(sp)
 200b088:	dcc00317 	ldw	r19,12(sp)
 200b08c:	dc800217 	ldw	r18,8(sp)
 200b090:	dc400117 	ldw	r17,4(sp)
 200b094:	dc000017 	ldw	r16,0(sp)
 200b098:	dec00a04 	addi	sp,sp,40
 200b09c:	f800283a 	ret

0200b0a0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 200b0a0:	20c00017 	ldw	r3,0(r4)
 200b0a4:	defffa04 	addi	sp,sp,-24
 200b0a8:	dc000415 	stw	r16,16(sp)
 200b0ac:	1a000617 	ldw	r8,24(r3)
 200b0b0:	3021883a 	mov	r16,r6
 200b0b4:	31800017 	ldw	r6,0(r6)
 200b0b8:	00800404 	movi	r2,16
 200b0bc:	dfc00515 	stw	ra,20(sp)
 200b0c0:	d8800215 	stw	r2,8(sp)
 200b0c4:	d8000015 	stw	zero,0(sp)
 200b0c8:	d8000115 	stw	zero,4(sp)
 200b0cc:	d8000315 	stw	zero,12(sp)
 200b0d0:	d80f883a 	mov	r7,sp
 200b0d4:	403ee83a 	callr	r8
 200b0d8:	d8800117 	ldw	r2,4(sp)
 200b0dc:	00c00184 	movi	r3,6
 200b0e0:	0009883a 	mov	r4,zero
 200b0e4:	1080018c 	andi	r2,r2,6
 200b0e8:	10c0031e 	bne	r2,r3,200b0f8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x58>
 200b0ec:	d8800017 	ldw	r2,0(sp)
 200b0f0:	01000044 	movi	r4,1
 200b0f4:	80800015 	stw	r2,0(r16)
 200b0f8:	2005883a 	mov	r2,r4
 200b0fc:	dfc00517 	ldw	ra,20(sp)
 200b100:	dc000417 	ldw	r16,16(sp)
 200b104:	dec00604 	addi	sp,sp,24
 200b108:	f800283a 	ret

0200b10c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_>:
 200b10c:	d8800017 	ldw	r2,0(sp)
 200b110:	00c00184 	movi	r3,6
 200b114:	1180021e 	bne	r2,r6,200b120 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcElPKvPKS0_S2_+0x14>
 200b118:	1805883a 	mov	r2,r3
 200b11c:	f800283a 	ret
 200b120:	00c00044 	movi	r3,1
 200b124:	1805883a 	mov	r2,r3
 200b128:	f800283a 	ret

0200b12c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 200b12c:	defffe04 	addi	sp,sp,-8
 200b130:	008080b4 	movhi	r2,514
 200b134:	10aef804 	addi	r2,r2,-17440
 200b138:	dc400015 	stw	r17,0(sp)
 200b13c:	20800015 	stw	r2,0(r4)
 200b140:	2023883a 	mov	r17,r4
 200b144:	dfc00115 	stw	ra,4(sp)
 200b148:	200c49c0 	call	200c49c <_ZNSt9type_infoD2Ev>
 200b14c:	8809883a 	mov	r4,r17
 200b150:	dfc00117 	ldw	ra,4(sp)
 200b154:	dc400017 	ldw	r17,0(sp)
 200b158:	dec00204 	addi	sp,sp,8
 200b15c:	200c1381 	jmpi	200c138 <_ZdlPv>

0200b160 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 200b160:	008080b4 	movhi	r2,514
 200b164:	10aef804 	addi	r2,r2,-17440
 200b168:	20800015 	stw	r2,0(r4)
 200b16c:	200c49c1 	jmpi	200c49c <_ZNSt9type_infoD2Ev>

0200b170 <_ZN10__cxxabiv117__class_type_infoD2Ev>:
 200b170:	008080b4 	movhi	r2,514
 200b174:	10aef804 	addi	r2,r2,-17440
 200b178:	20800015 	stw	r2,0(r4)
 200b17c:	200c49c1 	jmpi	200c49c <_ZNSt9type_infoD2Ev>

0200b180 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 200b180:	2811883a 	mov	r8,r5
 200b184:	20c00117 	ldw	r3,4(r4)
 200b188:	40800117 	ldw	r2,4(r8)
 200b18c:	deffff04 	addi	sp,sp,-4
 200b190:	dfc00015 	stw	ra,0(sp)
 200b194:	200b883a 	mov	r5,r4
 200b198:	02400044 	movi	r9,1
 200b19c:	18800426 	beq	r3,r2,200b1b0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x30>
 200b1a0:	008000c4 	movi	r2,3
 200b1a4:	4009883a 	mov	r4,r8
 200b1a8:	0013883a 	mov	r9,zero
 200b1ac:	11c0042e 	bgeu	r2,r7,200b1c0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x40>
 200b1b0:	4805883a 	mov	r2,r9
 200b1b4:	dfc00017 	ldw	ra,0(sp)
 200b1b8:	dec00104 	addi	sp,sp,4
 200b1bc:	f800283a 	ret
 200b1c0:	40800017 	ldw	r2,0(r8)
 200b1c4:	10c00517 	ldw	r3,20(r2)
 200b1c8:	183ee83a 	callr	r3
 200b1cc:	12403fcc 	andi	r9,r2,255
 200b1d0:	4805883a 	mov	r2,r9
 200b1d4:	dfc00017 	ldw	ra,0(sp)
 200b1d8:	dec00104 	addi	sp,sp,4
 200b1dc:	f800283a 	ret

0200b1e0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 200b1e0:	20c00117 	ldw	r3,4(r4)
 200b1e4:	28800117 	ldw	r2,4(r5)
 200b1e8:	0009883a 	mov	r4,zero
 200b1ec:	1880061e 	bne	r3,r2,200b208 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x28>
 200b1f0:	00800184 	movi	r2,6
 200b1f4:	38800115 	stw	r2,4(r7)
 200b1f8:	00800204 	movi	r2,8
 200b1fc:	39800015 	stw	r6,0(r7)
 200b200:	38800315 	stw	r2,12(r7)
 200b204:	01000044 	movi	r4,1
 200b208:	2005883a 	mov	r2,r4
 200b20c:	f800283a 	ret

0200b210 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 200b210:	da000017 	ldw	r8,0(sp)
 200b214:	d8800217 	ldw	r2,8(sp)
 200b218:	d9400317 	ldw	r5,12(sp)
 200b21c:	40800926 	beq	r8,r2,200b244 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
 200b220:	21000117 	ldw	r4,4(r4)
 200b224:	38800117 	ldw	r2,4(r7)
 200b228:	2080041e 	bne	r4,r2,200b23c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2c>
 200b22c:	00800044 	movi	r2,1
 200b230:	28800315 	stw	r2,12(r5)
 200b234:	2a000015 	stw	r8,0(r5)
 200b238:	29800115 	stw	r6,4(r5)
 200b23c:	0005883a 	mov	r2,zero
 200b240:	f800283a 	ret
 200b244:	d8800117 	ldw	r2,4(sp)
 200b248:	21000117 	ldw	r4,4(r4)
 200b24c:	10c00117 	ldw	r3,4(r2)
 200b250:	20fff41e 	bne	r4,r3,200b224 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x14>
 200b254:	29800215 	stw	r6,8(r5)
 200b258:	003ff806 	br	200b23c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastElNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2c>

0200b25c <_Z12read_uleb128PKhPj>:
 200b25c:	000d883a 	mov	r6,zero
 200b260:	000f883a 	mov	r7,zero
 200b264:	20c00007 	ldb	r3,0(r4)
 200b268:	21000044 	addi	r4,r4,1
 200b26c:	18801fcc 	andi	r2,r3,127
 200b270:	1184983a 	sll	r2,r2,r6
 200b274:	318001c4 	addi	r6,r6,7
 200b278:	388eb03a 	or	r7,r7,r2
 200b27c:	183ff916 	blt	r3,zero,200b264 <_Z12read_uleb128PKhPj+0x8>
 200b280:	2005883a 	mov	r2,r4
 200b284:	29c00015 	stw	r7,0(r5)
 200b288:	f800283a 	ret

0200b28c <_Z12read_sleb128PKhPi>:
 200b28c:	000f883a 	mov	r7,zero
 200b290:	0011883a 	mov	r8,zero
 200b294:	20c00007 	ldb	r3,0(r4)
 200b298:	21000044 	addi	r4,r4,1
 200b29c:	19803fcc 	andi	r6,r3,255
 200b2a0:	30801fcc 	andi	r2,r6,127
 200b2a4:	11c4983a 	sll	r2,r2,r7
 200b2a8:	39c001c4 	addi	r7,r7,7
 200b2ac:	4090b03a 	or	r8,r8,r2
 200b2b0:	183ff816 	blt	r3,zero,200b294 <_Z12read_sleb128PKhPi+0x8>
 200b2b4:	008007c4 	movi	r2,31
 200b2b8:	11c00636 	bltu	r2,r7,200b2d4 <_Z12read_sleb128PKhPi+0x48>
 200b2bc:	3080100c 	andi	r2,r6,64
 200b2c0:	10000426 	beq	r2,zero,200b2d4 <_Z12read_sleb128PKhPi+0x48>
 200b2c4:	00800044 	movi	r2,1
 200b2c8:	11c4983a 	sll	r2,r2,r7
 200b2cc:	0085c83a 	sub	r2,zero,r2
 200b2d0:	4090b03a 	or	r8,r8,r2
 200b2d4:	2005883a 	mov	r2,r4
 200b2d8:	2a000015 	stw	r8,0(r5)
 200b2dc:	f800283a 	ret

0200b2e0 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>:
 200b2e0:	28800017 	ldw	r2,0(r5)
 200b2e4:	defffb04 	addi	sp,sp,-20
 200b2e8:	30c00017 	ldw	r3,0(r6)
 200b2ec:	dc400215 	stw	r17,8(sp)
 200b2f0:	2823883a 	mov	r17,r5
 200b2f4:	11400217 	ldw	r5,8(r2)
 200b2f8:	dc800315 	stw	r18,12(sp)
 200b2fc:	dc000115 	stw	r16,4(sp)
 200b300:	dfc00415 	stw	ra,16(sp)
 200b304:	2021883a 	mov	r16,r4
 200b308:	d8c00015 	stw	r3,0(sp)
 200b30c:	8809883a 	mov	r4,r17
 200b310:	3025883a 	mov	r18,r6
 200b314:	283ee83a 	callr	r5
 200b318:	10803fcc 	andi	r2,r2,255
 200b31c:	880b883a 	mov	r5,r17
 200b320:	8009883a 	mov	r4,r16
 200b324:	d80d883a 	mov	r6,sp
 200b328:	01c00044 	movi	r7,1
 200b32c:	10000326 	beq	r2,zero,200b33c <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv+0x5c>
 200b330:	d8800017 	ldw	r2,0(sp)
 200b334:	10c00017 	ldw	r3,0(r2)
 200b338:	d8c00015 	stw	r3,0(sp)
 200b33c:	80800017 	ldw	r2,0(r16)
 200b340:	10c00417 	ldw	r3,16(r2)
 200b344:	183ee83a 	callr	r3
 200b348:	10803fcc 	andi	r2,r2,255
 200b34c:	0007883a 	mov	r3,zero
 200b350:	10000326 	beq	r2,zero,200b360 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv+0x80>
 200b354:	d8800017 	ldw	r2,0(sp)
 200b358:	00c00044 	movi	r3,1
 200b35c:	90800015 	stw	r2,0(r18)
 200b360:	1805883a 	mov	r2,r3
 200b364:	dfc00417 	ldw	ra,16(sp)
 200b368:	dc800317 	ldw	r18,12(sp)
 200b36c:	dc400217 	ldw	r17,8(sp)
 200b370:	dc000117 	ldw	r16,4(sp)
 200b374:	dec00504 	addi	sp,sp,20
 200b378:	f800283a 	ret

0200b37c <_Z28read_encoded_value_with_basehjPKhPj>:
 200b37c:	defff904 	addi	sp,sp,-28
 200b380:	dc400215 	stw	r17,8(sp)
 200b384:	00801404 	movi	r2,80
 200b388:	24403fcc 	andi	r17,r4,255
 200b38c:	dd000515 	stw	r20,20(sp)
 200b390:	dcc00415 	stw	r19,16(sp)
 200b394:	dc800315 	stw	r18,12(sp)
 200b398:	dc000115 	stw	r16,4(sp)
 200b39c:	dfc00615 	stw	ra,24(sp)
 200b3a0:	2025883a 	mov	r18,r4
 200b3a4:	2829883a 	mov	r20,r5
 200b3a8:	3021883a 	mov	r16,r6
 200b3ac:	3827883a 	mov	r19,r7
 200b3b0:	88801826 	beq	r17,r2,200b414 <_Z28read_encoded_value_with_basehjPKhPj+0x98>
 200b3b4:	88c003cc 	andi	r3,r17,15
 200b3b8:	00800304 	movi	r2,12
 200b3bc:	10c0012e 	bgeu	r2,r3,200b3c4 <_Z28read_encoded_value_with_basehjPKhPj+0x48>
 200b3c0:	200d64c0 	call	200d64c <abort>
 200b3c4:	18c5883a 	add	r2,r3,r3
 200b3c8:	1085883a 	add	r2,r2,r2
 200b3cc:	00c08074 	movhi	r3,513
 200b3d0:	18ecf804 	addi	r3,r3,-19488
 200b3d4:	10c5883a 	add	r2,r2,r3
 200b3d8:	11000017 	ldw	r4,0(r2)
 200b3dc:	2000683a 	jmp	r4
 200b3e0:	0200b450 	cmplti	r8,zero,721
 200b3e4:	0200b538 	rdprs	r8,zero,724
 200b3e8:	0200b4e4 	muli	r8,zero,723
 200b3ec:	0200b450 	cmplti	r8,zero,721
 200b3f0:	0200b4a8 	cmpgeui	r8,zero,722
 200b3f4:	0200b3c0 	call	200b3c <__reset-0x1dff4c4>
 200b3f8:	0200b3c0 	call	200b3c <__reset-0x1dff4c4>
 200b3fc:	0200b3c0 	call	200b3c <__reset-0x1dff4c4>
 200b400:	0200b3c0 	call	200b3c <__reset-0x1dff4c4>
 200b404:	0200b520 	cmpeqi	r8,zero,724
 200b408:	0200b4fc 	xorhi	r8,zero,723
 200b40c:	0200b450 	cmplti	r8,zero,721
 200b410:	0200b4a8 	cmpgeui	r8,zero,722
 200b414:	308000c4 	addi	r2,r6,3
 200b418:	00ffff04 	movi	r3,-4
 200b41c:	10c4703a 	and	r2,r2,r3
 200b420:	11000017 	ldw	r4,0(r2)
 200b424:	11400104 	addi	r5,r2,4
 200b428:	2805883a 	mov	r2,r5
 200b42c:	99000015 	stw	r4,0(r19)
 200b430:	dfc00617 	ldw	ra,24(sp)
 200b434:	dd000517 	ldw	r20,20(sp)
 200b438:	dcc00417 	ldw	r19,16(sp)
 200b43c:	dc800317 	ldw	r18,12(sp)
 200b440:	dc400217 	ldw	r17,8(sp)
 200b444:	dc000117 	ldw	r16,4(sp)
 200b448:	dec00704 	addi	sp,sp,28
 200b44c:	f800283a 	ret
 200b450:	30800043 	ldbu	r2,1(r6)
 200b454:	30c00083 	ldbu	r3,2(r6)
 200b458:	310000c3 	ldbu	r4,3(r6)
 200b45c:	31400003 	ldbu	r5,0(r6)
 200b460:	1004923a 	slli	r2,r2,8
 200b464:	1806943a 	slli	r3,r3,16
 200b468:	2008963a 	slli	r4,r4,24
 200b46c:	1144b03a 	or	r2,r2,r5
 200b470:	1886b03a 	or	r3,r3,r2
 200b474:	20c8b03a 	or	r4,r4,r3
 200b478:	31400104 	addi	r5,r6,4
 200b47c:	203fea26 	beq	r4,zero,200b428 <_Z28read_encoded_value_with_basehjPKhPj+0xac>
 200b480:	88c01c0c 	andi	r3,r17,112
 200b484:	00800404 	movi	r2,16
 200b488:	18801426 	beq	r3,r2,200b4dc <_Z28read_encoded_value_with_basehjPKhPj+0x160>
 200b48c:	90803fcc 	andi	r2,r18,255
 200b490:	1080201c 	xori	r2,r2,128
 200b494:	10bfe004 	addi	r2,r2,-128
 200b498:	2509883a 	add	r4,r4,r20
 200b49c:	103fe20e 	bge	r2,zero,200b428 <_Z28read_encoded_value_with_basehjPKhPj+0xac>
 200b4a0:	21000017 	ldw	r4,0(r4)
 200b4a4:	003fe006 	br	200b428 <_Z28read_encoded_value_with_basehjPKhPj+0xac>
 200b4a8:	30800043 	ldbu	r2,1(r6)
 200b4ac:	31800083 	ldbu	r6,2(r6)
 200b4b0:	820000c3 	ldbu	r8,3(r16)
 200b4b4:	1004923a 	slli	r2,r2,8
 200b4b8:	82400003 	ldbu	r9,0(r16)
 200b4bc:	300c943a 	slli	r6,r6,16
 200b4c0:	4010963a 	slli	r8,r8,24
 200b4c4:	1244b03a 	or	r2,r2,r9
 200b4c8:	308cb03a 	or	r6,r6,r2
 200b4cc:	4184b03a 	or	r2,r8,r6
 200b4d0:	1009883a 	mov	r4,r2
 200b4d4:	81400204 	addi	r5,r16,8
 200b4d8:	003fe806 	br	200b47c <_Z28read_encoded_value_with_basehjPKhPj+0x100>
 200b4dc:	8029883a 	mov	r20,r16
 200b4e0:	003fea06 	br	200b48c <_Z28read_encoded_value_with_basehjPKhPj+0x110>
 200b4e4:	30800043 	ldbu	r2,1(r6)
 200b4e8:	30c00003 	ldbu	r3,0(r6)
 200b4ec:	31400084 	addi	r5,r6,2
 200b4f0:	1004923a 	slli	r2,r2,8
 200b4f4:	10c8b03a 	or	r4,r2,r3
 200b4f8:	003fe006 	br	200b47c <_Z28read_encoded_value_with_basehjPKhPj+0x100>
 200b4fc:	30800043 	ldbu	r2,1(r6)
 200b500:	30c00003 	ldbu	r3,0(r6)
 200b504:	31400084 	addi	r5,r6,2
 200b508:	1004923a 	slli	r2,r2,8
 200b50c:	10c4b03a 	or	r2,r2,r3
 200b510:	113fffcc 	andi	r4,r2,65535
 200b514:	2120001c 	xori	r4,r4,32768
 200b518:	21200004 	addi	r4,r4,-32768
 200b51c:	003fd706 	br	200b47c <_Z28read_encoded_value_with_basehjPKhPj+0x100>
 200b520:	3009883a 	mov	r4,r6
 200b524:	d80b883a 	mov	r5,sp
 200b528:	200b28c0 	call	200b28c <_Z12read_sleb128PKhPi>
 200b52c:	d9000017 	ldw	r4,0(sp)
 200b530:	100b883a 	mov	r5,r2
 200b534:	003fd106 	br	200b47c <_Z28read_encoded_value_with_basehjPKhPj+0x100>
 200b538:	3009883a 	mov	r4,r6
 200b53c:	d80b883a 	mov	r5,sp
 200b540:	200b25c0 	call	200b25c <_Z12read_uleb128PKhPj>
 200b544:	d9000017 	ldw	r4,0(sp)
 200b548:	100b883a 	mov	r5,r2
 200b54c:	003fcb06 	br	200b47c <_Z28read_encoded_value_with_basehjPKhPj+0x100>

0200b550 <_Z21base_of_encoded_valuehP15_Unwind_Context>:
 200b550:	deffff04 	addi	sp,sp,-4
 200b554:	21003fcc 	andi	r4,r4,255
 200b558:	00803fc4 	movi	r2,255
 200b55c:	dfc00015 	stw	ra,0(sp)
 200b560:	20800c26 	beq	r4,r2,200b594 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
 200b564:	21001c0c 	andi	r4,r4,112
 200b568:	00800804 	movi	r2,32
 200b56c:	20800d26 	beq	r4,r2,200b5a4 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x54>
 200b570:	1100070e 	bge	r2,r4,200b590 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x40>
 200b574:	00801004 	movi	r2,64
 200b578:	20801126 	beq	r4,r2,200b5c0 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x70>
 200b57c:	00801404 	movi	r2,80
 200b580:	20800426 	beq	r4,r2,200b594 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
 200b584:	00800c04 	movi	r2,48
 200b588:	20801126 	beq	r4,r2,200b5d0 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x80>
 200b58c:	200d64c0 	call	200d64c <abort>
 200b590:	2000081e 	bne	r4,zero,200b5b4 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x64>
 200b594:	0005883a 	mov	r2,zero
 200b598:	dfc00017 	ldw	ra,0(sp)
 200b59c:	dec00104 	addi	sp,sp,4
 200b5a0:	f800283a 	ret
 200b5a4:	2809883a 	mov	r4,r5
 200b5a8:	dfc00017 	ldw	ra,0(sp)
 200b5ac:	dec00104 	addi	sp,sp,4
 200b5b0:	200d1bc1 	jmpi	200d1bc <_Unwind_GetTextRelBase>
 200b5b4:	00800404 	movi	r2,16
 200b5b8:	20bff626 	beq	r4,r2,200b594 <_Z21base_of_encoded_valuehP15_Unwind_Context+0x44>
 200b5bc:	200d64c0 	call	200d64c <abort>
 200b5c0:	2809883a 	mov	r4,r5
 200b5c4:	dfc00017 	ldw	ra,0(sp)
 200b5c8:	dec00104 	addi	sp,sp,4
 200b5cc:	200d1a41 	jmpi	200d1a4 <_Unwind_GetRegionStart>
 200b5d0:	2809883a 	mov	r4,r5
 200b5d4:	dfc00017 	ldw	ra,0(sp)
 200b5d8:	dec00104 	addi	sp,sp,4
 200b5dc:	200d1b41 	jmpi	200d1b4 <_Unwind_GetDataRelBase>

0200b5e0 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 200b5e0:	defffa04 	addi	sp,sp,-24
 200b5e4:	dc800415 	stw	r18,16(sp)
 200b5e8:	dc400315 	stw	r17,12(sp)
 200b5ec:	dc000215 	stw	r16,8(sp)
 200b5f0:	dfc00515 	stw	ra,20(sp)
 200b5f4:	2021883a 	mov	r16,r4
 200b5f8:	000f883a 	mov	r7,zero
 200b5fc:	3023883a 	mov	r17,r6
 200b600:	2825883a 	mov	r18,r5
 200b604:	20000226 	beq	r4,zero,200b610 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x30>
 200b608:	200d1a40 	call	200d1a4 <_Unwind_GetRegionStart>
 200b60c:	100f883a 	mov	r7,r2
 200b610:	89c00015 	stw	r7,0(r17)
 200b614:	90c00003 	ldbu	r3,0(r18)
 200b618:	800b883a 	mov	r5,r16
 200b61c:	00803fc4 	movi	r2,255
 200b620:	1c003fcc 	andi	r16,r3,255
 200b624:	91800044 	addi	r6,r18,1
 200b628:	8009883a 	mov	r4,r16
 200b62c:	18802226 	beq	r3,r2,200b6b8 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xd8>
 200b630:	d9800115 	stw	r6,4(sp)
 200b634:	200b5500 	call	200b550 <_Z21base_of_encoded_valuehP15_Unwind_Context>
 200b638:	d9800117 	ldw	r6,4(sp)
 200b63c:	8009883a 	mov	r4,r16
 200b640:	100b883a 	mov	r5,r2
 200b644:	89c00104 	addi	r7,r17,4
 200b648:	200b37c0 	call	200b37c <_Z28read_encoded_value_with_basehjPKhPj>
 200b64c:	100d883a 	mov	r6,r2
 200b650:	30800003 	ldbu	r2,0(r6)
 200b654:	31c00044 	addi	r7,r6,1
 200b658:	00c03fc4 	movi	r3,255
 200b65c:	d80b883a 	mov	r5,sp
 200b660:	3809883a 	mov	r4,r7
 200b664:	88800505 	stb	r2,20(r17)
 200b668:	10c01b26 	beq	r2,r3,200b6d8 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xf8>
 200b66c:	200b25c0 	call	200b25c <_Z12read_uleb128PKhPj>
 200b670:	100f883a 	mov	r7,r2
 200b674:	d8800017 	ldw	r2,0(sp)
 200b678:	3885883a 	add	r2,r7,r2
 200b67c:	88800315 	stw	r2,12(r17)
 200b680:	38800003 	ldbu	r2,0(r7)
 200b684:	39000044 	addi	r4,r7,1
 200b688:	d80b883a 	mov	r5,sp
 200b68c:	88800545 	stb	r2,21(r17)
 200b690:	200b25c0 	call	200b25c <_Z12read_uleb128PKhPj>
 200b694:	d8c00017 	ldw	r3,0(sp)
 200b698:	10c9883a 	add	r4,r2,r3
 200b69c:	89000415 	stw	r4,16(r17)
 200b6a0:	dfc00517 	ldw	ra,20(sp)
 200b6a4:	dc800417 	ldw	r18,16(sp)
 200b6a8:	dc400317 	ldw	r17,12(sp)
 200b6ac:	dc000217 	ldw	r16,8(sp)
 200b6b0:	dec00604 	addi	sp,sp,24
 200b6b4:	f800283a 	ret
 200b6b8:	89c00115 	stw	r7,4(r17)
 200b6bc:	30800003 	ldbu	r2,0(r6)
 200b6c0:	31c00044 	addi	r7,r6,1
 200b6c4:	00c03fc4 	movi	r3,255
 200b6c8:	d80b883a 	mov	r5,sp
 200b6cc:	3809883a 	mov	r4,r7
 200b6d0:	88800505 	stb	r2,20(r17)
 200b6d4:	10ffe51e 	bne	r2,r3,200b66c <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x8c>
 200b6d8:	88000315 	stw	zero,12(r17)
 200b6dc:	003fe806 	br	200b680 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xa0>

0200b6e0 <_Z15get_ttype_entryP16lsda_header_infoj>:
 200b6e0:	defffe04 	addi	sp,sp,-8
 200b6e4:	dfc00115 	stw	ra,4(sp)
 200b6e8:	21c00503 	ldbu	r7,20(r4)
 200b6ec:	00803fc4 	movi	r2,255
 200b6f0:	38801a26 	beq	r7,r2,200b75c <_Z15get_ttype_entryP16lsda_header_infoj+0x7c>
 200b6f4:	38c001cc 	andi	r3,r7,7
 200b6f8:	00800084 	movi	r2,2
 200b6fc:	18801326 	beq	r3,r2,200b74c <_Z15get_ttype_entryP16lsda_header_infoj+0x6c>
 200b700:	10c0050e 	bge	r2,r3,200b718 <_Z15get_ttype_entryP16lsda_header_infoj+0x38>
 200b704:	008000c4 	movi	r2,3
 200b708:	18800426 	beq	r3,r2,200b71c <_Z15get_ttype_entryP16lsda_header_infoj+0x3c>
 200b70c:	00800104 	movi	r2,4
 200b710:	18801026 	beq	r3,r2,200b754 <_Z15get_ttype_entryP16lsda_header_infoj+0x74>
 200b714:	200d64c0 	call	200d64c <abort>
 200b718:	183ffe1e 	bne	r3,zero,200b714 <_Z15get_ttype_entryP16lsda_header_infoj+0x34>
 200b71c:	2945883a 	add	r2,r5,r5
 200b720:	1085883a 	add	r2,r2,r2
 200b724:	21800317 	ldw	r6,12(r4)
 200b728:	21400217 	ldw	r5,8(r4)
 200b72c:	3809883a 	mov	r4,r7
 200b730:	308dc83a 	sub	r6,r6,r2
 200b734:	d80f883a 	mov	r7,sp
 200b738:	200b37c0 	call	200b37c <_Z28read_encoded_value_with_basehjPKhPj>
 200b73c:	d8800017 	ldw	r2,0(sp)
 200b740:	dfc00117 	ldw	ra,4(sp)
 200b744:	dec00204 	addi	sp,sp,8
 200b748:	f800283a 	ret
 200b74c:	2945883a 	add	r2,r5,r5
 200b750:	003ff406 	br	200b724 <_Z15get_ttype_entryP16lsda_header_infoj+0x44>
 200b754:	280490fa 	slli	r2,r5,3
 200b758:	003ff206 	br	200b724 <_Z15get_ttype_entryP16lsda_header_infoj+0x44>
 200b75c:	0005883a 	mov	r2,zero
 200b760:	003ff006 	br	200b724 <_Z15get_ttype_entryP16lsda_header_infoj+0x44>

0200b764 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>:
 200b764:	20800317 	ldw	r2,12(r4)
 200b768:	defffa04 	addi	sp,sp,-24
 200b76c:	dc800415 	stw	r18,16(sp)
 200b770:	11c5c83a 	sub	r2,r2,r7
 200b774:	dc400315 	stw	r17,12(sp)
 200b778:	dc000215 	stw	r16,8(sp)
 200b77c:	dfc00515 	stw	ra,20(sp)
 200b780:	2023883a 	mov	r17,r4
 200b784:	d9800115 	stw	r6,4(sp)
 200b788:	2825883a 	mov	r18,r5
 200b78c:	143fffc4 	addi	r16,r2,-1
 200b790:	8009883a 	mov	r4,r16
 200b794:	d80b883a 	mov	r5,sp
 200b798:	200b25c0 	call	200b25c <_Z12read_uleb128PKhPj>
 200b79c:	1021883a 	mov	r16,r2
 200b7a0:	d8800017 	ldw	r2,0(sp)
 200b7a4:	8809883a 	mov	r4,r17
 200b7a8:	100b883a 	mov	r5,r2
 200b7ac:	10000826 	beq	r2,zero,200b7d0 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi+0x6c>
 200b7b0:	200b6e00 	call	200b6e0 <_Z15get_ttype_entryP16lsda_header_infoj>
 200b7b4:	1009883a 	mov	r4,r2
 200b7b8:	900b883a 	mov	r5,r18
 200b7bc:	d9800104 	addi	r6,sp,4
 200b7c0:	200b2e00 	call	200b2e0 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>
 200b7c4:	10803fcc 	andi	r2,r2,255
 200b7c8:	103ff126 	beq	r2,zero,200b790 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi+0x2c>
 200b7cc:	00800044 	movi	r2,1
 200b7d0:	dfc00517 	ldw	ra,20(sp)
 200b7d4:	dc800417 	ldw	r18,16(sp)
 200b7d8:	dc400317 	ldw	r17,12(sp)
 200b7dc:	dc000217 	ldw	r16,8(sp)
 200b7e0:	dec00604 	addi	sp,sp,24
 200b7e4:	f800283a 	ret

0200b7e8 <__cxa_call_unexpected>:
 200b7e8:	deffe204 	addi	sp,sp,-120
 200b7ec:	00808074 	movhi	r2,513
 200b7f0:	10ae5a04 	addi	r2,r2,-18072
 200b7f4:	00c080b4 	movhi	r3,514
 200b7f8:	18edf104 	addi	r3,r3,-18492
 200b7fc:	d8800c15 	stw	r2,48(sp)
 200b800:	d9001815 	stw	r4,96(sp)
 200b804:	00808074 	movhi	r2,513
 200b808:	10ae1c04 	addi	r2,r2,-18320
 200b80c:	d9000604 	addi	r4,sp,24
 200b810:	d8c00d15 	stw	r3,52(sp)
 200b814:	dfc01d15 	stw	ra,116(sp)
 200b818:	d8800f15 	stw	r2,60(sp)
 200b81c:	df001c15 	stw	fp,112(sp)
 200b820:	ddc01b15 	stw	r23,108(sp)
 200b824:	dec00e15 	stw	sp,56(sp)
 200b828:	dec01015 	stw	sp,64(sp)
 200b82c:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 200b830:	d9001817 	ldw	r4,96(sp)
 200b834:	200c0200 	call	200c020 <__cxa_begin_catch>
 200b838:	d8801817 	ldw	r2,96(sp)
 200b83c:	10fff504 	addi	r3,r2,-44
 200b840:	18800917 	ldw	r2,36(r3)
 200b844:	19400617 	ldw	r5,24(r3)
 200b848:	19000217 	ldw	r4,8(r3)
 200b84c:	d8800215 	stw	r2,8(sp)
 200b850:	18800817 	ldw	r2,32(r3)
 200b854:	18c00317 	ldw	r3,12(r3)
 200b858:	d9401615 	stw	r5,88(sp)
 200b85c:	d8801715 	stw	r2,92(sp)
 200b860:	00800084 	movi	r2,2
 200b864:	d8c01515 	stw	r3,84(sp)
 200b868:	d8800715 	stw	r2,28(sp)
 200b86c:	200bf2c0 	call	200bf2c <_ZN10__cxxabiv112__unexpectedEPFvvE>
 200b870:	d8800717 	ldw	r2,28(sp)
 200b874:	d8c00817 	ldw	r3,32(sp)
 200b878:	d8801a15 	stw	r2,104(sp)
 200b87c:	d9401a17 	ldw	r5,104(sp)
 200b880:	00800044 	movi	r2,1
 200b884:	d8c01915 	stw	r3,100(sp)
 200b888:	28800826 	beq	r5,r2,200b8ac <__cxa_call_unexpected+0xc4>
 200b88c:	d8000715 	stw	zero,28(sp)
 200b890:	200bf7c0 	call	200bf7c <__cxa_end_catch>
 200b894:	d8000715 	stw	zero,28(sp)
 200b898:	200bf7c0 	call	200bf7c <__cxa_end_catch>
 200b89c:	d9001917 	ldw	r4,100(sp)
 200b8a0:	00bfffc4 	movi	r2,-1
 200b8a4:	d8800715 	stw	r2,28(sp)
 200b8a8:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 200b8ac:	d9001917 	ldw	r4,100(sp)
 200b8b0:	200c0200 	call	200c020 <__cxa_begin_catch>
 200b8b4:	200c8580 	call	200c858 <__cxa_get_globals_fast>
 200b8b8:	10800017 	ldw	r2,0(r2)
 200b8bc:	d8c01a17 	ldw	r3,104(sp)
 200b8c0:	0009883a 	mov	r4,zero
 200b8c4:	11401004 	addi	r5,r2,64
 200b8c8:	d9401315 	stw	r5,76(sp)
 200b8cc:	d8801415 	stw	r2,80(sp)
 200b8d0:	d8c00715 	stw	r3,28(sp)
 200b8d4:	d9401717 	ldw	r5,92(sp)
 200b8d8:	d80d883a 	mov	r6,sp
 200b8dc:	200b5e00 	call	200b5e0 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 200b8e0:	d8801417 	ldw	r2,80(sp)
 200b8e4:	d809883a 	mov	r4,sp
 200b8e8:	d9801317 	ldw	r6,76(sp)
 200b8ec:	11400017 	ldw	r5,0(r2)
 200b8f0:	d9c01617 	ldw	r7,88(sp)
 200b8f4:	200b7640 	call	200b764 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
 200b8f8:	10803fcc 	andi	r2,r2,255
 200b8fc:	1000151e 	bne	r2,zero,200b954 <__cxa_call_unexpected+0x16c>
 200b900:	d8c01a17 	ldw	r3,104(sp)
 200b904:	d809883a 	mov	r4,sp
 200b908:	014080b4 	movhi	r5,514
 200b90c:	296f4004 	addi	r5,r5,-17152
 200b910:	d8c00715 	stw	r3,28(sp)
 200b914:	000d883a 	mov	r6,zero
 200b918:	d9c01617 	ldw	r7,88(sp)
 200b91c:	200b7640 	call	200b764 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
 200b920:	10803fcc 	andi	r2,r2,255
 200b924:	10000c26 	beq	r2,zero,200b958 <__cxa_call_unexpected+0x170>
 200b928:	01000104 	movi	r4,4
 200b92c:	200c4ec0 	call	200c4ec <__cxa_allocate_exception>
 200b930:	1009883a 	mov	r4,r2
 200b934:	008080b4 	movhi	r2,514
 200b938:	10af3304 	addi	r2,r2,-17204
 200b93c:	20800015 	stw	r2,0(r4)
 200b940:	014080b4 	movhi	r5,514
 200b944:	296f4004 	addi	r5,r5,-17152
 200b948:	01808074 	movhi	r6,513
 200b94c:	31b1e504 	addi	r6,r6,-14444
 200b950:	200c1b80 	call	200c1b8 <__cxa_throw>
 200b954:	200c1440 	call	200c144 <__cxa_rethrow>
 200b958:	d9401a17 	ldw	r5,104(sp)
 200b95c:	d9001517 	ldw	r4,84(sp)
 200b960:	d9400715 	stw	r5,28(sp)
 200b964:	200be700 	call	200be70 <_ZN10__cxxabiv111__terminateEPFvvE>

0200b968 <__gxx_personality_sj0>:
 200b968:	deffd304 	addi	sp,sp,-180
 200b96c:	00808074 	movhi	r2,513
 200b970:	10af8104 	addi	r2,r2,-16892
 200b974:	00c080b4 	movhi	r3,514
 200b978:	18edf504 	addi	r3,r3,-18476
 200b97c:	d8801315 	stw	r2,76(sp)
 200b980:	d9002315 	stw	r4,140(sp)
 200b984:	00808074 	movhi	r2,513
 200b988:	10ae5a04 	addi	r2,r2,-18072
 200b98c:	d9000a04 	addi	r4,sp,40
 200b990:	d8801015 	stw	r2,64(sp)
 200b994:	d8c01115 	stw	r3,68(sp)
 200b998:	dfc02c15 	stw	ra,176(sp)
 200b99c:	df002b15 	stw	fp,172(sp)
 200b9a0:	ddc02a15 	stw	r23,168(sp)
 200b9a4:	dec01215 	stw	sp,72(sp)
 200b9a8:	dec01415 	stw	sp,80(sp)
 200b9ac:	d9802515 	stw	r6,148(sp)
 200b9b0:	d9402415 	stw	r5,144(sp)
 200b9b4:	d9c02615 	stw	r7,152(sp)
 200b9b8:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 200b9bc:	d8c02317 	ldw	r3,140(sp)
 200b9c0:	00800044 	movi	r2,1
 200b9c4:	18800a26 	beq	r3,r2,200b9f0 <__gxx_personality_sj0+0x88>
 200b9c8:	010000c4 	movi	r4,3
 200b9cc:	d9002215 	stw	r4,136(sp)
 200b9d0:	d9000a04 	addi	r4,sp,40
 200b9d4:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 200b9d8:	d8802217 	ldw	r2,136(sp)
 200b9dc:	dfc02c17 	ldw	ra,176(sp)
 200b9e0:	df002b17 	ldw	fp,172(sp)
 200b9e4:	ddc02a17 	ldw	r23,168(sp)
 200b9e8:	dec02d04 	addi	sp,sp,180
 200b9ec:	f800283a 	ret
 200b9f0:	d9402d17 	ldw	r5,180(sp)
 200b9f4:	d9002517 	ldw	r4,148(sp)
 200b9f8:	0007883a 	mov	r3,zero
 200b9fc:	28800504 	addi	r2,r5,20
 200ba00:	d8800015 	stw	r2,0(sp)
 200ba04:	28bff504 	addi	r2,r5,-44
 200ba08:	d8801a15 	stw	r2,104(sp)
 200ba0c:	0090caf4 	movhi	r2,17195
 200ba10:	108ac004 	addi	r2,r2,11008
 200ba14:	2080ad26 	beq	r4,r2,200bccc <__gxx_personality_sj0+0x364>
 200ba18:	d8c02105 	stb	r3,132(sp)
 200ba1c:	d8c02417 	ldw	r3,144(sp)
 200ba20:	00800184 	movi	r2,6
 200ba24:	1880281e 	bne	r3,r2,200bac8 <__gxx_personality_sj0+0x160>
 200ba28:	d8802103 	ldbu	r2,132(sp)
 200ba2c:	10002626 	beq	r2,zero,200bac8 <__gxx_personality_sj0+0x160>
 200ba30:	d9001a17 	ldw	r4,104(sp)
 200ba34:	d9401a17 	ldw	r5,104(sp)
 200ba38:	d8801a17 	ldw	r2,104(sp)
 200ba3c:	21000917 	ldw	r4,36(r4)
 200ba40:	29400617 	ldw	r5,24(r5)
 200ba44:	10800817 	ldw	r2,32(r2)
 200ba48:	d9001d15 	stw	r4,116(sp)
 200ba4c:	d9401b15 	stw	r5,108(sp)
 200ba50:	d8802015 	stw	r2,128(sp)
 200ba54:	2000ad1e 	bne	r4,zero,200bd0c <__gxx_personality_sj0+0x3a4>
 200ba58:	01000044 	movi	r4,1
 200ba5c:	00800044 	movi	r2,1
 200ba60:	2080e126 	beq	r4,r2,200bde8 <__gxx_personality_sj0+0x480>
 200ba64:	d8801b17 	ldw	r2,108(sp)
 200ba68:	1000d316 	blt	r2,zero,200bdb8 <__gxx_personality_sj0+0x450>
 200ba6c:	d9802d17 	ldw	r6,180(sp)
 200ba70:	d9002e17 	ldw	r4,184(sp)
 200ba74:	00bfffc4 	movi	r2,-1
 200ba78:	000b883a 	mov	r5,zero
 200ba7c:	d8800b15 	stw	r2,44(sp)
 200ba80:	200d14c0 	call	200d14c <_Unwind_SetGR>
 200ba84:	d9801b17 	ldw	r6,108(sp)
 200ba88:	d9002e17 	ldw	r4,184(sp)
 200ba8c:	01400044 	movi	r5,1
 200ba90:	200d14c0 	call	200d14c <_Unwind_SetGR>
 200ba94:	d9002e17 	ldw	r4,184(sp)
 200ba98:	d9401d17 	ldw	r5,116(sp)
 200ba9c:	200d1880 	call	200d188 <_Unwind_SetIP>
 200baa0:	010001c4 	movi	r4,7
 200baa4:	d9002215 	stw	r4,136(sp)
 200baa8:	d9000a04 	addi	r4,sp,40
 200baac:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 200bab0:	d8802217 	ldw	r2,136(sp)
 200bab4:	dfc02c17 	ldw	ra,176(sp)
 200bab8:	df002b17 	ldw	fp,172(sp)
 200babc:	ddc02a17 	ldw	r23,168(sp)
 200bac0:	dec02d04 	addi	sp,sp,180
 200bac4:	f800283a 	ret
 200bac8:	d9002e17 	ldw	r4,184(sp)
 200bacc:	00ffffc4 	movi	r3,-1
 200bad0:	d8c00b15 	stw	r3,44(sp)
 200bad4:	200d1980 	call	200d198 <_Unwind_GetLanguageSpecificData>
 200bad8:	10007226 	beq	r2,zero,200bca4 <__gxx_personality_sj0+0x33c>
 200badc:	d9002e17 	ldw	r4,184(sp)
 200bae0:	d9800404 	addi	r6,sp,16
 200bae4:	100b883a 	mov	r5,r2
 200bae8:	d8802015 	stw	r2,128(sp)
 200baec:	200b5e00 	call	200b5e0 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 200baf0:	d9000903 	ldbu	r4,36(sp)
 200baf4:	d9402e17 	ldw	r5,184(sp)
 200baf8:	d8801e15 	stw	r2,120(sp)
 200bafc:	200b5500 	call	200b550 <_Z21base_of_encoded_valuehP15_Unwind_Context>
 200bb00:	d9002e17 	ldw	r4,184(sp)
 200bb04:	d8800615 	stw	r2,24(sp)
 200bb08:	200d1640 	call	200d164 <_Unwind_GetIP>
 200bb0c:	10bfffc4 	addi	r2,r2,-1
 200bb10:	d8801c15 	stw	r2,112(sp)
 200bb14:	10006316 	blt	r2,zero,200bca4 <__gxx_personality_sj0+0x33c>
 200bb18:	10001b1e 	bne	r2,zero,200bb88 <__gxx_personality_sj0+0x220>
 200bb1c:	01000044 	movi	r4,1
 200bb20:	d8001f15 	stw	zero,124(sp)
 200bb24:	d8001d15 	stw	zero,116(sp)
 200bb28:	d8001b15 	stw	zero,108(sp)
 200bb2c:	d9402417 	ldw	r5,144(sp)
 200bb30:	00c00044 	movi	r3,1
 200bb34:	28c4703a 	and	r2,r5,r3
 200bb38:	1005003a 	cmpeq	r2,r2,zero
 200bb3c:	10006a1e 	bne	r2,zero,200bce8 <__gxx_personality_sj0+0x380>
 200bb40:	00800084 	movi	r2,2
 200bb44:	20805726 	beq	r4,r2,200bca4 <__gxx_personality_sj0+0x33c>
 200bb48:	d8802103 	ldbu	r2,132(sp)
 200bb4c:	10008626 	beq	r2,zero,200bd68 <__gxx_personality_sj0+0x400>
 200bb50:	d9001a17 	ldw	r4,104(sp)
 200bb54:	d9401d17 	ldw	r5,116(sp)
 200bb58:	d8801b17 	ldw	r2,108(sp)
 200bb5c:	00c00184 	movi	r3,6
 200bb60:	d8c02215 	stw	r3,136(sp)
 200bb64:	21400915 	stw	r5,36(r4)
 200bb68:	20800615 	stw	r2,24(r4)
 200bb6c:	d8c01f17 	ldw	r3,124(sp)
 200bb70:	d9402017 	ldw	r5,128(sp)
 200bb74:	d8800017 	ldw	r2,0(sp)
 200bb78:	20c00715 	stw	r3,28(r4)
 200bb7c:	21400815 	stw	r5,32(r4)
 200bb80:	20800a15 	stw	r2,40(r4)
 200bb84:	003f9206 	br	200b9d0 <__gxx_personality_sj0+0x68>
 200bb88:	d9001e17 	ldw	r4,120(sp)
 200bb8c:	d9400204 	addi	r5,sp,8
 200bb90:	200b25c0 	call	200b25c <_Z12read_uleb128PKhPj>
 200bb94:	d9401c17 	ldw	r5,112(sp)
 200bb98:	1009883a 	mov	r4,r2
 200bb9c:	297fffc4 	addi	r5,r5,-1
 200bba0:	d9401c15 	stw	r5,112(sp)
 200bba4:	d9400104 	addi	r5,sp,4
 200bba8:	200b25c0 	call	200b25c <_Z12read_uleb128PKhPj>
 200bbac:	d8801e15 	stw	r2,120(sp)
 200bbb0:	d8801c17 	ldw	r2,112(sp)
 200bbb4:	103ff41e 	bne	r2,zero,200bb88 <__gxx_personality_sj0+0x220>
 200bbb8:	d8800217 	ldw	r2,8(sp)
 200bbbc:	d8c00117 	ldw	r3,4(sp)
 200bbc0:	01000044 	movi	r4,1
 200bbc4:	1105883a 	add	r2,r2,r4
 200bbc8:	d8801d15 	stw	r2,116(sp)
 200bbcc:	1800541e 	bne	r3,zero,200bd20 <__gxx_personality_sj0+0x3b8>
 200bbd0:	d8001f15 	stw	zero,124(sp)
 200bbd4:	d8c01d17 	ldw	r3,116(sp)
 200bbd8:	18003226 	beq	r3,zero,200bca4 <__gxx_personality_sj0+0x33c>
 200bbdc:	d9001f17 	ldw	r4,124(sp)
 200bbe0:	20007226 	beq	r4,zero,200bdac <__gxx_personality_sj0+0x444>
 200bbe4:	d9402417 	ldw	r5,144(sp)
 200bbe8:	2880020c 	andi	r2,r5,8
 200bbec:	10006a1e 	bne	r2,zero,200bd98 <__gxx_personality_sj0+0x430>
 200bbf0:	d8802103 	ldbu	r2,132(sp)
 200bbf4:	10006826 	beq	r2,zero,200bd98 <__gxx_personality_sj0+0x430>
 200bbf8:	d8801a17 	ldw	r2,104(sp)
 200bbfc:	10800017 	ldw	r2,0(r2)
 200bc00:	d8801915 	stw	r2,100(sp)
 200bc04:	d8c01917 	ldw	r3,100(sp)
 200bc08:	d8001805 	stb	zero,96(sp)
 200bc0c:	1807003a 	cmpeq	r3,r3,zero
 200bc10:	d8c02715 	stw	r3,156(sp)
 200bc14:	00000706 	br	200bc34 <__gxx_personality_sj0+0x2cc>
 200bc18:	01000044 	movi	r4,1
 200bc1c:	d9001805 	stb	r4,96(sp)
 200bc20:	d8800217 	ldw	r2,8(sp)
 200bc24:	10005e26 	beq	r2,zero,200bda0 <__gxx_personality_sj0+0x438>
 200bc28:	d8c01717 	ldw	r3,92(sp)
 200bc2c:	1885883a 	add	r2,r3,r2
 200bc30:	d8801f15 	stw	r2,124(sp)
 200bc34:	d9001f17 	ldw	r4,124(sp)
 200bc38:	d9400104 	addi	r5,sp,4
 200bc3c:	200b28c0 	call	200b28c <_Z12read_sleb128PKhPi>
 200bc40:	1009883a 	mov	r4,r2
 200bc44:	d9400204 	addi	r5,sp,8
 200bc48:	d8801715 	stw	r2,92(sp)
 200bc4c:	200b28c0 	call	200b28c <_Z12read_sleb128PKhPi>
 200bc50:	d8800117 	ldw	r2,4(sp)
 200bc54:	103ff026 	beq	r2,zero,200bc18 <__gxx_personality_sj0+0x2b0>
 200bc58:	0080360e 	bge	zero,r2,200bd34 <__gxx_personality_sj0+0x3cc>
 200bc5c:	017fffc4 	movi	r5,-1
 200bc60:	d9400b15 	stw	r5,44(sp)
 200bc64:	d9000404 	addi	r4,sp,16
 200bc68:	100b883a 	mov	r5,r2
 200bc6c:	200b6e00 	call	200b6e0 <_Z15get_ttype_entryP16lsda_header_infoj>
 200bc70:	10000826 	beq	r2,zero,200bc94 <__gxx_personality_sj0+0x32c>
 200bc74:	d8c02717 	ldw	r3,156(sp)
 200bc78:	183fe91e 	bne	r3,zero,200bc20 <__gxx_personality_sj0+0x2b8>
 200bc7c:	d9401917 	ldw	r5,100(sp)
 200bc80:	1009883a 	mov	r4,r2
 200bc84:	d80d883a 	mov	r6,sp
 200bc88:	200b2e00 	call	200b2e0 <_Z16get_adjusted_ptrPKSt9type_infoS1_PPv>
 200bc8c:	10803fcc 	andi	r2,r2,255
 200bc90:	103fe326 	beq	r2,zero,200bc20 <__gxx_personality_sj0+0x2b8>
 200bc94:	d9000117 	ldw	r4,4(sp)
 200bc98:	d9001b15 	stw	r4,108(sp)
 200bc9c:	010000c4 	movi	r4,3
 200bca0:	003fa206 	br	200bb2c <__gxx_personality_sj0+0x1c4>
 200bca4:	01400204 	movi	r5,8
 200bca8:	d9000a04 	addi	r4,sp,40
 200bcac:	d9402215 	stw	r5,136(sp)
 200bcb0:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 200bcb4:	d8802217 	ldw	r2,136(sp)
 200bcb8:	dfc02c17 	ldw	ra,176(sp)
 200bcbc:	df002b17 	ldw	fp,172(sp)
 200bcc0:	ddc02a17 	ldw	r23,168(sp)
 200bcc4:	dec02d04 	addi	sp,sp,180
 200bcc8:	f800283a 	ret
 200bccc:	d9402617 	ldw	r5,152(sp)
 200bcd0:	0091d3b4 	movhi	r2,18254
 200bcd4:	109550c4 	addi	r2,r2,21827
 200bcd8:	28bf4f1e 	bne	r5,r2,200ba18 <__gxx_personality_sj0+0xb0>
 200bcdc:	d8802317 	ldw	r2,140(sp)
 200bce0:	1007883a 	mov	r3,r2
 200bce4:	003f4c06 	br	200ba18 <__gxx_personality_sj0+0xb0>
 200bce8:	d9402417 	ldw	r5,144(sp)
 200bcec:	2880020c 	andi	r2,r5,8
 200bcf0:	10000826 	beq	r2,zero,200bd14 <__gxx_personality_sj0+0x3ac>
 200bcf4:	20c04026 	beq	r4,r3,200bdf8 <__gxx_personality_sj0+0x490>
 200bcf8:	d8801b17 	ldw	r2,108(sp)
 200bcfc:	103f5b0e 	bge	r2,zero,200ba6c <__gxx_personality_sj0+0x104>
 200bd00:	00800084 	movi	r2,2
 200bd04:	d8800b15 	stw	r2,44(sp)
 200bd08:	200bf3c0 	call	200bf3c <_ZSt10unexpectedv>
 200bd0c:	010000c4 	movi	r4,3
 200bd10:	003f5206 	br	200ba5c <__gxx_personality_sj0+0xf4>
 200bd14:	d8802103 	ldbu	r2,132(sp)
 200bd18:	103f501e 	bne	r2,zero,200ba5c <__gxx_personality_sj0+0xf4>
 200bd1c:	003ff506 	br	200bcf4 <__gxx_personality_sj0+0x38c>
 200bd20:	d8800817 	ldw	r2,32(sp)
 200bd24:	1885883a 	add	r2,r3,r2
 200bd28:	1105c83a 	sub	r2,r2,r4
 200bd2c:	d8801f15 	stw	r2,124(sp)
 200bd30:	003fa806 	br	200bbd4 <__gxx_personality_sj0+0x26c>
 200bd34:	d9002717 	ldw	r4,156(sp)
 200bd38:	20000e1e 	bne	r4,zero,200bd74 <__gxx_personality_sj0+0x40c>
 200bd3c:	017fffc4 	movi	r5,-1
 200bd40:	d9400b15 	stw	r5,44(sp)
 200bd44:	d9800017 	ldw	r6,0(sp)
 200bd48:	d9401917 	ldw	r5,100(sp)
 200bd4c:	100f883a 	mov	r7,r2
 200bd50:	d9000404 	addi	r4,sp,16
 200bd54:	200b7640 	call	200b764 <_Z20check_exception_specP16lsda_header_infoPKSt9type_infoPvi>
 200bd58:	1080005c 	xori	r2,r2,1
 200bd5c:	10803fcc 	andi	r2,r2,255
 200bd60:	103faf26 	beq	r2,zero,200bc20 <__gxx_personality_sj0+0x2b8>
 200bd64:	003fcb06 	br	200bc94 <__gxx_personality_sj0+0x32c>
 200bd68:	00800184 	movi	r2,6
 200bd6c:	d8802215 	stw	r2,136(sp)
 200bd70:	003f1706 	br	200b9d0 <__gxx_personality_sj0+0x68>
 200bd74:	d9000717 	ldw	r4,28(sp)
 200bd78:	d9400304 	addi	r5,sp,12
 200bd7c:	2089c83a 	sub	r4,r4,r2
 200bd80:	213fffc4 	addi	r4,r4,-1
 200bd84:	200b25c0 	call	200b25c <_Z12read_uleb128PKhPj>
 200bd88:	d8c00317 	ldw	r3,12(sp)
 200bd8c:	1807003a 	cmpeq	r3,r3,zero
 200bd90:	1805883a 	mov	r2,r3
 200bd94:	003ff106 	br	200bd5c <__gxx_personality_sj0+0x3f4>
 200bd98:	d8001915 	stw	zero,100(sp)
 200bd9c:	003f9906 	br	200bc04 <__gxx_personality_sj0+0x29c>
 200bda0:	d8801803 	ldbu	r2,96(sp)
 200bda4:	1004c03a 	cmpne	r2,r2,zero
 200bda8:	103fbe26 	beq	r2,zero,200bca4 <__gxx_personality_sj0+0x33c>
 200bdac:	01000084 	movi	r4,2
 200bdb0:	d8001b15 	stw	zero,108(sp)
 200bdb4:	003f5d06 	br	200bb2c <__gxx_personality_sj0+0x1c4>
 200bdb8:	d9402017 	ldw	r5,128(sp)
 200bdbc:	d9002e17 	ldw	r4,184(sp)
 200bdc0:	00bfffc4 	movi	r2,-1
 200bdc4:	d9800404 	addi	r6,sp,16
 200bdc8:	d8800b15 	stw	r2,44(sp)
 200bdcc:	200b5e00 	call	200b5e0 <_Z17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 200bdd0:	d9000903 	ldbu	r4,36(sp)
 200bdd4:	d9402e17 	ldw	r5,184(sp)
 200bdd8:	200b5500 	call	200b550 <_Z21base_of_encoded_valuehP15_Unwind_Context>
 200bddc:	d8c01a17 	ldw	r3,104(sp)
 200bde0:	18800915 	stw	r2,36(r3)
 200bde4:	003f2106 	br	200ba6c <__gxx_personality_sj0+0x104>
 200bde8:	d9002d17 	ldw	r4,180(sp)
 200bdec:	00bfffc4 	movi	r2,-1
 200bdf0:	d8800b15 	stw	r2,44(sp)
 200bdf4:	200c7b40 	call	200c7b4 <__cxa_call_terminate>
 200bdf8:	00bfffc4 	movi	r2,-1
 200bdfc:	d8800b15 	stw	r2,44(sp)
 200be00:	200bf140 	call	200bf14 <_ZSt9terminatev>
 200be04:	d9000b17 	ldw	r4,44(sp)
 200be08:	d9400c17 	ldw	r5,48(sp)
 200be0c:	00800044 	movi	r2,1
 200be10:	d9002915 	stw	r4,164(sp)
 200be14:	d9402815 	stw	r5,160(sp)
 200be18:	20800626 	beq	r4,r2,200be34 <__gxx_personality_sj0+0x4cc>
 200be1c:	d8000b15 	stw	zero,44(sp)
 200be20:	200bf7c0 	call	200bf7c <__cxa_end_catch>
 200be24:	d9002817 	ldw	r4,160(sp)
 200be28:	00bfffc4 	movi	r2,-1
 200be2c:	d8800b15 	stw	r2,44(sp)
 200be30:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 200be34:	d9002817 	ldw	r4,160(sp)
 200be38:	200c0200 	call	200c020 <__cxa_begin_catch>
 200be3c:	d8c02917 	ldw	r3,164(sp)
 200be40:	d8c00b15 	stw	r3,44(sp)
 200be44:	200bf140 	call	200bf14 <_ZSt9terminatev>

0200be48 <_ZSt13set_terminatePFvvE>:
 200be48:	00c080b4 	movhi	r3,514
 200be4c:	18f6f104 	addi	r3,r3,-9276
 200be50:	18800017 	ldw	r2,0(r3)
 200be54:	19000015 	stw	r4,0(r3)
 200be58:	f800283a 	ret

0200be5c <_ZSt14set_unexpectedPFvvE>:
 200be5c:	00c080b4 	movhi	r3,514
 200be60:	18f6f704 	addi	r3,r3,-9252
 200be64:	18800017 	ldw	r2,0(r3)
 200be68:	19000015 	stw	r4,0(r3)
 200be6c:	f800283a 	ret

0200be70 <_ZN10__cxxabiv111__terminateEPFvvE>:
 200be70:	deffed04 	addi	sp,sp,-76
 200be74:	00808074 	movhi	r2,513
 200be78:	10ae5a04 	addi	r2,r2,-18072
 200be7c:	d8800615 	stw	r2,24(sp)
 200be80:	00c080b4 	movhi	r3,514
 200be84:	18edf904 	addi	r3,r3,-18460
 200be88:	00808074 	movhi	r2,513
 200be8c:	10afb304 	addi	r2,r2,-16692
 200be90:	d9000d15 	stw	r4,52(sp)
 200be94:	d809883a 	mov	r4,sp
 200be98:	d8800915 	stw	r2,36(sp)
 200be9c:	dfc01215 	stw	ra,72(sp)
 200bea0:	df001115 	stw	fp,68(sp)
 200bea4:	ddc01015 	stw	r23,64(sp)
 200bea8:	d8c00715 	stw	r3,28(sp)
 200beac:	dec00815 	stw	sp,32(sp)
 200beb0:	dec00a15 	stw	sp,40(sp)
 200beb4:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 200beb8:	00800084 	movi	r2,2
 200bebc:	d8800115 	stw	r2,4(sp)
 200bec0:	d8800d17 	ldw	r2,52(sp)
 200bec4:	103ee83a 	callr	r2
 200bec8:	200d64c0 	call	200d64c <abort>
 200becc:	d8800117 	ldw	r2,4(sp)
 200bed0:	d8c00217 	ldw	r3,8(sp)
 200bed4:	d8800f15 	stw	r2,60(sp)
 200bed8:	d8c00e15 	stw	r3,56(sp)
 200bedc:	d8c00f17 	ldw	r3,60(sp)
 200bee0:	00800044 	movi	r2,1
 200bee4:	18800626 	beq	r3,r2,200bf00 <_ZN10__cxxabiv111__terminateEPFvvE+0x90>
 200bee8:	d8000115 	stw	zero,4(sp)
 200beec:	200bf7c0 	call	200bf7c <__cxa_end_catch>
 200bef0:	d9000e17 	ldw	r4,56(sp)
 200bef4:	00bfffc4 	movi	r2,-1
 200bef8:	d8800115 	stw	r2,4(sp)
 200befc:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 200bf00:	d9000e17 	ldw	r4,56(sp)
 200bf04:	200c0200 	call	200c020 <__cxa_begin_catch>
 200bf08:	d8c00f17 	ldw	r3,60(sp)
 200bf0c:	d8c00115 	stw	r3,4(sp)
 200bf10:	200d64c0 	call	200d64c <abort>

0200bf14 <_ZSt9terminatev>:
 200bf14:	008080b4 	movhi	r2,514
 200bf18:	10b6f104 	addi	r2,r2,-9276
 200bf1c:	11000017 	ldw	r4,0(r2)
 200bf20:	deffff04 	addi	sp,sp,-4
 200bf24:	dfc00015 	stw	ra,0(sp)
 200bf28:	200be700 	call	200be70 <_ZN10__cxxabiv111__terminateEPFvvE>

0200bf2c <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 200bf2c:	deffff04 	addi	sp,sp,-4
 200bf30:	dfc00015 	stw	ra,0(sp)
 200bf34:	203ee83a 	callr	r4
 200bf38:	200bf140 	call	200bf14 <_ZSt9terminatev>

0200bf3c <_ZSt10unexpectedv>:
 200bf3c:	008080b4 	movhi	r2,514
 200bf40:	10b6f704 	addi	r2,r2,-9252
 200bf44:	11000017 	ldw	r4,0(r2)
 200bf48:	deffff04 	addi	sp,sp,-4
 200bf4c:	dfc00015 	stw	ra,0(sp)
 200bf50:	200bf2c0 	call	200bf2c <_ZN10__cxxabiv112__unexpectedEPFvvE>

0200bf54 <__cxa_get_exception_ptr>:
 200bf54:	20bfff17 	ldw	r2,-4(r4)
 200bf58:	f800283a 	ret

0200bf5c <_ZSt18uncaught_exceptionv>:
 200bf5c:	deffff04 	addi	sp,sp,-4
 200bf60:	dfc00015 	stw	ra,0(sp)
 200bf64:	200c8600 	call	200c860 <__cxa_get_globals>
 200bf68:	10800117 	ldw	r2,4(r2)
 200bf6c:	1004c03a 	cmpne	r2,r2,zero
 200bf70:	dfc00017 	ldw	ra,0(sp)
 200bf74:	dec00104 	addi	sp,sp,4
 200bf78:	f800283a 	ret

0200bf7c <__cxa_end_catch>:
 200bf7c:	deffff04 	addi	sp,sp,-4
 200bf80:	dfc00015 	stw	ra,0(sp)
 200bf84:	200c8580 	call	200c858 <__cxa_get_globals_fast>
 200bf88:	11000017 	ldw	r4,0(r2)
 200bf8c:	1007883a 	mov	r3,r2
 200bf90:	20001326 	beq	r4,zero,200bfe0 <__cxa_end_catch+0x64>
 200bf94:	21400b17 	ldw	r5,44(r4)
 200bf98:	0090caf4 	movhi	r2,17195
 200bf9c:	108ac004 	addi	r2,r2,11008
 200bfa0:	21800c17 	ldw	r6,48(r4)
 200bfa4:	28800526 	beq	r5,r2,200bfbc <__cxa_end_catch+0x40>
 200bfa8:	21000b04 	addi	r4,r4,44
 200bfac:	18000015 	stw	zero,0(r3)
 200bfb0:	dfc00017 	ldw	ra,0(sp)
 200bfb4:	dec00104 	addi	sp,sp,4
 200bfb8:	200d2c41 	jmpi	200d2c4 <_Unwind_DeleteException>
 200bfbc:	0091d3b4 	movhi	r2,18254
 200bfc0:	109550c4 	addi	r2,r2,21827
 200bfc4:	30bff81e 	bne	r6,r2,200bfa8 <__cxa_end_catch+0x2c>
 200bfc8:	20800517 	ldw	r2,20(r4)
 200bfcc:	10000e16 	blt	r2,zero,200c008 <__cxa_end_catch+0x8c>
 200bfd0:	117fffc4 	addi	r5,r2,-1
 200bfd4:	28000526 	beq	r5,zero,200bfec <__cxa_end_catch+0x70>
 200bfd8:	28000a16 	blt	r5,zero,200c004 <__cxa_end_catch+0x88>
 200bfdc:	21400515 	stw	r5,20(r4)
 200bfe0:	dfc00017 	ldw	ra,0(sp)
 200bfe4:	dec00104 	addi	sp,sp,4
 200bfe8:	f800283a 	ret
 200bfec:	20800417 	ldw	r2,16(r4)
 200bff0:	21000b04 	addi	r4,r4,44
 200bff4:	18800015 	stw	r2,0(r3)
 200bff8:	dfc00017 	ldw	ra,0(sp)
 200bffc:	dec00104 	addi	sp,sp,4
 200c000:	200d2c41 	jmpi	200d2c4 <_Unwind_DeleteException>
 200c004:	200bf140 	call	200bf14 <_ZSt9terminatev>
 200c008:	11400044 	addi	r5,r2,1
 200c00c:	283ff31e 	bne	r5,zero,200bfdc <__cxa_end_catch+0x60>
 200c010:	20800417 	ldw	r2,16(r4)
 200c014:	21400515 	stw	r5,20(r4)
 200c018:	18800015 	stw	r2,0(r3)
 200c01c:	003ff006 	br	200bfe0 <__cxa_end_catch+0x64>

0200c020 <__cxa_begin_catch>:
 200c020:	deffee04 	addi	sp,sp,-72
 200c024:	00808074 	movhi	r2,513
 200c028:	10ae5a04 	addi	r2,r2,-18072
 200c02c:	00c080b4 	movhi	r3,514
 200c030:	18edfd04 	addi	r3,r3,-18444
 200c034:	d8800615 	stw	r2,24(sp)
 200c038:	d9000e15 	stw	r4,56(sp)
 200c03c:	00808074 	movhi	r2,513
 200c040:	10b04504 	addi	r2,r2,-16108
 200c044:	d809883a 	mov	r4,sp
 200c048:	d8c00715 	stw	r3,28(sp)
 200c04c:	dfc01115 	stw	ra,68(sp)
 200c050:	d8800915 	stw	r2,36(sp)
 200c054:	df001015 	stw	fp,64(sp)
 200c058:	ddc00f15 	stw	r23,60(sp)
 200c05c:	dec00815 	stw	sp,32(sp)
 200c060:	dec00a15 	stw	sp,40(sp)
 200c064:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 200c068:	200c8600 	call	200c860 <__cxa_get_globals>
 200c06c:	100d883a 	mov	r6,r2
 200c070:	d8800e17 	ldw	r2,56(sp)
 200c074:	31c00017 	ldw	r7,0(r6)
 200c078:	117ff504 	addi	r5,r2,-44
 200c07c:	28c00b17 	ldw	r3,44(r5)
 200c080:	0090caf4 	movhi	r2,17195
 200c084:	108ac004 	addi	r2,r2,11008
 200c088:	29000c17 	ldw	r4,48(r5)
 200c08c:	18800b26 	beq	r3,r2,200c0bc <__cxa_begin_catch+0x9c>
 200c090:	38001d1e 	bne	r7,zero,200c108 <__cxa_begin_catch+0xe8>
 200c094:	d8000d15 	stw	zero,52(sp)
 200c098:	31400015 	stw	r5,0(r6)
 200c09c:	d809883a 	mov	r4,sp
 200c0a0:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 200c0a4:	d8800d17 	ldw	r2,52(sp)
 200c0a8:	dfc01117 	ldw	ra,68(sp)
 200c0ac:	df001017 	ldw	fp,64(sp)
 200c0b0:	ddc00f17 	ldw	r23,60(sp)
 200c0b4:	dec01204 	addi	sp,sp,72
 200c0b8:	f800283a 	ret
 200c0bc:	0091d3b4 	movhi	r2,18254
 200c0c0:	109550c4 	addi	r2,r2,21827
 200c0c4:	20bff21e 	bne	r4,r2,200c090 <__cxa_begin_catch+0x70>
 200c0c8:	28c00517 	ldw	r3,20(r5)
 200c0cc:	18000b16 	blt	r3,zero,200c0fc <__cxa_begin_catch+0xdc>
 200c0d0:	18800044 	addi	r2,r3,1
 200c0d4:	28800515 	stw	r2,20(r5)
 200c0d8:	30800117 	ldw	r2,4(r6)
 200c0dc:	10bfffc4 	addi	r2,r2,-1
 200c0e0:	30800115 	stw	r2,4(r6)
 200c0e4:	39400226 	beq	r7,r5,200c0f0 <__cxa_begin_catch+0xd0>
 200c0e8:	29c00415 	stw	r7,16(r5)
 200c0ec:	31400015 	stw	r5,0(r6)
 200c0f0:	29400a17 	ldw	r5,40(r5)
 200c0f4:	d9400d15 	stw	r5,52(sp)
 200c0f8:	003fe806 	br	200c09c <__cxa_begin_catch+0x7c>
 200c0fc:	00800044 	movi	r2,1
 200c100:	10c5c83a 	sub	r2,r2,r3
 200c104:	003ff306 	br	200c0d4 <__cxa_begin_catch+0xb4>
 200c108:	00800044 	movi	r2,1
 200c10c:	d8800115 	stw	r2,4(sp)
 200c110:	200bf140 	call	200bf14 <_ZSt9terminatev>
 200c114:	d8800317 	ldw	r2,12(sp)
 200c118:	00ffffc4 	movi	r3,-1
 200c11c:	d9000217 	ldw	r4,8(sp)
 200c120:	10c00226 	beq	r2,r3,200c12c <__cxa_begin_catch+0x10c>
 200c124:	d8c00115 	stw	r3,4(sp)
 200c128:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 200c12c:	00bfffc4 	movi	r2,-1
 200c130:	d8800115 	stw	r2,4(sp)
 200c134:	200b7e80 	call	200b7e8 <__cxa_call_unexpected>

0200c138 <_ZdlPv>:
 200c138:	20000126 	beq	r4,zero,200c140 <_ZdlPv+0x8>
 200c13c:	200d6641 	jmpi	200d664 <free>
 200c140:	f800283a 	ret

0200c144 <__cxa_rethrow>:
 200c144:	defffe04 	addi	sp,sp,-8
 200c148:	dc400015 	stw	r17,0(sp)
 200c14c:	dfc00115 	stw	ra,4(sp)
 200c150:	200c8600 	call	200c860 <__cxa_get_globals>
 200c154:	100b883a 	mov	r5,r2
 200c158:	10800117 	ldw	r2,4(r2)
 200c15c:	2c400017 	ldw	r17,0(r5)
 200c160:	10800044 	addi	r2,r2,1
 200c164:	28800115 	stw	r2,4(r5)
 200c168:	88000b26 	beq	r17,zero,200c198 <__cxa_rethrow+0x54>
 200c16c:	88c00b17 	ldw	r3,44(r17)
 200c170:	0090caf4 	movhi	r2,17195
 200c174:	108ac004 	addi	r2,r2,11008
 200c178:	89000c17 	ldw	r4,48(r17)
 200c17c:	18800726 	beq	r3,r2,200c19c <__cxa_rethrow+0x58>
 200c180:	28000015 	stw	zero,0(r5)
 200c184:	8c400b04 	addi	r17,r17,44
 200c188:	8809883a 	mov	r4,r17
 200c18c:	200d5f40 	call	200d5f4 <_Unwind_SjLj_Resume_or_Rethrow>
 200c190:	8809883a 	mov	r4,r17
 200c194:	200c0200 	call	200c020 <__cxa_begin_catch>
 200c198:	200bf140 	call	200bf14 <_ZSt9terminatev>
 200c19c:	0091d3b4 	movhi	r2,18254
 200c1a0:	109550c4 	addi	r2,r2,21827
 200c1a4:	20bff61e 	bne	r4,r2,200c180 <__cxa_rethrow+0x3c>
 200c1a8:	88800517 	ldw	r2,20(r17)
 200c1ac:	0085c83a 	sub	r2,zero,r2
 200c1b0:	88800515 	stw	r2,20(r17)
 200c1b4:	003ff306 	br	200c184 <__cxa_rethrow+0x40>

0200c1b8 <__cxa_throw>:
 200c1b8:	008080b4 	movhi	r2,514
 200c1bc:	10b6f704 	addi	r2,r2,-9252
 200c1c0:	00c080b4 	movhi	r3,514
 200c1c4:	18f6f104 	addi	r3,r3,-9276
 200c1c8:	12000017 	ldw	r8,0(r2)
 200c1cc:	19c00017 	ldw	r7,0(r3)
 200c1d0:	defffe04 	addi	sp,sp,-8
 200c1d4:	213ff004 	addi	r4,r4,-64
 200c1d8:	dfc00115 	stw	ra,4(sp)
 200c1dc:	dc400015 	stw	r17,0(sp)
 200c1e0:	0090caf4 	movhi	r2,17195
 200c1e4:	108ac004 	addi	r2,r2,11008
 200c1e8:	20800b15 	stw	r2,44(r4)
 200c1ec:	00d1d3b4 	movhi	r3,18254
 200c1f0:	18d550c4 	addi	r3,r3,21827
 200c1f4:	24400b04 	addi	r17,r4,44
 200c1f8:	00808074 	movhi	r2,513
 200c1fc:	10b08b04 	addi	r2,r2,-15828
 200c200:	21400015 	stw	r5,0(r4)
 200c204:	21800115 	stw	r6,4(r4)
 200c208:	22000215 	stw	r8,8(r4)
 200c20c:	21c00315 	stw	r7,12(r4)
 200c210:	20c00c15 	stw	r3,48(r4)
 200c214:	20800d15 	stw	r2,52(r4)
 200c218:	8809883a 	mov	r4,r17
 200c21c:	200d42c0 	call	200d42c <_Unwind_SjLj_RaiseException>
 200c220:	8809883a 	mov	r4,r17
 200c224:	200c0200 	call	200c020 <__cxa_begin_catch>
 200c228:	200bf140 	call	200bf14 <_ZSt9terminatev>

0200c22c <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
 200c22c:	defffe04 	addi	sp,sp,-8
 200c230:	00800044 	movi	r2,1
 200c234:	dfc00115 	stw	ra,4(sp)
 200c238:	dc000015 	stw	r16,0(sp)
 200c23c:	28fff504 	addi	r3,r5,-44
 200c240:	11001036 	bltu	r2,r4,200c284 <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x58>
 200c244:	18800117 	ldw	r2,4(r3)
 200c248:	10000826 	beq	r2,zero,200c26c <_Z23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x40>
 200c24c:	2c000504 	addi	r16,r5,20
 200c250:	8009883a 	mov	r4,r16
 200c254:	103ee83a 	callr	r2
 200c258:	8009883a 	mov	r4,r16
 200c25c:	dfc00117 	ldw	ra,4(sp)
 200c260:	dc000017 	ldw	r16,0(sp)
 200c264:	dec00204 	addi	sp,sp,8
 200c268:	200c4ac1 	jmpi	200c4ac <__cxa_free_exception>
 200c26c:	2c000504 	addi	r16,r5,20
 200c270:	8009883a 	mov	r4,r16
 200c274:	dfc00117 	ldw	ra,4(sp)
 200c278:	dc000017 	ldw	r16,0(sp)
 200c27c:	dec00204 	addi	sp,sp,8
 200c280:	200c4ac1 	jmpi	200c4ac <__cxa_free_exception>
 200c284:	19000317 	ldw	r4,12(r3)
 200c288:	200be700 	call	200be70 <_ZN10__cxxabiv111__terminateEPFvvE>

0200c28c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 200c28c:	defffb04 	addi	sp,sp,-20
 200c290:	dd400315 	stw	r21,12(sp)
 200c294:	dcc00215 	stw	r19,8(sp)
 200c298:	dc400115 	stw	r17,4(sp)
 200c29c:	dc000015 	stw	r16,0(sp)
 200c2a0:	2823883a 	mov	r17,r5
 200c2a4:	3027883a 	mov	r19,r6
 200c2a8:	382b883a 	mov	r21,r7
 200c2ac:	dfc00415 	stw	ra,16(sp)
 200c2b0:	2021883a 	mov	r16,r4
 200c2b4:	200b1e00 	call	200b1e0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 200c2b8:	10803fcc 	andi	r2,r2,255
 200c2bc:	880b883a 	mov	r5,r17
 200c2c0:	980d883a 	mov	r6,r19
 200c2c4:	a80f883a 	mov	r7,r21
 200c2c8:	00c00044 	movi	r3,1
 200c2cc:	1000051e 	bne	r2,zero,200c2e4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x58>
 200c2d0:	81000217 	ldw	r4,8(r16)
 200c2d4:	20800017 	ldw	r2,0(r4)
 200c2d8:	10c00617 	ldw	r3,24(r2)
 200c2dc:	183ee83a 	callr	r3
 200c2e0:	10c03fcc 	andi	r3,r2,255
 200c2e4:	1805883a 	mov	r2,r3
 200c2e8:	dfc00417 	ldw	ra,16(sp)
 200c2ec:	dd400317 	ldw	r21,12(sp)
 200c2f0:	dcc00217 	ldw	r19,8(sp)
 200c2f4:	dc400117 	ldw	r17,4(sp)
 200c2f8:	dc000017 	ldw	r16,0(sp)
 200c2fc:	dec00504 	addi	sp,sp,20
 200c300:	f800283a 	ret

0200c304 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 200c304:	defffe04 	addi	sp,sp,-8
 200c308:	008080b4 	movhi	r2,514
 200c30c:	10af0f04 	addi	r2,r2,-17348
 200c310:	dc400015 	stw	r17,0(sp)
 200c314:	20800015 	stw	r2,0(r4)
 200c318:	2023883a 	mov	r17,r4
 200c31c:	dfc00115 	stw	ra,4(sp)
 200c320:	200b1700 	call	200b170 <_ZN10__cxxabiv117__class_type_infoD2Ev>
 200c324:	8809883a 	mov	r4,r17
 200c328:	dfc00117 	ldw	ra,4(sp)
 200c32c:	dc400017 	ldw	r17,0(sp)
 200c330:	dec00204 	addi	sp,sp,8
 200c334:	200c1381 	jmpi	200c138 <_ZdlPv>

0200c338 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 200c338:	008080b4 	movhi	r2,514
 200c33c:	10af0f04 	addi	r2,r2,-17348
 200c340:	20800015 	stw	r2,0(r4)
 200c344:	200b1701 	jmpi	200b170 <_ZN10__cxxabiv117__class_type_infoD2Ev>

0200c348 <_ZN10__cxxabiv120__si_class_type_infoD2Ev>:
 200c348:	008080b4 	movhi	r2,514
 200c34c:	10af0f04 	addi	r2,r2,-17348
 200c350:	20800015 	stw	r2,0(r4)
 200c354:	200b1701 	jmpi	200b170 <_ZN10__cxxabiv117__class_type_infoD2Ev>

0200c358 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_>:
 200c358:	da400017 	ldw	r9,0(sp)
 200c35c:	2011883a 	mov	r8,r4
 200c360:	49800526 	beq	r9,r6,200c378 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0x20>
 200c364:	41000217 	ldw	r4,8(r8)
 200c368:	20800017 	ldw	r2,0(r4)
 200c36c:	da400015 	stw	r9,0(sp)
 200c370:	10c00817 	ldw	r3,32(r2)
 200c374:	1800683a 	jmp	r3
 200c378:	39000117 	ldw	r4,4(r7)
 200c37c:	40c00117 	ldw	r3,4(r8)
 200c380:	00800184 	movi	r2,6
 200c384:	193ff71e 	bne	r3,r4,200c364 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcElPKvPKNS_17__class_type_infoES2_+0xc>
 200c388:	f800283a 	ret

0200c38c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 200c38c:	20c00117 	ldw	r3,4(r4)
 200c390:	38800117 	ldw	r2,4(r7)
 200c394:	defffb04 	addi	sp,sp,-20
 200c398:	dfc00415 	stw	ra,16(sp)
 200c39c:	da000517 	ldw	r8,20(sp)
 200c3a0:	dac00617 	ldw	r11,24(sp)
 200c3a4:	da400717 	ldw	r9,28(sp)
 200c3a8:	da800817 	ldw	r10,32(sp)
 200c3ac:	18800c1e 	bne	r3,r2,200c3e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 200c3b0:	51800115 	stw	r6,4(r10)
 200c3b4:	52000015 	stw	r8,0(r10)
 200c3b8:	28001c16 	blt	r5,zero,200c42c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xa0>
 200c3bc:	4145883a 	add	r2,r8,r5
 200c3c0:	48801e26 	beq	r9,r2,200c43c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb0>
 200c3c4:	00800044 	movi	r2,1
 200c3c8:	0007883a 	mov	r3,zero
 200c3cc:	50800315 	stw	r2,12(r10)
 200c3d0:	1805883a 	mov	r2,r3
 200c3d4:	dfc00417 	ldw	ra,16(sp)
 200c3d8:	dec00504 	addi	sp,sp,20
 200c3dc:	f800283a 	ret
 200c3e0:	42400d26 	beq	r8,r9,200c418 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x8c>
 200c3e4:	21000217 	ldw	r4,8(r4)
 200c3e8:	20800017 	ldw	r2,0(r4)
 200c3ec:	da000015 	stw	r8,0(sp)
 200c3f0:	dac00115 	stw	r11,4(sp)
 200c3f4:	da400215 	stw	r9,8(sp)
 200c3f8:	da800315 	stw	r10,12(sp)
 200c3fc:	10c00717 	ldw	r3,28(r2)
 200c400:	183ee83a 	callr	r3
 200c404:	10c03fcc 	andi	r3,r2,255
 200c408:	1805883a 	mov	r2,r3
 200c40c:	dfc00417 	ldw	ra,16(sp)
 200c410:	dec00504 	addi	sp,sp,20
 200c414:	f800283a 	ret
 200c418:	58800117 	ldw	r2,4(r11)
 200c41c:	18bff11e 	bne	r3,r2,200c3e4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x58>
 200c420:	0007883a 	mov	r3,zero
 200c424:	51800215 	stw	r6,8(r10)
 200c428:	003fe906 	br	200c3d0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
 200c42c:	00bfff84 	movi	r2,-2
 200c430:	28800426 	beq	r5,r2,200c444 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xb8>
 200c434:	0007883a 	mov	r3,zero
 200c438:	003fe506 	br	200c3d0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
 200c43c:	00800184 	movi	r2,6
 200c440:	003fe106 	br	200c3c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
 200c444:	00800044 	movi	r2,1
 200c448:	0007883a 	mov	r3,zero
 200c44c:	50800315 	stw	r2,12(r10)
 200c450:	003fdf06 	br	200c3d0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastElNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>

0200c454 <_ZNKSt9type_info14__is_pointer_pEv>:
 200c454:	0005883a 	mov	r2,zero
 200c458:	f800283a 	ret

0200c45c <_ZNKSt9type_info15__is_function_pEv>:
 200c45c:	0005883a 	mov	r2,zero
 200c460:	f800283a 	ret

0200c464 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 200c464:	20c00117 	ldw	r3,4(r4)
 200c468:	28800117 	ldw	r2,4(r5)
 200c46c:	1885003a 	cmpeq	r2,r3,r2
 200c470:	f800283a 	ret

0200c474 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 200c474:	0005883a 	mov	r2,zero
 200c478:	f800283a 	ret

0200c47c <_ZNSt9type_infoD0Ev>:
 200c47c:	008080b4 	movhi	r2,514
 200c480:	10af2704 	addi	r2,r2,-17252
 200c484:	20800015 	stw	r2,0(r4)
 200c488:	200c1381 	jmpi	200c138 <_ZdlPv>

0200c48c <_ZNSt9type_infoD1Ev>:
 200c48c:	008080b4 	movhi	r2,514
 200c490:	10af2704 	addi	r2,r2,-17252
 200c494:	20800015 	stw	r2,0(r4)
 200c498:	f800283a 	ret

0200c49c <_ZNSt9type_infoD2Ev>:
 200c49c:	008080b4 	movhi	r2,514
 200c4a0:	10af2704 	addi	r2,r2,-17252
 200c4a4:	20800015 	stw	r2,0(r4)
 200c4a8:	f800283a 	ret

0200c4ac <__cxa_free_exception>:
 200c4ac:	2007883a 	mov	r3,r4
 200c4b0:	008080b4 	movhi	r2,514
 200c4b4:	10be0d04 	addi	r2,r2,-1996
 200c4b8:	213ff004 	addi	r4,r4,-64
 200c4bc:	11420004 	addi	r5,r2,2048
 200c4c0:	18800336 	bltu	r3,r2,200c4d0 <__cxa_free_exception+0x24>
 200c4c4:	1885c83a 	sub	r2,r3,r2
 200c4c8:	1004d27a 	srli	r2,r2,9
 200c4cc:	19400136 	bltu	r3,r5,200c4d4 <__cxa_free_exception+0x28>
 200c4d0:	200d6641 	jmpi	200d664 <free>
 200c4d4:	00ffff84 	movi	r3,-2
 200c4d8:	1886183a 	rol	r3,r3,r2
 200c4dc:	d0a70917 	ldw	r2,-25564(gp)
 200c4e0:	10c4703a 	and	r2,r2,r3
 200c4e4:	d0a70915 	stw	r2,-25564(gp)
 200c4e8:	f800283a 	ret

0200c4ec <__cxa_allocate_exception>:
 200c4ec:	deffed04 	addi	sp,sp,-76
 200c4f0:	00808074 	movhi	r2,513
 200c4f4:	10ae5a04 	addi	r2,r2,-18072
 200c4f8:	21001004 	addi	r4,r4,64
 200c4fc:	00c080b4 	movhi	r3,514
 200c500:	18ee0104 	addi	r3,r3,-18428
 200c504:	d8800615 	stw	r2,24(sp)
 200c508:	d9000d15 	stw	r4,52(sp)
 200c50c:	00808074 	movhi	r2,513
 200c510:	10b17f04 	addi	r2,r2,-14852
 200c514:	d809883a 	mov	r4,sp
 200c518:	dfc01215 	stw	ra,72(sp)
 200c51c:	d8c00715 	stw	r3,28(sp)
 200c520:	d8800915 	stw	r2,36(sp)
 200c524:	df001115 	stw	fp,68(sp)
 200c528:	ddc01015 	stw	r23,64(sp)
 200c52c:	dec00815 	stw	sp,32(sp)
 200c530:	dec00a15 	stw	sp,40(sp)
 200c534:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 200c538:	d9000d17 	ldw	r4,52(sp)
 200c53c:	200d6780 	call	200d678 <malloc>
 200c540:	d8800e15 	stw	r2,56(sp)
 200c544:	1000171e 	bne	r2,zero,200c5a4 <__cxa_allocate_exception+0xb8>
 200c548:	d8c00d17 	ldw	r3,52(sp)
 200c54c:	00808004 	movi	r2,512
 200c550:	d1e70917 	ldw	r7,-25564(gp)
 200c554:	10c02636 	bltu	r2,r3,200c5f0 <__cxa_allocate_exception+0x104>
 200c558:	3807883a 	mov	r3,r7
 200c55c:	01400044 	movi	r5,1
 200c560:	1944703a 	and	r2,r3,r5
 200c564:	0009883a 	mov	r4,zero
 200c568:	01800104 	movi	r6,4
 200c56c:	10000526 	beq	r2,zero,200c584 <__cxa_allocate_exception+0x98>
 200c570:	2149883a 	add	r4,r4,r5
 200c574:	21801e26 	beq	r4,r6,200c5f0 <__cxa_allocate_exception+0x104>
 200c578:	1806d07a 	srli	r3,r3,1
 200c57c:	1944703a 	and	r2,r3,r5
 200c580:	103ffb1e 	bne	r2,zero,200c570 <__cxa_allocate_exception+0x84>
 200c584:	2904983a 	sll	r2,r5,r4
 200c588:	2008927a 	slli	r4,r4,9
 200c58c:	00c080b4 	movhi	r3,514
 200c590:	18fe0d04 	addi	r3,r3,-1996
 200c594:	3884b03a 	or	r2,r7,r2
 200c598:	20c9883a 	add	r4,r4,r3
 200c59c:	d9000e15 	stw	r4,56(sp)
 200c5a0:	d0a70915 	stw	r2,-25564(gp)
 200c5a4:	200c8600 	call	200c860 <__cxa_get_globals>
 200c5a8:	10c00117 	ldw	r3,4(r2)
 200c5ac:	d9000e17 	ldw	r4,56(sp)
 200c5b0:	000b883a 	mov	r5,zero
 200c5b4:	18c00044 	addi	r3,r3,1
 200c5b8:	10c00115 	stw	r3,4(r2)
 200c5bc:	01801004 	movi	r6,64
 200c5c0:	200ddcc0 	call	200ddcc <memset>
 200c5c4:	d8800e17 	ldw	r2,56(sp)
 200c5c8:	d809883a 	mov	r4,sp
 200c5cc:	10801004 	addi	r2,r2,64
 200c5d0:	d8800f15 	stw	r2,60(sp)
 200c5d4:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 200c5d8:	d8800f17 	ldw	r2,60(sp)
 200c5dc:	dfc01217 	ldw	ra,72(sp)
 200c5e0:	df001117 	ldw	fp,68(sp)
 200c5e4:	ddc01017 	ldw	r23,64(sp)
 200c5e8:	dec01304 	addi	sp,sp,76
 200c5ec:	f800283a 	ret
 200c5f0:	00800044 	movi	r2,1
 200c5f4:	d8800115 	stw	r2,4(sp)
 200c5f8:	200bf140 	call	200bf14 <_ZSt9terminatev>
 200c5fc:	d8800317 	ldw	r2,12(sp)
 200c600:	00ffffc4 	movi	r3,-1
 200c604:	d9000217 	ldw	r4,8(sp)
 200c608:	10c00226 	beq	r2,r3,200c614 <__cxa_allocate_exception+0x128>
 200c60c:	d8c00115 	stw	r3,4(sp)
 200c610:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 200c614:	00bfffc4 	movi	r2,-1
 200c618:	d8800115 	stw	r2,4(sp)
 200c61c:	200b7e80 	call	200b7e8 <__cxa_call_unexpected>

0200c620 <_Znwm>:
 200c620:	deffee04 	addi	sp,sp,-72
 200c624:	00808074 	movhi	r2,513
 200c628:	10ae5a04 	addi	r2,r2,-18072
 200c62c:	d8800615 	stw	r2,24(sp)
 200c630:	00c080b4 	movhi	r3,514
 200c634:	18ee0504 	addi	r3,r3,-18412
 200c638:	00808074 	movhi	r2,513
 200c63c:	10b1bf04 	addi	r2,r2,-14596
 200c640:	d9000e15 	stw	r4,56(sp)
 200c644:	d809883a 	mov	r4,sp
 200c648:	d8800915 	stw	r2,36(sp)
 200c64c:	dfc01115 	stw	ra,68(sp)
 200c650:	df001015 	stw	fp,64(sp)
 200c654:	ddc00f15 	stw	r23,60(sp)
 200c658:	d8c00715 	stw	r3,28(sp)
 200c65c:	dec00815 	stw	sp,32(sp)
 200c660:	dec00a15 	stw	sp,40(sp)
 200c664:	200d1040 	call	200d104 <_Unwind_SjLj_Register>
 200c668:	d8800e17 	ldw	r2,56(sp)
 200c66c:	10000a1e 	bne	r2,zero,200c698 <_Znwm+0x78>
 200c670:	00800044 	movi	r2,1
 200c674:	d8800e15 	stw	r2,56(sp)
 200c678:	00000706 	br	200c698 <_Znwm+0x78>
 200c67c:	008080b4 	movhi	r2,514
 200c680:	10bdf604 	addi	r2,r2,-2088
 200c684:	10c00017 	ldw	r3,0(r2)
 200c688:	18000f26 	beq	r3,zero,200c6c8 <_Znwm+0xa8>
 200c68c:	00800044 	movi	r2,1
 200c690:	d8800115 	stw	r2,4(sp)
 200c694:	183ee83a 	callr	r3
 200c698:	d9000e17 	ldw	r4,56(sp)
 200c69c:	200d6780 	call	200d678 <malloc>
 200c6a0:	d8800d15 	stw	r2,52(sp)
 200c6a4:	103ff526 	beq	r2,zero,200c67c <_Znwm+0x5c>
 200c6a8:	d809883a 	mov	r4,sp
 200c6ac:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 200c6b0:	d8800d17 	ldw	r2,52(sp)
 200c6b4:	dfc01117 	ldw	ra,68(sp)
 200c6b8:	df001017 	ldw	fp,64(sp)
 200c6bc:	ddc00f17 	ldw	r23,60(sp)
 200c6c0:	dec01204 	addi	sp,sp,72
 200c6c4:	f800283a 	ret
 200c6c8:	01000104 	movi	r4,4
 200c6cc:	200c4ec0 	call	200c4ec <__cxa_allocate_exception>
 200c6d0:	1009883a 	mov	r4,r2
 200c6d4:	008080b4 	movhi	r2,514
 200c6d8:	10af4904 	addi	r2,r2,-17116
 200c6dc:	20800015 	stw	r2,0(r4)
 200c6e0:	00c00044 	movi	r3,1
 200c6e4:	d8c00115 	stw	r3,4(sp)
 200c6e8:	014080b4 	movhi	r5,514
 200c6ec:	296f5004 	addi	r5,r5,-17088
 200c6f0:	01808074 	movhi	r6,513
 200c6f4:	31b20e04 	addi	r6,r6,-14280
 200c6f8:	200c1b80 	call	200c1b8 <__cxa_throw>
 200c6fc:	d8800317 	ldw	r2,12(sp)
 200c700:	00ffffc4 	movi	r3,-1
 200c704:	d9000217 	ldw	r4,8(sp)
 200c708:	10c00226 	beq	r2,r3,200c714 <_Znwm+0xf4>
 200c70c:	d8c00115 	stw	r3,4(sp)
 200c710:	200d3d00 	call	200d3d0 <_Unwind_SjLj_Resume>
 200c714:	00bfffc4 	movi	r2,-1
 200c718:	d8800115 	stw	r2,4(sp)
 200c71c:	200b7e80 	call	200b7e8 <__cxa_call_unexpected>

0200c720 <_ZNKSt9exception4whatEv>:
 200c720:	20800017 	ldw	r2,0(r4)
 200c724:	10ffff17 	ldw	r3,-4(r2)
 200c728:	18800117 	ldw	r2,4(r3)
 200c72c:	f800283a 	ret

0200c730 <_ZNSt9exceptionD0Ev>:
 200c730:	008080b4 	movhi	r2,514
 200c734:	10af3804 	addi	r2,r2,-17184
 200c738:	20800015 	stw	r2,0(r4)
 200c73c:	200c1381 	jmpi	200c138 <_ZdlPv>

0200c740 <_ZNSt9exceptionD1Ev>:
 200c740:	008080b4 	movhi	r2,514
 200c744:	10af3804 	addi	r2,r2,-17184
 200c748:	20800015 	stw	r2,0(r4)
 200c74c:	f800283a 	ret

0200c750 <_ZNSt9exceptionD2Ev>:
 200c750:	008080b4 	movhi	r2,514
 200c754:	10af3804 	addi	r2,r2,-17184
 200c758:	20800015 	stw	r2,0(r4)
 200c75c:	f800283a 	ret

0200c760 <_ZNSt13bad_exceptionD0Ev>:
 200c760:	defffe04 	addi	sp,sp,-8
 200c764:	008080b4 	movhi	r2,514
 200c768:	10af3304 	addi	r2,r2,-17204
 200c76c:	dc400015 	stw	r17,0(sp)
 200c770:	20800015 	stw	r2,0(r4)
 200c774:	2023883a 	mov	r17,r4
 200c778:	dfc00115 	stw	ra,4(sp)
 200c77c:	200c7500 	call	200c750 <_ZNSt9exceptionD2Ev>
 200c780:	8809883a 	mov	r4,r17
 200c784:	dfc00117 	ldw	ra,4(sp)
 200c788:	dc400017 	ldw	r17,0(sp)
 200c78c:	dec00204 	addi	sp,sp,8
 200c790:	200c1381 	jmpi	200c138 <_ZdlPv>

0200c794 <_ZNSt13bad_exceptionD1Ev>:
 200c794:	008080b4 	movhi	r2,514
 200c798:	10af3304 	addi	r2,r2,-17204
 200c79c:	20800015 	stw	r2,0(r4)
 200c7a0:	200c7501 	jmpi	200c750 <_ZNSt9exceptionD2Ev>

0200c7a4 <_ZNSt13bad_exceptionD2Ev>:
 200c7a4:	008080b4 	movhi	r2,514
 200c7a8:	10af3304 	addi	r2,r2,-17204
 200c7ac:	20800015 	stw	r2,0(r4)
 200c7b0:	200c7501 	jmpi	200c750 <_ZNSt9exceptionD2Ev>

0200c7b4 <__cxa_call_terminate>:
 200c7b4:	defffe04 	addi	sp,sp,-8
 200c7b8:	dc000015 	stw	r16,0(sp)
 200c7bc:	dfc00115 	stw	ra,4(sp)
 200c7c0:	2021883a 	mov	r16,r4
 200c7c4:	20000626 	beq	r4,zero,200c7e0 <__cxa_call_terminate+0x2c>
 200c7c8:	200c0200 	call	200c020 <__cxa_begin_catch>
 200c7cc:	80c00017 	ldw	r3,0(r16)
 200c7d0:	0090caf4 	movhi	r2,17195
 200c7d4:	108ac004 	addi	r2,r2,11008
 200c7d8:	81000117 	ldw	r4,4(r16)
 200c7dc:	18800126 	beq	r3,r2,200c7e4 <__cxa_call_terminate+0x30>
 200c7e0:	200bf140 	call	200bf14 <_ZSt9terminatev>
 200c7e4:	0091d3b4 	movhi	r2,18254
 200c7e8:	109550c4 	addi	r2,r2,21827
 200c7ec:	20bffc1e 	bne	r4,r2,200c7e0 <__cxa_call_terminate+0x2c>
 200c7f0:	813ff817 	ldw	r4,-32(r16)
 200c7f4:	200be700 	call	200be70 <_ZN10__cxxabiv111__terminateEPFvvE>

0200c7f8 <_ZSt15set_new_handlerPFvvE>:
 200c7f8:	d0a70a17 	ldw	r2,-25560(gp)
 200c7fc:	d1270a15 	stw	r4,-25560(gp)
 200c800:	f800283a 	ret

0200c804 <_ZNSt9bad_allocD0Ev>:
 200c804:	defffe04 	addi	sp,sp,-8
 200c808:	008080b4 	movhi	r2,514
 200c80c:	10af4904 	addi	r2,r2,-17116
 200c810:	dc400015 	stw	r17,0(sp)
 200c814:	20800015 	stw	r2,0(r4)
 200c818:	2023883a 	mov	r17,r4
 200c81c:	dfc00115 	stw	ra,4(sp)
 200c820:	200c7500 	call	200c750 <_ZNSt9exceptionD2Ev>
 200c824:	8809883a 	mov	r4,r17
 200c828:	dfc00117 	ldw	ra,4(sp)
 200c82c:	dc400017 	ldw	r17,0(sp)
 200c830:	dec00204 	addi	sp,sp,8
 200c834:	200c1381 	jmpi	200c138 <_ZdlPv>

0200c838 <_ZNSt9bad_allocD1Ev>:
 200c838:	008080b4 	movhi	r2,514
 200c83c:	10af4904 	addi	r2,r2,-17116
 200c840:	20800015 	stw	r2,0(r4)
 200c844:	200c7501 	jmpi	200c750 <_ZNSt9exceptionD2Ev>

0200c848 <_ZNSt9bad_allocD2Ev>:
 200c848:	008080b4 	movhi	r2,514
 200c84c:	10af4904 	addi	r2,r2,-17116
 200c850:	20800015 	stw	r2,0(r4)
 200c854:	200c7501 	jmpi	200c750 <_ZNSt9exceptionD2Ev>

0200c858 <__cxa_get_globals_fast>:
 200c858:	d0a70b04 	addi	r2,gp,-25556
 200c85c:	f800283a 	ret

0200c860 <__cxa_get_globals>:
 200c860:	d0a70b04 	addi	r2,gp,-25556
 200c864:	f800283a 	ret

0200c868 <__divdi3>:
 200c868:	2005883a 	mov	r2,r4
 200c86c:	deffef04 	addi	sp,sp,-68
 200c870:	2807883a 	mov	r3,r5
 200c874:	1019883a 	mov	r12,r2
 200c878:	0005883a 	mov	r2,zero
 200c87c:	dfc01015 	stw	ra,64(sp)
 200c880:	df000f15 	stw	fp,60(sp)
 200c884:	ddc00e15 	stw	r23,56(sp)
 200c888:	dd800d15 	stw	r22,52(sp)
 200c88c:	dd400c15 	stw	r21,48(sp)
 200c890:	dd000b15 	stw	r20,44(sp)
 200c894:	dcc00a15 	stw	r19,40(sp)
 200c898:	dc800915 	stw	r18,36(sp)
 200c89c:	dc400815 	stw	r17,32(sp)
 200c8a0:	dc000715 	stw	r16,28(sp)
 200c8a4:	181b883a 	mov	r13,r3
 200c8a8:	d8800515 	stw	r2,20(sp)
 200c8ac:	3015883a 	mov	r10,r6
 200c8b0:	3817883a 	mov	r11,r7
 200c8b4:	d8800615 	stw	r2,24(sp)
 200c8b8:	1800c716 	blt	r3,zero,200cbd8 <__divdi3+0x370>
 200c8bc:	d8000415 	stw	zero,16(sp)
 200c8c0:	5800ba16 	blt	r11,zero,200cbac <__divdi3+0x344>
 200c8c4:	5027883a 	mov	r19,r10
 200c8c8:	602d883a 	mov	r22,r12
 200c8cc:	682b883a 	mov	r21,r13
 200c8d0:	5800401e 	bne	r11,zero,200c9d4 <__divdi3+0x16c>
 200c8d4:	6a805e36 	bltu	r13,r10,200ca50 <__divdi3+0x1e8>
 200c8d8:	5000db26 	beq	r10,zero,200cc48 <__divdi3+0x3e0>
 200c8dc:	00bfffd4 	movui	r2,65535
 200c8e0:	14c0c736 	bltu	r2,r19,200cc00 <__divdi3+0x398>
 200c8e4:	00803fc4 	movi	r2,255
 200c8e8:	14c18236 	bltu	r2,r19,200cef4 <__divdi3+0x68c>
 200c8ec:	000b883a 	mov	r5,zero
 200c8f0:	0005883a 	mov	r2,zero
 200c8f4:	9884d83a 	srl	r2,r19,r2
 200c8f8:	010080b4 	movhi	r4,514
 200c8fc:	212f5304 	addi	r4,r4,-17076
 200c900:	01800804 	movi	r6,32
 200c904:	1105883a 	add	r2,r2,r4
 200c908:	10c00003 	ldbu	r3,0(r2)
 200c90c:	28c7883a 	add	r3,r5,r3
 200c910:	30e9c83a 	sub	r20,r6,r3
 200c914:	a0012d1e 	bne	r20,zero,200cdcc <__divdi3+0x564>
 200c918:	982ed43a 	srli	r23,r19,16
 200c91c:	acebc83a 	sub	r21,r21,r19
 200c920:	9f3fffcc 	andi	fp,r19,65535
 200c924:	05000044 	movi	r20,1
 200c928:	a809883a 	mov	r4,r21
 200c92c:	b80b883a 	mov	r5,r23
 200c930:	200d0bc0 	call	200d0bc <__udivsi3>
 200c934:	100b883a 	mov	r5,r2
 200c938:	e009883a 	mov	r4,fp
 200c93c:	1021883a 	mov	r16,r2
 200c940:	200d0cc0 	call	200d0cc <__mulsi3>
 200c944:	a809883a 	mov	r4,r21
 200c948:	b80b883a 	mov	r5,r23
 200c94c:	1023883a 	mov	r17,r2
 200c950:	200d0c40 	call	200d0c4 <__umodsi3>
 200c954:	1004943a 	slli	r2,r2,16
 200c958:	b006d43a 	srli	r3,r22,16
 200c95c:	10c4b03a 	or	r2,r2,r3
 200c960:	1440042e 	bgeu	r2,r17,200c974 <__divdi3+0x10c>
 200c964:	14c5883a 	add	r2,r2,r19
 200c968:	843fffc4 	addi	r16,r16,-1
 200c96c:	14c00136 	bltu	r2,r19,200c974 <__divdi3+0x10c>
 200c970:	14418036 	bltu	r2,r17,200cf74 <__divdi3+0x70c>
 200c974:	1463c83a 	sub	r17,r2,r17
 200c978:	8809883a 	mov	r4,r17
 200c97c:	b80b883a 	mov	r5,r23
 200c980:	200d0bc0 	call	200d0bc <__udivsi3>
 200c984:	100b883a 	mov	r5,r2
 200c988:	e009883a 	mov	r4,fp
 200c98c:	102b883a 	mov	r21,r2
 200c990:	200d0cc0 	call	200d0cc <__mulsi3>
 200c994:	8809883a 	mov	r4,r17
 200c998:	b80b883a 	mov	r5,r23
 200c99c:	1025883a 	mov	r18,r2
 200c9a0:	200d0c40 	call	200d0c4 <__umodsi3>
 200c9a4:	1004943a 	slli	r2,r2,16
 200c9a8:	b0ffffcc 	andi	r3,r22,65535
 200c9ac:	10c4b03a 	or	r2,r2,r3
 200c9b0:	1480042e 	bgeu	r2,r18,200c9c4 <__divdi3+0x15c>
 200c9b4:	9885883a 	add	r2,r19,r2
 200c9b8:	ad7fffc4 	addi	r21,r21,-1
 200c9bc:	14c00136 	bltu	r2,r19,200c9c4 <__divdi3+0x15c>
 200c9c0:	14816536 	bltu	r2,r18,200cf58 <__divdi3+0x6f0>
 200c9c4:	8004943a 	slli	r2,r16,16
 200c9c8:	a00b883a 	mov	r5,r20
 200c9cc:	a884b03a 	or	r2,r21,r2
 200c9d0:	00000406 	br	200c9e4 <__divdi3+0x17c>
 200c9d4:	5811883a 	mov	r8,r11
 200c9d8:	6ac05f2e 	bgeu	r13,r11,200cb58 <__divdi3+0x2f0>
 200c9dc:	0005883a 	mov	r2,zero
 200c9e0:	000b883a 	mov	r5,zero
 200c9e4:	d8c00417 	ldw	r3,16(sp)
 200c9e8:	d8800515 	stw	r2,20(sp)
 200c9ec:	d9400615 	stw	r5,24(sp)
 200c9f0:	100d883a 	mov	r6,r2
 200c9f4:	280f883a 	mov	r7,r5
 200c9f8:	18000726 	beq	r3,zero,200ca18 <__divdi3+0x1b0>
 200c9fc:	0009883a 	mov	r4,zero
 200ca00:	2085c83a 	sub	r2,r4,r2
 200ca04:	2089803a 	cmpltu	r4,r4,r2
 200ca08:	0147c83a 	sub	r3,zero,r5
 200ca0c:	1909c83a 	sub	r4,r3,r4
 200ca10:	100d883a 	mov	r6,r2
 200ca14:	200f883a 	mov	r7,r4
 200ca18:	3005883a 	mov	r2,r6
 200ca1c:	3807883a 	mov	r3,r7
 200ca20:	dfc01017 	ldw	ra,64(sp)
 200ca24:	df000f17 	ldw	fp,60(sp)
 200ca28:	ddc00e17 	ldw	r23,56(sp)
 200ca2c:	dd800d17 	ldw	r22,52(sp)
 200ca30:	dd400c17 	ldw	r21,48(sp)
 200ca34:	dd000b17 	ldw	r20,44(sp)
 200ca38:	dcc00a17 	ldw	r19,40(sp)
 200ca3c:	dc800917 	ldw	r18,36(sp)
 200ca40:	dc400817 	ldw	r17,32(sp)
 200ca44:	dc000717 	ldw	r16,28(sp)
 200ca48:	dec01104 	addi	sp,sp,68
 200ca4c:	f800283a 	ret
 200ca50:	00bfffd4 	movui	r2,65535
 200ca54:	12807636 	bltu	r2,r10,200cc30 <__divdi3+0x3c8>
 200ca58:	00803fc4 	movi	r2,255
 200ca5c:	12811f36 	bltu	r2,r10,200cedc <__divdi3+0x674>
 200ca60:	000b883a 	mov	r5,zero
 200ca64:	0005883a 	mov	r2,zero
 200ca68:	9884d83a 	srl	r2,r19,r2
 200ca6c:	010080b4 	movhi	r4,514
 200ca70:	212f5304 	addi	r4,r4,-17076
 200ca74:	01800804 	movi	r6,32
 200ca78:	1105883a 	add	r2,r2,r4
 200ca7c:	10c00003 	ldbu	r3,0(r2)
 200ca80:	28c7883a 	add	r3,r5,r3
 200ca84:	30d1c83a 	sub	r8,r6,r3
 200ca88:	40000626 	beq	r8,zero,200caa4 <__divdi3+0x23c>
 200ca8c:	3205c83a 	sub	r2,r6,r8
 200ca90:	b084d83a 	srl	r2,r22,r2
 200ca94:	aa06983a 	sll	r3,r21,r8
 200ca98:	b22c983a 	sll	r22,r22,r8
 200ca9c:	9a26983a 	sll	r19,r19,r8
 200caa0:	18aab03a 	or	r21,r3,r2
 200caa4:	982ed43a 	srli	r23,r19,16
 200caa8:	a809883a 	mov	r4,r21
 200caac:	9cbfffcc 	andi	r18,r19,65535
 200cab0:	b80b883a 	mov	r5,r23
 200cab4:	200d0bc0 	call	200d0bc <__udivsi3>
 200cab8:	100b883a 	mov	r5,r2
 200cabc:	9009883a 	mov	r4,r18
 200cac0:	1021883a 	mov	r16,r2
 200cac4:	200d0cc0 	call	200d0cc <__mulsi3>
 200cac8:	a809883a 	mov	r4,r21
 200cacc:	b80b883a 	mov	r5,r23
 200cad0:	1023883a 	mov	r17,r2
 200cad4:	200d0c40 	call	200d0c4 <__umodsi3>
 200cad8:	1004943a 	slli	r2,r2,16
 200cadc:	b006d43a 	srli	r3,r22,16
 200cae0:	10c4b03a 	or	r2,r2,r3
 200cae4:	1440042e 	bgeu	r2,r17,200caf8 <__divdi3+0x290>
 200cae8:	14c5883a 	add	r2,r2,r19
 200caec:	843fffc4 	addi	r16,r16,-1
 200caf0:	14c00136 	bltu	r2,r19,200caf8 <__divdi3+0x290>
 200caf4:	14411c36 	bltu	r2,r17,200cf68 <__divdi3+0x700>
 200caf8:	1463c83a 	sub	r17,r2,r17
 200cafc:	8809883a 	mov	r4,r17
 200cb00:	b80b883a 	mov	r5,r23
 200cb04:	200d0bc0 	call	200d0bc <__udivsi3>
 200cb08:	100b883a 	mov	r5,r2
 200cb0c:	9009883a 	mov	r4,r18
 200cb10:	102b883a 	mov	r21,r2
 200cb14:	200d0cc0 	call	200d0cc <__mulsi3>
 200cb18:	8809883a 	mov	r4,r17
 200cb1c:	b80b883a 	mov	r5,r23
 200cb20:	1025883a 	mov	r18,r2
 200cb24:	200d0c40 	call	200d0c4 <__umodsi3>
 200cb28:	1004943a 	slli	r2,r2,16
 200cb2c:	b0ffffcc 	andi	r3,r22,65535
 200cb30:	10c4b03a 	or	r2,r2,r3
 200cb34:	1480042e 	bgeu	r2,r18,200cb48 <__divdi3+0x2e0>
 200cb38:	9885883a 	add	r2,r19,r2
 200cb3c:	ad7fffc4 	addi	r21,r21,-1
 200cb40:	14c00136 	bltu	r2,r19,200cb48 <__divdi3+0x2e0>
 200cb44:	14810636 	bltu	r2,r18,200cf60 <__divdi3+0x6f8>
 200cb48:	8004943a 	slli	r2,r16,16
 200cb4c:	000b883a 	mov	r5,zero
 200cb50:	a884b03a 	or	r2,r21,r2
 200cb54:	003fa306 	br	200c9e4 <__divdi3+0x17c>
 200cb58:	00bfffd4 	movui	r2,65535
 200cb5c:	12c02e36 	bltu	r2,r11,200cc18 <__divdi3+0x3b0>
 200cb60:	00803fc4 	movi	r2,255
 200cb64:	12c0e636 	bltu	r2,r11,200cf00 <__divdi3+0x698>
 200cb68:	000b883a 	mov	r5,zero
 200cb6c:	0005883a 	mov	r2,zero
 200cb70:	4084d83a 	srl	r2,r8,r2
 200cb74:	010080b4 	movhi	r4,514
 200cb78:	212f5304 	addi	r4,r4,-17076
 200cb7c:	01800804 	movi	r6,32
 200cb80:	1105883a 	add	r2,r2,r4
 200cb84:	10c00003 	ldbu	r3,0(r2)
 200cb88:	28c7883a 	add	r3,r5,r3
 200cb8c:	30c7c83a 	sub	r3,r6,r3
 200cb90:	d8c00215 	stw	r3,8(sp)
 200cb94:	1800331e 	bne	r3,zero,200cc64 <__divdi3+0x3fc>
 200cb98:	45400136 	bltu	r8,r21,200cba0 <__divdi3+0x338>
 200cb9c:	b4ff8f36 	bltu	r22,r19,200c9dc <__divdi3+0x174>
 200cba0:	00800044 	movi	r2,1
 200cba4:	000b883a 	mov	r5,zero
 200cba8:	003f8e06 	br	200c9e4 <__divdi3+0x17c>
 200cbac:	0009883a 	mov	r4,zero
 200cbb0:	2285c83a 	sub	r2,r4,r10
 200cbb4:	2089803a 	cmpltu	r4,r4,r2
 200cbb8:	1015883a 	mov	r10,r2
 200cbbc:	d8800417 	ldw	r2,16(sp)
 200cbc0:	02c7c83a 	sub	r3,zero,r11
 200cbc4:	1909c83a 	sub	r4,r3,r4
 200cbc8:	0084303a 	nor	r2,zero,r2
 200cbcc:	2017883a 	mov	r11,r4
 200cbd0:	d8800415 	stw	r2,16(sp)
 200cbd4:	003f3b06 	br	200c8c4 <__divdi3+0x5c>
 200cbd8:	0009883a 	mov	r4,zero
 200cbdc:	2305c83a 	sub	r2,r4,r12
 200cbe0:	00c7c83a 	sub	r3,zero,r3
 200cbe4:	2089803a 	cmpltu	r4,r4,r2
 200cbe8:	1909c83a 	sub	r4,r3,r4
 200cbec:	1019883a 	mov	r12,r2
 200cbf0:	00ffffc4 	movi	r3,-1
 200cbf4:	201b883a 	mov	r13,r4
 200cbf8:	d8c00415 	stw	r3,16(sp)
 200cbfc:	003f3006 	br	200c8c0 <__divdi3+0x58>
 200cc00:	00804034 	movhi	r2,256
 200cc04:	10bfffc4 	addi	r2,r2,-1
 200cc08:	14c0c036 	bltu	r2,r19,200cf0c <__divdi3+0x6a4>
 200cc0c:	01400404 	movi	r5,16
 200cc10:	2805883a 	mov	r2,r5
 200cc14:	003f3706 	br	200c8f4 <__divdi3+0x8c>
 200cc18:	00804034 	movhi	r2,256
 200cc1c:	10bfffc4 	addi	r2,r2,-1
 200cc20:	12c0b136 	bltu	r2,r11,200cee8 <__divdi3+0x680>
 200cc24:	01400404 	movi	r5,16
 200cc28:	2805883a 	mov	r2,r5
 200cc2c:	003fd006 	br	200cb70 <__divdi3+0x308>
 200cc30:	00804034 	movhi	r2,256
 200cc34:	10bfffc4 	addi	r2,r2,-1
 200cc38:	1280b736 	bltu	r2,r10,200cf18 <__divdi3+0x6b0>
 200cc3c:	01400404 	movi	r5,16
 200cc40:	2805883a 	mov	r2,r5
 200cc44:	003f8806 	br	200ca68 <__divdi3+0x200>
 200cc48:	01000044 	movi	r4,1
 200cc4c:	000b883a 	mov	r5,zero
 200cc50:	200d0bc0 	call	200d0bc <__udivsi3>
 200cc54:	1027883a 	mov	r19,r2
 200cc58:	00bfffd4 	movui	r2,65535
 200cc5c:	14ffe836 	bltu	r2,r19,200cc00 <__divdi3+0x398>
 200cc60:	003f2006 	br	200c8e4 <__divdi3+0x7c>
 200cc64:	d8c00217 	ldw	r3,8(sp)
 200cc68:	30c5c83a 	sub	r2,r6,r3
 200cc6c:	40c8983a 	sll	r4,r8,r3
 200cc70:	9886d83a 	srl	r3,r19,r2
 200cc74:	a8a2d83a 	srl	r17,r21,r2
 200cc78:	b084d83a 	srl	r2,r22,r2
 200cc7c:	20e4b03a 	or	r18,r4,r3
 200cc80:	d9000217 	ldw	r4,8(sp)
 200cc84:	902ed43a 	srli	r23,r18,16
 200cc88:	953fffcc 	andi	r20,r18,65535
 200cc8c:	a906983a 	sll	r3,r21,r4
 200cc90:	b80b883a 	mov	r5,r23
 200cc94:	8809883a 	mov	r4,r17
 200cc98:	1886b03a 	or	r3,r3,r2
 200cc9c:	d8c00115 	stw	r3,4(sp)
 200cca0:	200d0bc0 	call	200d0bc <__udivsi3>
 200cca4:	100b883a 	mov	r5,r2
 200cca8:	a009883a 	mov	r4,r20
 200ccac:	1039883a 	mov	fp,r2
 200ccb0:	200d0cc0 	call	200d0cc <__mulsi3>
 200ccb4:	8809883a 	mov	r4,r17
 200ccb8:	b80b883a 	mov	r5,r23
 200ccbc:	102b883a 	mov	r21,r2
 200ccc0:	200d0c40 	call	200d0c4 <__umodsi3>
 200ccc4:	d9000117 	ldw	r4,4(sp)
 200ccc8:	1004943a 	slli	r2,r2,16
 200cccc:	2006d43a 	srli	r3,r4,16
 200ccd0:	d9000217 	ldw	r4,8(sp)
 200ccd4:	10c4b03a 	or	r2,r2,r3
 200ccd8:	9926983a 	sll	r19,r19,r4
 200ccdc:	1540032e 	bgeu	r2,r21,200ccec <__divdi3+0x484>
 200cce0:	1485883a 	add	r2,r2,r18
 200cce4:	e73fffc4 	addi	fp,fp,-1
 200cce8:	1480972e 	bgeu	r2,r18,200cf48 <__divdi3+0x6e0>
 200ccec:	1563c83a 	sub	r17,r2,r21
 200ccf0:	8809883a 	mov	r4,r17
 200ccf4:	b80b883a 	mov	r5,r23
 200ccf8:	200d0bc0 	call	200d0bc <__udivsi3>
 200ccfc:	100b883a 	mov	r5,r2
 200cd00:	a009883a 	mov	r4,r20
 200cd04:	1021883a 	mov	r16,r2
 200cd08:	200d0cc0 	call	200d0cc <__mulsi3>
 200cd0c:	8809883a 	mov	r4,r17
 200cd10:	b80b883a 	mov	r5,r23
 200cd14:	1029883a 	mov	r20,r2
 200cd18:	200d0c40 	call	200d0c4 <__umodsi3>
 200cd1c:	d9000117 	ldw	r4,4(sp)
 200cd20:	1004943a 	slli	r2,r2,16
 200cd24:	20ffffcc 	andi	r3,r4,65535
 200cd28:	10c6b03a 	or	r3,r2,r3
 200cd2c:	1d00032e 	bgeu	r3,r20,200cd3c <__divdi3+0x4d4>
 200cd30:	1c87883a 	add	r3,r3,r18
 200cd34:	843fffc4 	addi	r16,r16,-1
 200cd38:	1c807f2e 	bgeu	r3,r18,200cf38 <__divdi3+0x6d0>
 200cd3c:	e004943a 	slli	r2,fp,16
 200cd40:	982ed43a 	srli	r23,r19,16
 200cd44:	9cffffcc 	andi	r19,r19,65535
 200cd48:	80a0b03a 	or	r16,r16,r2
 200cd4c:	847fffcc 	andi	r17,r16,65535
 200cd50:	802ad43a 	srli	r21,r16,16
 200cd54:	8809883a 	mov	r4,r17
 200cd58:	980b883a 	mov	r5,r19
 200cd5c:	1d25c83a 	sub	r18,r3,r20
 200cd60:	200d0cc0 	call	200d0cc <__mulsi3>
 200cd64:	8809883a 	mov	r4,r17
 200cd68:	b80b883a 	mov	r5,r23
 200cd6c:	1029883a 	mov	r20,r2
 200cd70:	200d0cc0 	call	200d0cc <__mulsi3>
 200cd74:	980b883a 	mov	r5,r19
 200cd78:	a809883a 	mov	r4,r21
 200cd7c:	1023883a 	mov	r17,r2
 200cd80:	200d0cc0 	call	200d0cc <__mulsi3>
 200cd84:	a809883a 	mov	r4,r21
 200cd88:	b80b883a 	mov	r5,r23
 200cd8c:	1027883a 	mov	r19,r2
 200cd90:	200d0cc0 	call	200d0cc <__mulsi3>
 200cd94:	1009883a 	mov	r4,r2
 200cd98:	a004d43a 	srli	r2,r20,16
 200cd9c:	8ce3883a 	add	r17,r17,r19
 200cda0:	1447883a 	add	r3,r2,r17
 200cda4:	1cc0022e 	bgeu	r3,r19,200cdb0 <__divdi3+0x548>
 200cda8:	00800074 	movhi	r2,1
 200cdac:	2089883a 	add	r4,r4,r2
 200cdb0:	1804d43a 	srli	r2,r3,16
 200cdb4:	2085883a 	add	r2,r4,r2
 200cdb8:	90804536 	bltu	r18,r2,200ced0 <__divdi3+0x668>
 200cdbc:	90803e26 	beq	r18,r2,200ceb8 <__divdi3+0x650>
 200cdc0:	8005883a 	mov	r2,r16
 200cdc4:	000b883a 	mov	r5,zero
 200cdc8:	003f0606 	br	200c9e4 <__divdi3+0x17c>
 200cdcc:	9d26983a 	sll	r19,r19,r20
 200cdd0:	3505c83a 	sub	r2,r6,r20
 200cdd4:	a8a2d83a 	srl	r17,r21,r2
 200cdd8:	982ed43a 	srli	r23,r19,16
 200cddc:	b084d83a 	srl	r2,r22,r2
 200cde0:	ad06983a 	sll	r3,r21,r20
 200cde4:	8809883a 	mov	r4,r17
 200cde8:	b80b883a 	mov	r5,r23
 200cdec:	1886b03a 	or	r3,r3,r2
 200cdf0:	d8c00015 	stw	r3,0(sp)
 200cdf4:	9f3fffcc 	andi	fp,r19,65535
 200cdf8:	200d0bc0 	call	200d0bc <__udivsi3>
 200cdfc:	100b883a 	mov	r5,r2
 200ce00:	e009883a 	mov	r4,fp
 200ce04:	d8800315 	stw	r2,12(sp)
 200ce08:	200d0cc0 	call	200d0cc <__mulsi3>
 200ce0c:	8809883a 	mov	r4,r17
 200ce10:	b80b883a 	mov	r5,r23
 200ce14:	102b883a 	mov	r21,r2
 200ce18:	200d0c40 	call	200d0c4 <__umodsi3>
 200ce1c:	d9000017 	ldw	r4,0(sp)
 200ce20:	1004943a 	slli	r2,r2,16
 200ce24:	2006d43a 	srli	r3,r4,16
 200ce28:	10c4b03a 	or	r2,r2,r3
 200ce2c:	1540052e 	bgeu	r2,r21,200ce44 <__divdi3+0x5dc>
 200ce30:	d8c00317 	ldw	r3,12(sp)
 200ce34:	14c5883a 	add	r2,r2,r19
 200ce38:	18ffffc4 	addi	r3,r3,-1
 200ce3c:	d8c00315 	stw	r3,12(sp)
 200ce40:	14c0382e 	bgeu	r2,r19,200cf24 <__divdi3+0x6bc>
 200ce44:	1563c83a 	sub	r17,r2,r21
 200ce48:	8809883a 	mov	r4,r17
 200ce4c:	b80b883a 	mov	r5,r23
 200ce50:	200d0bc0 	call	200d0bc <__udivsi3>
 200ce54:	100b883a 	mov	r5,r2
 200ce58:	e009883a 	mov	r4,fp
 200ce5c:	1025883a 	mov	r18,r2
 200ce60:	200d0cc0 	call	200d0cc <__mulsi3>
 200ce64:	8809883a 	mov	r4,r17
 200ce68:	b80b883a 	mov	r5,r23
 200ce6c:	1021883a 	mov	r16,r2
 200ce70:	200d0c40 	call	200d0c4 <__umodsi3>
 200ce74:	d9000017 	ldw	r4,0(sp)
 200ce78:	1004943a 	slli	r2,r2,16
 200ce7c:	20ffffcc 	andi	r3,r4,65535
 200ce80:	10c6b03a 	or	r3,r2,r3
 200ce84:	1c00062e 	bgeu	r3,r16,200cea0 <__divdi3+0x638>
 200ce88:	1cc7883a 	add	r3,r3,r19
 200ce8c:	94bfffc4 	addi	r18,r18,-1
 200ce90:	1cc00336 	bltu	r3,r19,200cea0 <__divdi3+0x638>
 200ce94:	1c00022e 	bgeu	r3,r16,200cea0 <__divdi3+0x638>
 200ce98:	94bfffc4 	addi	r18,r18,-1
 200ce9c:	1cc7883a 	add	r3,r3,r19
 200cea0:	d9000317 	ldw	r4,12(sp)
 200cea4:	b52c983a 	sll	r22,r22,r20
 200cea8:	1c2bc83a 	sub	r21,r3,r16
 200ceac:	2004943a 	slli	r2,r4,16
 200ceb0:	90a8b03a 	or	r20,r18,r2
 200ceb4:	003e9c06 	br	200c928 <__divdi3+0xc0>
 200ceb8:	1804943a 	slli	r2,r3,16
 200cebc:	d8c00217 	ldw	r3,8(sp)
 200cec0:	b0c8983a 	sll	r4,r22,r3
 200cec4:	a0ffffcc 	andi	r3,r20,65535
 200cec8:	10c5883a 	add	r2,r2,r3
 200cecc:	20bfbc2e 	bgeu	r4,r2,200cdc0 <__divdi3+0x558>
 200ced0:	80bfffc4 	addi	r2,r16,-1
 200ced4:	000b883a 	mov	r5,zero
 200ced8:	003ec206 	br	200c9e4 <__divdi3+0x17c>
 200cedc:	01400204 	movi	r5,8
 200cee0:	2805883a 	mov	r2,r5
 200cee4:	003ee006 	br	200ca68 <__divdi3+0x200>
 200cee8:	01400604 	movi	r5,24
 200ceec:	2805883a 	mov	r2,r5
 200cef0:	003f1f06 	br	200cb70 <__divdi3+0x308>
 200cef4:	01400204 	movi	r5,8
 200cef8:	2805883a 	mov	r2,r5
 200cefc:	003e7d06 	br	200c8f4 <__divdi3+0x8c>
 200cf00:	01400204 	movi	r5,8
 200cf04:	2805883a 	mov	r2,r5
 200cf08:	003f1906 	br	200cb70 <__divdi3+0x308>
 200cf0c:	01400604 	movi	r5,24
 200cf10:	2805883a 	mov	r2,r5
 200cf14:	003e7706 	br	200c8f4 <__divdi3+0x8c>
 200cf18:	01400604 	movi	r5,24
 200cf1c:	2805883a 	mov	r2,r5
 200cf20:	003ed106 	br	200ca68 <__divdi3+0x200>
 200cf24:	157fc72e 	bgeu	r2,r21,200ce44 <__divdi3+0x5dc>
 200cf28:	18ffffc4 	addi	r3,r3,-1
 200cf2c:	14c5883a 	add	r2,r2,r19
 200cf30:	d8c00315 	stw	r3,12(sp)
 200cf34:	003fc306 	br	200ce44 <__divdi3+0x5dc>
 200cf38:	1d3f802e 	bgeu	r3,r20,200cd3c <__divdi3+0x4d4>
 200cf3c:	1c87883a 	add	r3,r3,r18
 200cf40:	843fffc4 	addi	r16,r16,-1
 200cf44:	003f7d06 	br	200cd3c <__divdi3+0x4d4>
 200cf48:	157f682e 	bgeu	r2,r21,200ccec <__divdi3+0x484>
 200cf4c:	e73fffc4 	addi	fp,fp,-1
 200cf50:	1485883a 	add	r2,r2,r18
 200cf54:	003f6506 	br	200ccec <__divdi3+0x484>
 200cf58:	ad7fffc4 	addi	r21,r21,-1
 200cf5c:	003e9906 	br	200c9c4 <__divdi3+0x15c>
 200cf60:	ad7fffc4 	addi	r21,r21,-1
 200cf64:	003ef806 	br	200cb48 <__divdi3+0x2e0>
 200cf68:	843fffc4 	addi	r16,r16,-1
 200cf6c:	14c5883a 	add	r2,r2,r19
 200cf70:	003ee106 	br	200caf8 <__divdi3+0x290>
 200cf74:	843fffc4 	addi	r16,r16,-1
 200cf78:	14c5883a 	add	r2,r2,r19
 200cf7c:	003e7d06 	br	200c974 <__divdi3+0x10c>

0200cf80 <udivmodsi4>:
 200cf80:	29001b2e 	bgeu	r5,r4,200cff0 <udivmodsi4+0x70>
 200cf84:	28001a16 	blt	r5,zero,200cff0 <udivmodsi4+0x70>
 200cf88:	00800044 	movi	r2,1
 200cf8c:	0007883a 	mov	r3,zero
 200cf90:	01c007c4 	movi	r7,31
 200cf94:	00000306 	br	200cfa4 <udivmodsi4+0x24>
 200cf98:	19c01326 	beq	r3,r7,200cfe8 <udivmodsi4+0x68>
 200cf9c:	18c00044 	addi	r3,r3,1
 200cfa0:	28000416 	blt	r5,zero,200cfb4 <udivmodsi4+0x34>
 200cfa4:	294b883a 	add	r5,r5,r5
 200cfa8:	1085883a 	add	r2,r2,r2
 200cfac:	293ffa36 	bltu	r5,r4,200cf98 <udivmodsi4+0x18>
 200cfb0:	10000d26 	beq	r2,zero,200cfe8 <udivmodsi4+0x68>
 200cfb4:	0007883a 	mov	r3,zero
 200cfb8:	21400236 	bltu	r4,r5,200cfc4 <udivmodsi4+0x44>
 200cfbc:	2149c83a 	sub	r4,r4,r5
 200cfc0:	1886b03a 	or	r3,r3,r2
 200cfc4:	1004d07a 	srli	r2,r2,1
 200cfc8:	280ad07a 	srli	r5,r5,1
 200cfcc:	103ffa1e 	bne	r2,zero,200cfb8 <udivmodsi4+0x38>
 200cfd0:	30000226 	beq	r6,zero,200cfdc <udivmodsi4+0x5c>
 200cfd4:	2005883a 	mov	r2,r4
 200cfd8:	f800283a 	ret
 200cfdc:	1809883a 	mov	r4,r3
 200cfe0:	2005883a 	mov	r2,r4
 200cfe4:	f800283a 	ret
 200cfe8:	0007883a 	mov	r3,zero
 200cfec:	003ff806 	br	200cfd0 <udivmodsi4+0x50>
 200cff0:	00800044 	movi	r2,1
 200cff4:	0007883a 	mov	r3,zero
 200cff8:	003fef06 	br	200cfb8 <udivmodsi4+0x38>

0200cffc <__divsi3>:
 200cffc:	defffe04 	addi	sp,sp,-8
 200d000:	dc000015 	stw	r16,0(sp)
 200d004:	dfc00115 	stw	ra,4(sp)
 200d008:	0021883a 	mov	r16,zero
 200d00c:	20000c16 	blt	r4,zero,200d040 <__divsi3+0x44>
 200d010:	000d883a 	mov	r6,zero
 200d014:	28000e16 	blt	r5,zero,200d050 <__divsi3+0x54>
 200d018:	200cf800 	call	200cf80 <udivmodsi4>
 200d01c:	1007883a 	mov	r3,r2
 200d020:	8005003a 	cmpeq	r2,r16,zero
 200d024:	1000011e 	bne	r2,zero,200d02c <__divsi3+0x30>
 200d028:	00c7c83a 	sub	r3,zero,r3
 200d02c:	1805883a 	mov	r2,r3
 200d030:	dfc00117 	ldw	ra,4(sp)
 200d034:	dc000017 	ldw	r16,0(sp)
 200d038:	dec00204 	addi	sp,sp,8
 200d03c:	f800283a 	ret
 200d040:	0109c83a 	sub	r4,zero,r4
 200d044:	04000044 	movi	r16,1
 200d048:	000d883a 	mov	r6,zero
 200d04c:	283ff20e 	bge	r5,zero,200d018 <__divsi3+0x1c>
 200d050:	014bc83a 	sub	r5,zero,r5
 200d054:	8021003a 	cmpeq	r16,r16,zero
 200d058:	003fef06 	br	200d018 <__divsi3+0x1c>

0200d05c <__modsi3>:
 200d05c:	deffff04 	addi	sp,sp,-4
 200d060:	dfc00015 	stw	ra,0(sp)
 200d064:	01800044 	movi	r6,1
 200d068:	2807883a 	mov	r3,r5
 200d06c:	20000416 	blt	r4,zero,200d080 <__modsi3+0x24>
 200d070:	28000c16 	blt	r5,zero,200d0a4 <__modsi3+0x48>
 200d074:	dfc00017 	ldw	ra,0(sp)
 200d078:	dec00104 	addi	sp,sp,4
 200d07c:	200cf801 	jmpi	200cf80 <udivmodsi4>
 200d080:	0109c83a 	sub	r4,zero,r4
 200d084:	28000b16 	blt	r5,zero,200d0b4 <__modsi3+0x58>
 200d088:	180b883a 	mov	r5,r3
 200d08c:	01800044 	movi	r6,1
 200d090:	200cf800 	call	200cf80 <udivmodsi4>
 200d094:	0085c83a 	sub	r2,zero,r2
 200d098:	dfc00017 	ldw	ra,0(sp)
 200d09c:	dec00104 	addi	sp,sp,4
 200d0a0:	f800283a 	ret
 200d0a4:	014bc83a 	sub	r5,zero,r5
 200d0a8:	dfc00017 	ldw	ra,0(sp)
 200d0ac:	dec00104 	addi	sp,sp,4
 200d0b0:	200cf801 	jmpi	200cf80 <udivmodsi4>
 200d0b4:	0147c83a 	sub	r3,zero,r5
 200d0b8:	003ff306 	br	200d088 <__modsi3+0x2c>

0200d0bc <__udivsi3>:
 200d0bc:	000d883a 	mov	r6,zero
 200d0c0:	200cf801 	jmpi	200cf80 <udivmodsi4>

0200d0c4 <__umodsi3>:
 200d0c4:	01800044 	movi	r6,1
 200d0c8:	200cf801 	jmpi	200cf80 <udivmodsi4>

0200d0cc <__mulsi3>:
 200d0cc:	20000a26 	beq	r4,zero,200d0f8 <__mulsi3+0x2c>
 200d0d0:	0007883a 	mov	r3,zero
 200d0d4:	2080004c 	andi	r2,r4,1
 200d0d8:	1005003a 	cmpeq	r2,r2,zero
 200d0dc:	2008d07a 	srli	r4,r4,1
 200d0e0:	1000011e 	bne	r2,zero,200d0e8 <__mulsi3+0x1c>
 200d0e4:	1947883a 	add	r3,r3,r5
 200d0e8:	294b883a 	add	r5,r5,r5
 200d0ec:	203ff91e 	bne	r4,zero,200d0d4 <__mulsi3+0x8>
 200d0f0:	1805883a 	mov	r2,r3
 200d0f4:	f800283a 	ret
 200d0f8:	0007883a 	mov	r3,zero
 200d0fc:	1805883a 	mov	r2,r3
 200d100:	f800283a 	ret

0200d104 <_Unwind_SjLj_Register>:
 200d104:	d0a70d17 	ldw	r2,-25548(gp)
 200d108:	20800015 	stw	r2,0(r4)
 200d10c:	d1270d15 	stw	r4,-25548(gp)
 200d110:	f800283a 	ret

0200d114 <_Unwind_SjLj_Unregister>:
 200d114:	20800017 	ldw	r2,0(r4)
 200d118:	d0a70d15 	stw	r2,-25548(gp)
 200d11c:	f800283a 	ret

0200d120 <_Unwind_GetGR>:
 200d120:	20800017 	ldw	r2,0(r4)
 200d124:	294b883a 	add	r5,r5,r5
 200d128:	294b883a 	add	r5,r5,r5
 200d12c:	288b883a 	add	r5,r5,r2
 200d130:	28800217 	ldw	r2,8(r5)
 200d134:	f800283a 	ret

0200d138 <_Unwind_GetCFA>:
 200d138:	21000017 	ldw	r4,0(r4)
 200d13c:	0005883a 	mov	r2,zero
 200d140:	20000126 	beq	r4,zero,200d148 <_Unwind_GetCFA+0x10>
 200d144:	20800a17 	ldw	r2,40(r4)
 200d148:	f800283a 	ret

0200d14c <_Unwind_SetGR>:
 200d14c:	20800017 	ldw	r2,0(r4)
 200d150:	294b883a 	add	r5,r5,r5
 200d154:	294b883a 	add	r5,r5,r5
 200d158:	288b883a 	add	r5,r5,r2
 200d15c:	29800215 	stw	r6,8(r5)
 200d160:	f800283a 	ret

0200d164 <_Unwind_GetIP>:
 200d164:	20c00017 	ldw	r3,0(r4)
 200d168:	18800117 	ldw	r2,4(r3)
 200d16c:	10800044 	addi	r2,r2,1
 200d170:	f800283a 	ret

0200d174 <_Unwind_GetIPInfo>:
 200d174:	20c00017 	ldw	r3,0(r4)
 200d178:	28000015 	stw	zero,0(r5)
 200d17c:	18800117 	ldw	r2,4(r3)
 200d180:	10800044 	addi	r2,r2,1
 200d184:	f800283a 	ret

0200d188 <_Unwind_SetIP>:
 200d188:	20800017 	ldw	r2,0(r4)
 200d18c:	297fffc4 	addi	r5,r5,-1
 200d190:	11400115 	stw	r5,4(r2)
 200d194:	f800283a 	ret

0200d198 <_Unwind_GetLanguageSpecificData>:
 200d198:	20c00017 	ldw	r3,0(r4)
 200d19c:	18800717 	ldw	r2,28(r3)
 200d1a0:	f800283a 	ret

0200d1a4 <_Unwind_GetRegionStart>:
 200d1a4:	0005883a 	mov	r2,zero
 200d1a8:	f800283a 	ret

0200d1ac <_Unwind_FindEnclosingFunction>:
 200d1ac:	0005883a 	mov	r2,zero
 200d1b0:	f800283a 	ret

0200d1b4 <_Unwind_GetDataRelBase>:
 200d1b4:	0005883a 	mov	r2,zero
 200d1b8:	f800283a 	ret

0200d1bc <_Unwind_GetTextRelBase>:
 200d1bc:	0005883a 	mov	r2,zero
 200d1c0:	f800283a 	ret

0200d1c4 <_Unwind_ForcedUnwind_Phase2>:
 200d1c4:	defff604 	addi	sp,sp,-40
 200d1c8:	dd400815 	stw	r21,32(sp)
 200d1cc:	dd000715 	stw	r20,28(sp)
 200d1d0:	25400317 	ldw	r21,12(r4)
 200d1d4:	25000417 	ldw	r20,16(r4)
 200d1d8:	28800017 	ldw	r2,0(r5)
 200d1dc:	dc800515 	stw	r18,20(sp)
 200d1e0:	dc000315 	stw	r16,12(sp)
 200d1e4:	2825883a 	mov	r18,r5
 200d1e8:	2021883a 	mov	r16,r4
 200d1ec:	dfc00915 	stw	ra,36(sp)
 200d1f0:	dcc00615 	stw	r19,24(sp)
 200d1f4:	dc400415 	stw	r17,16(sp)
 200d1f8:	00001406 	br	200d24c <_Unwind_ForcedUnwind_Phase2+0x88>
 200d1fc:	00800144 	movi	r2,5
 200d200:	88802626 	beq	r17,r2,200d29c <_Unwind_ForcedUnwind_Phase2+0xd8>
 200d204:	98000c26 	beq	r19,zero,200d238 <_Unwind_ForcedUnwind_Phase2+0x74>
 200d208:	82000017 	ldw	r8,0(r16)
 200d20c:	dc000015 	stw	r16,0(sp)
 200d210:	dc800115 	stw	r18,4(sp)
 200d214:	82400117 	ldw	r9,4(r16)
 200d218:	400d883a 	mov	r6,r8
 200d21c:	480f883a 	mov	r7,r9
 200d220:	983ee83a 	callr	r19
 200d224:	1023883a 	mov	r17,r2
 200d228:	008001c4 	movi	r2,7
 200d22c:	88801b26 	beq	r17,r2,200d29c <_Unwind_ForcedUnwind_Phase2+0xd8>
 200d230:	00800204 	movi	r2,8
 200d234:	8880181e 	bne	r17,r2,200d298 <_Unwind_ForcedUnwind_Phase2+0xd4>
 200d238:	91000017 	ldw	r4,0(r18)
 200d23c:	200d1140 	call	200d114 <_Unwind_SjLj_Unregister>
 200d240:	90800017 	ldw	r2,0(r18)
 200d244:	10800017 	ldw	r2,0(r2)
 200d248:	90800015 	stw	r2,0(r18)
 200d24c:	01400684 	movi	r5,26
 200d250:	04400144 	movi	r17,5
 200d254:	0027883a 	mov	r19,zero
 200d258:	10000326 	beq	r2,zero,200d268 <_Unwind_ForcedUnwind_Phase2+0xa4>
 200d25c:	14c00617 	ldw	r19,24(r2)
 200d260:	0023883a 	mov	r17,zero
 200d264:	01400284 	movi	r5,10
 200d268:	dc000015 	stw	r16,0(sp)
 200d26c:	dc800115 	stw	r18,4(sp)
 200d270:	80800017 	ldw	r2,0(r16)
 200d274:	dd000215 	stw	r20,8(sp)
 200d278:	80c00117 	ldw	r3,4(r16)
 200d27c:	01000044 	movi	r4,1
 200d280:	100d883a 	mov	r6,r2
 200d284:	180f883a 	mov	r7,r3
 200d288:	a83ee83a 	callr	r21
 200d28c:	01400284 	movi	r5,10
 200d290:	01000044 	movi	r4,1
 200d294:	103fd926 	beq	r2,zero,200d1fc <_Unwind_ForcedUnwind_Phase2+0x38>
 200d298:	04400084 	movi	r17,2
 200d29c:	8805883a 	mov	r2,r17
 200d2a0:	dfc00917 	ldw	ra,36(sp)
 200d2a4:	dd400817 	ldw	r21,32(sp)
 200d2a8:	dd000717 	ldw	r20,28(sp)
 200d2ac:	dcc00617 	ldw	r19,24(sp)
 200d2b0:	dc800517 	ldw	r18,20(sp)
 200d2b4:	dc400417 	ldw	r17,16(sp)
 200d2b8:	dc000317 	ldw	r16,12(sp)
 200d2bc:	dec00a04 	addi	sp,sp,40
 200d2c0:	f800283a 	ret

0200d2c4 <_Unwind_DeleteException>:
 200d2c4:	20800217 	ldw	r2,8(r4)
 200d2c8:	200b883a 	mov	r5,r4
 200d2cc:	01000044 	movi	r4,1
 200d2d0:	10000126 	beq	r2,zero,200d2d8 <_Unwind_DeleteException+0x14>
 200d2d4:	1000683a 	jmp	r2
 200d2d8:	f800283a 	ret

0200d2dc <_Unwind_RaiseException_Phase2>:
 200d2dc:	defffa04 	addi	sp,sp,-24
 200d2e0:	dc800415 	stw	r18,16(sp)
 200d2e4:	2825883a 	mov	r18,r5
 200d2e8:	29400017 	ldw	r5,0(r5)
 200d2ec:	dc400315 	stw	r17,12(sp)
 200d2f0:	dfc00515 	stw	ra,20(sp)
 200d2f4:	dc000215 	stw	r16,8(sp)
 200d2f8:	2023883a 	mov	r17,r4
 200d2fc:	28001b26 	beq	r5,zero,200d36c <_Unwind_RaiseException_Phase2+0x90>
 200d300:	88800417 	ldw	r2,16(r17)
 200d304:	0007883a 	mov	r3,zero
 200d308:	2a000617 	ldw	r8,24(r5)
 200d30c:	28a1003a 	cmpeq	r16,r5,r2
 200d310:	802090ba 	slli	r16,r16,2
 200d314:	18001b1e 	bne	r3,zero,200d384 <_Unwind_RaiseException_Phase2+0xa8>
 200d318:	40000e26 	beq	r8,zero,200d354 <_Unwind_RaiseException_Phase2+0x78>
 200d31c:	88800017 	ldw	r2,0(r17)
 200d320:	dc400015 	stw	r17,0(sp)
 200d324:	dc800115 	stw	r18,4(sp)
 200d328:	88c00117 	ldw	r3,4(r17)
 200d32c:	01000044 	movi	r4,1
 200d330:	81400094 	ori	r5,r16,2
 200d334:	180f883a 	mov	r7,r3
 200d338:	100d883a 	mov	r6,r2
 200d33c:	403ee83a 	callr	r8
 200d340:	1007883a 	mov	r3,r2
 200d344:	008001c4 	movi	r2,7
 200d348:	18800f26 	beq	r3,r2,200d388 <_Unwind_RaiseException_Phase2+0xac>
 200d34c:	00800204 	movi	r2,8
 200d350:	18800c1e 	bne	r3,r2,200d384 <_Unwind_RaiseException_Phase2+0xa8>
 200d354:	8000131e 	bne	r16,zero,200d3a4 <_Unwind_RaiseException_Phase2+0xc8>
 200d358:	91400017 	ldw	r5,0(r18)
 200d35c:	28800017 	ldw	r2,0(r5)
 200d360:	100b883a 	mov	r5,r2
 200d364:	90800015 	stw	r2,0(r18)
 200d368:	283fe51e 	bne	r5,zero,200d300 <_Unwind_RaiseException_Phase2+0x24>
 200d36c:	88800417 	ldw	r2,16(r17)
 200d370:	00c00144 	movi	r3,5
 200d374:	0011883a 	mov	r8,zero
 200d378:	28a1003a 	cmpeq	r16,r5,r2
 200d37c:	802090ba 	slli	r16,r16,2
 200d380:	183fe526 	beq	r3,zero,200d318 <_Unwind_RaiseException_Phase2+0x3c>
 200d384:	00c00084 	movi	r3,2
 200d388:	1805883a 	mov	r2,r3
 200d38c:	dfc00517 	ldw	ra,20(sp)
 200d390:	dc800417 	ldw	r18,16(sp)
 200d394:	dc400317 	ldw	r17,12(sp)
 200d398:	dc000217 	ldw	r16,8(sp)
 200d39c:	dec00604 	addi	sp,sp,24
 200d3a0:	f800283a 	ret
 200d3a4:	200d64c0 	call	200d64c <abort>

0200d3a8 <uw_install_context>:
 200d3a8:	28800017 	ldw	r2,0(r5)
 200d3ac:	deffff04 	addi	sp,sp,-4
 200d3b0:	df000015 	stw	fp,0(sp)
 200d3b4:	10c00804 	addi	r3,r2,32
 200d3b8:	d839883a 	mov	fp,sp
 200d3bc:	d0a70d15 	stw	r2,-25548(gp)
 200d3c0:	19000117 	ldw	r4,4(r3)
 200d3c4:	1f000017 	ldw	fp,0(r3)
 200d3c8:	1ec00217 	ldw	sp,8(r3)
 200d3cc:	2000683a 	jmp	r4

0200d3d0 <_Unwind_SjLj_Resume>:
 200d3d0:	d0e70d17 	ldw	r3,-25548(gp)
 200d3d4:	20800317 	ldw	r2,12(r4)
 200d3d8:	defffc04 	addi	sp,sp,-16
 200d3dc:	dfc00315 	stw	ra,12(sp)
 200d3e0:	dc000215 	stw	r16,8(sp)
 200d3e4:	d8c00015 	stw	r3,0(sp)
 200d3e8:	d8c00115 	stw	r3,4(sp)
 200d3ec:	1000071e 	bne	r2,zero,200d40c <_Unwind_SjLj_Resume+0x3c>
 200d3f0:	dc000104 	addi	r16,sp,4
 200d3f4:	800b883a 	mov	r5,r16
 200d3f8:	200d2dc0 	call	200d2dc <_Unwind_RaiseException_Phase2>
 200d3fc:	1007883a 	mov	r3,r2
 200d400:	008001c4 	movi	r2,7
 200d404:	18800626 	beq	r3,r2,200d420 <_Unwind_SjLj_Resume+0x50>
 200d408:	200d64c0 	call	200d64c <abort>
 200d40c:	dc000104 	addi	r16,sp,4
 200d410:	800b883a 	mov	r5,r16
 200d414:	200d1c40 	call	200d1c4 <_Unwind_ForcedUnwind_Phase2>
 200d418:	1007883a 	mov	r3,r2
 200d41c:	003ff806 	br	200d400 <_Unwind_SjLj_Resume+0x30>
 200d420:	800b883a 	mov	r5,r16
 200d424:	d809883a 	mov	r4,sp
 200d428:	200d3a80 	call	200d3a8 <uw_install_context>

0200d42c <_Unwind_SjLj_RaiseException>:
 200d42c:	d0a70d17 	ldw	r2,-25548(gp)
 200d430:	defff804 	addi	sp,sp,-32
 200d434:	dc000415 	stw	r16,16(sp)
 200d438:	dfc00715 	stw	ra,28(sp)
 200d43c:	dc800615 	stw	r18,24(sp)
 200d440:	dc400515 	stw	r17,20(sp)
 200d444:	2021883a 	mov	r16,r4
 200d448:	d8800215 	stw	r2,8(sp)
 200d44c:	d8800315 	stw	r2,12(sp)
 200d450:	10001626 	beq	r2,zero,200d4ac <_Unwind_SjLj_RaiseException+0x80>
 200d454:	dc400304 	addi	r17,sp,12
 200d458:	04800184 	movi	r18,6
 200d45c:	00000106 	br	200d464 <_Unwind_SjLj_RaiseException+0x38>
 200d460:	d8800315 	stw	r2,12(sp)
 200d464:	12000617 	ldw	r8,24(r2)
 200d468:	40000d26 	beq	r8,zero,200d4a0 <_Unwind_SjLj_RaiseException+0x74>
 200d46c:	80800017 	ldw	r2,0(r16)
 200d470:	dc000015 	stw	r16,0(sp)
 200d474:	80c00117 	ldw	r3,4(r16)
 200d478:	01000044 	movi	r4,1
 200d47c:	dc400115 	stw	r17,4(sp)
 200d480:	180f883a 	mov	r7,r3
 200d484:	200b883a 	mov	r5,r4
 200d488:	100d883a 	mov	r6,r2
 200d48c:	403ee83a 	callr	r8
 200d490:	1007883a 	mov	r3,r2
 200d494:	14800d26 	beq	r2,r18,200d4cc <_Unwind_SjLj_RaiseException+0xa0>
 200d498:	00800204 	movi	r2,8
 200d49c:	1880191e 	bne	r3,r2,200d504 <_Unwind_SjLj_RaiseException+0xd8>
 200d4a0:	d8800317 	ldw	r2,12(sp)
 200d4a4:	10800017 	ldw	r2,0(r2)
 200d4a8:	103fed1e 	bne	r2,zero,200d460 <_Unwind_SjLj_RaiseException+0x34>
 200d4ac:	00c00144 	movi	r3,5
 200d4b0:	1805883a 	mov	r2,r3
 200d4b4:	dfc00717 	ldw	ra,28(sp)
 200d4b8:	dc800617 	ldw	r18,24(sp)
 200d4bc:	dc400517 	ldw	r17,20(sp)
 200d4c0:	dc000417 	ldw	r16,16(sp)
 200d4c4:	dec00804 	addi	sp,sp,32
 200d4c8:	f800283a 	ret
 200d4cc:	d8800317 	ldw	r2,12(sp)
 200d4d0:	80000315 	stw	zero,12(r16)
 200d4d4:	8009883a 	mov	r4,r16
 200d4d8:	80800415 	stw	r2,16(r16)
 200d4dc:	d8800217 	ldw	r2,8(sp)
 200d4e0:	880b883a 	mov	r5,r17
 200d4e4:	d8800315 	stw	r2,12(sp)
 200d4e8:	200d2dc0 	call	200d2dc <_Unwind_RaiseException_Phase2>
 200d4ec:	1007883a 	mov	r3,r2
 200d4f0:	008001c4 	movi	r2,7
 200d4f4:	18bfee1e 	bne	r3,r2,200d4b0 <_Unwind_SjLj_RaiseException+0x84>
 200d4f8:	880b883a 	mov	r5,r17
 200d4fc:	d9000204 	addi	r4,sp,8
 200d500:	200d3a80 	call	200d3a8 <uw_install_context>
 200d504:	00c000c4 	movi	r3,3
 200d508:	1805883a 	mov	r2,r3
 200d50c:	dfc00717 	ldw	ra,28(sp)
 200d510:	dc800617 	ldw	r18,24(sp)
 200d514:	dc400517 	ldw	r17,20(sp)
 200d518:	dc000417 	ldw	r16,16(sp)
 200d51c:	dec00804 	addi	sp,sp,32
 200d520:	f800283a 	ret

0200d524 <_Unwind_SjLj_ForcedUnwind>:
 200d524:	defffc04 	addi	sp,sp,-16
 200d528:	d0a70d17 	ldw	r2,-25548(gp)
 200d52c:	dc000215 	stw	r16,8(sp)
 200d530:	dc000104 	addi	r16,sp,4
 200d534:	21400315 	stw	r5,12(r4)
 200d538:	21800415 	stw	r6,16(r4)
 200d53c:	800b883a 	mov	r5,r16
 200d540:	dfc00315 	stw	ra,12(sp)
 200d544:	d8800015 	stw	r2,0(sp)
 200d548:	d8800115 	stw	r2,4(sp)
 200d54c:	200d1c40 	call	200d1c4 <_Unwind_ForcedUnwind_Phase2>
 200d550:	00c001c4 	movi	r3,7
 200d554:	10c00426 	beq	r2,r3,200d568 <_Unwind_SjLj_ForcedUnwind+0x44>
 200d558:	dfc00317 	ldw	ra,12(sp)
 200d55c:	dc000217 	ldw	r16,8(sp)
 200d560:	dec00404 	addi	sp,sp,16
 200d564:	f800283a 	ret
 200d568:	800b883a 	mov	r5,r16
 200d56c:	d809883a 	mov	r4,sp
 200d570:	200d3a80 	call	200d3a8 <uw_install_context>

0200d574 <_Unwind_Backtrace>:
 200d574:	d0a70d17 	ldw	r2,-25548(gp)
 200d578:	defffa04 	addi	sp,sp,-24
 200d57c:	dcc00415 	stw	r19,16(sp)
 200d580:	dc800315 	stw	r18,12(sp)
 200d584:	dc400215 	stw	r17,8(sp)
 200d588:	2025883a 	mov	r18,r4
 200d58c:	2823883a 	mov	r17,r5
 200d590:	04c00144 	movi	r19,5
 200d594:	dfc00515 	stw	ra,20(sp)
 200d598:	dc000115 	stw	r16,4(sp)
 200d59c:	d8800015 	stw	r2,0(sp)
 200d5a0:	00000406 	br	200d5b4 <_Unwind_Backtrace+0x40>
 200d5a4:	84c00b26 	beq	r16,r19,200d5d4 <_Unwind_Backtrace+0x60>
 200d5a8:	d8800017 	ldw	r2,0(sp)
 200d5ac:	10800017 	ldw	r2,0(r2)
 200d5b0:	d8800015 	stw	r2,0(sp)
 200d5b4:	04000144 	movi	r16,5
 200d5b8:	10000126 	beq	r2,zero,200d5c0 <_Unwind_Backtrace+0x4c>
 200d5bc:	0021883a 	mov	r16,zero
 200d5c0:	d809883a 	mov	r4,sp
 200d5c4:	880b883a 	mov	r5,r17
 200d5c8:	903ee83a 	callr	r18
 200d5cc:	103ff526 	beq	r2,zero,200d5a4 <_Unwind_Backtrace+0x30>
 200d5d0:	040000c4 	movi	r16,3
 200d5d4:	8005883a 	mov	r2,r16
 200d5d8:	dfc00517 	ldw	ra,20(sp)
 200d5dc:	dcc00417 	ldw	r19,16(sp)
 200d5e0:	dc800317 	ldw	r18,12(sp)
 200d5e4:	dc400217 	ldw	r17,8(sp)
 200d5e8:	dc000117 	ldw	r16,4(sp)
 200d5ec:	dec00604 	addi	sp,sp,24
 200d5f0:	f800283a 	ret

0200d5f4 <_Unwind_SjLj_Resume_or_Rethrow>:
 200d5f4:	20800317 	ldw	r2,12(r4)
 200d5f8:	defffc04 	addi	sp,sp,-16
 200d5fc:	dfc00315 	stw	ra,12(sp)
 200d600:	dc000215 	stw	r16,8(sp)
 200d604:	10000926 	beq	r2,zero,200d62c <_Unwind_SjLj_Resume_or_Rethrow+0x38>
 200d608:	d0a70d17 	ldw	r2,-25548(gp)
 200d60c:	dc000104 	addi	r16,sp,4
 200d610:	800b883a 	mov	r5,r16
 200d614:	d8800015 	stw	r2,0(sp)
 200d618:	d8800115 	stw	r2,4(sp)
 200d61c:	200d1c40 	call	200d1c4 <_Unwind_ForcedUnwind_Phase2>
 200d620:	00c001c4 	movi	r3,7
 200d624:	10c00626 	beq	r2,r3,200d640 <_Unwind_SjLj_Resume_or_Rethrow+0x4c>
 200d628:	200d64c0 	call	200d64c <abort>
 200d62c:	200d42c0 	call	200d42c <_Unwind_SjLj_RaiseException>
 200d630:	dfc00317 	ldw	ra,12(sp)
 200d634:	dc000217 	ldw	r16,8(sp)
 200d638:	dec00404 	addi	sp,sp,16
 200d63c:	f800283a 	ret
 200d640:	800b883a 	mov	r5,r16
 200d644:	d809883a 	mov	r4,sp
 200d648:	200d3a80 	call	200d3a8 <uw_install_context>

0200d64c <abort>:
 200d64c:	deffff04 	addi	sp,sp,-4
 200d650:	01000184 	movi	r4,6
 200d654:	dfc00015 	stw	ra,0(sp)
 200d658:	200e0cc0 	call	200e0cc <raise>
 200d65c:	01000044 	movi	r4,1
 200d660:	20175e40 	call	20175e4 <_exit>

0200d664 <free>:
 200d664:	008080b4 	movhi	r2,514
 200d668:	10b6fa04 	addi	r2,r2,-9240
 200d66c:	200b883a 	mov	r5,r4
 200d670:	11000017 	ldw	r4,0(r2)
 200d674:	20122881 	jmpi	2012288 <_free_r>

0200d678 <malloc>:
 200d678:	008080b4 	movhi	r2,514
 200d67c:	10b6fa04 	addi	r2,r2,-9240
 200d680:	200b883a 	mov	r5,r4
 200d684:	11000017 	ldw	r4,0(r2)
 200d688:	200d68c1 	jmpi	200d68c <_malloc_r>

0200d68c <_malloc_r>:
 200d68c:	defff604 	addi	sp,sp,-40
 200d690:	28c002c4 	addi	r3,r5,11
 200d694:	00800584 	movi	r2,22
 200d698:	dc800215 	stw	r18,8(sp)
 200d69c:	dfc00915 	stw	ra,36(sp)
 200d6a0:	df000815 	stw	fp,32(sp)
 200d6a4:	ddc00715 	stw	r23,28(sp)
 200d6a8:	dd800615 	stw	r22,24(sp)
 200d6ac:	dd400515 	stw	r21,20(sp)
 200d6b0:	dd000415 	stw	r20,16(sp)
 200d6b4:	dcc00315 	stw	r19,12(sp)
 200d6b8:	dc400115 	stw	r17,4(sp)
 200d6bc:	dc000015 	stw	r16,0(sp)
 200d6c0:	2025883a 	mov	r18,r4
 200d6c4:	10c01236 	bltu	r2,r3,200d710 <_malloc_r+0x84>
 200d6c8:	04400404 	movi	r17,16
 200d6cc:	8940142e 	bgeu	r17,r5,200d720 <_malloc_r+0x94>
 200d6d0:	00800304 	movi	r2,12
 200d6d4:	0007883a 	mov	r3,zero
 200d6d8:	90800015 	stw	r2,0(r18)
 200d6dc:	1805883a 	mov	r2,r3
 200d6e0:	dfc00917 	ldw	ra,36(sp)
 200d6e4:	df000817 	ldw	fp,32(sp)
 200d6e8:	ddc00717 	ldw	r23,28(sp)
 200d6ec:	dd800617 	ldw	r22,24(sp)
 200d6f0:	dd400517 	ldw	r21,20(sp)
 200d6f4:	dd000417 	ldw	r20,16(sp)
 200d6f8:	dcc00317 	ldw	r19,12(sp)
 200d6fc:	dc800217 	ldw	r18,8(sp)
 200d700:	dc400117 	ldw	r17,4(sp)
 200d704:	dc000017 	ldw	r16,0(sp)
 200d708:	dec00a04 	addi	sp,sp,40
 200d70c:	f800283a 	ret
 200d710:	00bffe04 	movi	r2,-8
 200d714:	18a2703a 	and	r17,r3,r2
 200d718:	883fed16 	blt	r17,zero,200d6d0 <_malloc_r+0x44>
 200d71c:	897fec36 	bltu	r17,r5,200d6d0 <_malloc_r+0x44>
 200d720:	9009883a 	mov	r4,r18
 200d724:	2017ccc0 	call	2017ccc <__malloc_lock>
 200d728:	00807dc4 	movi	r2,503
 200d72c:	14402b2e 	bgeu	r2,r17,200d7dc <_malloc_r+0x150>
 200d730:	8806d27a 	srli	r3,r17,9
 200d734:	18003f1e 	bne	r3,zero,200d834 <_malloc_r+0x1a8>
 200d738:	880cd0fa 	srli	r6,r17,3
 200d73c:	300490fa 	slli	r2,r6,3
 200d740:	02c080b4 	movhi	r11,514
 200d744:	5af02804 	addi	r11,r11,-16224
 200d748:	12cb883a 	add	r5,r2,r11
 200d74c:	2c000317 	ldw	r16,12(r5)
 200d750:	580f883a 	mov	r7,r11
 200d754:	2c00041e 	bne	r5,r16,200d768 <_malloc_r+0xdc>
 200d758:	00000a06 	br	200d784 <_malloc_r+0xf8>
 200d75c:	1800860e 	bge	r3,zero,200d978 <_malloc_r+0x2ec>
 200d760:	84000317 	ldw	r16,12(r16)
 200d764:	2c000726 	beq	r5,r16,200d784 <_malloc_r+0xf8>
 200d768:	80800117 	ldw	r2,4(r16)
 200d76c:	00ffff04 	movi	r3,-4
 200d770:	10c8703a 	and	r4,r2,r3
 200d774:	2447c83a 	sub	r3,r4,r17
 200d778:	008003c4 	movi	r2,15
 200d77c:	10fff70e 	bge	r2,r3,200d75c <_malloc_r+0xd0>
 200d780:	31bfffc4 	addi	r6,r6,-1
 200d784:	32400044 	addi	r9,r6,1
 200d788:	028080b4 	movhi	r10,514
 200d78c:	52b02a04 	addi	r10,r10,-16216
 200d790:	54000217 	ldw	r16,8(r10)
 200d794:	8280a026 	beq	r16,r10,200da18 <_malloc_r+0x38c>
 200d798:	80800117 	ldw	r2,4(r16)
 200d79c:	00ffff04 	movi	r3,-4
 200d7a0:	10ca703a 	and	r5,r2,r3
 200d7a4:	2c4dc83a 	sub	r6,r5,r17
 200d7a8:	008003c4 	movi	r2,15
 200d7ac:	11808316 	blt	r2,r6,200d9bc <_malloc_r+0x330>
 200d7b0:	52800315 	stw	r10,12(r10)
 200d7b4:	52800215 	stw	r10,8(r10)
 200d7b8:	30002916 	blt	r6,zero,200d860 <_malloc_r+0x1d4>
 200d7bc:	8147883a 	add	r3,r16,r5
 200d7c0:	18800117 	ldw	r2,4(r3)
 200d7c4:	9009883a 	mov	r4,r18
 200d7c8:	10800054 	ori	r2,r2,1
 200d7cc:	18800115 	stw	r2,4(r3)
 200d7d0:	2017cec0 	call	2017cec <__malloc_unlock>
 200d7d4:	80c00204 	addi	r3,r16,8
 200d7d8:	003fc006 	br	200d6dc <_malloc_r+0x50>
 200d7dc:	02c080b4 	movhi	r11,514
 200d7e0:	5af02804 	addi	r11,r11,-16224
 200d7e4:	8ac5883a 	add	r2,r17,r11
 200d7e8:	14000317 	ldw	r16,12(r2)
 200d7ec:	580f883a 	mov	r7,r11
 200d7f0:	8806d0fa 	srli	r3,r17,3
 200d7f4:	14006c26 	beq	r2,r16,200d9a8 <_malloc_r+0x31c>
 200d7f8:	80c00117 	ldw	r3,4(r16)
 200d7fc:	00bfff04 	movi	r2,-4
 200d800:	81800317 	ldw	r6,12(r16)
 200d804:	1886703a 	and	r3,r3,r2
 200d808:	80c7883a 	add	r3,r16,r3
 200d80c:	18800117 	ldw	r2,4(r3)
 200d810:	81400217 	ldw	r5,8(r16)
 200d814:	9009883a 	mov	r4,r18
 200d818:	10800054 	ori	r2,r2,1
 200d81c:	18800115 	stw	r2,4(r3)
 200d820:	31400215 	stw	r5,8(r6)
 200d824:	29800315 	stw	r6,12(r5)
 200d828:	2017cec0 	call	2017cec <__malloc_unlock>
 200d82c:	80c00204 	addi	r3,r16,8
 200d830:	003faa06 	br	200d6dc <_malloc_r+0x50>
 200d834:	00800104 	movi	r2,4
 200d838:	10c0052e 	bgeu	r2,r3,200d850 <_malloc_r+0x1c4>
 200d83c:	00800504 	movi	r2,20
 200d840:	10c07836 	bltu	r2,r3,200da24 <_malloc_r+0x398>
 200d844:	198016c4 	addi	r6,r3,91
 200d848:	300490fa 	slli	r2,r6,3
 200d84c:	003fbc06 	br	200d740 <_malloc_r+0xb4>
 200d850:	8804d1ba 	srli	r2,r17,6
 200d854:	11800e04 	addi	r6,r2,56
 200d858:	300490fa 	slli	r2,r6,3
 200d85c:	003fb806 	br	200d740 <_malloc_r+0xb4>
 200d860:	00807fc4 	movi	r2,511
 200d864:	1140bb36 	bltu	r2,r5,200db54 <_malloc_r+0x4c8>
 200d868:	2806d0fa 	srli	r3,r5,3
 200d86c:	573ffe04 	addi	fp,r10,-8
 200d870:	00800044 	movi	r2,1
 200d874:	180890fa 	slli	r4,r3,3
 200d878:	1807d0ba 	srai	r3,r3,2
 200d87c:	e1c00117 	ldw	r7,4(fp)
 200d880:	5909883a 	add	r4,r11,r4
 200d884:	21400217 	ldw	r5,8(r4)
 200d888:	10c4983a 	sll	r2,r2,r3
 200d88c:	81000315 	stw	r4,12(r16)
 200d890:	81400215 	stw	r5,8(r16)
 200d894:	388eb03a 	or	r7,r7,r2
 200d898:	2c000315 	stw	r16,12(r5)
 200d89c:	24000215 	stw	r16,8(r4)
 200d8a0:	e1c00115 	stw	r7,4(fp)
 200d8a4:	4807883a 	mov	r3,r9
 200d8a8:	4800cd16 	blt	r9,zero,200dbe0 <_malloc_r+0x554>
 200d8ac:	1807d0ba 	srai	r3,r3,2
 200d8b0:	00800044 	movi	r2,1
 200d8b4:	10c8983a 	sll	r4,r2,r3
 200d8b8:	39004436 	bltu	r7,r4,200d9cc <_malloc_r+0x340>
 200d8bc:	21c4703a 	and	r2,r4,r7
 200d8c0:	10000a1e 	bne	r2,zero,200d8ec <_malloc_r+0x260>
 200d8c4:	2109883a 	add	r4,r4,r4
 200d8c8:	00bfff04 	movi	r2,-4
 200d8cc:	4884703a 	and	r2,r9,r2
 200d8d0:	3906703a 	and	r3,r7,r4
 200d8d4:	12400104 	addi	r9,r2,4
 200d8d8:	1800041e 	bne	r3,zero,200d8ec <_malloc_r+0x260>
 200d8dc:	2109883a 	add	r4,r4,r4
 200d8e0:	3904703a 	and	r2,r7,r4
 200d8e4:	4a400104 	addi	r9,r9,4
 200d8e8:	103ffc26 	beq	r2,zero,200d8dc <_malloc_r+0x250>
 200d8ec:	480490fa 	slli	r2,r9,3
 200d8f0:	4819883a 	mov	r12,r9
 200d8f4:	023fff04 	movi	r8,-4
 200d8f8:	589b883a 	add	r13,r11,r2
 200d8fc:	6807883a 	mov	r3,r13
 200d900:	014003c4 	movi	r5,15
 200d904:	1c000317 	ldw	r16,12(r3)
 200d908:	1c00041e 	bne	r3,r16,200d91c <_malloc_r+0x290>
 200d90c:	0000a706 	br	200dbac <_malloc_r+0x520>
 200d910:	3000ab0e 	bge	r6,zero,200dbc0 <_malloc_r+0x534>
 200d914:	84000317 	ldw	r16,12(r16)
 200d918:	1c00a426 	beq	r3,r16,200dbac <_malloc_r+0x520>
 200d91c:	80800117 	ldw	r2,4(r16)
 200d920:	1204703a 	and	r2,r2,r8
 200d924:	144dc83a 	sub	r6,r2,r17
 200d928:	29bff90e 	bge	r5,r6,200d910 <_malloc_r+0x284>
 200d92c:	81000317 	ldw	r4,12(r16)
 200d930:	80c00217 	ldw	r3,8(r16)
 200d934:	89400054 	ori	r5,r17,1
 200d938:	8445883a 	add	r2,r16,r17
 200d93c:	20c00215 	stw	r3,8(r4)
 200d940:	19000315 	stw	r4,12(r3)
 200d944:	81400115 	stw	r5,4(r16)
 200d948:	1187883a 	add	r3,r2,r6
 200d94c:	31000054 	ori	r4,r6,1
 200d950:	50800315 	stw	r2,12(r10)
 200d954:	50800215 	stw	r2,8(r10)
 200d958:	19800015 	stw	r6,0(r3)
 200d95c:	11000115 	stw	r4,4(r2)
 200d960:	12800215 	stw	r10,8(r2)
 200d964:	12800315 	stw	r10,12(r2)
 200d968:	9009883a 	mov	r4,r18
 200d96c:	2017cec0 	call	2017cec <__malloc_unlock>
 200d970:	80c00204 	addi	r3,r16,8
 200d974:	003f5906 	br	200d6dc <_malloc_r+0x50>
 200d978:	8109883a 	add	r4,r16,r4
 200d97c:	20800117 	ldw	r2,4(r4)
 200d980:	80c00217 	ldw	r3,8(r16)
 200d984:	81400317 	ldw	r5,12(r16)
 200d988:	10800054 	ori	r2,r2,1
 200d98c:	20800115 	stw	r2,4(r4)
 200d990:	28c00215 	stw	r3,8(r5)
 200d994:	19400315 	stw	r5,12(r3)
 200d998:	9009883a 	mov	r4,r18
 200d99c:	2017cec0 	call	2017cec <__malloc_unlock>
 200d9a0:	80c00204 	addi	r3,r16,8
 200d9a4:	003f4d06 	br	200d6dc <_malloc_r+0x50>
 200d9a8:	80800204 	addi	r2,r16,8
 200d9ac:	14000317 	ldw	r16,12(r2)
 200d9b0:	143f911e 	bne	r2,r16,200d7f8 <_malloc_r+0x16c>
 200d9b4:	1a400084 	addi	r9,r3,2
 200d9b8:	003f7306 	br	200d788 <_malloc_r+0xfc>
 200d9bc:	88c00054 	ori	r3,r17,1
 200d9c0:	8445883a 	add	r2,r16,r17
 200d9c4:	80c00115 	stw	r3,4(r16)
 200d9c8:	003fdf06 	br	200d948 <_malloc_r+0x2bc>
 200d9cc:	e4000217 	ldw	r16,8(fp)
 200d9d0:	00bfff04 	movi	r2,-4
 200d9d4:	80c00117 	ldw	r3,4(r16)
 200d9d8:	802d883a 	mov	r22,r16
 200d9dc:	18aa703a 	and	r21,r3,r2
 200d9e0:	ac401636 	bltu	r21,r17,200da3c <_malloc_r+0x3b0>
 200d9e4:	ac49c83a 	sub	r4,r21,r17
 200d9e8:	008003c4 	movi	r2,15
 200d9ec:	1100130e 	bge	r2,r4,200da3c <_malloc_r+0x3b0>
 200d9f0:	88800054 	ori	r2,r17,1
 200d9f4:	8447883a 	add	r3,r16,r17
 200d9f8:	80800115 	stw	r2,4(r16)
 200d9fc:	20800054 	ori	r2,r4,1
 200da00:	18800115 	stw	r2,4(r3)
 200da04:	e0c00215 	stw	r3,8(fp)
 200da08:	9009883a 	mov	r4,r18
 200da0c:	2017cec0 	call	2017cec <__malloc_unlock>
 200da10:	80c00204 	addi	r3,r16,8
 200da14:	003f3106 	br	200d6dc <_malloc_r+0x50>
 200da18:	39c00117 	ldw	r7,4(r7)
 200da1c:	573ffe04 	addi	fp,r10,-8
 200da20:	003fa006 	br	200d8a4 <_malloc_r+0x218>
 200da24:	00801504 	movi	r2,84
 200da28:	10c06736 	bltu	r2,r3,200dbc8 <_malloc_r+0x53c>
 200da2c:	8804d33a 	srli	r2,r17,12
 200da30:	11801b84 	addi	r6,r2,110
 200da34:	300490fa 	slli	r2,r6,3
 200da38:	003f4106 	br	200d740 <_malloc_r+0xb4>
 200da3c:	d0a70e17 	ldw	r2,-25544(gp)
 200da40:	d0e00d17 	ldw	r3,-32716(gp)
 200da44:	053fffc4 	movi	r20,-1
 200da48:	10800404 	addi	r2,r2,16
 200da4c:	88a7883a 	add	r19,r17,r2
 200da50:	1d000326 	beq	r3,r20,200da60 <_malloc_r+0x3d4>
 200da54:	98c3ffc4 	addi	r3,r19,4095
 200da58:	00bc0004 	movi	r2,-4096
 200da5c:	18a6703a 	and	r19,r3,r2
 200da60:	9009883a 	mov	r4,r18
 200da64:	980b883a 	mov	r5,r19
 200da68:	200df900 	call	200df90 <_sbrk_r>
 200da6c:	1009883a 	mov	r4,r2
 200da70:	15000426 	beq	r2,r20,200da84 <_malloc_r+0x3f8>
 200da74:	854b883a 	add	r5,r16,r21
 200da78:	1029883a 	mov	r20,r2
 200da7c:	11405a2e 	bgeu	r2,r5,200dbe8 <_malloc_r+0x55c>
 200da80:	87000c26 	beq	r16,fp,200dab4 <_malloc_r+0x428>
 200da84:	e4000217 	ldw	r16,8(fp)
 200da88:	80c00117 	ldw	r3,4(r16)
 200da8c:	00bfff04 	movi	r2,-4
 200da90:	1884703a 	and	r2,r3,r2
 200da94:	14400336 	bltu	r2,r17,200daa4 <_malloc_r+0x418>
 200da98:	1449c83a 	sub	r4,r2,r17
 200da9c:	008003c4 	movi	r2,15
 200daa0:	113fd316 	blt	r2,r4,200d9f0 <_malloc_r+0x364>
 200daa4:	9009883a 	mov	r4,r18
 200daa8:	2017cec0 	call	2017cec <__malloc_unlock>
 200daac:	0007883a 	mov	r3,zero
 200dab0:	003f0a06 	br	200d6dc <_malloc_r+0x50>
 200dab4:	05c080b4 	movhi	r23,514
 200dab8:	bdc00d04 	addi	r23,r23,52
 200dabc:	b8800017 	ldw	r2,0(r23)
 200dac0:	988d883a 	add	r6,r19,r2
 200dac4:	b9800015 	stw	r6,0(r23)
 200dac8:	d0e00d17 	ldw	r3,-32716(gp)
 200dacc:	00bfffc4 	movi	r2,-1
 200dad0:	18808e26 	beq	r3,r2,200dd0c <_malloc_r+0x680>
 200dad4:	2145c83a 	sub	r2,r4,r5
 200dad8:	3085883a 	add	r2,r6,r2
 200dadc:	b8800015 	stw	r2,0(r23)
 200dae0:	20c001cc 	andi	r3,r4,7
 200dae4:	18005f1e 	bne	r3,zero,200dc64 <_malloc_r+0x5d8>
 200dae8:	000b883a 	mov	r5,zero
 200daec:	a4c5883a 	add	r2,r20,r19
 200daf0:	1083ffcc 	andi	r2,r2,4095
 200daf4:	00c40004 	movi	r3,4096
 200daf8:	1887c83a 	sub	r3,r3,r2
 200dafc:	28e7883a 	add	r19,r5,r3
 200db00:	9009883a 	mov	r4,r18
 200db04:	980b883a 	mov	r5,r19
 200db08:	200df900 	call	200df90 <_sbrk_r>
 200db0c:	1007883a 	mov	r3,r2
 200db10:	00bfffc4 	movi	r2,-1
 200db14:	18807a26 	beq	r3,r2,200dd00 <_malloc_r+0x674>
 200db18:	1d05c83a 	sub	r2,r3,r20
 200db1c:	9885883a 	add	r2,r19,r2
 200db20:	10c00054 	ori	r3,r2,1
 200db24:	b8800017 	ldw	r2,0(r23)
 200db28:	a021883a 	mov	r16,r20
 200db2c:	a0c00115 	stw	r3,4(r20)
 200db30:	9885883a 	add	r2,r19,r2
 200db34:	b8800015 	stw	r2,0(r23)
 200db38:	e5000215 	stw	r20,8(fp)
 200db3c:	b7003626 	beq	r22,fp,200dc18 <_malloc_r+0x58c>
 200db40:	018003c4 	movi	r6,15
 200db44:	35404b36 	bltu	r6,r21,200dc74 <_malloc_r+0x5e8>
 200db48:	00800044 	movi	r2,1
 200db4c:	a0800115 	stw	r2,4(r20)
 200db50:	003fcd06 	br	200da88 <_malloc_r+0x3fc>
 200db54:	2808d27a 	srli	r4,r5,9
 200db58:	2000371e 	bne	r4,zero,200dc38 <_malloc_r+0x5ac>
 200db5c:	2808d0fa 	srli	r4,r5,3
 200db60:	200690fa 	slli	r3,r4,3
 200db64:	1ad1883a 	add	r8,r3,r11
 200db68:	41800217 	ldw	r6,8(r8)
 200db6c:	41805b26 	beq	r8,r6,200dcdc <_malloc_r+0x650>
 200db70:	30800117 	ldw	r2,4(r6)
 200db74:	00ffff04 	movi	r3,-4
 200db78:	10c4703a 	and	r2,r2,r3
 200db7c:	2880022e 	bgeu	r5,r2,200db88 <_malloc_r+0x4fc>
 200db80:	31800217 	ldw	r6,8(r6)
 200db84:	41bffa1e 	bne	r8,r6,200db70 <_malloc_r+0x4e4>
 200db88:	32000317 	ldw	r8,12(r6)
 200db8c:	39c00117 	ldw	r7,4(r7)
 200db90:	82000315 	stw	r8,12(r16)
 200db94:	81800215 	stw	r6,8(r16)
 200db98:	070080b4 	movhi	fp,514
 200db9c:	e7302804 	addi	fp,fp,-16224
 200dba0:	34000315 	stw	r16,12(r6)
 200dba4:	44000215 	stw	r16,8(r8)
 200dba8:	003f3e06 	br	200d8a4 <_malloc_r+0x218>
 200dbac:	63000044 	addi	r12,r12,1
 200dbb0:	608000cc 	andi	r2,r12,3
 200dbb4:	10005d26 	beq	r2,zero,200dd2c <_malloc_r+0x6a0>
 200dbb8:	18c00204 	addi	r3,r3,8
 200dbbc:	003f5106 	br	200d904 <_malloc_r+0x278>
 200dbc0:	8089883a 	add	r4,r16,r2
 200dbc4:	003f6d06 	br	200d97c <_malloc_r+0x2f0>
 200dbc8:	00805504 	movi	r2,340
 200dbcc:	10c02036 	bltu	r2,r3,200dc50 <_malloc_r+0x5c4>
 200dbd0:	8804d3fa 	srli	r2,r17,15
 200dbd4:	11801dc4 	addi	r6,r2,119
 200dbd8:	300490fa 	slli	r2,r6,3
 200dbdc:	003ed806 	br	200d740 <_malloc_r+0xb4>
 200dbe0:	48c000c4 	addi	r3,r9,3
 200dbe4:	003f3106 	br	200d8ac <_malloc_r+0x220>
 200dbe8:	05c080b4 	movhi	r23,514
 200dbec:	bdc00d04 	addi	r23,r23,52
 200dbf0:	b8800017 	ldw	r2,0(r23)
 200dbf4:	988d883a 	add	r6,r19,r2
 200dbf8:	b9800015 	stw	r6,0(r23)
 200dbfc:	293fb21e 	bne	r5,r4,200dac8 <_malloc_r+0x43c>
 200dc00:	2083ffcc 	andi	r2,r4,4095
 200dc04:	103fb01e 	bne	r2,zero,200dac8 <_malloc_r+0x43c>
 200dc08:	e4000217 	ldw	r16,8(fp)
 200dc0c:	9d45883a 	add	r2,r19,r21
 200dc10:	10800054 	ori	r2,r2,1
 200dc14:	80800115 	stw	r2,4(r16)
 200dc18:	b8c00017 	ldw	r3,0(r23)
 200dc1c:	d0a70f17 	ldw	r2,-25540(gp)
 200dc20:	10c0012e 	bgeu	r2,r3,200dc28 <_malloc_r+0x59c>
 200dc24:	d0e70f15 	stw	r3,-25540(gp)
 200dc28:	d0a71017 	ldw	r2,-25536(gp)
 200dc2c:	10ff962e 	bgeu	r2,r3,200da88 <_malloc_r+0x3fc>
 200dc30:	d0e71015 	stw	r3,-25536(gp)
 200dc34:	003f9406 	br	200da88 <_malloc_r+0x3fc>
 200dc38:	00800104 	movi	r2,4
 200dc3c:	11001e36 	bltu	r2,r4,200dcb8 <_malloc_r+0x62c>
 200dc40:	2804d1ba 	srli	r2,r5,6
 200dc44:	11000e04 	addi	r4,r2,56
 200dc48:	200690fa 	slli	r3,r4,3
 200dc4c:	003fc506 	br	200db64 <_malloc_r+0x4d8>
 200dc50:	00815504 	movi	r2,1364
 200dc54:	10c01d2e 	bgeu	r2,r3,200dccc <_malloc_r+0x640>
 200dc58:	01801f84 	movi	r6,126
 200dc5c:	0080fc04 	movi	r2,1008
 200dc60:	003eb706 	br	200d740 <_malloc_r+0xb4>
 200dc64:	00800204 	movi	r2,8
 200dc68:	10cbc83a 	sub	r5,r2,r3
 200dc6c:	2169883a 	add	r20,r4,r5
 200dc70:	003f9e06 	br	200daec <_malloc_r+0x460>
 200dc74:	00bffe04 	movi	r2,-8
 200dc78:	a93ffd04 	addi	r4,r21,-12
 200dc7c:	2088703a 	and	r4,r4,r2
 200dc80:	b10b883a 	add	r5,r22,r4
 200dc84:	00c00144 	movi	r3,5
 200dc88:	28c00215 	stw	r3,8(r5)
 200dc8c:	28c00115 	stw	r3,4(r5)
 200dc90:	b0800117 	ldw	r2,4(r22)
 200dc94:	1080004c 	andi	r2,r2,1
 200dc98:	2084b03a 	or	r2,r4,r2
 200dc9c:	b0800115 	stw	r2,4(r22)
 200dca0:	313fdd2e 	bgeu	r6,r4,200dc18 <_malloc_r+0x58c>
 200dca4:	b1400204 	addi	r5,r22,8
 200dca8:	9009883a 	mov	r4,r18
 200dcac:	20122880 	call	2012288 <_free_r>
 200dcb0:	e4000217 	ldw	r16,8(fp)
 200dcb4:	003fd806 	br	200dc18 <_malloc_r+0x58c>
 200dcb8:	00800504 	movi	r2,20
 200dcbc:	11001536 	bltu	r2,r4,200dd14 <_malloc_r+0x688>
 200dcc0:	210016c4 	addi	r4,r4,91
 200dcc4:	200690fa 	slli	r3,r4,3
 200dcc8:	003fa606 	br	200db64 <_malloc_r+0x4d8>
 200dccc:	8804d4ba 	srli	r2,r17,18
 200dcd0:	11801f04 	addi	r6,r2,124
 200dcd4:	300490fa 	slli	r2,r6,3
 200dcd8:	003e9906 	br	200d740 <_malloc_r+0xb4>
 200dcdc:	2009d0ba 	srai	r4,r4,2
 200dce0:	014080b4 	movhi	r5,514
 200dce4:	29702804 	addi	r5,r5,-16224
 200dce8:	00c00044 	movi	r3,1
 200dcec:	28800117 	ldw	r2,4(r5)
 200dcf0:	1906983a 	sll	r3,r3,r4
 200dcf4:	10c4b03a 	or	r2,r2,r3
 200dcf8:	28800115 	stw	r2,4(r5)
 200dcfc:	003fa306 	br	200db8c <_malloc_r+0x500>
 200dd00:	0027883a 	mov	r19,zero
 200dd04:	00c00044 	movi	r3,1
 200dd08:	003f8606 	br	200db24 <_malloc_r+0x498>
 200dd0c:	d1200d15 	stw	r4,-32716(gp)
 200dd10:	003f7306 	br	200dae0 <_malloc_r+0x454>
 200dd14:	00801504 	movi	r2,84
 200dd18:	11001936 	bltu	r2,r4,200dd80 <_malloc_r+0x6f4>
 200dd1c:	2804d33a 	srli	r2,r5,12
 200dd20:	11001b84 	addi	r4,r2,110
 200dd24:	200690fa 	slli	r3,r4,3
 200dd28:	003f8e06 	br	200db64 <_malloc_r+0x4d8>
 200dd2c:	480b883a 	mov	r5,r9
 200dd30:	6807883a 	mov	r3,r13
 200dd34:	288000cc 	andi	r2,r5,3
 200dd38:	18fffe04 	addi	r3,r3,-8
 200dd3c:	297fffc4 	addi	r5,r5,-1
 200dd40:	10001526 	beq	r2,zero,200dd98 <_malloc_r+0x70c>
 200dd44:	18800217 	ldw	r2,8(r3)
 200dd48:	10fffa26 	beq	r2,r3,200dd34 <_malloc_r+0x6a8>
 200dd4c:	2109883a 	add	r4,r4,r4
 200dd50:	393f1e36 	bltu	r7,r4,200d9cc <_malloc_r+0x340>
 200dd54:	203f1d26 	beq	r4,zero,200d9cc <_malloc_r+0x340>
 200dd58:	21c4703a 	and	r2,r4,r7
 200dd5c:	10000226 	beq	r2,zero,200dd68 <_malloc_r+0x6dc>
 200dd60:	6013883a 	mov	r9,r12
 200dd64:	003ee106 	br	200d8ec <_malloc_r+0x260>
 200dd68:	2109883a 	add	r4,r4,r4
 200dd6c:	3904703a 	and	r2,r7,r4
 200dd70:	63000104 	addi	r12,r12,4
 200dd74:	103ffc26 	beq	r2,zero,200dd68 <_malloc_r+0x6dc>
 200dd78:	6013883a 	mov	r9,r12
 200dd7c:	003edb06 	br	200d8ec <_malloc_r+0x260>
 200dd80:	00805504 	movi	r2,340
 200dd84:	11000836 	bltu	r2,r4,200dda8 <_malloc_r+0x71c>
 200dd88:	2804d3fa 	srli	r2,r5,15
 200dd8c:	11001dc4 	addi	r4,r2,119
 200dd90:	200690fa 	slli	r3,r4,3
 200dd94:	003f7306 	br	200db64 <_malloc_r+0x4d8>
 200dd98:	0104303a 	nor	r2,zero,r4
 200dd9c:	388e703a 	and	r7,r7,r2
 200dda0:	e1c00115 	stw	r7,4(fp)
 200dda4:	003fe906 	br	200dd4c <_malloc_r+0x6c0>
 200dda8:	00815504 	movi	r2,1364
 200ddac:	1100032e 	bgeu	r2,r4,200ddbc <_malloc_r+0x730>
 200ddb0:	01001f84 	movi	r4,126
 200ddb4:	00c0fc04 	movi	r3,1008
 200ddb8:	003f6a06 	br	200db64 <_malloc_r+0x4d8>
 200ddbc:	2804d4ba 	srli	r2,r5,18
 200ddc0:	11001f04 	addi	r4,r2,124
 200ddc4:	200690fa 	slli	r3,r4,3
 200ddc8:	003f6606 	br	200db64 <_malloc_r+0x4d8>

0200ddcc <memset>:
 200ddcc:	008000c4 	movi	r2,3
 200ddd0:	29403fcc 	andi	r5,r5,255
 200ddd4:	2007883a 	mov	r3,r4
 200ddd8:	1180022e 	bgeu	r2,r6,200dde4 <memset+0x18>
 200dddc:	2084703a 	and	r2,r4,r2
 200dde0:	10000826 	beq	r2,zero,200de04 <memset+0x38>
 200dde4:	30000526 	beq	r6,zero,200ddfc <memset+0x30>
 200dde8:	2805883a 	mov	r2,r5
 200ddec:	30cd883a 	add	r6,r6,r3
 200ddf0:	18800005 	stb	r2,0(r3)
 200ddf4:	18c00044 	addi	r3,r3,1
 200ddf8:	19bffd1e 	bne	r3,r6,200ddf0 <memset+0x24>
 200ddfc:	2005883a 	mov	r2,r4
 200de00:	f800283a 	ret
 200de04:	2804923a 	slli	r2,r5,8
 200de08:	020003c4 	movi	r8,15
 200de0c:	200f883a 	mov	r7,r4
 200de10:	2884b03a 	or	r2,r5,r2
 200de14:	1006943a 	slli	r3,r2,16
 200de18:	10c6b03a 	or	r3,r2,r3
 200de1c:	41800a2e 	bgeu	r8,r6,200de48 <memset+0x7c>
 200de20:	4005883a 	mov	r2,r8
 200de24:	31bffc04 	addi	r6,r6,-16
 200de28:	38c00015 	stw	r3,0(r7)
 200de2c:	38c00115 	stw	r3,4(r7)
 200de30:	38c00215 	stw	r3,8(r7)
 200de34:	38c00315 	stw	r3,12(r7)
 200de38:	39c00404 	addi	r7,r7,16
 200de3c:	11bff936 	bltu	r2,r6,200de24 <memset+0x58>
 200de40:	008000c4 	movi	r2,3
 200de44:	1180052e 	bgeu	r2,r6,200de5c <memset+0x90>
 200de48:	31bfff04 	addi	r6,r6,-4
 200de4c:	008000c4 	movi	r2,3
 200de50:	38c00015 	stw	r3,0(r7)
 200de54:	39c00104 	addi	r7,r7,4
 200de58:	11bffb36 	bltu	r2,r6,200de48 <memset+0x7c>
 200de5c:	3807883a 	mov	r3,r7
 200de60:	003fe006 	br	200dde4 <memset+0x18>

0200de64 <printf>:
 200de64:	defffb04 	addi	sp,sp,-20
 200de68:	dfc00115 	stw	ra,4(sp)
 200de6c:	d9400215 	stw	r5,8(sp)
 200de70:	d9800315 	stw	r6,12(sp)
 200de74:	d9c00415 	stw	r7,16(sp)
 200de78:	008080b4 	movhi	r2,514
 200de7c:	10b6fa04 	addi	r2,r2,-9240
 200de80:	10c00017 	ldw	r3,0(r2)
 200de84:	200b883a 	mov	r5,r4
 200de88:	d8800204 	addi	r2,sp,8
 200de8c:	19000217 	ldw	r4,8(r3)
 200de90:	100d883a 	mov	r6,r2
 200de94:	d8800015 	stw	r2,0(sp)
 200de98:	20102e00 	call	20102e0 <__vfprintf_internal>
 200de9c:	dfc00117 	ldw	ra,4(sp)
 200dea0:	dec00504 	addi	sp,sp,20
 200dea4:	f800283a 	ret

0200dea8 <_printf_r>:
 200dea8:	defffc04 	addi	sp,sp,-16
 200deac:	dfc00115 	stw	ra,4(sp)
 200deb0:	d9800215 	stw	r6,8(sp)
 200deb4:	d9c00315 	stw	r7,12(sp)
 200deb8:	280d883a 	mov	r6,r5
 200debc:	21400217 	ldw	r5,8(r4)
 200dec0:	d8c00204 	addi	r3,sp,8
 200dec4:	180f883a 	mov	r7,r3
 200dec8:	d8c00015 	stw	r3,0(sp)
 200decc:	200e41c0 	call	200e41c <___vfprintf_internal_r>
 200ded0:	dfc00117 	ldw	ra,4(sp)
 200ded4:	dec00404 	addi	sp,sp,16
 200ded8:	f800283a 	ret

0200dedc <_puts_r>:
 200dedc:	defff604 	addi	sp,sp,-40
 200dee0:	dc400715 	stw	r17,28(sp)
 200dee4:	2023883a 	mov	r17,r4
 200dee8:	2809883a 	mov	r4,r5
 200deec:	dfc00915 	stw	ra,36(sp)
 200def0:	dcc00815 	stw	r19,32(sp)
 200def4:	2827883a 	mov	r19,r5
 200def8:	200e3500 	call	200e350 <strlen>
 200defc:	89400217 	ldw	r5,8(r17)
 200df00:	00c080b4 	movhi	r3,514
 200df04:	18ef9304 	addi	r3,r3,-16820
 200df08:	01c00044 	movi	r7,1
 200df0c:	12000044 	addi	r8,r2,1
 200df10:	d8c00515 	stw	r3,20(sp)
 200df14:	d9c00615 	stw	r7,24(sp)
 200df18:	d8c00304 	addi	r3,sp,12
 200df1c:	01c00084 	movi	r7,2
 200df20:	8809883a 	mov	r4,r17
 200df24:	d80d883a 	mov	r6,sp
 200df28:	d8c00015 	stw	r3,0(sp)
 200df2c:	dcc00315 	stw	r19,12(sp)
 200df30:	da000215 	stw	r8,8(sp)
 200df34:	d9c00115 	stw	r7,4(sp)
 200df38:	d8800415 	stw	r2,16(sp)
 200df3c:	201259c0 	call	201259c <__sfvwrite_r>
 200df40:	00ffffc4 	movi	r3,-1
 200df44:	10000626 	beq	r2,zero,200df60 <_puts_r+0x84>
 200df48:	1805883a 	mov	r2,r3
 200df4c:	dfc00917 	ldw	ra,36(sp)
 200df50:	dcc00817 	ldw	r19,32(sp)
 200df54:	dc400717 	ldw	r17,28(sp)
 200df58:	dec00a04 	addi	sp,sp,40
 200df5c:	f800283a 	ret
 200df60:	00c00284 	movi	r3,10
 200df64:	1805883a 	mov	r2,r3
 200df68:	dfc00917 	ldw	ra,36(sp)
 200df6c:	dcc00817 	ldw	r19,32(sp)
 200df70:	dc400717 	ldw	r17,28(sp)
 200df74:	dec00a04 	addi	sp,sp,40
 200df78:	f800283a 	ret

0200df7c <puts>:
 200df7c:	008080b4 	movhi	r2,514
 200df80:	10b6fa04 	addi	r2,r2,-9240
 200df84:	200b883a 	mov	r5,r4
 200df88:	11000017 	ldw	r4,0(r2)
 200df8c:	200dedc1 	jmpi	200dedc <_puts_r>

0200df90 <_sbrk_r>:
 200df90:	defffd04 	addi	sp,sp,-12
 200df94:	dc000015 	stw	r16,0(sp)
 200df98:	040080b4 	movhi	r16,514
 200df9c:	843dfd04 	addi	r16,r16,-2060
 200dfa0:	dc400115 	stw	r17,4(sp)
 200dfa4:	80000015 	stw	zero,0(r16)
 200dfa8:	2023883a 	mov	r17,r4
 200dfac:	2809883a 	mov	r4,r5
 200dfb0:	dfc00215 	stw	ra,8(sp)
 200dfb4:	2017f080 	call	2017f08 <sbrk>
 200dfb8:	1007883a 	mov	r3,r2
 200dfbc:	00bfffc4 	movi	r2,-1
 200dfc0:	18800626 	beq	r3,r2,200dfdc <_sbrk_r+0x4c>
 200dfc4:	1805883a 	mov	r2,r3
 200dfc8:	dfc00217 	ldw	ra,8(sp)
 200dfcc:	dc400117 	ldw	r17,4(sp)
 200dfd0:	dc000017 	ldw	r16,0(sp)
 200dfd4:	dec00304 	addi	sp,sp,12
 200dfd8:	f800283a 	ret
 200dfdc:	80800017 	ldw	r2,0(r16)
 200dfe0:	103ff826 	beq	r2,zero,200dfc4 <_sbrk_r+0x34>
 200dfe4:	88800015 	stw	r2,0(r17)
 200dfe8:	1805883a 	mov	r2,r3
 200dfec:	dfc00217 	ldw	ra,8(sp)
 200dff0:	dc400117 	ldw	r17,4(sp)
 200dff4:	dc000017 	ldw	r16,0(sp)
 200dff8:	dec00304 	addi	sp,sp,12
 200dffc:	f800283a 	ret

0200e000 <_raise_r>:
 200e000:	defffd04 	addi	sp,sp,-12
 200e004:	008007c4 	movi	r2,31
 200e008:	dc400115 	stw	r17,4(sp)
 200e00c:	dc000015 	stw	r16,0(sp)
 200e010:	dfc00215 	stw	ra,8(sp)
 200e014:	2821883a 	mov	r16,r5
 200e018:	2023883a 	mov	r17,r4
 200e01c:	11402736 	bltu	r2,r5,200e0bc <_raise_r+0xbc>
 200e020:	20c0b717 	ldw	r3,732(r4)
 200e024:	18001326 	beq	r3,zero,200e074 <_raise_r+0x74>
 200e028:	2945883a 	add	r2,r5,r5
 200e02c:	1085883a 	add	r2,r2,r2
 200e030:	188b883a 	add	r5,r3,r2
 200e034:	28c00017 	ldw	r3,0(r5)
 200e038:	18000e26 	beq	r3,zero,200e074 <_raise_r+0x74>
 200e03c:	01000044 	movi	r4,1
 200e040:	19000526 	beq	r3,r4,200e058 <_raise_r+0x58>
 200e044:	00bfffc4 	movi	r2,-1
 200e048:	18801326 	beq	r3,r2,200e098 <_raise_r+0x98>
 200e04c:	28000015 	stw	zero,0(r5)
 200e050:	8009883a 	mov	r4,r16
 200e054:	183ee83a 	callr	r3
 200e058:	0007883a 	mov	r3,zero
 200e05c:	1805883a 	mov	r2,r3
 200e060:	dfc00217 	ldw	ra,8(sp)
 200e064:	dc400117 	ldw	r17,4(sp)
 200e068:	dc000017 	ldw	r16,0(sp)
 200e06c:	dec00304 	addi	sp,sp,12
 200e070:	f800283a 	ret
 200e074:	200e2d80 	call	200e2d8 <_getpid_r>
 200e078:	100b883a 	mov	r5,r2
 200e07c:	8809883a 	mov	r4,r17
 200e080:	800d883a 	mov	r6,r16
 200e084:	dfc00217 	ldw	ra,8(sp)
 200e088:	dc400117 	ldw	r17,4(sp)
 200e08c:	dc000017 	ldw	r16,0(sp)
 200e090:	dec00304 	addi	sp,sp,12
 200e094:	200e2dc1 	jmpi	200e2dc <_kill_r>
 200e098:	2007883a 	mov	r3,r4
 200e09c:	00800584 	movi	r2,22
 200e0a0:	88800015 	stw	r2,0(r17)
 200e0a4:	1805883a 	mov	r2,r3
 200e0a8:	dfc00217 	ldw	ra,8(sp)
 200e0ac:	dc400117 	ldw	r17,4(sp)
 200e0b0:	dc000017 	ldw	r16,0(sp)
 200e0b4:	dec00304 	addi	sp,sp,12
 200e0b8:	f800283a 	ret
 200e0bc:	00800584 	movi	r2,22
 200e0c0:	00ffffc4 	movi	r3,-1
 200e0c4:	20800015 	stw	r2,0(r4)
 200e0c8:	003fe406 	br	200e05c <_raise_r+0x5c>

0200e0cc <raise>:
 200e0cc:	008080b4 	movhi	r2,514
 200e0d0:	10b6fa04 	addi	r2,r2,-9240
 200e0d4:	200b883a 	mov	r5,r4
 200e0d8:	11000017 	ldw	r4,0(r2)
 200e0dc:	200e0001 	jmpi	200e000 <_raise_r>

0200e0e0 <_init_signal_r>:
 200e0e0:	2080b717 	ldw	r2,732(r4)
 200e0e4:	defffe04 	addi	sp,sp,-8
 200e0e8:	dc000015 	stw	r16,0(sp)
 200e0ec:	dfc00115 	stw	ra,4(sp)
 200e0f0:	2021883a 	mov	r16,r4
 200e0f4:	10000526 	beq	r2,zero,200e10c <_init_signal_r+0x2c>
 200e0f8:	0005883a 	mov	r2,zero
 200e0fc:	dfc00117 	ldw	ra,4(sp)
 200e100:	dc000017 	ldw	r16,0(sp)
 200e104:	dec00204 	addi	sp,sp,8
 200e108:	f800283a 	ret
 200e10c:	01402004 	movi	r5,128
 200e110:	200d68c0 	call	200d68c <_malloc_r>
 200e114:	1009883a 	mov	r4,r2
 200e118:	8080b715 	stw	r2,732(r16)
 200e11c:	10000726 	beq	r2,zero,200e13c <_init_signal_r+0x5c>
 200e120:	0007883a 	mov	r3,zero
 200e124:	01402004 	movi	r5,128
 200e128:	20c5883a 	add	r2,r4,r3
 200e12c:	18c00104 	addi	r3,r3,4
 200e130:	10000015 	stw	zero,0(r2)
 200e134:	197ffc1e 	bne	r3,r5,200e128 <_init_signal_r+0x48>
 200e138:	003fef06 	br	200e0f8 <_init_signal_r+0x18>
 200e13c:	00bfffc4 	movi	r2,-1
 200e140:	003fee06 	br	200e0fc <_init_signal_r+0x1c>

0200e144 <_init_signal>:
 200e144:	008080b4 	movhi	r2,514
 200e148:	10b6fa04 	addi	r2,r2,-9240
 200e14c:	11000017 	ldw	r4,0(r2)
 200e150:	200e0e01 	jmpi	200e0e0 <_init_signal_r>

0200e154 <__sigtramp_r>:
 200e154:	defffd04 	addi	sp,sp,-12
 200e158:	008007c4 	movi	r2,31
 200e15c:	dc000115 	stw	r16,4(sp)
 200e160:	dfc00215 	stw	ra,8(sp)
 200e164:	2021883a 	mov	r16,r4
 200e168:	11401336 	bltu	r2,r5,200e1b8 <__sigtramp_r+0x64>
 200e16c:	20c0b717 	ldw	r3,732(r4)
 200e170:	18001f26 	beq	r3,zero,200e1f0 <__sigtramp_r+0x9c>
 200e174:	2945883a 	add	r2,r5,r5
 200e178:	1085883a 	add	r2,r2,r2
 200e17c:	10c9883a 	add	r4,r2,r3
 200e180:	20c00017 	ldw	r3,0(r4)
 200e184:	18001626 	beq	r3,zero,200e1e0 <__sigtramp_r+0x8c>
 200e188:	00bfffc4 	movi	r2,-1
 200e18c:	18801626 	beq	r3,r2,200e1e8 <__sigtramp_r+0x94>
 200e190:	00800044 	movi	r2,1
 200e194:	18800d26 	beq	r3,r2,200e1cc <__sigtramp_r+0x78>
 200e198:	20000015 	stw	zero,0(r4)
 200e19c:	2809883a 	mov	r4,r5
 200e1a0:	183ee83a 	callr	r3
 200e1a4:	0005883a 	mov	r2,zero
 200e1a8:	dfc00217 	ldw	ra,8(sp)
 200e1ac:	dc000117 	ldw	r16,4(sp)
 200e1b0:	dec00304 	addi	sp,sp,12
 200e1b4:	f800283a 	ret
 200e1b8:	00bfffc4 	movi	r2,-1
 200e1bc:	dfc00217 	ldw	ra,8(sp)
 200e1c0:	dc000117 	ldw	r16,4(sp)
 200e1c4:	dec00304 	addi	sp,sp,12
 200e1c8:	f800283a 	ret
 200e1cc:	008000c4 	movi	r2,3
 200e1d0:	dfc00217 	ldw	ra,8(sp)
 200e1d4:	dc000117 	ldw	r16,4(sp)
 200e1d8:	dec00304 	addi	sp,sp,12
 200e1dc:	f800283a 	ret
 200e1e0:	00800044 	movi	r2,1
 200e1e4:	003ff006 	br	200e1a8 <__sigtramp_r+0x54>
 200e1e8:	00800084 	movi	r2,2
 200e1ec:	003fee06 	br	200e1a8 <__sigtramp_r+0x54>
 200e1f0:	d9400015 	stw	r5,0(sp)
 200e1f4:	200e0e00 	call	200e0e0 <_init_signal_r>
 200e1f8:	d9400017 	ldw	r5,0(sp)
 200e1fc:	103fee1e 	bne	r2,zero,200e1b8 <__sigtramp_r+0x64>
 200e200:	80c0b717 	ldw	r3,732(r16)
 200e204:	003fdb06 	br	200e174 <__sigtramp_r+0x20>

0200e208 <__sigtramp>:
 200e208:	008080b4 	movhi	r2,514
 200e20c:	10b6fa04 	addi	r2,r2,-9240
 200e210:	200b883a 	mov	r5,r4
 200e214:	11000017 	ldw	r4,0(r2)
 200e218:	200e1541 	jmpi	200e154 <__sigtramp_r>

0200e21c <_signal_r>:
 200e21c:	defffc04 	addi	sp,sp,-16
 200e220:	008007c4 	movi	r2,31
 200e224:	dc800215 	stw	r18,8(sp)
 200e228:	dc400115 	stw	r17,4(sp)
 200e22c:	dc000015 	stw	r16,0(sp)
 200e230:	dfc00315 	stw	ra,12(sp)
 200e234:	2823883a 	mov	r17,r5
 200e238:	00ffffc4 	movi	r3,-1
 200e23c:	3025883a 	mov	r18,r6
 200e240:	2021883a 	mov	r16,r4
 200e244:	1140092e 	bgeu	r2,r5,200e26c <_signal_r+0x50>
 200e248:	00800584 	movi	r2,22
 200e24c:	20800015 	stw	r2,0(r4)
 200e250:	1805883a 	mov	r2,r3
 200e254:	dfc00317 	ldw	ra,12(sp)
 200e258:	dc800217 	ldw	r18,8(sp)
 200e25c:	dc400117 	ldw	r17,4(sp)
 200e260:	dc000017 	ldw	r16,0(sp)
 200e264:	dec00404 	addi	sp,sp,16
 200e268:	f800283a 	ret
 200e26c:	2140b717 	ldw	r5,732(r4)
 200e270:	28000c26 	beq	r5,zero,200e2a4 <_signal_r+0x88>
 200e274:	8c45883a 	add	r2,r17,r17
 200e278:	1085883a 	add	r2,r2,r2
 200e27c:	1145883a 	add	r2,r2,r5
 200e280:	10c00017 	ldw	r3,0(r2)
 200e284:	14800015 	stw	r18,0(r2)
 200e288:	1805883a 	mov	r2,r3
 200e28c:	dfc00317 	ldw	ra,12(sp)
 200e290:	dc800217 	ldw	r18,8(sp)
 200e294:	dc400117 	ldw	r17,4(sp)
 200e298:	dc000017 	ldw	r16,0(sp)
 200e29c:	dec00404 	addi	sp,sp,16
 200e2a0:	f800283a 	ret
 200e2a4:	200e0e00 	call	200e0e0 <_init_signal_r>
 200e2a8:	1000021e 	bne	r2,zero,200e2b4 <_signal_r+0x98>
 200e2ac:	8140b717 	ldw	r5,732(r16)
 200e2b0:	003ff006 	br	200e274 <_signal_r+0x58>
 200e2b4:	00ffffc4 	movi	r3,-1
 200e2b8:	003fe506 	br	200e250 <_signal_r+0x34>

0200e2bc <signal>:
 200e2bc:	018080b4 	movhi	r6,514
 200e2c0:	31b6fa04 	addi	r6,r6,-9240
 200e2c4:	2007883a 	mov	r3,r4
 200e2c8:	31000017 	ldw	r4,0(r6)
 200e2cc:	280d883a 	mov	r6,r5
 200e2d0:	180b883a 	mov	r5,r3
 200e2d4:	200e21c1 	jmpi	200e21c <_signal_r>

0200e2d8 <_getpid_r>:
 200e2d8:	201773c1 	jmpi	201773c <getpid>

0200e2dc <_kill_r>:
 200e2dc:	defffd04 	addi	sp,sp,-12
 200e2e0:	dc000015 	stw	r16,0(sp)
 200e2e4:	040080b4 	movhi	r16,514
 200e2e8:	843dfd04 	addi	r16,r16,-2060
 200e2ec:	dc400115 	stw	r17,4(sp)
 200e2f0:	80000015 	stw	zero,0(r16)
 200e2f4:	2023883a 	mov	r17,r4
 200e2f8:	2809883a 	mov	r4,r5
 200e2fc:	300b883a 	mov	r5,r6
 200e300:	dfc00215 	stw	ra,8(sp)
 200e304:	20178800 	call	2017880 <kill>
 200e308:	1007883a 	mov	r3,r2
 200e30c:	00bfffc4 	movi	r2,-1
 200e310:	18800626 	beq	r3,r2,200e32c <_kill_r+0x50>
 200e314:	1805883a 	mov	r2,r3
 200e318:	dfc00217 	ldw	ra,8(sp)
 200e31c:	dc400117 	ldw	r17,4(sp)
 200e320:	dc000017 	ldw	r16,0(sp)
 200e324:	dec00304 	addi	sp,sp,12
 200e328:	f800283a 	ret
 200e32c:	80800017 	ldw	r2,0(r16)
 200e330:	103ff826 	beq	r2,zero,200e314 <_kill_r+0x38>
 200e334:	88800015 	stw	r2,0(r17)
 200e338:	1805883a 	mov	r2,r3
 200e33c:	dfc00217 	ldw	ra,8(sp)
 200e340:	dc400117 	ldw	r17,4(sp)
 200e344:	dc000017 	ldw	r16,0(sp)
 200e348:	dec00304 	addi	sp,sp,12
 200e34c:	f800283a 	ret

0200e350 <strlen>:
 200e350:	208000cc 	andi	r2,r4,3
 200e354:	2011883a 	mov	r8,r4
 200e358:	1000161e 	bne	r2,zero,200e3b4 <strlen+0x64>
 200e35c:	20c00017 	ldw	r3,0(r4)
 200e360:	017fbff4 	movhi	r5,65279
 200e364:	297fbfc4 	addi	r5,r5,-257
 200e368:	01e02074 	movhi	r7,32897
 200e36c:	39e02004 	addi	r7,r7,-32640
 200e370:	1945883a 	add	r2,r3,r5
 200e374:	11c4703a 	and	r2,r2,r7
 200e378:	00c6303a 	nor	r3,zero,r3
 200e37c:	1886703a 	and	r3,r3,r2
 200e380:	18000c1e 	bne	r3,zero,200e3b4 <strlen+0x64>
 200e384:	280d883a 	mov	r6,r5
 200e388:	380b883a 	mov	r5,r7
 200e38c:	21000104 	addi	r4,r4,4
 200e390:	20800017 	ldw	r2,0(r4)
 200e394:	1187883a 	add	r3,r2,r6
 200e398:	1946703a 	and	r3,r3,r5
 200e39c:	0084303a 	nor	r2,zero,r2
 200e3a0:	10c4703a 	and	r2,r2,r3
 200e3a4:	103ff926 	beq	r2,zero,200e38c <strlen+0x3c>
 200e3a8:	20800007 	ldb	r2,0(r4)
 200e3ac:	10000326 	beq	r2,zero,200e3bc <strlen+0x6c>
 200e3b0:	21000044 	addi	r4,r4,1
 200e3b4:	20800007 	ldb	r2,0(r4)
 200e3b8:	103ffd1e 	bne	r2,zero,200e3b0 <strlen+0x60>
 200e3bc:	2205c83a 	sub	r2,r4,r8
 200e3c0:	f800283a 	ret

0200e3c4 <__sprint_r>:
 200e3c4:	30800217 	ldw	r2,8(r6)
 200e3c8:	defffe04 	addi	sp,sp,-8
 200e3cc:	dc000015 	stw	r16,0(sp)
 200e3d0:	dfc00115 	stw	ra,4(sp)
 200e3d4:	3021883a 	mov	r16,r6
 200e3d8:	0007883a 	mov	r3,zero
 200e3dc:	1000061e 	bne	r2,zero,200e3f8 <__sprint_r+0x34>
 200e3e0:	1805883a 	mov	r2,r3
 200e3e4:	30000115 	stw	zero,4(r6)
 200e3e8:	dfc00117 	ldw	ra,4(sp)
 200e3ec:	dc000017 	ldw	r16,0(sp)
 200e3f0:	dec00204 	addi	sp,sp,8
 200e3f4:	f800283a 	ret
 200e3f8:	201259c0 	call	201259c <__sfvwrite_r>
 200e3fc:	1007883a 	mov	r3,r2
 200e400:	1805883a 	mov	r2,r3
 200e404:	80000115 	stw	zero,4(r16)
 200e408:	80000215 	stw	zero,8(r16)
 200e40c:	dfc00117 	ldw	ra,4(sp)
 200e410:	dc000017 	ldw	r16,0(sp)
 200e414:	dec00204 	addi	sp,sp,8
 200e418:	f800283a 	ret

0200e41c <___vfprintf_internal_r>:
 200e41c:	defea404 	addi	sp,sp,-1392
 200e420:	dd815815 	stw	r22,1376(sp)
 200e424:	dc015215 	stw	r16,1352(sp)
 200e428:	d9c15115 	stw	r7,1348(sp)
 200e42c:	dfc15b15 	stw	ra,1388(sp)
 200e430:	df015a15 	stw	fp,1384(sp)
 200e434:	ddc15915 	stw	r23,1380(sp)
 200e438:	dd415715 	stw	r21,1372(sp)
 200e43c:	dd015615 	stw	r20,1368(sp)
 200e440:	dcc15515 	stw	r19,1364(sp)
 200e444:	dc815415 	stw	r18,1360(sp)
 200e448:	dc415315 	stw	r17,1356(sp)
 200e44c:	282d883a 	mov	r22,r5
 200e450:	3021883a 	mov	r16,r6
 200e454:	d9014f15 	stw	r4,1340(sp)
 200e458:	2012bc00 	call	2012bc0 <_localeconv_r>
 200e45c:	10800017 	ldw	r2,0(r2)
 200e460:	d9c15117 	ldw	r7,1348(sp)
 200e464:	d8814915 	stw	r2,1316(sp)
 200e468:	d8814f17 	ldw	r2,1340(sp)
 200e46c:	10000226 	beq	r2,zero,200e478 <___vfprintf_internal_r+0x5c>
 200e470:	10800e17 	ldw	r2,56(r2)
 200e474:	10020d26 	beq	r2,zero,200ecac <___vfprintf_internal_r+0x890>
 200e478:	b080030b 	ldhu	r2,12(r22)
 200e47c:	1080020c 	andi	r2,r2,8
 200e480:	10020e26 	beq	r2,zero,200ecbc <___vfprintf_internal_r+0x8a0>
 200e484:	b0800417 	ldw	r2,16(r22)
 200e488:	10020c26 	beq	r2,zero,200ecbc <___vfprintf_internal_r+0x8a0>
 200e48c:	b200030b 	ldhu	r8,12(r22)
 200e490:	00800284 	movi	r2,10
 200e494:	40c0068c 	andi	r3,r8,26
 200e498:	18802f1e 	bne	r3,r2,200e558 <___vfprintf_internal_r+0x13c>
 200e49c:	b080038f 	ldh	r2,14(r22)
 200e4a0:	10002d16 	blt	r2,zero,200e558 <___vfprintf_internal_r+0x13c>
 200e4a4:	b240038b 	ldhu	r9,14(r22)
 200e4a8:	b2800717 	ldw	r10,28(r22)
 200e4ac:	b2c00917 	ldw	r11,36(r22)
 200e4b0:	d9014f17 	ldw	r4,1340(sp)
 200e4b4:	dc402904 	addi	r17,sp,164
 200e4b8:	d8804004 	addi	r2,sp,256
 200e4bc:	00c10004 	movi	r3,1024
 200e4c0:	423fff4c 	andi	r8,r8,65533
 200e4c4:	800d883a 	mov	r6,r16
 200e4c8:	880b883a 	mov	r5,r17
 200e4cc:	da002c0d 	sth	r8,176(sp)
 200e4d0:	da402c8d 	sth	r9,178(sp)
 200e4d4:	da803015 	stw	r10,192(sp)
 200e4d8:	dac03215 	stw	r11,200(sp)
 200e4dc:	d8802d15 	stw	r2,180(sp)
 200e4e0:	d8c02e15 	stw	r3,184(sp)
 200e4e4:	d8802915 	stw	r2,164(sp)
 200e4e8:	d8c02b15 	stw	r3,172(sp)
 200e4ec:	d8002f15 	stw	zero,188(sp)
 200e4f0:	200e41c0 	call	200e41c <___vfprintf_internal_r>
 200e4f4:	d8814b15 	stw	r2,1324(sp)
 200e4f8:	10000416 	blt	r2,zero,200e50c <___vfprintf_internal_r+0xf0>
 200e4fc:	d9014f17 	ldw	r4,1340(sp)
 200e500:	880b883a 	mov	r5,r17
 200e504:	2011c380 	call	2011c38 <_fflush_r>
 200e508:	1002321e 	bne	r2,zero,200edd4 <___vfprintf_internal_r+0x9b8>
 200e50c:	d8802c0b 	ldhu	r2,176(sp)
 200e510:	1080100c 	andi	r2,r2,64
 200e514:	10000326 	beq	r2,zero,200e524 <___vfprintf_internal_r+0x108>
 200e518:	b080030b 	ldhu	r2,12(r22)
 200e51c:	10801014 	ori	r2,r2,64
 200e520:	b080030d 	sth	r2,12(r22)
 200e524:	d8814b17 	ldw	r2,1324(sp)
 200e528:	dfc15b17 	ldw	ra,1388(sp)
 200e52c:	df015a17 	ldw	fp,1384(sp)
 200e530:	ddc15917 	ldw	r23,1380(sp)
 200e534:	dd815817 	ldw	r22,1376(sp)
 200e538:	dd415717 	ldw	r21,1372(sp)
 200e53c:	dd015617 	ldw	r20,1368(sp)
 200e540:	dcc15517 	ldw	r19,1364(sp)
 200e544:	dc815417 	ldw	r18,1360(sp)
 200e548:	dc415317 	ldw	r17,1356(sp)
 200e54c:	dc015217 	ldw	r16,1352(sp)
 200e550:	dec15c04 	addi	sp,sp,1392
 200e554:	f800283a 	ret
 200e558:	0005883a 	mov	r2,zero
 200e55c:	0007883a 	mov	r3,zero
 200e560:	dd401904 	addi	r21,sp,100
 200e564:	d8814215 	stw	r2,1288(sp)
 200e568:	802f883a 	mov	r23,r16
 200e56c:	d8c14315 	stw	r3,1292(sp)
 200e570:	d8014b15 	stw	zero,1324(sp)
 200e574:	d8014815 	stw	zero,1312(sp)
 200e578:	d8014415 	stw	zero,1296(sp)
 200e57c:	d8014715 	stw	zero,1308(sp)
 200e580:	dd400c15 	stw	r21,48(sp)
 200e584:	d8000e15 	stw	zero,56(sp)
 200e588:	d8000d15 	stw	zero,52(sp)
 200e58c:	b8800007 	ldb	r2,0(r23)
 200e590:	10001926 	beq	r2,zero,200e5f8 <___vfprintf_internal_r+0x1dc>
 200e594:	00c00944 	movi	r3,37
 200e598:	10c01726 	beq	r2,r3,200e5f8 <___vfprintf_internal_r+0x1dc>
 200e59c:	b821883a 	mov	r16,r23
 200e5a0:	00000106 	br	200e5a8 <___vfprintf_internal_r+0x18c>
 200e5a4:	10c00326 	beq	r2,r3,200e5b4 <___vfprintf_internal_r+0x198>
 200e5a8:	84000044 	addi	r16,r16,1
 200e5ac:	80800007 	ldb	r2,0(r16)
 200e5b0:	103ffc1e 	bne	r2,zero,200e5a4 <___vfprintf_internal_r+0x188>
 200e5b4:	85e7c83a 	sub	r19,r16,r23
 200e5b8:	98000e26 	beq	r19,zero,200e5f4 <___vfprintf_internal_r+0x1d8>
 200e5bc:	dc800e17 	ldw	r18,56(sp)
 200e5c0:	dc400d17 	ldw	r17,52(sp)
 200e5c4:	008001c4 	movi	r2,7
 200e5c8:	94e5883a 	add	r18,r18,r19
 200e5cc:	8c400044 	addi	r17,r17,1
 200e5d0:	adc00015 	stw	r23,0(r21)
 200e5d4:	dc800e15 	stw	r18,56(sp)
 200e5d8:	acc00115 	stw	r19,4(r21)
 200e5dc:	dc400d15 	stw	r17,52(sp)
 200e5e0:	14428b16 	blt	r2,r17,200f010 <___vfprintf_internal_r+0xbf4>
 200e5e4:	ad400204 	addi	r21,r21,8
 200e5e8:	d9014b17 	ldw	r4,1324(sp)
 200e5ec:	24c9883a 	add	r4,r4,r19
 200e5f0:	d9014b15 	stw	r4,1324(sp)
 200e5f4:	802f883a 	mov	r23,r16
 200e5f8:	b8800007 	ldb	r2,0(r23)
 200e5fc:	10013c26 	beq	r2,zero,200eaf0 <___vfprintf_internal_r+0x6d4>
 200e600:	bdc00044 	addi	r23,r23,1
 200e604:	d8000405 	stb	zero,16(sp)
 200e608:	b8c00007 	ldb	r3,0(r23)
 200e60c:	04ffffc4 	movi	r19,-1
 200e610:	d8014c15 	stw	zero,1328(sp)
 200e614:	d8014a15 	stw	zero,1320(sp)
 200e618:	d8c14d15 	stw	r3,1332(sp)
 200e61c:	bdc00044 	addi	r23,r23,1
 200e620:	d9414d17 	ldw	r5,1332(sp)
 200e624:	00801604 	movi	r2,88
 200e628:	28fff804 	addi	r3,r5,-32
 200e62c:	10c06036 	bltu	r2,r3,200e7b0 <___vfprintf_internal_r+0x394>
 200e630:	18c5883a 	add	r2,r3,r3
 200e634:	1085883a 	add	r2,r2,r2
 200e638:	00c08074 	movhi	r3,513
 200e63c:	18f99304 	addi	r3,r3,-6580
 200e640:	10c5883a 	add	r2,r2,r3
 200e644:	11000017 	ldw	r4,0(r2)
 200e648:	2000683a 	jmp	r4
 200e64c:	0200f5c0 	call	200f5c <__reset-0x1dff0a4>
 200e650:	0200e7b0 	cmpltui	r8,zero,926
 200e654:	0200e7b0 	cmpltui	r8,zero,926
 200e658:	0200f5ac 	andhi	r8,zero,982
 200e65c:	0200e7b0 	cmpltui	r8,zero,926
 200e660:	0200e7b0 	cmpltui	r8,zero,926
 200e664:	0200e7b0 	cmpltui	r8,zero,926
 200e668:	0200e7b0 	cmpltui	r8,zero,926
 200e66c:	0200e7b0 	cmpltui	r8,zero,926
 200e670:	0200e7b0 	cmpltui	r8,zero,926
 200e674:	0200f38c 	andi	r8,zero,974
 200e678:	0200f59c 	xori	r8,zero,982
 200e67c:	0200e7b0 	cmpltui	r8,zero,926
 200e680:	0200f3a4 	muli	r8,zero,974
 200e684:	0200f644 	movi	r8,985
 200e688:	0200e7b0 	cmpltui	r8,zero,926
 200e68c:	0200f630 	cmpltui	r8,zero,984
 200e690:	0200f5ec 	andhi	r8,zero,983
 200e694:	0200f5ec 	andhi	r8,zero,983
 200e698:	0200f5ec 	andhi	r8,zero,983
 200e69c:	0200f5ec 	andhi	r8,zero,983
 200e6a0:	0200f5ec 	andhi	r8,zero,983
 200e6a4:	0200f5ec 	andhi	r8,zero,983
 200e6a8:	0200f5ec 	andhi	r8,zero,983
 200e6ac:	0200f5ec 	andhi	r8,zero,983
 200e6b0:	0200f5ec 	andhi	r8,zero,983
 200e6b4:	0200e7b0 	cmpltui	r8,zero,926
 200e6b8:	0200e7b0 	cmpltui	r8,zero,926
 200e6bc:	0200e7b0 	cmpltui	r8,zero,926
 200e6c0:	0200e7b0 	cmpltui	r8,zero,926
 200e6c4:	0200e7b0 	cmpltui	r8,zero,926
 200e6c8:	0200e7b0 	cmpltui	r8,zero,926
 200e6cc:	0200e7b0 	cmpltui	r8,zero,926
 200e6d0:	0200e7b0 	cmpltui	r8,zero,926
 200e6d4:	0200e7b0 	cmpltui	r8,zero,926
 200e6d8:	0200e7b0 	cmpltui	r8,zero,926
 200e6dc:	0200ee08 	cmpgei	r8,zero,952
 200e6e0:	0200f474 	movhi	r8,977
 200e6e4:	0200e7b0 	cmpltui	r8,zero,926
 200e6e8:	0200f474 	movhi	r8,977
 200e6ec:	0200e7b0 	cmpltui	r8,zero,926
 200e6f0:	0200e7b0 	cmpltui	r8,zero,926
 200e6f4:	0200e7b0 	cmpltui	r8,zero,926
 200e6f8:	0200e7b0 	cmpltui	r8,zero,926
 200e6fc:	0200f5d8 	cmpnei	r8,zero,983
 200e700:	0200e7b0 	cmpltui	r8,zero,926
 200e704:	0200e7b0 	cmpltui	r8,zero,926
 200e708:	0200eebc 	xorhi	r8,zero,954
 200e70c:	0200e7b0 	cmpltui	r8,zero,926
 200e710:	0200e7b0 	cmpltui	r8,zero,926
 200e714:	0200e7b0 	cmpltui	r8,zero,926
 200e718:	0200e7b0 	cmpltui	r8,zero,926
 200e71c:	0200e7b0 	cmpltui	r8,zero,926
 200e720:	0200ef08 	cmpgei	r8,zero,956
 200e724:	0200e7b0 	cmpltui	r8,zero,926
 200e728:	0200e7b0 	cmpltui	r8,zero,926
 200e72c:	0200f528 	cmpgeui	r8,zero,980
 200e730:	0200e7b0 	cmpltui	r8,zero,926
 200e734:	0200e7b0 	cmpltui	r8,zero,926
 200e738:	0200e7b0 	cmpltui	r8,zero,926
 200e73c:	0200e7b0 	cmpltui	r8,zero,926
 200e740:	0200e7b0 	cmpltui	r8,zero,926
 200e744:	0200e7b0 	cmpltui	r8,zero,926
 200e748:	0200e7b0 	cmpltui	r8,zero,926
 200e74c:	0200e7b0 	cmpltui	r8,zero,926
 200e750:	0200e7b0 	cmpltui	r8,zero,926
 200e754:	0200e7b0 	cmpltui	r8,zero,926
 200e758:	0200f4fc 	xorhi	r8,zero,979
 200e75c:	0200ee14 	movui	r8,952
 200e760:	0200f474 	movhi	r8,977
 200e764:	0200f474 	movhi	r8,977
 200e768:	0200f474 	movhi	r8,977
 200e76c:	0200f460 	cmpeqi	r8,zero,977
 200e770:	0200ee14 	movui	r8,952
 200e774:	0200e7b0 	cmpltui	r8,zero,926
 200e778:	0200e7b0 	cmpltui	r8,zero,926
 200e77c:	0200f3e8 	cmpgeui	r8,zero,975
 200e780:	0200e7b0 	cmpltui	r8,zero,926
 200e784:	0200f3b8 	rdprs	r8,zero,974
 200e788:	0200eec8 	cmpgei	r8,zero,955
 200e78c:	0200f418 	cmpnei	r8,zero,976
 200e790:	0200f404 	movi	r8,976
 200e794:	0200e7b0 	cmpltui	r8,zero,926
 200e798:	0200f6ac 	andhi	r8,zero,986
 200e79c:	0200e7b0 	cmpltui	r8,zero,926
 200e7a0:	0200ef14 	movui	r8,956
 200e7a4:	0200e7b0 	cmpltui	r8,zero,926
 200e7a8:	0200e7b0 	cmpltui	r8,zero,926
 200e7ac:	0200f58c 	andi	r8,zero,982
 200e7b0:	d9014d17 	ldw	r4,1332(sp)
 200e7b4:	2000ce26 	beq	r4,zero,200eaf0 <___vfprintf_internal_r+0x6d4>
 200e7b8:	01400044 	movi	r5,1
 200e7bc:	d9800f04 	addi	r6,sp,60
 200e7c0:	d9c14015 	stw	r7,1280(sp)
 200e7c4:	d9414515 	stw	r5,1300(sp)
 200e7c8:	d9814115 	stw	r6,1284(sp)
 200e7cc:	280f883a 	mov	r7,r5
 200e7d0:	d9000f05 	stb	r4,60(sp)
 200e7d4:	d8000405 	stb	zero,16(sp)
 200e7d8:	d8014615 	stw	zero,1304(sp)
 200e7dc:	d8c14c17 	ldw	r3,1328(sp)
 200e7e0:	1880008c 	andi	r2,r3,2
 200e7e4:	1005003a 	cmpeq	r2,r2,zero
 200e7e8:	d8815015 	stw	r2,1344(sp)
 200e7ec:	1000031e 	bne	r2,zero,200e7fc <___vfprintf_internal_r+0x3e0>
 200e7f0:	d9014517 	ldw	r4,1300(sp)
 200e7f4:	21000084 	addi	r4,r4,2
 200e7f8:	d9014515 	stw	r4,1300(sp)
 200e7fc:	d9414c17 	ldw	r5,1328(sp)
 200e800:	2940210c 	andi	r5,r5,132
 200e804:	d9414e15 	stw	r5,1336(sp)
 200e808:	28002d1e 	bne	r5,zero,200e8c0 <___vfprintf_internal_r+0x4a4>
 200e80c:	d9814a17 	ldw	r6,1320(sp)
 200e810:	d8814517 	ldw	r2,1300(sp)
 200e814:	30a1c83a 	sub	r16,r6,r2
 200e818:	0400290e 	bge	zero,r16,200e8c0 <___vfprintf_internal_r+0x4a4>
 200e81c:	00800404 	movi	r2,16
 200e820:	14045e0e 	bge	r2,r16,200f99c <___vfprintf_internal_r+0x1580>
 200e824:	dc800e17 	ldw	r18,56(sp)
 200e828:	dc400d17 	ldw	r17,52(sp)
 200e82c:	1027883a 	mov	r19,r2
 200e830:	070080b4 	movhi	fp,514
 200e834:	e72faf84 	addi	fp,fp,-16706
 200e838:	050001c4 	movi	r20,7
 200e83c:	00000306 	br	200e84c <___vfprintf_internal_r+0x430>
 200e840:	843ffc04 	addi	r16,r16,-16
 200e844:	ad400204 	addi	r21,r21,8
 200e848:	9c00130e 	bge	r19,r16,200e898 <___vfprintf_internal_r+0x47c>
 200e84c:	94800404 	addi	r18,r18,16
 200e850:	8c400044 	addi	r17,r17,1
 200e854:	af000015 	stw	fp,0(r21)
 200e858:	acc00115 	stw	r19,4(r21)
 200e85c:	dc800e15 	stw	r18,56(sp)
 200e860:	dc400d15 	stw	r17,52(sp)
 200e864:	a47ff60e 	bge	r20,r17,200e840 <___vfprintf_internal_r+0x424>
 200e868:	d9014f17 	ldw	r4,1340(sp)
 200e86c:	b00b883a 	mov	r5,r22
 200e870:	d9800c04 	addi	r6,sp,48
 200e874:	d9c15115 	stw	r7,1348(sp)
 200e878:	200e3c40 	call	200e3c4 <__sprint_r>
 200e87c:	d9c15117 	ldw	r7,1348(sp)
 200e880:	10009e1e 	bne	r2,zero,200eafc <___vfprintf_internal_r+0x6e0>
 200e884:	843ffc04 	addi	r16,r16,-16
 200e888:	dc800e17 	ldw	r18,56(sp)
 200e88c:	dc400d17 	ldw	r17,52(sp)
 200e890:	dd401904 	addi	r21,sp,100
 200e894:	9c3fed16 	blt	r19,r16,200e84c <___vfprintf_internal_r+0x430>
 200e898:	9425883a 	add	r18,r18,r16
 200e89c:	8c400044 	addi	r17,r17,1
 200e8a0:	008001c4 	movi	r2,7
 200e8a4:	af000015 	stw	fp,0(r21)
 200e8a8:	ac000115 	stw	r16,4(r21)
 200e8ac:	dc800e15 	stw	r18,56(sp)
 200e8b0:	dc400d15 	stw	r17,52(sp)
 200e8b4:	1441f516 	blt	r2,r17,200f08c <___vfprintf_internal_r+0xc70>
 200e8b8:	ad400204 	addi	r21,r21,8
 200e8bc:	00000206 	br	200e8c8 <___vfprintf_internal_r+0x4ac>
 200e8c0:	dc800e17 	ldw	r18,56(sp)
 200e8c4:	dc400d17 	ldw	r17,52(sp)
 200e8c8:	d8800407 	ldb	r2,16(sp)
 200e8cc:	10000b26 	beq	r2,zero,200e8fc <___vfprintf_internal_r+0x4e0>
 200e8d0:	00800044 	movi	r2,1
 200e8d4:	94800044 	addi	r18,r18,1
 200e8d8:	8c400044 	addi	r17,r17,1
 200e8dc:	a8800115 	stw	r2,4(r21)
 200e8e0:	d8c00404 	addi	r3,sp,16
 200e8e4:	008001c4 	movi	r2,7
 200e8e8:	a8c00015 	stw	r3,0(r21)
 200e8ec:	dc800e15 	stw	r18,56(sp)
 200e8f0:	dc400d15 	stw	r17,52(sp)
 200e8f4:	1441da16 	blt	r2,r17,200f060 <___vfprintf_internal_r+0xc44>
 200e8f8:	ad400204 	addi	r21,r21,8
 200e8fc:	d9015017 	ldw	r4,1344(sp)
 200e900:	20000b1e 	bne	r4,zero,200e930 <___vfprintf_internal_r+0x514>
 200e904:	d8800444 	addi	r2,sp,17
 200e908:	94800084 	addi	r18,r18,2
 200e90c:	8c400044 	addi	r17,r17,1
 200e910:	a8800015 	stw	r2,0(r21)
 200e914:	00c00084 	movi	r3,2
 200e918:	008001c4 	movi	r2,7
 200e91c:	a8c00115 	stw	r3,4(r21)
 200e920:	dc800e15 	stw	r18,56(sp)
 200e924:	dc400d15 	stw	r17,52(sp)
 200e928:	1441c216 	blt	r2,r17,200f034 <___vfprintf_internal_r+0xc18>
 200e92c:	ad400204 	addi	r21,r21,8
 200e930:	d9414e17 	ldw	r5,1336(sp)
 200e934:	00802004 	movi	r2,128
 200e938:	2880b126 	beq	r5,r2,200ec00 <___vfprintf_internal_r+0x7e4>
 200e93c:	d8c14617 	ldw	r3,1304(sp)
 200e940:	19e1c83a 	sub	r16,r3,r7
 200e944:	0400260e 	bge	zero,r16,200e9e0 <___vfprintf_internal_r+0x5c4>
 200e948:	00800404 	movi	r2,16
 200e94c:	1403cf0e 	bge	r2,r16,200f88c <___vfprintf_internal_r+0x1470>
 200e950:	1027883a 	mov	r19,r2
 200e954:	070080b4 	movhi	fp,514
 200e958:	e72fab84 	addi	fp,fp,-16722
 200e95c:	050001c4 	movi	r20,7
 200e960:	00000306 	br	200e970 <___vfprintf_internal_r+0x554>
 200e964:	843ffc04 	addi	r16,r16,-16
 200e968:	ad400204 	addi	r21,r21,8
 200e96c:	9c00130e 	bge	r19,r16,200e9bc <___vfprintf_internal_r+0x5a0>
 200e970:	94800404 	addi	r18,r18,16
 200e974:	8c400044 	addi	r17,r17,1
 200e978:	af000015 	stw	fp,0(r21)
 200e97c:	acc00115 	stw	r19,4(r21)
 200e980:	dc800e15 	stw	r18,56(sp)
 200e984:	dc400d15 	stw	r17,52(sp)
 200e988:	a47ff60e 	bge	r20,r17,200e964 <___vfprintf_internal_r+0x548>
 200e98c:	d9014f17 	ldw	r4,1340(sp)
 200e990:	b00b883a 	mov	r5,r22
 200e994:	d9800c04 	addi	r6,sp,48
 200e998:	d9c15115 	stw	r7,1348(sp)
 200e99c:	200e3c40 	call	200e3c4 <__sprint_r>
 200e9a0:	d9c15117 	ldw	r7,1348(sp)
 200e9a4:	1000551e 	bne	r2,zero,200eafc <___vfprintf_internal_r+0x6e0>
 200e9a8:	843ffc04 	addi	r16,r16,-16
 200e9ac:	dc800e17 	ldw	r18,56(sp)
 200e9b0:	dc400d17 	ldw	r17,52(sp)
 200e9b4:	dd401904 	addi	r21,sp,100
 200e9b8:	9c3fed16 	blt	r19,r16,200e970 <___vfprintf_internal_r+0x554>
 200e9bc:	9425883a 	add	r18,r18,r16
 200e9c0:	8c400044 	addi	r17,r17,1
 200e9c4:	008001c4 	movi	r2,7
 200e9c8:	af000015 	stw	fp,0(r21)
 200e9cc:	ac000115 	stw	r16,4(r21)
 200e9d0:	dc800e15 	stw	r18,56(sp)
 200e9d4:	dc400d15 	stw	r17,52(sp)
 200e9d8:	14418216 	blt	r2,r17,200efe4 <___vfprintf_internal_r+0xbc8>
 200e9dc:	ad400204 	addi	r21,r21,8
 200e9e0:	d9014c17 	ldw	r4,1328(sp)
 200e9e4:	2080400c 	andi	r2,r4,256
 200e9e8:	10004a1e 	bne	r2,zero,200eb14 <___vfprintf_internal_r+0x6f8>
 200e9ec:	d9414117 	ldw	r5,1284(sp)
 200e9f0:	91e5883a 	add	r18,r18,r7
 200e9f4:	8c400044 	addi	r17,r17,1
 200e9f8:	008001c4 	movi	r2,7
 200e9fc:	a9400015 	stw	r5,0(r21)
 200ea00:	a9c00115 	stw	r7,4(r21)
 200ea04:	dc800e15 	stw	r18,56(sp)
 200ea08:	dc400d15 	stw	r17,52(sp)
 200ea0c:	14416716 	blt	r2,r17,200efac <___vfprintf_internal_r+0xb90>
 200ea10:	a8c00204 	addi	r3,r21,8
 200ea14:	d9814c17 	ldw	r6,1328(sp)
 200ea18:	3080010c 	andi	r2,r6,4
 200ea1c:	10002826 	beq	r2,zero,200eac0 <___vfprintf_internal_r+0x6a4>
 200ea20:	d8814a17 	ldw	r2,1320(sp)
 200ea24:	d9014517 	ldw	r4,1300(sp)
 200ea28:	1121c83a 	sub	r16,r2,r4
 200ea2c:	0400240e 	bge	zero,r16,200eac0 <___vfprintf_internal_r+0x6a4>
 200ea30:	00800404 	movi	r2,16
 200ea34:	1404550e 	bge	r2,r16,200fb8c <___vfprintf_internal_r+0x1770>
 200ea38:	dc400d17 	ldw	r17,52(sp)
 200ea3c:	1027883a 	mov	r19,r2
 200ea40:	070080b4 	movhi	fp,514
 200ea44:	e72faf84 	addi	fp,fp,-16706
 200ea48:	050001c4 	movi	r20,7
 200ea4c:	00000306 	br	200ea5c <___vfprintf_internal_r+0x640>
 200ea50:	843ffc04 	addi	r16,r16,-16
 200ea54:	18c00204 	addi	r3,r3,8
 200ea58:	9c00110e 	bge	r19,r16,200eaa0 <___vfprintf_internal_r+0x684>
 200ea5c:	94800404 	addi	r18,r18,16
 200ea60:	8c400044 	addi	r17,r17,1
 200ea64:	1f000015 	stw	fp,0(r3)
 200ea68:	1cc00115 	stw	r19,4(r3)
 200ea6c:	dc800e15 	stw	r18,56(sp)
 200ea70:	dc400d15 	stw	r17,52(sp)
 200ea74:	a47ff60e 	bge	r20,r17,200ea50 <___vfprintf_internal_r+0x634>
 200ea78:	d9014f17 	ldw	r4,1340(sp)
 200ea7c:	b00b883a 	mov	r5,r22
 200ea80:	d9800c04 	addi	r6,sp,48
 200ea84:	200e3c40 	call	200e3c4 <__sprint_r>
 200ea88:	10001c1e 	bne	r2,zero,200eafc <___vfprintf_internal_r+0x6e0>
 200ea8c:	843ffc04 	addi	r16,r16,-16
 200ea90:	dc800e17 	ldw	r18,56(sp)
 200ea94:	dc400d17 	ldw	r17,52(sp)
 200ea98:	d8c01904 	addi	r3,sp,100
 200ea9c:	9c3fef16 	blt	r19,r16,200ea5c <___vfprintf_internal_r+0x640>
 200eaa0:	9425883a 	add	r18,r18,r16
 200eaa4:	8c400044 	addi	r17,r17,1
 200eaa8:	008001c4 	movi	r2,7
 200eaac:	1f000015 	stw	fp,0(r3)
 200eab0:	1c000115 	stw	r16,4(r3)
 200eab4:	dc800e15 	stw	r18,56(sp)
 200eab8:	dc400d15 	stw	r17,52(sp)
 200eabc:	1440cb16 	blt	r2,r17,200edec <___vfprintf_internal_r+0x9d0>
 200eac0:	d8814a17 	ldw	r2,1320(sp)
 200eac4:	d9414517 	ldw	r5,1300(sp)
 200eac8:	1140010e 	bge	r2,r5,200ead0 <___vfprintf_internal_r+0x6b4>
 200eacc:	2805883a 	mov	r2,r5
 200ead0:	d9814b17 	ldw	r6,1324(sp)
 200ead4:	308d883a 	add	r6,r6,r2
 200ead8:	d9814b15 	stw	r6,1324(sp)
 200eadc:	90013b1e 	bne	r18,zero,200efcc <___vfprintf_internal_r+0xbb0>
 200eae0:	d9c14017 	ldw	r7,1280(sp)
 200eae4:	dd401904 	addi	r21,sp,100
 200eae8:	d8000d15 	stw	zero,52(sp)
 200eaec:	003ea706 	br	200e58c <___vfprintf_internal_r+0x170>
 200eaf0:	d8800e17 	ldw	r2,56(sp)
 200eaf4:	1005451e 	bne	r2,zero,201000c <___vfprintf_internal_r+0x1bf0>
 200eaf8:	d8000d15 	stw	zero,52(sp)
 200eafc:	b080030b 	ldhu	r2,12(r22)
 200eb00:	1080100c 	andi	r2,r2,64
 200eb04:	103e8726 	beq	r2,zero,200e524 <___vfprintf_internal_r+0x108>
 200eb08:	00bfffc4 	movi	r2,-1
 200eb0c:	d8814b15 	stw	r2,1324(sp)
 200eb10:	003e8406 	br	200e524 <___vfprintf_internal_r+0x108>
 200eb14:	d9814d17 	ldw	r6,1332(sp)
 200eb18:	00801944 	movi	r2,101
 200eb1c:	11806e16 	blt	r2,r6,200ecd8 <___vfprintf_internal_r+0x8bc>
 200eb20:	d9414717 	ldw	r5,1308(sp)
 200eb24:	00c00044 	movi	r3,1
 200eb28:	1943490e 	bge	r3,r5,200f850 <___vfprintf_internal_r+0x1434>
 200eb2c:	d8814117 	ldw	r2,1284(sp)
 200eb30:	94800044 	addi	r18,r18,1
 200eb34:	8c400044 	addi	r17,r17,1
 200eb38:	a8800015 	stw	r2,0(r21)
 200eb3c:	008001c4 	movi	r2,7
 200eb40:	a8c00115 	stw	r3,4(r21)
 200eb44:	dc800e15 	stw	r18,56(sp)
 200eb48:	dc400d15 	stw	r17,52(sp)
 200eb4c:	1441ca16 	blt	r2,r17,200f278 <___vfprintf_internal_r+0xe5c>
 200eb50:	a8c00204 	addi	r3,r21,8
 200eb54:	d9014917 	ldw	r4,1316(sp)
 200eb58:	00800044 	movi	r2,1
 200eb5c:	94800044 	addi	r18,r18,1
 200eb60:	8c400044 	addi	r17,r17,1
 200eb64:	18800115 	stw	r2,4(r3)
 200eb68:	008001c4 	movi	r2,7
 200eb6c:	19000015 	stw	r4,0(r3)
 200eb70:	dc800e15 	stw	r18,56(sp)
 200eb74:	dc400d15 	stw	r17,52(sp)
 200eb78:	1441b616 	blt	r2,r17,200f254 <___vfprintf_internal_r+0xe38>
 200eb7c:	1cc00204 	addi	r19,r3,8
 200eb80:	d9014217 	ldw	r4,1288(sp)
 200eb84:	d9414317 	ldw	r5,1292(sp)
 200eb88:	000d883a 	mov	r6,zero
 200eb8c:	000f883a 	mov	r7,zero
 200eb90:	20166880 	call	2016688 <__nedf2>
 200eb94:	10017426 	beq	r2,zero,200f168 <___vfprintf_internal_r+0xd4c>
 200eb98:	d9414717 	ldw	r5,1308(sp)
 200eb9c:	d9814117 	ldw	r6,1284(sp)
 200eba0:	8c400044 	addi	r17,r17,1
 200eba4:	2c85883a 	add	r2,r5,r18
 200eba8:	14bfffc4 	addi	r18,r2,-1
 200ebac:	28bfffc4 	addi	r2,r5,-1
 200ebb0:	30c00044 	addi	r3,r6,1
 200ebb4:	98800115 	stw	r2,4(r19)
 200ebb8:	008001c4 	movi	r2,7
 200ebbc:	98c00015 	stw	r3,0(r19)
 200ebc0:	dc800e15 	stw	r18,56(sp)
 200ebc4:	dc400d15 	stw	r17,52(sp)
 200ebc8:	14418e16 	blt	r2,r17,200f204 <___vfprintf_internal_r+0xde8>
 200ebcc:	9cc00204 	addi	r19,r19,8
 200ebd0:	d9414817 	ldw	r5,1312(sp)
 200ebd4:	d8800804 	addi	r2,sp,32
 200ebd8:	8c400044 	addi	r17,r17,1
 200ebdc:	9165883a 	add	r18,r18,r5
 200ebe0:	98800015 	stw	r2,0(r19)
 200ebe4:	008001c4 	movi	r2,7
 200ebe8:	99400115 	stw	r5,4(r19)
 200ebec:	dc800e15 	stw	r18,56(sp)
 200ebf0:	dc400d15 	stw	r17,52(sp)
 200ebf4:	1440ed16 	blt	r2,r17,200efac <___vfprintf_internal_r+0xb90>
 200ebf8:	98c00204 	addi	r3,r19,8
 200ebfc:	003f8506 	br	200ea14 <___vfprintf_internal_r+0x5f8>
 200ec00:	d9814a17 	ldw	r6,1320(sp)
 200ec04:	d8814517 	ldw	r2,1300(sp)
 200ec08:	30a1c83a 	sub	r16,r6,r2
 200ec0c:	043f4b0e 	bge	zero,r16,200e93c <___vfprintf_internal_r+0x520>
 200ec10:	00800404 	movi	r2,16
 200ec14:	14043a0e 	bge	r2,r16,200fd00 <___vfprintf_internal_r+0x18e4>
 200ec18:	1027883a 	mov	r19,r2
 200ec1c:	070080b4 	movhi	fp,514
 200ec20:	e72fab84 	addi	fp,fp,-16722
 200ec24:	050001c4 	movi	r20,7
 200ec28:	00000306 	br	200ec38 <___vfprintf_internal_r+0x81c>
 200ec2c:	843ffc04 	addi	r16,r16,-16
 200ec30:	ad400204 	addi	r21,r21,8
 200ec34:	9c00130e 	bge	r19,r16,200ec84 <___vfprintf_internal_r+0x868>
 200ec38:	94800404 	addi	r18,r18,16
 200ec3c:	8c400044 	addi	r17,r17,1
 200ec40:	af000015 	stw	fp,0(r21)
 200ec44:	acc00115 	stw	r19,4(r21)
 200ec48:	dc800e15 	stw	r18,56(sp)
 200ec4c:	dc400d15 	stw	r17,52(sp)
 200ec50:	a47ff60e 	bge	r20,r17,200ec2c <___vfprintf_internal_r+0x810>
 200ec54:	d9014f17 	ldw	r4,1340(sp)
 200ec58:	b00b883a 	mov	r5,r22
 200ec5c:	d9800c04 	addi	r6,sp,48
 200ec60:	d9c15115 	stw	r7,1348(sp)
 200ec64:	200e3c40 	call	200e3c4 <__sprint_r>
 200ec68:	d9c15117 	ldw	r7,1348(sp)
 200ec6c:	103fa31e 	bne	r2,zero,200eafc <___vfprintf_internal_r+0x6e0>
 200ec70:	843ffc04 	addi	r16,r16,-16
 200ec74:	dc800e17 	ldw	r18,56(sp)
 200ec78:	dc400d17 	ldw	r17,52(sp)
 200ec7c:	dd401904 	addi	r21,sp,100
 200ec80:	9c3fed16 	blt	r19,r16,200ec38 <___vfprintf_internal_r+0x81c>
 200ec84:	9425883a 	add	r18,r18,r16
 200ec88:	8c400044 	addi	r17,r17,1
 200ec8c:	008001c4 	movi	r2,7
 200ec90:	af000015 	stw	fp,0(r21)
 200ec94:	ac000115 	stw	r16,4(r21)
 200ec98:	dc800e15 	stw	r18,56(sp)
 200ec9c:	dc400d15 	stw	r17,52(sp)
 200eca0:	14416116 	blt	r2,r17,200f228 <___vfprintf_internal_r+0xe0c>
 200eca4:	ad400204 	addi	r21,r21,8
 200eca8:	003f2406 	br	200e93c <___vfprintf_internal_r+0x520>
 200ecac:	d9014f17 	ldw	r4,1340(sp)
 200ecb0:	2011ed00 	call	2011ed0 <__sinit>
 200ecb4:	d9c15117 	ldw	r7,1348(sp)
 200ecb8:	003def06 	br	200e478 <___vfprintf_internal_r+0x5c>
 200ecbc:	d9014f17 	ldw	r4,1340(sp)
 200ecc0:	b00b883a 	mov	r5,r22
 200ecc4:	d9c15115 	stw	r7,1348(sp)
 200ecc8:	20103040 	call	2010304 <__swsetup_r>
 200eccc:	d9c15117 	ldw	r7,1348(sp)
 200ecd0:	103dee26 	beq	r2,zero,200e48c <___vfprintf_internal_r+0x70>
 200ecd4:	003f8c06 	br	200eb08 <___vfprintf_internal_r+0x6ec>
 200ecd8:	d9014217 	ldw	r4,1288(sp)
 200ecdc:	d9414317 	ldw	r5,1292(sp)
 200ece0:	000d883a 	mov	r6,zero
 200ece4:	000f883a 	mov	r7,zero
 200ece8:	20166000 	call	2016600 <__eqdf2>
 200ecec:	1000f21e 	bne	r2,zero,200f0b8 <___vfprintf_internal_r+0xc9c>
 200ecf0:	008080b4 	movhi	r2,514
 200ecf4:	10afab04 	addi	r2,r2,-16724
 200ecf8:	94800044 	addi	r18,r18,1
 200ecfc:	8c400044 	addi	r17,r17,1
 200ed00:	a8800015 	stw	r2,0(r21)
 200ed04:	00c00044 	movi	r3,1
 200ed08:	008001c4 	movi	r2,7
 200ed0c:	a8c00115 	stw	r3,4(r21)
 200ed10:	dc800e15 	stw	r18,56(sp)
 200ed14:	dc400d15 	stw	r17,52(sp)
 200ed18:	14430016 	blt	r2,r17,200f91c <___vfprintf_internal_r+0x1500>
 200ed1c:	a8c00204 	addi	r3,r21,8
 200ed20:	d8800517 	ldw	r2,20(sp)
 200ed24:	d9014717 	ldw	r4,1308(sp)
 200ed28:	11015c0e 	bge	r2,r4,200f29c <___vfprintf_internal_r+0xe80>
 200ed2c:	dc400d17 	ldw	r17,52(sp)
 200ed30:	d9814917 	ldw	r6,1316(sp)
 200ed34:	00800044 	movi	r2,1
 200ed38:	94800044 	addi	r18,r18,1
 200ed3c:	8c400044 	addi	r17,r17,1
 200ed40:	18800115 	stw	r2,4(r3)
 200ed44:	008001c4 	movi	r2,7
 200ed48:	19800015 	stw	r6,0(r3)
 200ed4c:	dc800e15 	stw	r18,56(sp)
 200ed50:	dc400d15 	stw	r17,52(sp)
 200ed54:	14431616 	blt	r2,r17,200f9b0 <___vfprintf_internal_r+0x1594>
 200ed58:	18c00204 	addi	r3,r3,8
 200ed5c:	d8814717 	ldw	r2,1308(sp)
 200ed60:	143fffc4 	addi	r16,r2,-1
 200ed64:	043f2b0e 	bge	zero,r16,200ea14 <___vfprintf_internal_r+0x5f8>
 200ed68:	00800404 	movi	r2,16
 200ed6c:	1402a80e 	bge	r2,r16,200f810 <___vfprintf_internal_r+0x13f4>
 200ed70:	dc400d17 	ldw	r17,52(sp)
 200ed74:	1027883a 	mov	r19,r2
 200ed78:	070080b4 	movhi	fp,514
 200ed7c:	e72fab84 	addi	fp,fp,-16722
 200ed80:	050001c4 	movi	r20,7
 200ed84:	00000306 	br	200ed94 <___vfprintf_internal_r+0x978>
 200ed88:	18c00204 	addi	r3,r3,8
 200ed8c:	843ffc04 	addi	r16,r16,-16
 200ed90:	9c02a20e 	bge	r19,r16,200f81c <___vfprintf_internal_r+0x1400>
 200ed94:	94800404 	addi	r18,r18,16
 200ed98:	8c400044 	addi	r17,r17,1
 200ed9c:	1f000015 	stw	fp,0(r3)
 200eda0:	1cc00115 	stw	r19,4(r3)
 200eda4:	dc800e15 	stw	r18,56(sp)
 200eda8:	dc400d15 	stw	r17,52(sp)
 200edac:	a47ff60e 	bge	r20,r17,200ed88 <___vfprintf_internal_r+0x96c>
 200edb0:	d9014f17 	ldw	r4,1340(sp)
 200edb4:	b00b883a 	mov	r5,r22
 200edb8:	d9800c04 	addi	r6,sp,48
 200edbc:	200e3c40 	call	200e3c4 <__sprint_r>
 200edc0:	103f4e1e 	bne	r2,zero,200eafc <___vfprintf_internal_r+0x6e0>
 200edc4:	dc800e17 	ldw	r18,56(sp)
 200edc8:	dc400d17 	ldw	r17,52(sp)
 200edcc:	d8c01904 	addi	r3,sp,100
 200edd0:	003fee06 	br	200ed8c <___vfprintf_internal_r+0x970>
 200edd4:	d8802c0b 	ldhu	r2,176(sp)
 200edd8:	00ffffc4 	movi	r3,-1
 200eddc:	d8c14b15 	stw	r3,1324(sp)
 200ede0:	1080100c 	andi	r2,r2,64
 200ede4:	103dcc1e 	bne	r2,zero,200e518 <___vfprintf_internal_r+0xfc>
 200ede8:	003dce06 	br	200e524 <___vfprintf_internal_r+0x108>
 200edec:	d9014f17 	ldw	r4,1340(sp)
 200edf0:	b00b883a 	mov	r5,r22
 200edf4:	d9800c04 	addi	r6,sp,48
 200edf8:	200e3c40 	call	200e3c4 <__sprint_r>
 200edfc:	103f3f1e 	bne	r2,zero,200eafc <___vfprintf_internal_r+0x6e0>
 200ee00:	dc800e17 	ldw	r18,56(sp)
 200ee04:	003f2e06 	br	200eac0 <___vfprintf_internal_r+0x6a4>
 200ee08:	d9414c17 	ldw	r5,1328(sp)
 200ee0c:	29400414 	ori	r5,r5,16
 200ee10:	d9414c15 	stw	r5,1328(sp)
 200ee14:	d9814c17 	ldw	r6,1328(sp)
 200ee18:	3080080c 	andi	r2,r6,32
 200ee1c:	10014f1e 	bne	r2,zero,200f35c <___vfprintf_internal_r+0xf40>
 200ee20:	d8c14c17 	ldw	r3,1328(sp)
 200ee24:	1880040c 	andi	r2,r3,16
 200ee28:	1002f01e 	bne	r2,zero,200f9ec <___vfprintf_internal_r+0x15d0>
 200ee2c:	d9014c17 	ldw	r4,1328(sp)
 200ee30:	2080100c 	andi	r2,r4,64
 200ee34:	1002ed26 	beq	r2,zero,200f9ec <___vfprintf_internal_r+0x15d0>
 200ee38:	3880000f 	ldh	r2,0(r7)
 200ee3c:	39c00104 	addi	r7,r7,4
 200ee40:	d9c14015 	stw	r7,1280(sp)
 200ee44:	1023d7fa 	srai	r17,r2,31
 200ee48:	1021883a 	mov	r16,r2
 200ee4c:	88037816 	blt	r17,zero,200fc30 <___vfprintf_internal_r+0x1814>
 200ee50:	01000044 	movi	r4,1
 200ee54:	98000416 	blt	r19,zero,200ee68 <___vfprintf_internal_r+0xa4c>
 200ee58:	d8c14c17 	ldw	r3,1328(sp)
 200ee5c:	00bfdfc4 	movi	r2,-129
 200ee60:	1886703a 	and	r3,r3,r2
 200ee64:	d8c14c15 	stw	r3,1328(sp)
 200ee68:	8444b03a 	or	r2,r16,r17
 200ee6c:	10022c1e 	bne	r2,zero,200f720 <___vfprintf_internal_r+0x1304>
 200ee70:	98022b1e 	bne	r19,zero,200f720 <___vfprintf_internal_r+0x1304>
 200ee74:	20803fcc 	andi	r2,r4,255
 200ee78:	1002a126 	beq	r2,zero,200f900 <___vfprintf_internal_r+0x14e4>
 200ee7c:	d8c01904 	addi	r3,sp,100
 200ee80:	dd000f04 	addi	r20,sp,60
 200ee84:	d8c14115 	stw	r3,1284(sp)
 200ee88:	d8c14117 	ldw	r3,1284(sp)
 200ee8c:	dcc14515 	stw	r19,1300(sp)
 200ee90:	a0c5c83a 	sub	r2,r20,r3
 200ee94:	11c00a04 	addi	r7,r2,40
 200ee98:	99c0010e 	bge	r19,r7,200eea0 <___vfprintf_internal_r+0xa84>
 200ee9c:	d9c14515 	stw	r7,1300(sp)
 200eea0:	dcc14615 	stw	r19,1304(sp)
 200eea4:	d8800407 	ldb	r2,16(sp)
 200eea8:	103e4c26 	beq	r2,zero,200e7dc <___vfprintf_internal_r+0x3c0>
 200eeac:	d8814517 	ldw	r2,1300(sp)
 200eeb0:	10800044 	addi	r2,r2,1
 200eeb4:	d8814515 	stw	r2,1300(sp)
 200eeb8:	003e4806 	br	200e7dc <___vfprintf_internal_r+0x3c0>
 200eebc:	d9814c17 	ldw	r6,1328(sp)
 200eec0:	31800414 	ori	r6,r6,16
 200eec4:	d9814c15 	stw	r6,1328(sp)
 200eec8:	d8c14c17 	ldw	r3,1328(sp)
 200eecc:	1880080c 	andi	r2,r3,32
 200eed0:	1001271e 	bne	r2,zero,200f370 <___vfprintf_internal_r+0xf54>
 200eed4:	d9414c17 	ldw	r5,1328(sp)
 200eed8:	2880040c 	andi	r2,r5,16
 200eedc:	1002bc1e 	bne	r2,zero,200f9d0 <___vfprintf_internal_r+0x15b4>
 200eee0:	d9814c17 	ldw	r6,1328(sp)
 200eee4:	3080100c 	andi	r2,r6,64
 200eee8:	1002b926 	beq	r2,zero,200f9d0 <___vfprintf_internal_r+0x15b4>
 200eeec:	3c00000b 	ldhu	r16,0(r7)
 200eef0:	0009883a 	mov	r4,zero
 200eef4:	39c00104 	addi	r7,r7,4
 200eef8:	0023883a 	mov	r17,zero
 200eefc:	d9c14015 	stw	r7,1280(sp)
 200ef00:	d8000405 	stb	zero,16(sp)
 200ef04:	003fd306 	br	200ee54 <___vfprintf_internal_r+0xa38>
 200ef08:	d9014c17 	ldw	r4,1328(sp)
 200ef0c:	21000414 	ori	r4,r4,16
 200ef10:	d9014c15 	stw	r4,1328(sp)
 200ef14:	d9414c17 	ldw	r5,1328(sp)
 200ef18:	2880080c 	andi	r2,r5,32
 200ef1c:	1001081e 	bne	r2,zero,200f340 <___vfprintf_internal_r+0xf24>
 200ef20:	d8c14c17 	ldw	r3,1328(sp)
 200ef24:	1880040c 	andi	r2,r3,16
 200ef28:	1002b61e 	bne	r2,zero,200fa04 <___vfprintf_internal_r+0x15e8>
 200ef2c:	d9014c17 	ldw	r4,1328(sp)
 200ef30:	2080100c 	andi	r2,r4,64
 200ef34:	1002b326 	beq	r2,zero,200fa04 <___vfprintf_internal_r+0x15e8>
 200ef38:	3c00000b 	ldhu	r16,0(r7)
 200ef3c:	01000044 	movi	r4,1
 200ef40:	39c00104 	addi	r7,r7,4
 200ef44:	0023883a 	mov	r17,zero
 200ef48:	d9c14015 	stw	r7,1280(sp)
 200ef4c:	d8000405 	stb	zero,16(sp)
 200ef50:	003fc006 	br	200ee54 <___vfprintf_internal_r+0xa38>
 200ef54:	d9014f17 	ldw	r4,1340(sp)
 200ef58:	b00b883a 	mov	r5,r22
 200ef5c:	d9800c04 	addi	r6,sp,48
 200ef60:	200e3c40 	call	200e3c4 <__sprint_r>
 200ef64:	103ee51e 	bne	r2,zero,200eafc <___vfprintf_internal_r+0x6e0>
 200ef68:	dc800e17 	ldw	r18,56(sp)
 200ef6c:	d8c01904 	addi	r3,sp,100
 200ef70:	d9814c17 	ldw	r6,1328(sp)
 200ef74:	3080004c 	andi	r2,r6,1
 200ef78:	1005003a 	cmpeq	r2,r2,zero
 200ef7c:	103ea51e 	bne	r2,zero,200ea14 <___vfprintf_internal_r+0x5f8>
 200ef80:	00800044 	movi	r2,1
 200ef84:	dc400d17 	ldw	r17,52(sp)
 200ef88:	18800115 	stw	r2,4(r3)
 200ef8c:	d8814917 	ldw	r2,1316(sp)
 200ef90:	94800044 	addi	r18,r18,1
 200ef94:	8c400044 	addi	r17,r17,1
 200ef98:	18800015 	stw	r2,0(r3)
 200ef9c:	008001c4 	movi	r2,7
 200efa0:	dc800e15 	stw	r18,56(sp)
 200efa4:	dc400d15 	stw	r17,52(sp)
 200efa8:	1442240e 	bge	r2,r17,200f83c <___vfprintf_internal_r+0x1420>
 200efac:	d9014f17 	ldw	r4,1340(sp)
 200efb0:	b00b883a 	mov	r5,r22
 200efb4:	d9800c04 	addi	r6,sp,48
 200efb8:	200e3c40 	call	200e3c4 <__sprint_r>
 200efbc:	103ecf1e 	bne	r2,zero,200eafc <___vfprintf_internal_r+0x6e0>
 200efc0:	dc800e17 	ldw	r18,56(sp)
 200efc4:	d8c01904 	addi	r3,sp,100
 200efc8:	003e9206 	br	200ea14 <___vfprintf_internal_r+0x5f8>
 200efcc:	d9014f17 	ldw	r4,1340(sp)
 200efd0:	b00b883a 	mov	r5,r22
 200efd4:	d9800c04 	addi	r6,sp,48
 200efd8:	200e3c40 	call	200e3c4 <__sprint_r>
 200efdc:	103ec026 	beq	r2,zero,200eae0 <___vfprintf_internal_r+0x6c4>
 200efe0:	003ec606 	br	200eafc <___vfprintf_internal_r+0x6e0>
 200efe4:	d9014f17 	ldw	r4,1340(sp)
 200efe8:	b00b883a 	mov	r5,r22
 200efec:	d9800c04 	addi	r6,sp,48
 200eff0:	d9c15115 	stw	r7,1348(sp)
 200eff4:	200e3c40 	call	200e3c4 <__sprint_r>
 200eff8:	d9c15117 	ldw	r7,1348(sp)
 200effc:	103ebf1e 	bne	r2,zero,200eafc <___vfprintf_internal_r+0x6e0>
 200f000:	dc800e17 	ldw	r18,56(sp)
 200f004:	dc400d17 	ldw	r17,52(sp)
 200f008:	dd401904 	addi	r21,sp,100
 200f00c:	003e7406 	br	200e9e0 <___vfprintf_internal_r+0x5c4>
 200f010:	d9014f17 	ldw	r4,1340(sp)
 200f014:	b00b883a 	mov	r5,r22
 200f018:	d9800c04 	addi	r6,sp,48
 200f01c:	d9c15115 	stw	r7,1348(sp)
 200f020:	200e3c40 	call	200e3c4 <__sprint_r>
 200f024:	d9c15117 	ldw	r7,1348(sp)
 200f028:	103eb41e 	bne	r2,zero,200eafc <___vfprintf_internal_r+0x6e0>
 200f02c:	dd401904 	addi	r21,sp,100
 200f030:	003d6d06 	br	200e5e8 <___vfprintf_internal_r+0x1cc>
 200f034:	d9014f17 	ldw	r4,1340(sp)
 200f038:	b00b883a 	mov	r5,r22
 200f03c:	d9800c04 	addi	r6,sp,48
 200f040:	d9c15115 	stw	r7,1348(sp)
 200f044:	200e3c40 	call	200e3c4 <__sprint_r>
 200f048:	d9c15117 	ldw	r7,1348(sp)
 200f04c:	103eab1e 	bne	r2,zero,200eafc <___vfprintf_internal_r+0x6e0>
 200f050:	dc800e17 	ldw	r18,56(sp)
 200f054:	dc400d17 	ldw	r17,52(sp)
 200f058:	dd401904 	addi	r21,sp,100
 200f05c:	003e3406 	br	200e930 <___vfprintf_internal_r+0x514>
 200f060:	d9014f17 	ldw	r4,1340(sp)
 200f064:	b00b883a 	mov	r5,r22
 200f068:	d9800c04 	addi	r6,sp,48
 200f06c:	d9c15115 	stw	r7,1348(sp)
 200f070:	200e3c40 	call	200e3c4 <__sprint_r>
 200f074:	d9c15117 	ldw	r7,1348(sp)
 200f078:	103ea01e 	bne	r2,zero,200eafc <___vfprintf_internal_r+0x6e0>
 200f07c:	dc800e17 	ldw	r18,56(sp)
 200f080:	dc400d17 	ldw	r17,52(sp)
 200f084:	dd401904 	addi	r21,sp,100
 200f088:	003e1c06 	br	200e8fc <___vfprintf_internal_r+0x4e0>
 200f08c:	d9014f17 	ldw	r4,1340(sp)
 200f090:	b00b883a 	mov	r5,r22
 200f094:	d9800c04 	addi	r6,sp,48
 200f098:	d9c15115 	stw	r7,1348(sp)
 200f09c:	200e3c40 	call	200e3c4 <__sprint_r>
 200f0a0:	d9c15117 	ldw	r7,1348(sp)
 200f0a4:	103e951e 	bne	r2,zero,200eafc <___vfprintf_internal_r+0x6e0>
 200f0a8:	dc800e17 	ldw	r18,56(sp)
 200f0ac:	dc400d17 	ldw	r17,52(sp)
 200f0b0:	dd401904 	addi	r21,sp,100
 200f0b4:	003e0406 	br	200e8c8 <___vfprintf_internal_r+0x4ac>
 200f0b8:	d9000517 	ldw	r4,20(sp)
 200f0bc:	0102580e 	bge	zero,r4,200fa20 <___vfprintf_internal_r+0x1604>
 200f0c0:	d9814717 	ldw	r6,1308(sp)
 200f0c4:	21807a16 	blt	r4,r6,200f2b0 <___vfprintf_internal_r+0xe94>
 200f0c8:	d8814117 	ldw	r2,1284(sp)
 200f0cc:	91a5883a 	add	r18,r18,r6
 200f0d0:	8c400044 	addi	r17,r17,1
 200f0d4:	a8800015 	stw	r2,0(r21)
 200f0d8:	008001c4 	movi	r2,7
 200f0dc:	a9800115 	stw	r6,4(r21)
 200f0e0:	dc800e15 	stw	r18,56(sp)
 200f0e4:	dc400d15 	stw	r17,52(sp)
 200f0e8:	1442fc16 	blt	r2,r17,200fcdc <___vfprintf_internal_r+0x18c0>
 200f0ec:	a8c00204 	addi	r3,r21,8
 200f0f0:	d9414717 	ldw	r5,1308(sp)
 200f0f4:	2161c83a 	sub	r16,r4,r5
 200f0f8:	043f9d0e 	bge	zero,r16,200ef70 <___vfprintf_internal_r+0xb54>
 200f0fc:	00800404 	movi	r2,16
 200f100:	1402190e 	bge	r2,r16,200f968 <___vfprintf_internal_r+0x154c>
 200f104:	dc400d17 	ldw	r17,52(sp)
 200f108:	1027883a 	mov	r19,r2
 200f10c:	070080b4 	movhi	fp,514
 200f110:	e72fab84 	addi	fp,fp,-16722
 200f114:	050001c4 	movi	r20,7
 200f118:	00000306 	br	200f128 <___vfprintf_internal_r+0xd0c>
 200f11c:	18c00204 	addi	r3,r3,8
 200f120:	843ffc04 	addi	r16,r16,-16
 200f124:	9c02130e 	bge	r19,r16,200f974 <___vfprintf_internal_r+0x1558>
 200f128:	94800404 	addi	r18,r18,16
 200f12c:	8c400044 	addi	r17,r17,1
 200f130:	1f000015 	stw	fp,0(r3)
 200f134:	1cc00115 	stw	r19,4(r3)
 200f138:	dc800e15 	stw	r18,56(sp)
 200f13c:	dc400d15 	stw	r17,52(sp)
 200f140:	a47ff60e 	bge	r20,r17,200f11c <___vfprintf_internal_r+0xd00>
 200f144:	d9014f17 	ldw	r4,1340(sp)
 200f148:	b00b883a 	mov	r5,r22
 200f14c:	d9800c04 	addi	r6,sp,48
 200f150:	200e3c40 	call	200e3c4 <__sprint_r>
 200f154:	103e691e 	bne	r2,zero,200eafc <___vfprintf_internal_r+0x6e0>
 200f158:	dc800e17 	ldw	r18,56(sp)
 200f15c:	dc400d17 	ldw	r17,52(sp)
 200f160:	d8c01904 	addi	r3,sp,100
 200f164:	003fee06 	br	200f120 <___vfprintf_internal_r+0xd04>
 200f168:	d8814717 	ldw	r2,1308(sp)
 200f16c:	143fffc4 	addi	r16,r2,-1
 200f170:	043e970e 	bge	zero,r16,200ebd0 <___vfprintf_internal_r+0x7b4>
 200f174:	00800404 	movi	r2,16
 200f178:	1400180e 	bge	r2,r16,200f1dc <___vfprintf_internal_r+0xdc0>
 200f17c:	1029883a 	mov	r20,r2
 200f180:	070080b4 	movhi	fp,514
 200f184:	e72fab84 	addi	fp,fp,-16722
 200f188:	054001c4 	movi	r21,7
 200f18c:	00000306 	br	200f19c <___vfprintf_internal_r+0xd80>
 200f190:	9cc00204 	addi	r19,r19,8
 200f194:	843ffc04 	addi	r16,r16,-16
 200f198:	a400120e 	bge	r20,r16,200f1e4 <___vfprintf_internal_r+0xdc8>
 200f19c:	94800404 	addi	r18,r18,16
 200f1a0:	8c400044 	addi	r17,r17,1
 200f1a4:	9f000015 	stw	fp,0(r19)
 200f1a8:	9d000115 	stw	r20,4(r19)
 200f1ac:	dc800e15 	stw	r18,56(sp)
 200f1b0:	dc400d15 	stw	r17,52(sp)
 200f1b4:	ac7ff60e 	bge	r21,r17,200f190 <___vfprintf_internal_r+0xd74>
 200f1b8:	d9014f17 	ldw	r4,1340(sp)
 200f1bc:	b00b883a 	mov	r5,r22
 200f1c0:	d9800c04 	addi	r6,sp,48
 200f1c4:	200e3c40 	call	200e3c4 <__sprint_r>
 200f1c8:	103e4c1e 	bne	r2,zero,200eafc <___vfprintf_internal_r+0x6e0>
 200f1cc:	dc800e17 	ldw	r18,56(sp)
 200f1d0:	dc400d17 	ldw	r17,52(sp)
 200f1d4:	dcc01904 	addi	r19,sp,100
 200f1d8:	003fee06 	br	200f194 <___vfprintf_internal_r+0xd78>
 200f1dc:	070080b4 	movhi	fp,514
 200f1e0:	e72fab84 	addi	fp,fp,-16722
 200f1e4:	9425883a 	add	r18,r18,r16
 200f1e8:	8c400044 	addi	r17,r17,1
 200f1ec:	008001c4 	movi	r2,7
 200f1f0:	9f000015 	stw	fp,0(r19)
 200f1f4:	9c000115 	stw	r16,4(r19)
 200f1f8:	dc800e15 	stw	r18,56(sp)
 200f1fc:	dc400d15 	stw	r17,52(sp)
 200f200:	147e720e 	bge	r2,r17,200ebcc <___vfprintf_internal_r+0x7b0>
 200f204:	d9014f17 	ldw	r4,1340(sp)
 200f208:	b00b883a 	mov	r5,r22
 200f20c:	d9800c04 	addi	r6,sp,48
 200f210:	200e3c40 	call	200e3c4 <__sprint_r>
 200f214:	103e391e 	bne	r2,zero,200eafc <___vfprintf_internal_r+0x6e0>
 200f218:	dc800e17 	ldw	r18,56(sp)
 200f21c:	dc400d17 	ldw	r17,52(sp)
 200f220:	dcc01904 	addi	r19,sp,100
 200f224:	003e6a06 	br	200ebd0 <___vfprintf_internal_r+0x7b4>
 200f228:	d9014f17 	ldw	r4,1340(sp)
 200f22c:	b00b883a 	mov	r5,r22
 200f230:	d9800c04 	addi	r6,sp,48
 200f234:	d9c15115 	stw	r7,1348(sp)
 200f238:	200e3c40 	call	200e3c4 <__sprint_r>
 200f23c:	d9c15117 	ldw	r7,1348(sp)
 200f240:	103e2e1e 	bne	r2,zero,200eafc <___vfprintf_internal_r+0x6e0>
 200f244:	dc800e17 	ldw	r18,56(sp)
 200f248:	dc400d17 	ldw	r17,52(sp)
 200f24c:	dd401904 	addi	r21,sp,100
 200f250:	003dba06 	br	200e93c <___vfprintf_internal_r+0x520>
 200f254:	d9014f17 	ldw	r4,1340(sp)
 200f258:	b00b883a 	mov	r5,r22
 200f25c:	d9800c04 	addi	r6,sp,48
 200f260:	200e3c40 	call	200e3c4 <__sprint_r>
 200f264:	103e251e 	bne	r2,zero,200eafc <___vfprintf_internal_r+0x6e0>
 200f268:	dc800e17 	ldw	r18,56(sp)
 200f26c:	dc400d17 	ldw	r17,52(sp)
 200f270:	dcc01904 	addi	r19,sp,100
 200f274:	003e4206 	br	200eb80 <___vfprintf_internal_r+0x764>
 200f278:	d9014f17 	ldw	r4,1340(sp)
 200f27c:	b00b883a 	mov	r5,r22
 200f280:	d9800c04 	addi	r6,sp,48
 200f284:	200e3c40 	call	200e3c4 <__sprint_r>
 200f288:	103e1c1e 	bne	r2,zero,200eafc <___vfprintf_internal_r+0x6e0>
 200f28c:	dc800e17 	ldw	r18,56(sp)
 200f290:	dc400d17 	ldw	r17,52(sp)
 200f294:	d8c01904 	addi	r3,sp,100
 200f298:	003e2e06 	br	200eb54 <___vfprintf_internal_r+0x738>
 200f29c:	d9414c17 	ldw	r5,1328(sp)
 200f2a0:	2880004c 	andi	r2,r5,1
 200f2a4:	1005003a 	cmpeq	r2,r2,zero
 200f2a8:	103dda1e 	bne	r2,zero,200ea14 <___vfprintf_internal_r+0x5f8>
 200f2ac:	003e9f06 	br	200ed2c <___vfprintf_internal_r+0x910>
 200f2b0:	d8c14117 	ldw	r3,1284(sp)
 200f2b4:	9125883a 	add	r18,r18,r4
 200f2b8:	8c400044 	addi	r17,r17,1
 200f2bc:	008001c4 	movi	r2,7
 200f2c0:	a8c00015 	stw	r3,0(r21)
 200f2c4:	a9000115 	stw	r4,4(r21)
 200f2c8:	dc800e15 	stw	r18,56(sp)
 200f2cc:	dc400d15 	stw	r17,52(sp)
 200f2d0:	14426c16 	blt	r2,r17,200fc84 <___vfprintf_internal_r+0x1868>
 200f2d4:	a8c00204 	addi	r3,r21,8
 200f2d8:	d9414917 	ldw	r5,1316(sp)
 200f2dc:	00800044 	movi	r2,1
 200f2e0:	94800044 	addi	r18,r18,1
 200f2e4:	8c400044 	addi	r17,r17,1
 200f2e8:	18800115 	stw	r2,4(r3)
 200f2ec:	008001c4 	movi	r2,7
 200f2f0:	19400015 	stw	r5,0(r3)
 200f2f4:	dc800e15 	stw	r18,56(sp)
 200f2f8:	dc400d15 	stw	r17,52(sp)
 200f2fc:	2021883a 	mov	r16,r4
 200f300:	14425616 	blt	r2,r17,200fc5c <___vfprintf_internal_r+0x1840>
 200f304:	19400204 	addi	r5,r3,8
 200f308:	d9814717 	ldw	r6,1308(sp)
 200f30c:	8c400044 	addi	r17,r17,1
 200f310:	dc400d15 	stw	r17,52(sp)
 200f314:	3107c83a 	sub	r3,r6,r4
 200f318:	d9014117 	ldw	r4,1284(sp)
 200f31c:	90e5883a 	add	r18,r18,r3
 200f320:	28c00115 	stw	r3,4(r5)
 200f324:	8105883a 	add	r2,r16,r4
 200f328:	28800015 	stw	r2,0(r5)
 200f32c:	008001c4 	movi	r2,7
 200f330:	dc800e15 	stw	r18,56(sp)
 200f334:	147f1d16 	blt	r2,r17,200efac <___vfprintf_internal_r+0xb90>
 200f338:	28c00204 	addi	r3,r5,8
 200f33c:	003db506 	br	200ea14 <___vfprintf_internal_r+0x5f8>
 200f340:	3c000017 	ldw	r16,0(r7)
 200f344:	3c400117 	ldw	r17,4(r7)
 200f348:	39800204 	addi	r6,r7,8
 200f34c:	01000044 	movi	r4,1
 200f350:	d9814015 	stw	r6,1280(sp)
 200f354:	d8000405 	stb	zero,16(sp)
 200f358:	003ebe06 	br	200ee54 <___vfprintf_internal_r+0xa38>
 200f35c:	3c000017 	ldw	r16,0(r7)
 200f360:	3c400117 	ldw	r17,4(r7)
 200f364:	38800204 	addi	r2,r7,8
 200f368:	d8814015 	stw	r2,1280(sp)
 200f36c:	003eb706 	br	200ee4c <___vfprintf_internal_r+0xa30>
 200f370:	3c000017 	ldw	r16,0(r7)
 200f374:	3c400117 	ldw	r17,4(r7)
 200f378:	39000204 	addi	r4,r7,8
 200f37c:	d9014015 	stw	r4,1280(sp)
 200f380:	0009883a 	mov	r4,zero
 200f384:	d8000405 	stb	zero,16(sp)
 200f388:	003eb206 	br	200ee54 <___vfprintf_internal_r+0xa38>
 200f38c:	38c00017 	ldw	r3,0(r7)
 200f390:	39c00104 	addi	r7,r7,4
 200f394:	d8c14a15 	stw	r3,1320(sp)
 200f398:	1800d70e 	bge	r3,zero,200f6f8 <___vfprintf_internal_r+0x12dc>
 200f39c:	00c7c83a 	sub	r3,zero,r3
 200f3a0:	d8c14a15 	stw	r3,1320(sp)
 200f3a4:	d9014c17 	ldw	r4,1328(sp)
 200f3a8:	b8c00007 	ldb	r3,0(r23)
 200f3ac:	21000114 	ori	r4,r4,4
 200f3b0:	d9014c15 	stw	r4,1328(sp)
 200f3b4:	003c9806 	br	200e618 <___vfprintf_internal_r+0x1fc>
 200f3b8:	d9814c17 	ldw	r6,1328(sp)
 200f3bc:	3080080c 	andi	r2,r6,32
 200f3c0:	1001f626 	beq	r2,zero,200fb9c <___vfprintf_internal_r+0x1780>
 200f3c4:	d9014b17 	ldw	r4,1324(sp)
 200f3c8:	38800017 	ldw	r2,0(r7)
 200f3cc:	39c00104 	addi	r7,r7,4
 200f3d0:	d9c14015 	stw	r7,1280(sp)
 200f3d4:	2007d7fa 	srai	r3,r4,31
 200f3d8:	d9c14017 	ldw	r7,1280(sp)
 200f3dc:	11000015 	stw	r4,0(r2)
 200f3e0:	10c00115 	stw	r3,4(r2)
 200f3e4:	003c6906 	br	200e58c <___vfprintf_internal_r+0x170>
 200f3e8:	b8c00007 	ldb	r3,0(r23)
 200f3ec:	00801b04 	movi	r2,108
 200f3f0:	18825526 	beq	r3,r2,200fd48 <___vfprintf_internal_r+0x192c>
 200f3f4:	d9414c17 	ldw	r5,1328(sp)
 200f3f8:	29400414 	ori	r5,r5,16
 200f3fc:	d9414c15 	stw	r5,1328(sp)
 200f400:	003c8506 	br	200e618 <___vfprintf_internal_r+0x1fc>
 200f404:	d9814c17 	ldw	r6,1328(sp)
 200f408:	b8c00007 	ldb	r3,0(r23)
 200f40c:	31800814 	ori	r6,r6,32
 200f410:	d9814c15 	stw	r6,1328(sp)
 200f414:	003c8006 	br	200e618 <___vfprintf_internal_r+0x1fc>
 200f418:	d8814c17 	ldw	r2,1328(sp)
 200f41c:	3c000017 	ldw	r16,0(r7)
 200f420:	00c01e04 	movi	r3,120
 200f424:	10800094 	ori	r2,r2,2
 200f428:	d8814c15 	stw	r2,1328(sp)
 200f42c:	39c00104 	addi	r7,r7,4
 200f430:	014080b4 	movhi	r5,514
 200f434:	296f9404 	addi	r5,r5,-16816
 200f438:	00800c04 	movi	r2,48
 200f43c:	0023883a 	mov	r17,zero
 200f440:	01000084 	movi	r4,2
 200f444:	d9c14015 	stw	r7,1280(sp)
 200f448:	d8c14d15 	stw	r3,1332(sp)
 200f44c:	d9414415 	stw	r5,1296(sp)
 200f450:	d8800445 	stb	r2,17(sp)
 200f454:	d8c00485 	stb	r3,18(sp)
 200f458:	d8000405 	stb	zero,16(sp)
 200f45c:	003e7d06 	br	200ee54 <___vfprintf_internal_r+0xa38>
 200f460:	d8814c17 	ldw	r2,1328(sp)
 200f464:	b8c00007 	ldb	r3,0(r23)
 200f468:	10801014 	ori	r2,r2,64
 200f46c:	d8814c15 	stw	r2,1328(sp)
 200f470:	003c6906 	br	200e618 <___vfprintf_internal_r+0x1fc>
 200f474:	d9414c17 	ldw	r5,1328(sp)
 200f478:	2880020c 	andi	r2,r5,8
 200f47c:	1001e526 	beq	r2,zero,200fc14 <___vfprintf_internal_r+0x17f8>
 200f480:	39800017 	ldw	r6,0(r7)
 200f484:	38800204 	addi	r2,r7,8
 200f488:	d8814015 	stw	r2,1280(sp)
 200f48c:	d9814215 	stw	r6,1288(sp)
 200f490:	39c00117 	ldw	r7,4(r7)
 200f494:	d9c14315 	stw	r7,1292(sp)
 200f498:	d9014217 	ldw	r4,1288(sp)
 200f49c:	d9414317 	ldw	r5,1292(sp)
 200f4a0:	20146f40 	call	20146f4 <__isinfd>
 200f4a4:	10021d26 	beq	r2,zero,200fd1c <___vfprintf_internal_r+0x1900>
 200f4a8:	d9014217 	ldw	r4,1288(sp)
 200f4ac:	d9414317 	ldw	r5,1292(sp)
 200f4b0:	000d883a 	mov	r6,zero
 200f4b4:	000f883a 	mov	r7,zero
 200f4b8:	20168200 	call	2016820 <__ltdf2>
 200f4bc:	1002d016 	blt	r2,zero,2010000 <___vfprintf_internal_r+0x1be4>
 200f4c0:	d9414d17 	ldw	r5,1332(sp)
 200f4c4:	008011c4 	movi	r2,71
 200f4c8:	11421016 	blt	r2,r5,200fd0c <___vfprintf_internal_r+0x18f0>
 200f4cc:	018080b4 	movhi	r6,514
 200f4d0:	31af9904 	addi	r6,r6,-16796
 200f4d4:	d9814115 	stw	r6,1284(sp)
 200f4d8:	d9014c17 	ldw	r4,1328(sp)
 200f4dc:	00c000c4 	movi	r3,3
 200f4e0:	00bfdfc4 	movi	r2,-129
 200f4e4:	2088703a 	and	r4,r4,r2
 200f4e8:	180f883a 	mov	r7,r3
 200f4ec:	d8c14515 	stw	r3,1300(sp)
 200f4f0:	d9014c15 	stw	r4,1328(sp)
 200f4f4:	d8014615 	stw	zero,1304(sp)
 200f4f8:	003e6a06 	br	200eea4 <___vfprintf_internal_r+0xa88>
 200f4fc:	38800017 	ldw	r2,0(r7)
 200f500:	00c00044 	movi	r3,1
 200f504:	39c00104 	addi	r7,r7,4
 200f508:	d9c14015 	stw	r7,1280(sp)
 200f50c:	d9000f04 	addi	r4,sp,60
 200f510:	180f883a 	mov	r7,r3
 200f514:	d8c14515 	stw	r3,1300(sp)
 200f518:	d9014115 	stw	r4,1284(sp)
 200f51c:	d8800f05 	stb	r2,60(sp)
 200f520:	d8000405 	stb	zero,16(sp)
 200f524:	003cac06 	br	200e7d8 <___vfprintf_internal_r+0x3bc>
 200f528:	014080b4 	movhi	r5,514
 200f52c:	296f9f04 	addi	r5,r5,-16772
 200f530:	d9414415 	stw	r5,1296(sp)
 200f534:	d9814c17 	ldw	r6,1328(sp)
 200f538:	3080080c 	andi	r2,r6,32
 200f53c:	1000ff26 	beq	r2,zero,200f93c <___vfprintf_internal_r+0x1520>
 200f540:	3c000017 	ldw	r16,0(r7)
 200f544:	3c400117 	ldw	r17,4(r7)
 200f548:	38800204 	addi	r2,r7,8
 200f54c:	d8814015 	stw	r2,1280(sp)
 200f550:	d9414c17 	ldw	r5,1328(sp)
 200f554:	2880004c 	andi	r2,r5,1
 200f558:	1005003a 	cmpeq	r2,r2,zero
 200f55c:	1000b91e 	bne	r2,zero,200f844 <___vfprintf_internal_r+0x1428>
 200f560:	8444b03a 	or	r2,r16,r17
 200f564:	1000b726 	beq	r2,zero,200f844 <___vfprintf_internal_r+0x1428>
 200f568:	d9814d17 	ldw	r6,1332(sp)
 200f56c:	29400094 	ori	r5,r5,2
 200f570:	00800c04 	movi	r2,48
 200f574:	01000084 	movi	r4,2
 200f578:	d9414c15 	stw	r5,1328(sp)
 200f57c:	d8800445 	stb	r2,17(sp)
 200f580:	d9800485 	stb	r6,18(sp)
 200f584:	d8000405 	stb	zero,16(sp)
 200f588:	003e3206 	br	200ee54 <___vfprintf_internal_r+0xa38>
 200f58c:	018080b4 	movhi	r6,514
 200f590:	31af9404 	addi	r6,r6,-16816
 200f594:	d9814415 	stw	r6,1296(sp)
 200f598:	003fe606 	br	200f534 <___vfprintf_internal_r+0x1118>
 200f59c:	00800ac4 	movi	r2,43
 200f5a0:	d8800405 	stb	r2,16(sp)
 200f5a4:	b8c00007 	ldb	r3,0(r23)
 200f5a8:	003c1b06 	br	200e618 <___vfprintf_internal_r+0x1fc>
 200f5ac:	d8814c17 	ldw	r2,1328(sp)
 200f5b0:	b8c00007 	ldb	r3,0(r23)
 200f5b4:	10800054 	ori	r2,r2,1
 200f5b8:	d8814c15 	stw	r2,1328(sp)
 200f5bc:	003c1606 	br	200e618 <___vfprintf_internal_r+0x1fc>
 200f5c0:	d8800407 	ldb	r2,16(sp)
 200f5c4:	10004c1e 	bne	r2,zero,200f6f8 <___vfprintf_internal_r+0x12dc>
 200f5c8:	00800804 	movi	r2,32
 200f5cc:	d8800405 	stb	r2,16(sp)
 200f5d0:	b8c00007 	ldb	r3,0(r23)
 200f5d4:	003c1006 	br	200e618 <___vfprintf_internal_r+0x1fc>
 200f5d8:	d9814c17 	ldw	r6,1328(sp)
 200f5dc:	b8c00007 	ldb	r3,0(r23)
 200f5e0:	31800214 	ori	r6,r6,8
 200f5e4:	d9814c15 	stw	r6,1328(sp)
 200f5e8:	003c0b06 	br	200e618 <___vfprintf_internal_r+0x1fc>
 200f5ec:	0009883a 	mov	r4,zero
 200f5f0:	04000244 	movi	r16,9
 200f5f4:	01400284 	movi	r5,10
 200f5f8:	d9c15115 	stw	r7,1348(sp)
 200f5fc:	200d0cc0 	call	200d0cc <__mulsi3>
 200f600:	b9000007 	ldb	r4,0(r23)
 200f604:	d8c14d17 	ldw	r3,1332(sp)
 200f608:	bdc00044 	addi	r23,r23,1
 200f60c:	d9014d15 	stw	r4,1332(sp)
 200f610:	d9414d17 	ldw	r5,1332(sp)
 200f614:	1885883a 	add	r2,r3,r2
 200f618:	113ff404 	addi	r4,r2,-48
 200f61c:	28bff404 	addi	r2,r5,-48
 200f620:	d9c15117 	ldw	r7,1348(sp)
 200f624:	80bff32e 	bgeu	r16,r2,200f5f4 <___vfprintf_internal_r+0x11d8>
 200f628:	d9014a15 	stw	r4,1320(sp)
 200f62c:	003bfc06 	br	200e620 <___vfprintf_internal_r+0x204>
 200f630:	d8814c17 	ldw	r2,1328(sp)
 200f634:	b8c00007 	ldb	r3,0(r23)
 200f638:	10802014 	ori	r2,r2,128
 200f63c:	d8814c15 	stw	r2,1328(sp)
 200f640:	003bf506 	br	200e618 <___vfprintf_internal_r+0x1fc>
 200f644:	b8c00007 	ldb	r3,0(r23)
 200f648:	00800a84 	movi	r2,42
 200f64c:	bdc00044 	addi	r23,r23,1
 200f650:	18831826 	beq	r3,r2,20102b4 <___vfprintf_internal_r+0x1e98>
 200f654:	d8c14d15 	stw	r3,1332(sp)
 200f658:	18bff404 	addi	r2,r3,-48
 200f65c:	00c00244 	movi	r3,9
 200f660:	18827b36 	bltu	r3,r2,2010050 <___vfprintf_internal_r+0x1c34>
 200f664:	1821883a 	mov	r16,r3
 200f668:	0009883a 	mov	r4,zero
 200f66c:	01400284 	movi	r5,10
 200f670:	d9c15115 	stw	r7,1348(sp)
 200f674:	200d0cc0 	call	200d0cc <__mulsi3>
 200f678:	d9414d17 	ldw	r5,1332(sp)
 200f67c:	b9800007 	ldb	r6,0(r23)
 200f680:	d9c15117 	ldw	r7,1348(sp)
 200f684:	1145883a 	add	r2,r2,r5
 200f688:	113ff404 	addi	r4,r2,-48
 200f68c:	30bff404 	addi	r2,r6,-48
 200f690:	d9814d15 	stw	r6,1332(sp)
 200f694:	bdc00044 	addi	r23,r23,1
 200f698:	80bff42e 	bgeu	r16,r2,200f66c <___vfprintf_internal_r+0x1250>
 200f69c:	2027883a 	mov	r19,r4
 200f6a0:	203bdf0e 	bge	r4,zero,200e620 <___vfprintf_internal_r+0x204>
 200f6a4:	04ffffc4 	movi	r19,-1
 200f6a8:	003bdd06 	br	200e620 <___vfprintf_internal_r+0x204>
 200f6ac:	d8000405 	stb	zero,16(sp)
 200f6b0:	39800017 	ldw	r6,0(r7)
 200f6b4:	39c00104 	addi	r7,r7,4
 200f6b8:	d9c14015 	stw	r7,1280(sp)
 200f6bc:	d9814115 	stw	r6,1284(sp)
 200f6c0:	3001c926 	beq	r6,zero,200fde8 <___vfprintf_internal_r+0x19cc>
 200f6c4:	98000e16 	blt	r19,zero,200f700 <___vfprintf_internal_r+0x12e4>
 200f6c8:	d9014117 	ldw	r4,1284(sp)
 200f6cc:	000b883a 	mov	r5,zero
 200f6d0:	980d883a 	mov	r6,r19
 200f6d4:	2012e100 	call	2012e10 <memchr>
 200f6d8:	10025926 	beq	r2,zero,2010040 <___vfprintf_internal_r+0x1c24>
 200f6dc:	d8c14117 	ldw	r3,1284(sp)
 200f6e0:	10cfc83a 	sub	r7,r2,r3
 200f6e4:	99c19e16 	blt	r19,r7,200fd60 <___vfprintf_internal_r+0x1944>
 200f6e8:	d9c14515 	stw	r7,1300(sp)
 200f6ec:	38000916 	blt	r7,zero,200f714 <___vfprintf_internal_r+0x12f8>
 200f6f0:	d8014615 	stw	zero,1304(sp)
 200f6f4:	003deb06 	br	200eea4 <___vfprintf_internal_r+0xa88>
 200f6f8:	b8c00007 	ldb	r3,0(r23)
 200f6fc:	003bc606 	br	200e618 <___vfprintf_internal_r+0x1fc>
 200f700:	d9014117 	ldw	r4,1284(sp)
 200f704:	200e3500 	call	200e350 <strlen>
 200f708:	d8814515 	stw	r2,1300(sp)
 200f70c:	100f883a 	mov	r7,r2
 200f710:	103ff70e 	bge	r2,zero,200f6f0 <___vfprintf_internal_r+0x12d4>
 200f714:	d8014515 	stw	zero,1300(sp)
 200f718:	d8014615 	stw	zero,1304(sp)
 200f71c:	003de106 	br	200eea4 <___vfprintf_internal_r+0xa88>
 200f720:	20c03fcc 	andi	r3,r4,255
 200f724:	00800044 	movi	r2,1
 200f728:	18802d26 	beq	r3,r2,200f7e0 <___vfprintf_internal_r+0x13c4>
 200f72c:	18800e36 	bltu	r3,r2,200f768 <___vfprintf_internal_r+0x134c>
 200f730:	00800084 	movi	r2,2
 200f734:	1880fa26 	beq	r3,r2,200fb20 <___vfprintf_internal_r+0x1704>
 200f738:	010080b4 	movhi	r4,514
 200f73c:	212fa404 	addi	r4,r4,-16752
 200f740:	200e3500 	call	200e350 <strlen>
 200f744:	100f883a 	mov	r7,r2
 200f748:	dcc14515 	stw	r19,1300(sp)
 200f74c:	9880010e 	bge	r19,r2,200f754 <___vfprintf_internal_r+0x1338>
 200f750:	d8814515 	stw	r2,1300(sp)
 200f754:	008080b4 	movhi	r2,514
 200f758:	10afa404 	addi	r2,r2,-16752
 200f75c:	dcc14615 	stw	r19,1304(sp)
 200f760:	d8814115 	stw	r2,1284(sp)
 200f764:	003dcf06 	br	200eea4 <___vfprintf_internal_r+0xa88>
 200f768:	d9401904 	addi	r5,sp,100
 200f76c:	dd000f04 	addi	r20,sp,60
 200f770:	d9414115 	stw	r5,1284(sp)
 200f774:	880a977a 	slli	r5,r17,29
 200f778:	d9814117 	ldw	r6,1284(sp)
 200f77c:	8004d0fa 	srli	r2,r16,3
 200f780:	8806d0fa 	srli	r3,r17,3
 200f784:	810001cc 	andi	r4,r16,7
 200f788:	2884b03a 	or	r2,r5,r2
 200f78c:	31bfffc4 	addi	r6,r6,-1
 200f790:	21000c04 	addi	r4,r4,48
 200f794:	d9814115 	stw	r6,1284(sp)
 200f798:	10cab03a 	or	r5,r2,r3
 200f79c:	31000005 	stb	r4,0(r6)
 200f7a0:	1021883a 	mov	r16,r2
 200f7a4:	1823883a 	mov	r17,r3
 200f7a8:	283ff21e 	bne	r5,zero,200f774 <___vfprintf_internal_r+0x1358>
 200f7ac:	d8c14c17 	ldw	r3,1328(sp)
 200f7b0:	1880004c 	andi	r2,r3,1
 200f7b4:	1005003a 	cmpeq	r2,r2,zero
 200f7b8:	103db31e 	bne	r2,zero,200ee88 <___vfprintf_internal_r+0xa6c>
 200f7bc:	20803fcc 	andi	r2,r4,255
 200f7c0:	1080201c 	xori	r2,r2,128
 200f7c4:	10bfe004 	addi	r2,r2,-128
 200f7c8:	00c00c04 	movi	r3,48
 200f7cc:	10fdae26 	beq	r2,r3,200ee88 <___vfprintf_internal_r+0xa6c>
 200f7d0:	31bfffc4 	addi	r6,r6,-1
 200f7d4:	d9814115 	stw	r6,1284(sp)
 200f7d8:	30c00005 	stb	r3,0(r6)
 200f7dc:	003daa06 	br	200ee88 <___vfprintf_internal_r+0xa6c>
 200f7e0:	88800068 	cmpgeui	r2,r17,1
 200f7e4:	10002c1e 	bne	r2,zero,200f898 <___vfprintf_internal_r+0x147c>
 200f7e8:	8800021e 	bne	r17,zero,200f7f4 <___vfprintf_internal_r+0x13d8>
 200f7ec:	00800244 	movi	r2,9
 200f7f0:	14002936 	bltu	r2,r16,200f898 <___vfprintf_internal_r+0x147c>
 200f7f4:	d90018c4 	addi	r4,sp,99
 200f7f8:	dd000f04 	addi	r20,sp,60
 200f7fc:	d9014115 	stw	r4,1284(sp)
 200f800:	d9014117 	ldw	r4,1284(sp)
 200f804:	80800c04 	addi	r2,r16,48
 200f808:	20800005 	stb	r2,0(r4)
 200f80c:	003d9e06 	br	200ee88 <___vfprintf_internal_r+0xa6c>
 200f810:	dc400d17 	ldw	r17,52(sp)
 200f814:	070080b4 	movhi	fp,514
 200f818:	e72fab84 	addi	fp,fp,-16722
 200f81c:	9425883a 	add	r18,r18,r16
 200f820:	8c400044 	addi	r17,r17,1
 200f824:	008001c4 	movi	r2,7
 200f828:	1f000015 	stw	fp,0(r3)
 200f82c:	1c000115 	stw	r16,4(r3)
 200f830:	dc800e15 	stw	r18,56(sp)
 200f834:	dc400d15 	stw	r17,52(sp)
 200f838:	147ddc16 	blt	r2,r17,200efac <___vfprintf_internal_r+0xb90>
 200f83c:	18c00204 	addi	r3,r3,8
 200f840:	003c7406 	br	200ea14 <___vfprintf_internal_r+0x5f8>
 200f844:	01000084 	movi	r4,2
 200f848:	d8000405 	stb	zero,16(sp)
 200f84c:	003d8106 	br	200ee54 <___vfprintf_internal_r+0xa38>
 200f850:	d9814c17 	ldw	r6,1328(sp)
 200f854:	30c4703a 	and	r2,r6,r3
 200f858:	1005003a 	cmpeq	r2,r2,zero
 200f85c:	103cb326 	beq	r2,zero,200eb2c <___vfprintf_internal_r+0x710>
 200f860:	d9014117 	ldw	r4,1284(sp)
 200f864:	94800044 	addi	r18,r18,1
 200f868:	8c400044 	addi	r17,r17,1
 200f86c:	008001c4 	movi	r2,7
 200f870:	a9000015 	stw	r4,0(r21)
 200f874:	a8c00115 	stw	r3,4(r21)
 200f878:	dc800e15 	stw	r18,56(sp)
 200f87c:	dc400d15 	stw	r17,52(sp)
 200f880:	147e6016 	blt	r2,r17,200f204 <___vfprintf_internal_r+0xde8>
 200f884:	acc00204 	addi	r19,r21,8
 200f888:	003cd106 	br	200ebd0 <___vfprintf_internal_r+0x7b4>
 200f88c:	070080b4 	movhi	fp,514
 200f890:	e72fab84 	addi	fp,fp,-16722
 200f894:	003c4906 	br	200e9bc <___vfprintf_internal_r+0x5a0>
 200f898:	dd000f04 	addi	r20,sp,60
 200f89c:	dc801904 	addi	r18,sp,100
 200f8a0:	8009883a 	mov	r4,r16
 200f8a4:	880b883a 	mov	r5,r17
 200f8a8:	01800284 	movi	r6,10
 200f8ac:	000f883a 	mov	r7,zero
 200f8b0:	20154800 	call	2015480 <__umoddi3>
 200f8b4:	12000c04 	addi	r8,r2,48
 200f8b8:	94bfffc4 	addi	r18,r18,-1
 200f8bc:	8009883a 	mov	r4,r16
 200f8c0:	880b883a 	mov	r5,r17
 200f8c4:	01800284 	movi	r6,10
 200f8c8:	000f883a 	mov	r7,zero
 200f8cc:	92000005 	stb	r8,0(r18)
 200f8d0:	2014e140 	call	2014e14 <__udivdi3>
 200f8d4:	1009883a 	mov	r4,r2
 200f8d8:	1021883a 	mov	r16,r2
 200f8dc:	18800068 	cmpgeui	r2,r3,1
 200f8e0:	1823883a 	mov	r17,r3
 200f8e4:	103fee1e 	bne	r2,zero,200f8a0 <___vfprintf_internal_r+0x1484>
 200f8e8:	1800021e 	bne	r3,zero,200f8f4 <___vfprintf_internal_r+0x14d8>
 200f8ec:	00800244 	movi	r2,9
 200f8f0:	113feb36 	bltu	r2,r4,200f8a0 <___vfprintf_internal_r+0x1484>
 200f8f4:	94bfffc4 	addi	r18,r18,-1
 200f8f8:	dc814115 	stw	r18,1284(sp)
 200f8fc:	003fc006 	br	200f800 <___vfprintf_internal_r+0x13e4>
 200f900:	d9014c17 	ldw	r4,1328(sp)
 200f904:	2080004c 	andi	r2,r4,1
 200f908:	10009a1e 	bne	r2,zero,200fb74 <___vfprintf_internal_r+0x1758>
 200f90c:	d9401904 	addi	r5,sp,100
 200f910:	dd000f04 	addi	r20,sp,60
 200f914:	d9414115 	stw	r5,1284(sp)
 200f918:	003d5b06 	br	200ee88 <___vfprintf_internal_r+0xa6c>
 200f91c:	d9014f17 	ldw	r4,1340(sp)
 200f920:	b00b883a 	mov	r5,r22
 200f924:	d9800c04 	addi	r6,sp,48
 200f928:	200e3c40 	call	200e3c4 <__sprint_r>
 200f92c:	103c731e 	bne	r2,zero,200eafc <___vfprintf_internal_r+0x6e0>
 200f930:	dc800e17 	ldw	r18,56(sp)
 200f934:	d8c01904 	addi	r3,sp,100
 200f938:	003cf906 	br	200ed20 <___vfprintf_internal_r+0x904>
 200f93c:	d8c14c17 	ldw	r3,1328(sp)
 200f940:	1880040c 	andi	r2,r3,16
 200f944:	1000711e 	bne	r2,zero,200fb0c <___vfprintf_internal_r+0x16f0>
 200f948:	d9014c17 	ldw	r4,1328(sp)
 200f94c:	2080100c 	andi	r2,r4,64
 200f950:	10006e26 	beq	r2,zero,200fb0c <___vfprintf_internal_r+0x16f0>
 200f954:	3c00000b 	ldhu	r16,0(r7)
 200f958:	0023883a 	mov	r17,zero
 200f95c:	39c00104 	addi	r7,r7,4
 200f960:	d9c14015 	stw	r7,1280(sp)
 200f964:	003efa06 	br	200f550 <___vfprintf_internal_r+0x1134>
 200f968:	dc400d17 	ldw	r17,52(sp)
 200f96c:	070080b4 	movhi	fp,514
 200f970:	e72fab84 	addi	fp,fp,-16722
 200f974:	9425883a 	add	r18,r18,r16
 200f978:	8c400044 	addi	r17,r17,1
 200f97c:	008001c4 	movi	r2,7
 200f980:	1f000015 	stw	fp,0(r3)
 200f984:	1c000115 	stw	r16,4(r3)
 200f988:	dc800e15 	stw	r18,56(sp)
 200f98c:	dc400d15 	stw	r17,52(sp)
 200f990:	147d7016 	blt	r2,r17,200ef54 <___vfprintf_internal_r+0xb38>
 200f994:	18c00204 	addi	r3,r3,8
 200f998:	003d7506 	br	200ef70 <___vfprintf_internal_r+0xb54>
 200f99c:	dc800e17 	ldw	r18,56(sp)
 200f9a0:	dc400d17 	ldw	r17,52(sp)
 200f9a4:	070080b4 	movhi	fp,514
 200f9a8:	e72faf84 	addi	fp,fp,-16706
 200f9ac:	003bba06 	br	200e898 <___vfprintf_internal_r+0x47c>
 200f9b0:	d9014f17 	ldw	r4,1340(sp)
 200f9b4:	b00b883a 	mov	r5,r22
 200f9b8:	d9800c04 	addi	r6,sp,48
 200f9bc:	200e3c40 	call	200e3c4 <__sprint_r>
 200f9c0:	103c4e1e 	bne	r2,zero,200eafc <___vfprintf_internal_r+0x6e0>
 200f9c4:	dc800e17 	ldw	r18,56(sp)
 200f9c8:	d8c01904 	addi	r3,sp,100
 200f9cc:	003ce306 	br	200ed5c <___vfprintf_internal_r+0x940>
 200f9d0:	3c000017 	ldw	r16,0(r7)
 200f9d4:	0009883a 	mov	r4,zero
 200f9d8:	39c00104 	addi	r7,r7,4
 200f9dc:	0023883a 	mov	r17,zero
 200f9e0:	d9c14015 	stw	r7,1280(sp)
 200f9e4:	d8000405 	stb	zero,16(sp)
 200f9e8:	003d1a06 	br	200ee54 <___vfprintf_internal_r+0xa38>
 200f9ec:	38800017 	ldw	r2,0(r7)
 200f9f0:	39c00104 	addi	r7,r7,4
 200f9f4:	d9c14015 	stw	r7,1280(sp)
 200f9f8:	1023d7fa 	srai	r17,r2,31
 200f9fc:	1021883a 	mov	r16,r2
 200fa00:	003d1206 	br	200ee4c <___vfprintf_internal_r+0xa30>
 200fa04:	3c000017 	ldw	r16,0(r7)
 200fa08:	01000044 	movi	r4,1
 200fa0c:	39c00104 	addi	r7,r7,4
 200fa10:	0023883a 	mov	r17,zero
 200fa14:	d9c14015 	stw	r7,1280(sp)
 200fa18:	d8000405 	stb	zero,16(sp)
 200fa1c:	003d0d06 	br	200ee54 <___vfprintf_internal_r+0xa38>
 200fa20:	008080b4 	movhi	r2,514
 200fa24:	10afab04 	addi	r2,r2,-16724
 200fa28:	94800044 	addi	r18,r18,1
 200fa2c:	8c400044 	addi	r17,r17,1
 200fa30:	a8800015 	stw	r2,0(r21)
 200fa34:	00c00044 	movi	r3,1
 200fa38:	008001c4 	movi	r2,7
 200fa3c:	a8c00115 	stw	r3,4(r21)
 200fa40:	dc800e15 	stw	r18,56(sp)
 200fa44:	dc400d15 	stw	r17,52(sp)
 200fa48:	1440ca16 	blt	r2,r17,200fd74 <___vfprintf_internal_r+0x1958>
 200fa4c:	a8c00204 	addi	r3,r21,8
 200fa50:	2000061e 	bne	r4,zero,200fa6c <___vfprintf_internal_r+0x1650>
 200fa54:	d9414717 	ldw	r5,1308(sp)
 200fa58:	2800041e 	bne	r5,zero,200fa6c <___vfprintf_internal_r+0x1650>
 200fa5c:	d9814c17 	ldw	r6,1328(sp)
 200fa60:	3080004c 	andi	r2,r6,1
 200fa64:	1005003a 	cmpeq	r2,r2,zero
 200fa68:	103bea1e 	bne	r2,zero,200ea14 <___vfprintf_internal_r+0x5f8>
 200fa6c:	00800044 	movi	r2,1
 200fa70:	dc400d17 	ldw	r17,52(sp)
 200fa74:	18800115 	stw	r2,4(r3)
 200fa78:	d8814917 	ldw	r2,1316(sp)
 200fa7c:	94800044 	addi	r18,r18,1
 200fa80:	8c400044 	addi	r17,r17,1
 200fa84:	18800015 	stw	r2,0(r3)
 200fa88:	008001c4 	movi	r2,7
 200fa8c:	dc800e15 	stw	r18,56(sp)
 200fa90:	dc400d15 	stw	r17,52(sp)
 200fa94:	1440ca16 	blt	r2,r17,200fdc0 <___vfprintf_internal_r+0x19a4>
 200fa98:	18c00204 	addi	r3,r3,8
 200fa9c:	0121c83a 	sub	r16,zero,r4
 200faa0:	0400500e 	bge	zero,r16,200fbe4 <___vfprintf_internal_r+0x17c8>
 200faa4:	00800404 	movi	r2,16
 200faa8:	1400800e 	bge	r2,r16,200fcac <___vfprintf_internal_r+0x1890>
 200faac:	1027883a 	mov	r19,r2
 200fab0:	070080b4 	movhi	fp,514
 200fab4:	e72fab84 	addi	fp,fp,-16722
 200fab8:	050001c4 	movi	r20,7
 200fabc:	00000306 	br	200facc <___vfprintf_internal_r+0x16b0>
 200fac0:	18c00204 	addi	r3,r3,8
 200fac4:	843ffc04 	addi	r16,r16,-16
 200fac8:	9c007a0e 	bge	r19,r16,200fcb4 <___vfprintf_internal_r+0x1898>
 200facc:	94800404 	addi	r18,r18,16
 200fad0:	8c400044 	addi	r17,r17,1
 200fad4:	1f000015 	stw	fp,0(r3)
 200fad8:	1cc00115 	stw	r19,4(r3)
 200fadc:	dc800e15 	stw	r18,56(sp)
 200fae0:	dc400d15 	stw	r17,52(sp)
 200fae4:	a47ff60e 	bge	r20,r17,200fac0 <___vfprintf_internal_r+0x16a4>
 200fae8:	d9014f17 	ldw	r4,1340(sp)
 200faec:	b00b883a 	mov	r5,r22
 200faf0:	d9800c04 	addi	r6,sp,48
 200faf4:	200e3c40 	call	200e3c4 <__sprint_r>
 200faf8:	103c001e 	bne	r2,zero,200eafc <___vfprintf_internal_r+0x6e0>
 200fafc:	dc800e17 	ldw	r18,56(sp)
 200fb00:	dc400d17 	ldw	r17,52(sp)
 200fb04:	d8c01904 	addi	r3,sp,100
 200fb08:	003fee06 	br	200fac4 <___vfprintf_internal_r+0x16a8>
 200fb0c:	3c000017 	ldw	r16,0(r7)
 200fb10:	0023883a 	mov	r17,zero
 200fb14:	39c00104 	addi	r7,r7,4
 200fb18:	d9c14015 	stw	r7,1280(sp)
 200fb1c:	003e8c06 	br	200f550 <___vfprintf_internal_r+0x1134>
 200fb20:	d9401904 	addi	r5,sp,100
 200fb24:	dd000f04 	addi	r20,sp,60
 200fb28:	d9414115 	stw	r5,1284(sp)
 200fb2c:	d9814417 	ldw	r6,1296(sp)
 200fb30:	880a973a 	slli	r5,r17,28
 200fb34:	8004d13a 	srli	r2,r16,4
 200fb38:	810003cc 	andi	r4,r16,15
 200fb3c:	3109883a 	add	r4,r6,r4
 200fb40:	2884b03a 	or	r2,r5,r2
 200fb44:	21400003 	ldbu	r5,0(r4)
 200fb48:	d9014117 	ldw	r4,1284(sp)
 200fb4c:	8806d13a 	srli	r3,r17,4
 200fb50:	1021883a 	mov	r16,r2
 200fb54:	213fffc4 	addi	r4,r4,-1
 200fb58:	d9014115 	stw	r4,1284(sp)
 200fb5c:	d9814117 	ldw	r6,1284(sp)
 200fb60:	10c8b03a 	or	r4,r2,r3
 200fb64:	1823883a 	mov	r17,r3
 200fb68:	31400005 	stb	r5,0(r6)
 200fb6c:	203fef1e 	bne	r4,zero,200fb2c <___vfprintf_internal_r+0x1710>
 200fb70:	003cc506 	br	200ee88 <___vfprintf_internal_r+0xa6c>
 200fb74:	00800c04 	movi	r2,48
 200fb78:	d98018c4 	addi	r6,sp,99
 200fb7c:	dd000f04 	addi	r20,sp,60
 200fb80:	d88018c5 	stb	r2,99(sp)
 200fb84:	d9814115 	stw	r6,1284(sp)
 200fb88:	003cbf06 	br	200ee88 <___vfprintf_internal_r+0xa6c>
 200fb8c:	dc400d17 	ldw	r17,52(sp)
 200fb90:	070080b4 	movhi	fp,514
 200fb94:	e72faf84 	addi	fp,fp,-16706
 200fb98:	003bc106 	br	200eaa0 <___vfprintf_internal_r+0x684>
 200fb9c:	d9414c17 	ldw	r5,1328(sp)
 200fba0:	2880040c 	andi	r2,r5,16
 200fba4:	10007c26 	beq	r2,zero,200fd98 <___vfprintf_internal_r+0x197c>
 200fba8:	38800017 	ldw	r2,0(r7)
 200fbac:	39c00104 	addi	r7,r7,4
 200fbb0:	d9c14015 	stw	r7,1280(sp)
 200fbb4:	d9814b17 	ldw	r6,1324(sp)
 200fbb8:	d9c14017 	ldw	r7,1280(sp)
 200fbbc:	11800015 	stw	r6,0(r2)
 200fbc0:	003a7206 	br	200e58c <___vfprintf_internal_r+0x170>
 200fbc4:	d9014f17 	ldw	r4,1340(sp)
 200fbc8:	b00b883a 	mov	r5,r22
 200fbcc:	d9800c04 	addi	r6,sp,48
 200fbd0:	200e3c40 	call	200e3c4 <__sprint_r>
 200fbd4:	103bc91e 	bne	r2,zero,200eafc <___vfprintf_internal_r+0x6e0>
 200fbd8:	dc800e17 	ldw	r18,56(sp)
 200fbdc:	dc400d17 	ldw	r17,52(sp)
 200fbe0:	d8c01904 	addi	r3,sp,100
 200fbe4:	d9014717 	ldw	r4,1308(sp)
 200fbe8:	d9414117 	ldw	r5,1284(sp)
 200fbec:	8c400044 	addi	r17,r17,1
 200fbf0:	9125883a 	add	r18,r18,r4
 200fbf4:	008001c4 	movi	r2,7
 200fbf8:	19400015 	stw	r5,0(r3)
 200fbfc:	19000115 	stw	r4,4(r3)
 200fc00:	dc800e15 	stw	r18,56(sp)
 200fc04:	dc400d15 	stw	r17,52(sp)
 200fc08:	147ce816 	blt	r2,r17,200efac <___vfprintf_internal_r+0xb90>
 200fc0c:	18c00204 	addi	r3,r3,8
 200fc10:	003b8006 	br	200ea14 <___vfprintf_internal_r+0x5f8>
 200fc14:	38c00017 	ldw	r3,0(r7)
 200fc18:	39000204 	addi	r4,r7,8
 200fc1c:	d9014015 	stw	r4,1280(sp)
 200fc20:	d8c14215 	stw	r3,1288(sp)
 200fc24:	39c00117 	ldw	r7,4(r7)
 200fc28:	d9c14315 	stw	r7,1292(sp)
 200fc2c:	003e1a06 	br	200f498 <___vfprintf_internal_r+0x107c>
 200fc30:	0005883a 	mov	r2,zero
 200fc34:	1409c83a 	sub	r4,r2,r16
 200fc38:	1105803a 	cmpltu	r2,r2,r4
 200fc3c:	044bc83a 	sub	r5,zero,r17
 200fc40:	2885c83a 	sub	r2,r5,r2
 200fc44:	2021883a 	mov	r16,r4
 200fc48:	1023883a 	mov	r17,r2
 200fc4c:	01000044 	movi	r4,1
 200fc50:	00800b44 	movi	r2,45
 200fc54:	d8800405 	stb	r2,16(sp)
 200fc58:	003c7e06 	br	200ee54 <___vfprintf_internal_r+0xa38>
 200fc5c:	d9014f17 	ldw	r4,1340(sp)
 200fc60:	b00b883a 	mov	r5,r22
 200fc64:	d9800c04 	addi	r6,sp,48
 200fc68:	200e3c40 	call	200e3c4 <__sprint_r>
 200fc6c:	103ba31e 	bne	r2,zero,200eafc <___vfprintf_internal_r+0x6e0>
 200fc70:	dc800e17 	ldw	r18,56(sp)
 200fc74:	dc400d17 	ldw	r17,52(sp)
 200fc78:	d9000517 	ldw	r4,20(sp)
 200fc7c:	d9401904 	addi	r5,sp,100
 200fc80:	003da106 	br	200f308 <___vfprintf_internal_r+0xeec>
 200fc84:	d9014f17 	ldw	r4,1340(sp)
 200fc88:	b00b883a 	mov	r5,r22
 200fc8c:	d9800c04 	addi	r6,sp,48
 200fc90:	200e3c40 	call	200e3c4 <__sprint_r>
 200fc94:	103b991e 	bne	r2,zero,200eafc <___vfprintf_internal_r+0x6e0>
 200fc98:	dc800e17 	ldw	r18,56(sp)
 200fc9c:	dc400d17 	ldw	r17,52(sp)
 200fca0:	d9000517 	ldw	r4,20(sp)
 200fca4:	d8c01904 	addi	r3,sp,100
 200fca8:	003d8b06 	br	200f2d8 <___vfprintf_internal_r+0xebc>
 200fcac:	070080b4 	movhi	fp,514
 200fcb0:	e72fab84 	addi	fp,fp,-16722
 200fcb4:	9425883a 	add	r18,r18,r16
 200fcb8:	8c400044 	addi	r17,r17,1
 200fcbc:	008001c4 	movi	r2,7
 200fcc0:	1f000015 	stw	fp,0(r3)
 200fcc4:	1c000115 	stw	r16,4(r3)
 200fcc8:	dc800e15 	stw	r18,56(sp)
 200fccc:	dc400d15 	stw	r17,52(sp)
 200fcd0:	147fbc16 	blt	r2,r17,200fbc4 <___vfprintf_internal_r+0x17a8>
 200fcd4:	18c00204 	addi	r3,r3,8
 200fcd8:	003fc206 	br	200fbe4 <___vfprintf_internal_r+0x17c8>
 200fcdc:	d9014f17 	ldw	r4,1340(sp)
 200fce0:	b00b883a 	mov	r5,r22
 200fce4:	d9800c04 	addi	r6,sp,48
 200fce8:	200e3c40 	call	200e3c4 <__sprint_r>
 200fcec:	103b831e 	bne	r2,zero,200eafc <___vfprintf_internal_r+0x6e0>
 200fcf0:	dc800e17 	ldw	r18,56(sp)
 200fcf4:	d9000517 	ldw	r4,20(sp)
 200fcf8:	d8c01904 	addi	r3,sp,100
 200fcfc:	003cfc06 	br	200f0f0 <___vfprintf_internal_r+0xcd4>
 200fd00:	070080b4 	movhi	fp,514
 200fd04:	e72fab84 	addi	fp,fp,-16722
 200fd08:	003bde06 	br	200ec84 <___vfprintf_internal_r+0x868>
 200fd0c:	008080b4 	movhi	r2,514
 200fd10:	10af9a04 	addi	r2,r2,-16792
 200fd14:	d8814115 	stw	r2,1284(sp)
 200fd18:	003def06 	br	200f4d8 <___vfprintf_internal_r+0x10bc>
 200fd1c:	d9014217 	ldw	r4,1288(sp)
 200fd20:	d9414317 	ldw	r5,1292(sp)
 200fd24:	20147340 	call	2014734 <__isnand>
 200fd28:	10003926 	beq	r2,zero,200fe10 <___vfprintf_internal_r+0x19f4>
 200fd2c:	d9414d17 	ldw	r5,1332(sp)
 200fd30:	008011c4 	movi	r2,71
 200fd34:	1140ce16 	blt	r2,r5,2010070 <___vfprintf_internal_r+0x1c54>
 200fd38:	018080b4 	movhi	r6,514
 200fd3c:	31af9b04 	addi	r6,r6,-16788
 200fd40:	d9814115 	stw	r6,1284(sp)
 200fd44:	003de406 	br	200f4d8 <___vfprintf_internal_r+0x10bc>
 200fd48:	d9014c17 	ldw	r4,1328(sp)
 200fd4c:	bdc00044 	addi	r23,r23,1
 200fd50:	b8c00007 	ldb	r3,0(r23)
 200fd54:	21000814 	ori	r4,r4,32
 200fd58:	d9014c15 	stw	r4,1328(sp)
 200fd5c:	003a2e06 	br	200e618 <___vfprintf_internal_r+0x1fc>
 200fd60:	dcc14515 	stw	r19,1300(sp)
 200fd64:	98011016 	blt	r19,zero,20101a8 <___vfprintf_internal_r+0x1d8c>
 200fd68:	980f883a 	mov	r7,r19
 200fd6c:	d8014615 	stw	zero,1304(sp)
 200fd70:	003c4c06 	br	200eea4 <___vfprintf_internal_r+0xa88>
 200fd74:	d9014f17 	ldw	r4,1340(sp)
 200fd78:	b00b883a 	mov	r5,r22
 200fd7c:	d9800c04 	addi	r6,sp,48
 200fd80:	200e3c40 	call	200e3c4 <__sprint_r>
 200fd84:	103b5d1e 	bne	r2,zero,200eafc <___vfprintf_internal_r+0x6e0>
 200fd88:	dc800e17 	ldw	r18,56(sp)
 200fd8c:	d9000517 	ldw	r4,20(sp)
 200fd90:	d8c01904 	addi	r3,sp,100
 200fd94:	003f2e06 	br	200fa50 <___vfprintf_internal_r+0x1634>
 200fd98:	d8c14c17 	ldw	r3,1328(sp)
 200fd9c:	1880100c 	andi	r2,r3,64
 200fda0:	1000a026 	beq	r2,zero,2010024 <___vfprintf_internal_r+0x1c08>
 200fda4:	38800017 	ldw	r2,0(r7)
 200fda8:	39c00104 	addi	r7,r7,4
 200fdac:	d9c14015 	stw	r7,1280(sp)
 200fdb0:	d9014b17 	ldw	r4,1324(sp)
 200fdb4:	d9c14017 	ldw	r7,1280(sp)
 200fdb8:	1100000d 	sth	r4,0(r2)
 200fdbc:	0039f306 	br	200e58c <___vfprintf_internal_r+0x170>
 200fdc0:	d9014f17 	ldw	r4,1340(sp)
 200fdc4:	b00b883a 	mov	r5,r22
 200fdc8:	d9800c04 	addi	r6,sp,48
 200fdcc:	200e3c40 	call	200e3c4 <__sprint_r>
 200fdd0:	103b4a1e 	bne	r2,zero,200eafc <___vfprintf_internal_r+0x6e0>
 200fdd4:	dc800e17 	ldw	r18,56(sp)
 200fdd8:	dc400d17 	ldw	r17,52(sp)
 200fddc:	d9000517 	ldw	r4,20(sp)
 200fde0:	d8c01904 	addi	r3,sp,100
 200fde4:	003f2d06 	br	200fa9c <___vfprintf_internal_r+0x1680>
 200fde8:	00800184 	movi	r2,6
 200fdec:	14c09a36 	bltu	r2,r19,2010058 <___vfprintf_internal_r+0x1c3c>
 200fdf0:	dcc14515 	stw	r19,1300(sp)
 200fdf4:	9800010e 	bge	r19,zero,200fdfc <___vfprintf_internal_r+0x19e0>
 200fdf8:	d8014515 	stw	zero,1300(sp)
 200fdfc:	008080b4 	movhi	r2,514
 200fe00:	10af9d04 	addi	r2,r2,-16780
 200fe04:	980f883a 	mov	r7,r19
 200fe08:	d8814115 	stw	r2,1284(sp)
 200fe0c:	003a7206 	br	200e7d8 <___vfprintf_internal_r+0x3bc>
 200fe10:	00bfffc4 	movi	r2,-1
 200fe14:	9880e226 	beq	r19,r2,20101a0 <___vfprintf_internal_r+0x1d84>
 200fe18:	d9414d17 	ldw	r5,1332(sp)
 200fe1c:	008019c4 	movi	r2,103
 200fe20:	2880dc26 	beq	r5,r2,2010194 <___vfprintf_internal_r+0x1d78>
 200fe24:	008011c4 	movi	r2,71
 200fe28:	2880da26 	beq	r5,r2,2010194 <___vfprintf_internal_r+0x1d78>
 200fe2c:	d9414c17 	ldw	r5,1328(sp)
 200fe30:	d9014317 	ldw	r4,1292(sp)
 200fe34:	d9814217 	ldw	r6,1288(sp)
 200fe38:	29404014 	ori	r5,r5,256
 200fe3c:	d9414c15 	stw	r5,1328(sp)
 200fe40:	2000cc16 	blt	r4,zero,2010174 <___vfprintf_internal_r+0x1d58>
 200fe44:	3021883a 	mov	r16,r6
 200fe48:	2023883a 	mov	r17,r4
 200fe4c:	0039883a 	mov	fp,zero
 200fe50:	d9414d17 	ldw	r5,1332(sp)
 200fe54:	00801984 	movi	r2,102
 200fe58:	2880b726 	beq	r5,r2,2010138 <___vfprintf_internal_r+0x1d1c>
 200fe5c:	00801184 	movi	r2,70
 200fe60:	2880b526 	beq	r5,r2,2010138 <___vfprintf_internal_r+0x1d1c>
 200fe64:	00801944 	movi	r2,101
 200fe68:	2880c826 	beq	r5,r2,201018c <___vfprintf_internal_r+0x1d70>
 200fe6c:	00801144 	movi	r2,69
 200fe70:	2880c626 	beq	r5,r2,201018c <___vfprintf_internal_r+0x1d70>
 200fe74:	9829883a 	mov	r20,r19
 200fe78:	d9014f17 	ldw	r4,1340(sp)
 200fe7c:	d8800504 	addi	r2,sp,20
 200fe80:	880d883a 	mov	r6,r17
 200fe84:	d8800115 	stw	r2,4(sp)
 200fe88:	d8c00604 	addi	r3,sp,24
 200fe8c:	d8800704 	addi	r2,sp,28
 200fe90:	800b883a 	mov	r5,r16
 200fe94:	01c00084 	movi	r7,2
 200fe98:	d8c00215 	stw	r3,8(sp)
 200fe9c:	d8800315 	stw	r2,12(sp)
 200fea0:	dd000015 	stw	r20,0(sp)
 200fea4:	20106840 	call	2010684 <_dtoa_r>
 200fea8:	d9814d17 	ldw	r6,1332(sp)
 200feac:	d8814115 	stw	r2,1284(sp)
 200feb0:	008019c4 	movi	r2,103
 200feb4:	30809526 	beq	r6,r2,201010c <___vfprintf_internal_r+0x1cf0>
 200feb8:	d8c14d17 	ldw	r3,1332(sp)
 200febc:	008011c4 	movi	r2,71
 200fec0:	18809226 	beq	r3,r2,201010c <___vfprintf_internal_r+0x1cf0>
 200fec4:	d9414117 	ldw	r5,1284(sp)
 200fec8:	d9814d17 	ldw	r6,1332(sp)
 200fecc:	00801984 	movi	r2,102
 200fed0:	2d25883a 	add	r18,r5,r20
 200fed4:	30808626 	beq	r6,r2,20100f0 <___vfprintf_internal_r+0x1cd4>
 200fed8:	00801184 	movi	r2,70
 200fedc:	30808426 	beq	r6,r2,20100f0 <___vfprintf_internal_r+0x1cd4>
 200fee0:	000d883a 	mov	r6,zero
 200fee4:	000f883a 	mov	r7,zero
 200fee8:	880b883a 	mov	r5,r17
 200feec:	8009883a 	mov	r4,r16
 200fef0:	20166000 	call	2016600 <__eqdf2>
 200fef4:	1000751e 	bne	r2,zero,20100cc <___vfprintf_internal_r+0x1cb0>
 200fef8:	9005883a 	mov	r2,r18
 200fefc:	dc800715 	stw	r18,28(sp)
 200ff00:	d9014117 	ldw	r4,1284(sp)
 200ff04:	d9414d17 	ldw	r5,1332(sp)
 200ff08:	00c019c4 	movi	r3,103
 200ff0c:	1125c83a 	sub	r18,r2,r4
 200ff10:	28c06826 	beq	r5,r3,20100b4 <___vfprintf_internal_r+0x1c98>
 200ff14:	008011c4 	movi	r2,71
 200ff18:	28806626 	beq	r5,r2,20100b4 <___vfprintf_internal_r+0x1c98>
 200ff1c:	d9000517 	ldw	r4,20(sp)
 200ff20:	d8c14d17 	ldw	r3,1332(sp)
 200ff24:	00801944 	movi	r2,101
 200ff28:	10c05516 	blt	r2,r3,2010080 <___vfprintf_internal_r+0x1c64>
 200ff2c:	213fffc4 	addi	r4,r4,-1
 200ff30:	d9000515 	stw	r4,20(sp)
 200ff34:	d8c00805 	stb	r3,32(sp)
 200ff38:	2021883a 	mov	r16,r4
 200ff3c:	2000c116 	blt	r4,zero,2010244 <___vfprintf_internal_r+0x1e28>
 200ff40:	00800ac4 	movi	r2,43
 200ff44:	d8800845 	stb	r2,33(sp)
 200ff48:	00800244 	movi	r2,9
 200ff4c:	1400af0e 	bge	r2,r16,201020c <___vfprintf_internal_r+0x1df0>
 200ff50:	1027883a 	mov	r19,r2
 200ff54:	dc400b84 	addi	r17,sp,46
 200ff58:	8009883a 	mov	r4,r16
 200ff5c:	01400284 	movi	r5,10
 200ff60:	200d05c0 	call	200d05c <__modsi3>
 200ff64:	10800c04 	addi	r2,r2,48
 200ff68:	8c7fffc4 	addi	r17,r17,-1
 200ff6c:	8009883a 	mov	r4,r16
 200ff70:	01400284 	movi	r5,10
 200ff74:	88800005 	stb	r2,0(r17)
 200ff78:	200cffc0 	call	200cffc <__divsi3>
 200ff7c:	1021883a 	mov	r16,r2
 200ff80:	98bff516 	blt	r19,r2,200ff58 <___vfprintf_internal_r+0x1b3c>
 200ff84:	10c00c04 	addi	r3,r2,48
 200ff88:	d88009c4 	addi	r2,sp,39
 200ff8c:	108001c4 	addi	r2,r2,7
 200ff90:	897fffc4 	addi	r5,r17,-1
 200ff94:	88ffffc5 	stb	r3,-1(r17)
 200ff98:	2880a72e 	bgeu	r5,r2,2010238 <___vfprintf_internal_r+0x1e1c>
 200ff9c:	1009883a 	mov	r4,r2
 200ffa0:	d9800804 	addi	r6,sp,32
 200ffa4:	d8c00884 	addi	r3,sp,34
 200ffa8:	28800003 	ldbu	r2,0(r5)
 200ffac:	29400044 	addi	r5,r5,1
 200ffb0:	18800005 	stb	r2,0(r3)
 200ffb4:	18c00044 	addi	r3,r3,1
 200ffb8:	293ffb36 	bltu	r5,r4,200ffa8 <___vfprintf_internal_r+0x1b8c>
 200ffbc:	1987c83a 	sub	r3,r3,r6
 200ffc0:	00800044 	movi	r2,1
 200ffc4:	d8c14815 	stw	r3,1312(sp)
 200ffc8:	90cf883a 	add	r7,r18,r3
 200ffcc:	1480960e 	bge	r2,r18,2010228 <___vfprintf_internal_r+0x1e0c>
 200ffd0:	39c00044 	addi	r7,r7,1
 200ffd4:	d9c14515 	stw	r7,1300(sp)
 200ffd8:	38003416 	blt	r7,zero,20100ac <___vfprintf_internal_r+0x1c90>
 200ffdc:	e0803fcc 	andi	r2,fp,255
 200ffe0:	1080201c 	xori	r2,r2,128
 200ffe4:	10bfe004 	addi	r2,r2,-128
 200ffe8:	10004e26 	beq	r2,zero,2010124 <___vfprintf_internal_r+0x1d08>
 200ffec:	00800b44 	movi	r2,45
 200fff0:	dc814715 	stw	r18,1308(sp)
 200fff4:	d8014615 	stw	zero,1304(sp)
 200fff8:	d8800405 	stb	r2,16(sp)
 200fffc:	003bab06 	br	200eeac <___vfprintf_internal_r+0xa90>
 2010000:	00800b44 	movi	r2,45
 2010004:	d8800405 	stb	r2,16(sp)
 2010008:	003d2d06 	br	200f4c0 <___vfprintf_internal_r+0x10a4>
 201000c:	d9014f17 	ldw	r4,1340(sp)
 2010010:	b00b883a 	mov	r5,r22
 2010014:	d9800c04 	addi	r6,sp,48
 2010018:	200e3c40 	call	200e3c4 <__sprint_r>
 201001c:	103ab71e 	bne	r2,zero,200eafc <___vfprintf_internal_r+0x6e0>
 2010020:	003ab506 	br	200eaf8 <___vfprintf_internal_r+0x6dc>
 2010024:	38800017 	ldw	r2,0(r7)
 2010028:	39c00104 	addi	r7,r7,4
 201002c:	d9c14015 	stw	r7,1280(sp)
 2010030:	d9414b17 	ldw	r5,1324(sp)
 2010034:	d9c14017 	ldw	r7,1280(sp)
 2010038:	11400015 	stw	r5,0(r2)
 201003c:	00395306 	br	200e58c <___vfprintf_internal_r+0x170>
 2010040:	980f883a 	mov	r7,r19
 2010044:	dcc14515 	stw	r19,1300(sp)
 2010048:	d8014615 	stw	zero,1304(sp)
 201004c:	003b9506 	br	200eea4 <___vfprintf_internal_r+0xa88>
 2010050:	0027883a 	mov	r19,zero
 2010054:	00397206 	br	200e620 <___vfprintf_internal_r+0x204>
 2010058:	00c080b4 	movhi	r3,514
 201005c:	18ef9d04 	addi	r3,r3,-16780
 2010060:	100f883a 	mov	r7,r2
 2010064:	d8814515 	stw	r2,1300(sp)
 2010068:	d8c14115 	stw	r3,1284(sp)
 201006c:	0039da06 	br	200e7d8 <___vfprintf_internal_r+0x3bc>
 2010070:	008080b4 	movhi	r2,514
 2010074:	10af9c04 	addi	r2,r2,-16784
 2010078:	d8814115 	stw	r2,1284(sp)
 201007c:	003d1606 	br	200f4d8 <___vfprintf_internal_r+0x10bc>
 2010080:	d9414d17 	ldw	r5,1332(sp)
 2010084:	00801984 	movi	r2,102
 2010088:	28804926 	beq	r5,r2,20101b0 <___vfprintf_internal_r+0x1d94>
 201008c:	200f883a 	mov	r7,r4
 2010090:	24805716 	blt	r4,r18,20101f0 <___vfprintf_internal_r+0x1dd4>
 2010094:	d9414c17 	ldw	r5,1328(sp)
 2010098:	2880004c 	andi	r2,r5,1
 201009c:	10000126 	beq	r2,zero,20100a4 <___vfprintf_internal_r+0x1c88>
 20100a0:	21c00044 	addi	r7,r4,1
 20100a4:	d9c14515 	stw	r7,1300(sp)
 20100a8:	383fcc0e 	bge	r7,zero,200ffdc <___vfprintf_internal_r+0x1bc0>
 20100ac:	d8014515 	stw	zero,1300(sp)
 20100b0:	003fca06 	br	200ffdc <___vfprintf_internal_r+0x1bc0>
 20100b4:	d9000517 	ldw	r4,20(sp)
 20100b8:	00bfff04 	movi	r2,-4
 20100bc:	1100480e 	bge	r2,r4,20101e0 <___vfprintf_internal_r+0x1dc4>
 20100c0:	99004716 	blt	r19,r4,20101e0 <___vfprintf_internal_r+0x1dc4>
 20100c4:	d8c14d15 	stw	r3,1332(sp)
 20100c8:	003ff006 	br	201008c <___vfprintf_internal_r+0x1c70>
 20100cc:	d8800717 	ldw	r2,28(sp)
 20100d0:	14bf8b2e 	bgeu	r2,r18,200ff00 <___vfprintf_internal_r+0x1ae4>
 20100d4:	9007883a 	mov	r3,r18
 20100d8:	01000c04 	movi	r4,48
 20100dc:	11000005 	stb	r4,0(r2)
 20100e0:	10800044 	addi	r2,r2,1
 20100e4:	d8800715 	stw	r2,28(sp)
 20100e8:	18bffc1e 	bne	r3,r2,20100dc <___vfprintf_internal_r+0x1cc0>
 20100ec:	003f8406 	br	200ff00 <___vfprintf_internal_r+0x1ae4>
 20100f0:	d8814117 	ldw	r2,1284(sp)
 20100f4:	10c00007 	ldb	r3,0(r2)
 20100f8:	00800c04 	movi	r2,48
 20100fc:	18805b26 	beq	r3,r2,201026c <___vfprintf_internal_r+0x1e50>
 2010100:	d9000517 	ldw	r4,20(sp)
 2010104:	9125883a 	add	r18,r18,r4
 2010108:	003f7506 	br	200fee0 <___vfprintf_internal_r+0x1ac4>
 201010c:	d9014c17 	ldw	r4,1328(sp)
 2010110:	2080004c 	andi	r2,r4,1
 2010114:	1005003a 	cmpeq	r2,r2,zero
 2010118:	103f6a26 	beq	r2,zero,200fec4 <___vfprintf_internal_r+0x1aa8>
 201011c:	d8800717 	ldw	r2,28(sp)
 2010120:	003f7706 	br	200ff00 <___vfprintf_internal_r+0x1ae4>
 2010124:	d9c14515 	stw	r7,1300(sp)
 2010128:	38004d16 	blt	r7,zero,2010260 <___vfprintf_internal_r+0x1e44>
 201012c:	dc814715 	stw	r18,1308(sp)
 2010130:	d8014615 	stw	zero,1304(sp)
 2010134:	003b5b06 	br	200eea4 <___vfprintf_internal_r+0xa88>
 2010138:	d9014f17 	ldw	r4,1340(sp)
 201013c:	d8800504 	addi	r2,sp,20
 2010140:	d8800115 	stw	r2,4(sp)
 2010144:	d8c00604 	addi	r3,sp,24
 2010148:	d8800704 	addi	r2,sp,28
 201014c:	800b883a 	mov	r5,r16
 2010150:	880d883a 	mov	r6,r17
 2010154:	01c000c4 	movi	r7,3
 2010158:	d8c00215 	stw	r3,8(sp)
 201015c:	d8800315 	stw	r2,12(sp)
 2010160:	dcc00015 	stw	r19,0(sp)
 2010164:	9829883a 	mov	r20,r19
 2010168:	20106840 	call	2010684 <_dtoa_r>
 201016c:	d8814115 	stw	r2,1284(sp)
 2010170:	003f5106 	br	200feb8 <___vfprintf_internal_r+0x1a9c>
 2010174:	d8c14217 	ldw	r3,1288(sp)
 2010178:	d9014317 	ldw	r4,1292(sp)
 201017c:	07000b44 	movi	fp,45
 2010180:	1821883a 	mov	r16,r3
 2010184:	2460003c 	xorhi	r17,r4,32768
 2010188:	003f3106 	br	200fe50 <___vfprintf_internal_r+0x1a34>
 201018c:	9d000044 	addi	r20,r19,1
 2010190:	003f3906 	br	200fe78 <___vfprintf_internal_r+0x1a5c>
 2010194:	983f251e 	bne	r19,zero,200fe2c <___vfprintf_internal_r+0x1a10>
 2010198:	04c00044 	movi	r19,1
 201019c:	003f2306 	br	200fe2c <___vfprintf_internal_r+0x1a10>
 20101a0:	04c00184 	movi	r19,6
 20101a4:	003f2106 	br	200fe2c <___vfprintf_internal_r+0x1a10>
 20101a8:	d8014515 	stw	zero,1300(sp)
 20101ac:	003eee06 	br	200fd68 <___vfprintf_internal_r+0x194c>
 20101b0:	200f883a 	mov	r7,r4
 20101b4:	0100370e 	bge	zero,r4,2010294 <___vfprintf_internal_r+0x1e78>
 20101b8:	9800031e 	bne	r19,zero,20101c8 <___vfprintf_internal_r+0x1dac>
 20101bc:	d9814c17 	ldw	r6,1328(sp)
 20101c0:	3080004c 	andi	r2,r6,1
 20101c4:	103fb726 	beq	r2,zero,20100a4 <___vfprintf_internal_r+0x1c88>
 20101c8:	20800044 	addi	r2,r4,1
 20101cc:	98a7883a 	add	r19,r19,r2
 20101d0:	dcc14515 	stw	r19,1300(sp)
 20101d4:	980f883a 	mov	r7,r19
 20101d8:	983f800e 	bge	r19,zero,200ffdc <___vfprintf_internal_r+0x1bc0>
 20101dc:	003fb306 	br	20100ac <___vfprintf_internal_r+0x1c90>
 20101e0:	d9814d17 	ldw	r6,1332(sp)
 20101e4:	31bfff84 	addi	r6,r6,-2
 20101e8:	d9814d15 	stw	r6,1332(sp)
 20101ec:	003f4c06 	br	200ff20 <___vfprintf_internal_r+0x1b04>
 20101f0:	0100180e 	bge	zero,r4,2010254 <___vfprintf_internal_r+0x1e38>
 20101f4:	00800044 	movi	r2,1
 20101f8:	1485883a 	add	r2,r2,r18
 20101fc:	d8814515 	stw	r2,1300(sp)
 2010200:	100f883a 	mov	r7,r2
 2010204:	103f750e 	bge	r2,zero,200ffdc <___vfprintf_internal_r+0x1bc0>
 2010208:	003fa806 	br	20100ac <___vfprintf_internal_r+0x1c90>
 201020c:	80c00c04 	addi	r3,r16,48
 2010210:	00800c04 	movi	r2,48
 2010214:	d8c008c5 	stb	r3,35(sp)
 2010218:	d9800804 	addi	r6,sp,32
 201021c:	d8c00904 	addi	r3,sp,36
 2010220:	d8800885 	stb	r2,34(sp)
 2010224:	003f6506 	br	200ffbc <___vfprintf_internal_r+0x1ba0>
 2010228:	d9014c17 	ldw	r4,1328(sp)
 201022c:	2084703a 	and	r2,r4,r2
 2010230:	103f9c26 	beq	r2,zero,20100a4 <___vfprintf_internal_r+0x1c88>
 2010234:	003f6606 	br	200ffd0 <___vfprintf_internal_r+0x1bb4>
 2010238:	d9800804 	addi	r6,sp,32
 201023c:	d8c00884 	addi	r3,sp,34
 2010240:	003f5e06 	br	200ffbc <___vfprintf_internal_r+0x1ba0>
 2010244:	00800b44 	movi	r2,45
 2010248:	0121c83a 	sub	r16,zero,r4
 201024c:	d8800845 	stb	r2,33(sp)
 2010250:	003f3d06 	br	200ff48 <___vfprintf_internal_r+0x1b2c>
 2010254:	00800084 	movi	r2,2
 2010258:	1105c83a 	sub	r2,r2,r4
 201025c:	003fe606 	br	20101f8 <___vfprintf_internal_r+0x1ddc>
 2010260:	d8014515 	stw	zero,1300(sp)
 2010264:	dc814715 	stw	r18,1308(sp)
 2010268:	003fb106 	br	2010130 <___vfprintf_internal_r+0x1d14>
 201026c:	000d883a 	mov	r6,zero
 2010270:	000f883a 	mov	r7,zero
 2010274:	8009883a 	mov	r4,r16
 2010278:	880b883a 	mov	r5,r17
 201027c:	20166880 	call	2016688 <__nedf2>
 2010280:	103f9f26 	beq	r2,zero,2010100 <___vfprintf_internal_r+0x1ce4>
 2010284:	00800044 	movi	r2,1
 2010288:	1509c83a 	sub	r4,r2,r20
 201028c:	d9000515 	stw	r4,20(sp)
 2010290:	003f9b06 	br	2010100 <___vfprintf_internal_r+0x1ce4>
 2010294:	98000d1e 	bne	r19,zero,20102cc <___vfprintf_internal_r+0x1eb0>
 2010298:	d8c14c17 	ldw	r3,1328(sp)
 201029c:	1880004c 	andi	r2,r3,1
 20102a0:	10000a1e 	bne	r2,zero,20102cc <___vfprintf_internal_r+0x1eb0>
 20102a4:	01000044 	movi	r4,1
 20102a8:	200f883a 	mov	r7,r4
 20102ac:	d9014515 	stw	r4,1300(sp)
 20102b0:	003f4a06 	br	200ffdc <___vfprintf_internal_r+0x1bc0>
 20102b4:	3cc00017 	ldw	r19,0(r7)
 20102b8:	39c00104 	addi	r7,r7,4
 20102bc:	983d0e0e 	bge	r19,zero,200f6f8 <___vfprintf_internal_r+0x12dc>
 20102c0:	b8c00007 	ldb	r3,0(r23)
 20102c4:	04ffffc4 	movi	r19,-1
 20102c8:	0038d306 	br	200e618 <___vfprintf_internal_r+0x1fc>
 20102cc:	9cc00084 	addi	r19,r19,2
 20102d0:	dcc14515 	stw	r19,1300(sp)
 20102d4:	980f883a 	mov	r7,r19
 20102d8:	983f400e 	bge	r19,zero,200ffdc <___vfprintf_internal_r+0x1bc0>
 20102dc:	003f7306 	br	20100ac <___vfprintf_internal_r+0x1c90>

020102e0 <__vfprintf_internal>:
 20102e0:	008080b4 	movhi	r2,514
 20102e4:	10b6fa04 	addi	r2,r2,-9240
 20102e8:	2013883a 	mov	r9,r4
 20102ec:	11000017 	ldw	r4,0(r2)
 20102f0:	2805883a 	mov	r2,r5
 20102f4:	300f883a 	mov	r7,r6
 20102f8:	480b883a 	mov	r5,r9
 20102fc:	100d883a 	mov	r6,r2
 2010300:	200e41c1 	jmpi	200e41c <___vfprintf_internal_r>

02010304 <__swsetup_r>:
 2010304:	008080b4 	movhi	r2,514
 2010308:	10b6fa04 	addi	r2,r2,-9240
 201030c:	10c00017 	ldw	r3,0(r2)
 2010310:	defffd04 	addi	sp,sp,-12
 2010314:	dc400115 	stw	r17,4(sp)
 2010318:	dc000015 	stw	r16,0(sp)
 201031c:	dfc00215 	stw	ra,8(sp)
 2010320:	2023883a 	mov	r17,r4
 2010324:	2821883a 	mov	r16,r5
 2010328:	18000226 	beq	r3,zero,2010334 <__swsetup_r+0x30>
 201032c:	18800e17 	ldw	r2,56(r3)
 2010330:	10001f26 	beq	r2,zero,20103b0 <__swsetup_r+0xac>
 2010334:	8100030b 	ldhu	r4,12(r16)
 2010338:	2080020c 	andi	r2,r4,8
 201033c:	10002826 	beq	r2,zero,20103e0 <__swsetup_r+0xdc>
 2010340:	81400417 	ldw	r5,16(r16)
 2010344:	28001d26 	beq	r5,zero,20103bc <__swsetup_r+0xb8>
 2010348:	2080004c 	andi	r2,r4,1
 201034c:	1005003a 	cmpeq	r2,r2,zero
 2010350:	10000b26 	beq	r2,zero,2010380 <__swsetup_r+0x7c>
 2010354:	2080008c 	andi	r2,r4,2
 2010358:	10001226 	beq	r2,zero,20103a4 <__swsetup_r+0xa0>
 201035c:	0005883a 	mov	r2,zero
 2010360:	80800215 	stw	r2,8(r16)
 2010364:	28000b26 	beq	r5,zero,2010394 <__swsetup_r+0x90>
 2010368:	0005883a 	mov	r2,zero
 201036c:	dfc00217 	ldw	ra,8(sp)
 2010370:	dc400117 	ldw	r17,4(sp)
 2010374:	dc000017 	ldw	r16,0(sp)
 2010378:	dec00304 	addi	sp,sp,12
 201037c:	f800283a 	ret
 2010380:	80800517 	ldw	r2,20(r16)
 2010384:	80000215 	stw	zero,8(r16)
 2010388:	0085c83a 	sub	r2,zero,r2
 201038c:	80800615 	stw	r2,24(r16)
 2010390:	283ff51e 	bne	r5,zero,2010368 <__swsetup_r+0x64>
 2010394:	2080200c 	andi	r2,r4,128
 2010398:	103ff326 	beq	r2,zero,2010368 <__swsetup_r+0x64>
 201039c:	00bfffc4 	movi	r2,-1
 20103a0:	003ff206 	br	201036c <__swsetup_r+0x68>
 20103a4:	80800517 	ldw	r2,20(r16)
 20103a8:	80800215 	stw	r2,8(r16)
 20103ac:	003fed06 	br	2010364 <__swsetup_r+0x60>
 20103b0:	1809883a 	mov	r4,r3
 20103b4:	2011ed00 	call	2011ed0 <__sinit>
 20103b8:	003fde06 	br	2010334 <__swsetup_r+0x30>
 20103bc:	20c0a00c 	andi	r3,r4,640
 20103c0:	00808004 	movi	r2,512
 20103c4:	18bfe026 	beq	r3,r2,2010348 <__swsetup_r+0x44>
 20103c8:	8809883a 	mov	r4,r17
 20103cc:	800b883a 	mov	r5,r16
 20103d0:	2012c7c0 	call	2012c7c <__smakebuf_r>
 20103d4:	8100030b 	ldhu	r4,12(r16)
 20103d8:	81400417 	ldw	r5,16(r16)
 20103dc:	003fda06 	br	2010348 <__swsetup_r+0x44>
 20103e0:	2080040c 	andi	r2,r4,16
 20103e4:	103fed26 	beq	r2,zero,201039c <__swsetup_r+0x98>
 20103e8:	2080010c 	andi	r2,r4,4
 20103ec:	10001226 	beq	r2,zero,2010438 <__swsetup_r+0x134>
 20103f0:	81400c17 	ldw	r5,48(r16)
 20103f4:	28000526 	beq	r5,zero,201040c <__swsetup_r+0x108>
 20103f8:	80801004 	addi	r2,r16,64
 20103fc:	28800226 	beq	r5,r2,2010408 <__swsetup_r+0x104>
 2010400:	8809883a 	mov	r4,r17
 2010404:	20122880 	call	2012288 <_free_r>
 2010408:	80000c15 	stw	zero,48(r16)
 201040c:	8080030b 	ldhu	r2,12(r16)
 2010410:	81400417 	ldw	r5,16(r16)
 2010414:	80000115 	stw	zero,4(r16)
 2010418:	10bff6cc 	andi	r2,r2,65499
 201041c:	8080030d 	sth	r2,12(r16)
 2010420:	81400015 	stw	r5,0(r16)
 2010424:	8080030b 	ldhu	r2,12(r16)
 2010428:	10800214 	ori	r2,r2,8
 201042c:	113fffcc 	andi	r4,r2,65535
 2010430:	8080030d 	sth	r2,12(r16)
 2010434:	003fc306 	br	2010344 <__swsetup_r+0x40>
 2010438:	81400417 	ldw	r5,16(r16)
 201043c:	003ff906 	br	2010424 <__swsetup_r+0x120>

02010440 <quorem>:
 2010440:	28c00417 	ldw	r3,16(r5)
 2010444:	20800417 	ldw	r2,16(r4)
 2010448:	defff104 	addi	sp,sp,-60
 201044c:	dfc00e15 	stw	ra,56(sp)
 2010450:	df000d15 	stw	fp,52(sp)
 2010454:	ddc00c15 	stw	r23,48(sp)
 2010458:	dd800b15 	stw	r22,44(sp)
 201045c:	dd400a15 	stw	r21,40(sp)
 2010460:	dd000915 	stw	r20,36(sp)
 2010464:	dcc00815 	stw	r19,32(sp)
 2010468:	dc800715 	stw	r18,28(sp)
 201046c:	dc400615 	stw	r17,24(sp)
 2010470:	dc000515 	stw	r16,20(sp)
 2010474:	d9000315 	stw	r4,12(sp)
 2010478:	d9400415 	stw	r5,16(sp)
 201047c:	10c07f16 	blt	r2,r3,201067c <quorem+0x23c>
 2010480:	1d3fffc4 	addi	r20,r3,-1
 2010484:	d8c00417 	ldw	r3,16(sp)
 2010488:	d9000317 	ldw	r4,12(sp)
 201048c:	a505883a 	add	r2,r20,r20
 2010490:	1085883a 	add	r2,r2,r2
 2010494:	1cc00504 	addi	r19,r3,20
 2010498:	25c00504 	addi	r23,r4,20
 201049c:	98ad883a 	add	r22,r19,r2
 20104a0:	15c7883a 	add	r3,r2,r23
 20104a4:	b1400017 	ldw	r5,0(r22)
 20104a8:	19000017 	ldw	r4,0(r3)
 20104ac:	d8c00015 	stw	r3,0(sp)
 20104b0:	29400044 	addi	r5,r5,1
 20104b4:	d9000215 	stw	r4,8(sp)
 20104b8:	200d0bc0 	call	200d0bc <__udivsi3>
 20104bc:	1039883a 	mov	fp,r2
 20104c0:	10003d1e 	bne	r2,zero,20105b8 <quorem+0x178>
 20104c4:	d9400417 	ldw	r5,16(sp)
 20104c8:	d9000317 	ldw	r4,12(sp)
 20104cc:	20131d00 	call	20131d0 <__mcmp>
 20104d0:	10002c16 	blt	r2,zero,2010584 <quorem+0x144>
 20104d4:	e7000044 	addi	fp,fp,1
 20104d8:	b80f883a 	mov	r7,r23
 20104dc:	0011883a 	mov	r8,zero
 20104e0:	0009883a 	mov	r4,zero
 20104e4:	99400017 	ldw	r5,0(r19)
 20104e8:	38c00017 	ldw	r3,0(r7)
 20104ec:	9cc00104 	addi	r19,r19,4
 20104f0:	28bfffcc 	andi	r2,r5,65535
 20104f4:	2085883a 	add	r2,r4,r2
 20104f8:	11bfffcc 	andi	r6,r2,65535
 20104fc:	193fffcc 	andi	r4,r3,65535
 2010500:	1004d43a 	srli	r2,r2,16
 2010504:	280ad43a 	srli	r5,r5,16
 2010508:	2189c83a 	sub	r4,r4,r6
 201050c:	2209883a 	add	r4,r4,r8
 2010510:	1806d43a 	srli	r3,r3,16
 2010514:	288b883a 	add	r5,r5,r2
 2010518:	200dd43a 	srai	r6,r4,16
 201051c:	28bfffcc 	andi	r2,r5,65535
 2010520:	1887c83a 	sub	r3,r3,r2
 2010524:	1987883a 	add	r3,r3,r6
 2010528:	3900000d 	sth	r4,0(r7)
 201052c:	38c0008d 	sth	r3,2(r7)
 2010530:	2808d43a 	srli	r4,r5,16
 2010534:	39c00104 	addi	r7,r7,4
 2010538:	1811d43a 	srai	r8,r3,16
 201053c:	b4ffe92e 	bgeu	r22,r19,20104e4 <quorem+0xa4>
 2010540:	a505883a 	add	r2,r20,r20
 2010544:	1085883a 	add	r2,r2,r2
 2010548:	b885883a 	add	r2,r23,r2
 201054c:	10c00017 	ldw	r3,0(r2)
 2010550:	18000c1e 	bne	r3,zero,2010584 <quorem+0x144>
 2010554:	113fff04 	addi	r4,r2,-4
 2010558:	b900082e 	bgeu	r23,r4,201057c <quorem+0x13c>
 201055c:	10bfff17 	ldw	r2,-4(r2)
 2010560:	10000326 	beq	r2,zero,2010570 <quorem+0x130>
 2010564:	00000506 	br	201057c <quorem+0x13c>
 2010568:	20800017 	ldw	r2,0(r4)
 201056c:	1000031e 	bne	r2,zero,201057c <quorem+0x13c>
 2010570:	213fff04 	addi	r4,r4,-4
 2010574:	a53fffc4 	addi	r20,r20,-1
 2010578:	b93ffb36 	bltu	r23,r4,2010568 <quorem+0x128>
 201057c:	d9000317 	ldw	r4,12(sp)
 2010580:	25000415 	stw	r20,16(r4)
 2010584:	e005883a 	mov	r2,fp
 2010588:	dfc00e17 	ldw	ra,56(sp)
 201058c:	df000d17 	ldw	fp,52(sp)
 2010590:	ddc00c17 	ldw	r23,48(sp)
 2010594:	dd800b17 	ldw	r22,44(sp)
 2010598:	dd400a17 	ldw	r21,40(sp)
 201059c:	dd000917 	ldw	r20,36(sp)
 20105a0:	dcc00817 	ldw	r19,32(sp)
 20105a4:	dc800717 	ldw	r18,28(sp)
 20105a8:	dc400617 	ldw	r17,24(sp)
 20105ac:	dc000517 	ldw	r16,20(sp)
 20105b0:	dec00f04 	addi	sp,sp,60
 20105b4:	f800283a 	ret
 20105b8:	b823883a 	mov	r17,r23
 20105bc:	9825883a 	mov	r18,r19
 20105c0:	d8000115 	stw	zero,4(sp)
 20105c4:	002b883a 	mov	r21,zero
 20105c8:	94000017 	ldw	r16,0(r18)
 20105cc:	e009883a 	mov	r4,fp
 20105d0:	94800104 	addi	r18,r18,4
 20105d4:	817fffcc 	andi	r5,r16,65535
 20105d8:	200d0cc0 	call	200d0cc <__mulsi3>
 20105dc:	800ad43a 	srli	r5,r16,16
 20105e0:	e009883a 	mov	r4,fp
 20105e4:	a8a1883a 	add	r16,r21,r2
 20105e8:	200d0cc0 	call	200d0cc <__mulsi3>
 20105ec:	89000017 	ldw	r4,0(r17)
 20105f0:	80ffffcc 	andi	r3,r16,65535
 20105f4:	8020d43a 	srli	r16,r16,16
 20105f8:	217fffcc 	andi	r5,r4,65535
 20105fc:	28cbc83a 	sub	r5,r5,r3
 2010600:	d8c00117 	ldw	r3,4(sp)
 2010604:	2008d43a 	srli	r4,r4,16
 2010608:	1405883a 	add	r2,r2,r16
 201060c:	28cb883a 	add	r5,r5,r3
 2010610:	280dd43a 	srai	r6,r5,16
 2010614:	10ffffcc 	andi	r3,r2,65535
 2010618:	20c9c83a 	sub	r4,r4,r3
 201061c:	2189883a 	add	r4,r4,r6
 2010620:	8900008d 	sth	r4,2(r17)
 2010624:	2009d43a 	srai	r4,r4,16
 2010628:	8940000d 	sth	r5,0(r17)
 201062c:	102ad43a 	srli	r21,r2,16
 2010630:	8c400104 	addi	r17,r17,4
 2010634:	d9000115 	stw	r4,4(sp)
 2010638:	b4bfe32e 	bgeu	r22,r18,20105c8 <quorem+0x188>
 201063c:	d9000217 	ldw	r4,8(sp)
 2010640:	203fa01e 	bne	r4,zero,20104c4 <quorem+0x84>
 2010644:	d8800017 	ldw	r2,0(sp)
 2010648:	10ffff04 	addi	r3,r2,-4
 201064c:	b8c0082e 	bgeu	r23,r3,2010670 <quorem+0x230>
 2010650:	10bfff17 	ldw	r2,-4(r2)
 2010654:	10000326 	beq	r2,zero,2010664 <quorem+0x224>
 2010658:	00000506 	br	2010670 <quorem+0x230>
 201065c:	18800017 	ldw	r2,0(r3)
 2010660:	1000031e 	bne	r2,zero,2010670 <quorem+0x230>
 2010664:	18ffff04 	addi	r3,r3,-4
 2010668:	a53fffc4 	addi	r20,r20,-1
 201066c:	b8fffb36 	bltu	r23,r3,201065c <quorem+0x21c>
 2010670:	d8c00317 	ldw	r3,12(sp)
 2010674:	1d000415 	stw	r20,16(r3)
 2010678:	003f9206 	br	20104c4 <quorem+0x84>
 201067c:	0005883a 	mov	r2,zero
 2010680:	003fc106 	br	2010588 <quorem+0x148>

02010684 <_dtoa_r>:
 2010684:	22001017 	ldw	r8,64(r4)
 2010688:	deffda04 	addi	sp,sp,-152
 201068c:	dd402115 	stw	r21,132(sp)
 2010690:	dd002015 	stw	r20,128(sp)
 2010694:	dc801e15 	stw	r18,120(sp)
 2010698:	dc401d15 	stw	r17,116(sp)
 201069c:	dfc02515 	stw	ra,148(sp)
 20106a0:	df002415 	stw	fp,144(sp)
 20106a4:	ddc02315 	stw	r23,140(sp)
 20106a8:	dd802215 	stw	r22,136(sp)
 20106ac:	dcc01f15 	stw	r19,124(sp)
 20106b0:	dc001c15 	stw	r16,112(sp)
 20106b4:	d9001615 	stw	r4,88(sp)
 20106b8:	3023883a 	mov	r17,r6
 20106bc:	2829883a 	mov	r20,r5
 20106c0:	d9c01715 	stw	r7,92(sp)
 20106c4:	dc802817 	ldw	r18,160(sp)
 20106c8:	302b883a 	mov	r21,r6
 20106cc:	40000a26 	beq	r8,zero,20106f8 <_dtoa_r+0x74>
 20106d0:	20801117 	ldw	r2,68(r4)
 20106d4:	400b883a 	mov	r5,r8
 20106d8:	40800115 	stw	r2,4(r8)
 20106dc:	20c01117 	ldw	r3,68(r4)
 20106e0:	00800044 	movi	r2,1
 20106e4:	10c4983a 	sll	r2,r2,r3
 20106e8:	40800215 	stw	r2,8(r8)
 20106ec:	20130740 	call	2013074 <_Bfree>
 20106f0:	d8c01617 	ldw	r3,88(sp)
 20106f4:	18001015 	stw	zero,64(r3)
 20106f8:	8800a316 	blt	r17,zero,2010988 <_dtoa_r+0x304>
 20106fc:	90000015 	stw	zero,0(r18)
 2010700:	a8dffc2c 	andhi	r3,r21,32752
 2010704:	009ffc34 	movhi	r2,32752
 2010708:	18809126 	beq	r3,r2,2010950 <_dtoa_r+0x2cc>
 201070c:	000d883a 	mov	r6,zero
 2010710:	000f883a 	mov	r7,zero
 2010714:	a009883a 	mov	r4,r20
 2010718:	a80b883a 	mov	r5,r21
 201071c:	dd001215 	stw	r20,72(sp)
 2010720:	dd401315 	stw	r21,76(sp)
 2010724:	20166880 	call	2016688 <__nedf2>
 2010728:	1000171e 	bne	r2,zero,2010788 <_dtoa_r+0x104>
 201072c:	d9802717 	ldw	r6,156(sp)
 2010730:	00800044 	movi	r2,1
 2010734:	30800015 	stw	r2,0(r6)
 2010738:	d8802917 	ldw	r2,164(sp)
 201073c:	10029b26 	beq	r2,zero,20111ac <_dtoa_r+0xb28>
 2010740:	d9002917 	ldw	r4,164(sp)
 2010744:	008080b4 	movhi	r2,514
 2010748:	10afab44 	addi	r2,r2,-16723
 201074c:	10ffffc4 	addi	r3,r2,-1
 2010750:	20800015 	stw	r2,0(r4)
 2010754:	1805883a 	mov	r2,r3
 2010758:	dfc02517 	ldw	ra,148(sp)
 201075c:	df002417 	ldw	fp,144(sp)
 2010760:	ddc02317 	ldw	r23,140(sp)
 2010764:	dd802217 	ldw	r22,136(sp)
 2010768:	dd402117 	ldw	r21,132(sp)
 201076c:	dd002017 	ldw	r20,128(sp)
 2010770:	dcc01f17 	ldw	r19,124(sp)
 2010774:	dc801e17 	ldw	r18,120(sp)
 2010778:	dc401d17 	ldw	r17,116(sp)
 201077c:	dc001c17 	ldw	r16,112(sp)
 2010780:	dec02604 	addi	sp,sp,152
 2010784:	f800283a 	ret
 2010788:	d9001617 	ldw	r4,88(sp)
 201078c:	d9401217 	ldw	r5,72(sp)
 2010790:	d8800104 	addi	r2,sp,4
 2010794:	a80d883a 	mov	r6,r21
 2010798:	d9c00204 	addi	r7,sp,8
 201079c:	d8800015 	stw	r2,0(sp)
 20107a0:	20136b00 	call	20136b0 <__d2b>
 20107a4:	d8800715 	stw	r2,28(sp)
 20107a8:	a804d53a 	srli	r2,r21,20
 20107ac:	1101ffcc 	andi	r4,r2,2047
 20107b0:	20008626 	beq	r4,zero,20109cc <_dtoa_r+0x348>
 20107b4:	d8c01217 	ldw	r3,72(sp)
 20107b8:	00800434 	movhi	r2,16
 20107bc:	10bfffc4 	addi	r2,r2,-1
 20107c0:	ddc00117 	ldw	r23,4(sp)
 20107c4:	a884703a 	and	r2,r21,r2
 20107c8:	1811883a 	mov	r8,r3
 20107cc:	124ffc34 	orhi	r9,r2,16368
 20107d0:	25bf0044 	addi	r22,r4,-1023
 20107d4:	d8000815 	stw	zero,32(sp)
 20107d8:	0005883a 	mov	r2,zero
 20107dc:	00cffe34 	movhi	r3,16376
 20107e0:	480b883a 	mov	r5,r9
 20107e4:	4009883a 	mov	r4,r8
 20107e8:	180f883a 	mov	r7,r3
 20107ec:	100d883a 	mov	r6,r2
 20107f0:	2015ef00 	call	2015ef0 <__subdf3>
 20107f4:	0218dbf4 	movhi	r8,25455
 20107f8:	4210d844 	addi	r8,r8,17249
 20107fc:	024ff4f4 	movhi	r9,16339
 2010800:	4a61e9c4 	addi	r9,r9,-30809
 2010804:	480f883a 	mov	r7,r9
 2010808:	400d883a 	mov	r6,r8
 201080c:	180b883a 	mov	r5,r3
 2010810:	1009883a 	mov	r4,r2
 2010814:	2015fe40 	call	2015fe4 <__muldf3>
 2010818:	0222d874 	movhi	r8,35681
 201081c:	42322cc4 	addi	r8,r8,-14157
 2010820:	024ff1f4 	movhi	r9,16327
 2010824:	4a628a04 	addi	r9,r9,-30168
 2010828:	480f883a 	mov	r7,r9
 201082c:	400d883a 	mov	r6,r8
 2010830:	180b883a 	mov	r5,r3
 2010834:	1009883a 	mov	r4,r2
 2010838:	2015f700 	call	2015f70 <__adddf3>
 201083c:	b009883a 	mov	r4,r22
 2010840:	1021883a 	mov	r16,r2
 2010844:	1823883a 	mov	r17,r3
 2010848:	20168a80 	call	20168a8 <__floatsidf>
 201084c:	021427f4 	movhi	r8,20639
 2010850:	421e7ec4 	addi	r8,r8,31227
 2010854:	024ff4f4 	movhi	r9,16339
 2010858:	4a5104c4 	addi	r9,r9,17427
 201085c:	480f883a 	mov	r7,r9
 2010860:	400d883a 	mov	r6,r8
 2010864:	180b883a 	mov	r5,r3
 2010868:	1009883a 	mov	r4,r2
 201086c:	2015fe40 	call	2015fe4 <__muldf3>
 2010870:	180f883a 	mov	r7,r3
 2010874:	880b883a 	mov	r5,r17
 2010878:	100d883a 	mov	r6,r2
 201087c:	8009883a 	mov	r4,r16
 2010880:	2015f700 	call	2015f70 <__adddf3>
 2010884:	1009883a 	mov	r4,r2
 2010888:	180b883a 	mov	r5,r3
 201088c:	1021883a 	mov	r16,r2
 2010890:	1823883a 	mov	r17,r3
 2010894:	20169a00 	call	20169a0 <__fixdfsi>
 2010898:	000d883a 	mov	r6,zero
 201089c:	000f883a 	mov	r7,zero
 20108a0:	8009883a 	mov	r4,r16
 20108a4:	880b883a 	mov	r5,r17
 20108a8:	d8800d15 	stw	r2,52(sp)
 20108ac:	20168200 	call	2016820 <__ltdf2>
 20108b0:	10031716 	blt	r2,zero,2011510 <_dtoa_r+0xe8c>
 20108b4:	d8c00d17 	ldw	r3,52(sp)
 20108b8:	00800584 	movi	r2,22
 20108bc:	10c1482e 	bgeu	r2,r3,2010de0 <_dtoa_r+0x75c>
 20108c0:	01000044 	movi	r4,1
 20108c4:	d9000c15 	stw	r4,48(sp)
 20108c8:	bd85c83a 	sub	r2,r23,r22
 20108cc:	11bfffc4 	addi	r6,r2,-1
 20108d0:	30030b16 	blt	r6,zero,2011500 <_dtoa_r+0xe7c>
 20108d4:	d9800a15 	stw	r6,40(sp)
 20108d8:	d8001115 	stw	zero,68(sp)
 20108dc:	d8c00d17 	ldw	r3,52(sp)
 20108e0:	1802ff16 	blt	r3,zero,20114e0 <_dtoa_r+0xe5c>
 20108e4:	d9000a17 	ldw	r4,40(sp)
 20108e8:	d8c00915 	stw	r3,36(sp)
 20108ec:	d8001015 	stw	zero,64(sp)
 20108f0:	20c9883a 	add	r4,r4,r3
 20108f4:	d9000a15 	stw	r4,40(sp)
 20108f8:	d9001717 	ldw	r4,92(sp)
 20108fc:	00800244 	movi	r2,9
 2010900:	11004636 	bltu	r2,r4,2010a1c <_dtoa_r+0x398>
 2010904:	00800144 	movi	r2,5
 2010908:	11020416 	blt	r2,r4,201111c <_dtoa_r+0xa98>
 201090c:	04400044 	movi	r17,1
 2010910:	d8c01717 	ldw	r3,92(sp)
 2010914:	00800144 	movi	r2,5
 2010918:	10c1ed36 	bltu	r2,r3,20110d0 <_dtoa_r+0xa4c>
 201091c:	18c5883a 	add	r2,r3,r3
 2010920:	1085883a 	add	r2,r2,r2
 2010924:	00c08074 	movhi	r3,513
 2010928:	18c24e04 	addi	r3,r3,2360
 201092c:	10c5883a 	add	r2,r2,r3
 2010930:	11000017 	ldw	r4,0(r2)
 2010934:	2000683a 	jmp	r4
 2010938:	02010a24 	muli	r8,zero,1064
 201093c:	02010a24 	muli	r8,zero,1064
 2010940:	02011424 	muli	r8,zero,1104
 2010944:	020113fc 	xorhi	r8,zero,1103
 2010948:	02011440 	call	201144 <__reset-0x1dfeebc>
 201094c:	0201144c 	andi	r8,zero,1105
 2010950:	d9002717 	ldw	r4,156(sp)
 2010954:	0089c3c4 	movi	r2,9999
 2010958:	20800015 	stw	r2,0(r4)
 201095c:	a0001026 	beq	r20,zero,20109a0 <_dtoa_r+0x31c>
 2010960:	00c080b4 	movhi	r3,514
 2010964:	18efb704 	addi	r3,r3,-16676
 2010968:	d9802917 	ldw	r6,164(sp)
 201096c:	303f7926 	beq	r6,zero,2010754 <_dtoa_r+0xd0>
 2010970:	188000c7 	ldb	r2,3(r3)
 2010974:	190000c4 	addi	r4,r3,3
 2010978:	1000101e 	bne	r2,zero,20109bc <_dtoa_r+0x338>
 201097c:	d8802917 	ldw	r2,164(sp)
 2010980:	11000015 	stw	r4,0(r2)
 2010984:	003f7306 	br	2010754 <_dtoa_r+0xd0>
 2010988:	00a00034 	movhi	r2,32768
 201098c:	10bfffc4 	addi	r2,r2,-1
 2010990:	00c00044 	movi	r3,1
 2010994:	88aa703a 	and	r21,r17,r2
 2010998:	90c00015 	stw	r3,0(r18)
 201099c:	003f5806 	br	2010700 <_dtoa_r+0x7c>
 20109a0:	00800434 	movhi	r2,16
 20109a4:	10bfffc4 	addi	r2,r2,-1
 20109a8:	a884703a 	and	r2,r21,r2
 20109ac:	103fec1e 	bne	r2,zero,2010960 <_dtoa_r+0x2dc>
 20109b0:	00c080b4 	movhi	r3,514
 20109b4:	18efb404 	addi	r3,r3,-16688
 20109b8:	003feb06 	br	2010968 <_dtoa_r+0x2e4>
 20109bc:	d8802917 	ldw	r2,164(sp)
 20109c0:	19000204 	addi	r4,r3,8
 20109c4:	11000015 	stw	r4,0(r2)
 20109c8:	003f6206 	br	2010754 <_dtoa_r+0xd0>
 20109cc:	ddc00117 	ldw	r23,4(sp)
 20109d0:	d8800217 	ldw	r2,8(sp)
 20109d4:	01000804 	movi	r4,32
 20109d8:	b8c10c84 	addi	r3,r23,1074
 20109dc:	18a3883a 	add	r17,r3,r2
 20109e0:	2441b80e 	bge	r4,r17,20110c4 <_dtoa_r+0xa40>
 20109e4:	00c01004 	movi	r3,64
 20109e8:	1c47c83a 	sub	r3,r3,r17
 20109ec:	88bff804 	addi	r2,r17,-32
 20109f0:	a8c6983a 	sll	r3,r21,r3
 20109f4:	a084d83a 	srl	r2,r20,r2
 20109f8:	1888b03a 	or	r4,r3,r2
 20109fc:	2016a780 	call	2016a78 <__floatunsidf>
 2010a00:	1011883a 	mov	r8,r2
 2010a04:	00bf8434 	movhi	r2,65040
 2010a08:	01000044 	movi	r4,1
 2010a0c:	10d3883a 	add	r9,r2,r3
 2010a10:	8dbef344 	addi	r22,r17,-1075
 2010a14:	d9000815 	stw	r4,32(sp)
 2010a18:	003f6f06 	br	20107d8 <_dtoa_r+0x154>
 2010a1c:	d8001715 	stw	zero,92(sp)
 2010a20:	04400044 	movi	r17,1
 2010a24:	00bfffc4 	movi	r2,-1
 2010a28:	00c00044 	movi	r3,1
 2010a2c:	d8800e15 	stw	r2,56(sp)
 2010a30:	d8002615 	stw	zero,152(sp)
 2010a34:	d8800f15 	stw	r2,60(sp)
 2010a38:	d8c00b15 	stw	r3,44(sp)
 2010a3c:	1021883a 	mov	r16,r2
 2010a40:	d8801617 	ldw	r2,88(sp)
 2010a44:	10001115 	stw	zero,68(r2)
 2010a48:	d8801617 	ldw	r2,88(sp)
 2010a4c:	11401117 	ldw	r5,68(r2)
 2010a50:	1009883a 	mov	r4,r2
 2010a54:	20135f40 	call	20135f4 <_Balloc>
 2010a58:	d8c01617 	ldw	r3,88(sp)
 2010a5c:	d8800515 	stw	r2,20(sp)
 2010a60:	18801015 	stw	r2,64(r3)
 2010a64:	00800384 	movi	r2,14
 2010a68:	14006836 	bltu	r2,r16,2010c0c <_dtoa_r+0x588>
 2010a6c:	8805003a 	cmpeq	r2,r17,zero
 2010a70:	1000661e 	bne	r2,zero,2010c0c <_dtoa_r+0x588>
 2010a74:	d9000d17 	ldw	r4,52(sp)
 2010a78:	0102300e 	bge	zero,r4,201133c <_dtoa_r+0xcb8>
 2010a7c:	208003cc 	andi	r2,r4,15
 2010a80:	100490fa 	slli	r2,r2,3
 2010a84:	2025d13a 	srai	r18,r4,4
 2010a88:	00c080b4 	movhi	r3,514
 2010a8c:	18efc904 	addi	r3,r3,-16604
 2010a90:	10c5883a 	add	r2,r2,r3
 2010a94:	90c0040c 	andi	r3,r18,16
 2010a98:	14000017 	ldw	r16,0(r2)
 2010a9c:	14400117 	ldw	r17,4(r2)
 2010aa0:	18036a1e 	bne	r3,zero,201184c <_dtoa_r+0x11c8>
 2010aa4:	05800084 	movi	r22,2
 2010aa8:	90001026 	beq	r18,zero,2010aec <_dtoa_r+0x468>
 2010aac:	04c080b4 	movhi	r19,514
 2010ab0:	9ceffb04 	addi	r19,r19,-16404
 2010ab4:	9080004c 	andi	r2,r18,1
 2010ab8:	1005003a 	cmpeq	r2,r2,zero
 2010abc:	1000081e 	bne	r2,zero,2010ae0 <_dtoa_r+0x45c>
 2010ac0:	99800017 	ldw	r6,0(r19)
 2010ac4:	99c00117 	ldw	r7,4(r19)
 2010ac8:	880b883a 	mov	r5,r17
 2010acc:	8009883a 	mov	r4,r16
 2010ad0:	2015fe40 	call	2015fe4 <__muldf3>
 2010ad4:	1021883a 	mov	r16,r2
 2010ad8:	b5800044 	addi	r22,r22,1
 2010adc:	1823883a 	mov	r17,r3
 2010ae0:	9025d07a 	srai	r18,r18,1
 2010ae4:	9cc00204 	addi	r19,r19,8
 2010ae8:	903ff21e 	bne	r18,zero,2010ab4 <_dtoa_r+0x430>
 2010aec:	a80b883a 	mov	r5,r21
 2010af0:	a009883a 	mov	r4,r20
 2010af4:	880f883a 	mov	r7,r17
 2010af8:	800d883a 	mov	r6,r16
 2010afc:	20163a80 	call	20163a8 <__divdf3>
 2010b00:	1029883a 	mov	r20,r2
 2010b04:	182b883a 	mov	r21,r3
 2010b08:	d8c00c17 	ldw	r3,48(sp)
 2010b0c:	1805003a 	cmpeq	r2,r3,zero
 2010b10:	1000081e 	bne	r2,zero,2010b34 <_dtoa_r+0x4b0>
 2010b14:	0005883a 	mov	r2,zero
 2010b18:	00cffc34 	movhi	r3,16368
 2010b1c:	180f883a 	mov	r7,r3
 2010b20:	a009883a 	mov	r4,r20
 2010b24:	a80b883a 	mov	r5,r21
 2010b28:	100d883a 	mov	r6,r2
 2010b2c:	20168200 	call	2016820 <__ltdf2>
 2010b30:	1003fe16 	blt	r2,zero,2011b2c <_dtoa_r+0x14a8>
 2010b34:	b009883a 	mov	r4,r22
 2010b38:	20168a80 	call	20168a8 <__floatsidf>
 2010b3c:	180b883a 	mov	r5,r3
 2010b40:	1009883a 	mov	r4,r2
 2010b44:	a00d883a 	mov	r6,r20
 2010b48:	a80f883a 	mov	r7,r21
 2010b4c:	2015fe40 	call	2015fe4 <__muldf3>
 2010b50:	0011883a 	mov	r8,zero
 2010b54:	02500734 	movhi	r9,16412
 2010b58:	1009883a 	mov	r4,r2
 2010b5c:	180b883a 	mov	r5,r3
 2010b60:	480f883a 	mov	r7,r9
 2010b64:	400d883a 	mov	r6,r8
 2010b68:	2015f700 	call	2015f70 <__adddf3>
 2010b6c:	d9000f17 	ldw	r4,60(sp)
 2010b70:	102d883a 	mov	r22,r2
 2010b74:	00bf3034 	movhi	r2,64704
 2010b78:	18b9883a 	add	fp,r3,r2
 2010b7c:	e02f883a 	mov	r23,fp
 2010b80:	20028f1e 	bne	r4,zero,20115c0 <_dtoa_r+0xf3c>
 2010b84:	0005883a 	mov	r2,zero
 2010b88:	00d00534 	movhi	r3,16404
 2010b8c:	a009883a 	mov	r4,r20
 2010b90:	a80b883a 	mov	r5,r21
 2010b94:	180f883a 	mov	r7,r3
 2010b98:	100d883a 	mov	r6,r2
 2010b9c:	2015ef00 	call	2015ef0 <__subdf3>
 2010ba0:	1009883a 	mov	r4,r2
 2010ba4:	e00f883a 	mov	r7,fp
 2010ba8:	180b883a 	mov	r5,r3
 2010bac:	b00d883a 	mov	r6,r22
 2010bb0:	1025883a 	mov	r18,r2
 2010bb4:	1827883a 	mov	r19,r3
 2010bb8:	20167100 	call	2016710 <__gtdf2>
 2010bbc:	00834f16 	blt	zero,r2,20118fc <_dtoa_r+0x1278>
 2010bc0:	e0e0003c 	xorhi	r3,fp,32768
 2010bc4:	9009883a 	mov	r4,r18
 2010bc8:	980b883a 	mov	r5,r19
 2010bcc:	180f883a 	mov	r7,r3
 2010bd0:	b00d883a 	mov	r6,r22
 2010bd4:	20168200 	call	2016820 <__ltdf2>
 2010bd8:	1000080e 	bge	r2,zero,2010bfc <_dtoa_r+0x578>
 2010bdc:	0027883a 	mov	r19,zero
 2010be0:	0025883a 	mov	r18,zero
 2010be4:	d8802617 	ldw	r2,152(sp)
 2010be8:	df000517 	ldw	fp,20(sp)
 2010bec:	d8000615 	stw	zero,24(sp)
 2010bf0:	0084303a 	nor	r2,zero,r2
 2010bf4:	d8800d15 	stw	r2,52(sp)
 2010bf8:	00019b06 	br	2011268 <_dtoa_r+0xbe4>
 2010bfc:	d9801217 	ldw	r6,72(sp)
 2010c00:	d8801317 	ldw	r2,76(sp)
 2010c04:	3029883a 	mov	r20,r6
 2010c08:	102b883a 	mov	r21,r2
 2010c0c:	d8c00217 	ldw	r3,8(sp)
 2010c10:	18008516 	blt	r3,zero,2010e28 <_dtoa_r+0x7a4>
 2010c14:	d9000d17 	ldw	r4,52(sp)
 2010c18:	00800384 	movi	r2,14
 2010c1c:	11008216 	blt	r2,r4,2010e28 <_dtoa_r+0x7a4>
 2010c20:	200490fa 	slli	r2,r4,3
 2010c24:	d9802617 	ldw	r6,152(sp)
 2010c28:	00c080b4 	movhi	r3,514
 2010c2c:	18efc904 	addi	r3,r3,-16604
 2010c30:	10c5883a 	add	r2,r2,r3
 2010c34:	14800017 	ldw	r18,0(r2)
 2010c38:	14c00117 	ldw	r19,4(r2)
 2010c3c:	30031e16 	blt	r6,zero,20118b8 <_dtoa_r+0x1234>
 2010c40:	d9000517 	ldw	r4,20(sp)
 2010c44:	d8c00f17 	ldw	r3,60(sp)
 2010c48:	a823883a 	mov	r17,r21
 2010c4c:	a021883a 	mov	r16,r20
 2010c50:	192b883a 	add	r21,r3,r4
 2010c54:	2039883a 	mov	fp,r4
 2010c58:	00000f06 	br	2010c98 <_dtoa_r+0x614>
 2010c5c:	0005883a 	mov	r2,zero
 2010c60:	00d00934 	movhi	r3,16420
 2010c64:	5009883a 	mov	r4,r10
 2010c68:	580b883a 	mov	r5,r11
 2010c6c:	180f883a 	mov	r7,r3
 2010c70:	100d883a 	mov	r6,r2
 2010c74:	2015fe40 	call	2015fe4 <__muldf3>
 2010c78:	180b883a 	mov	r5,r3
 2010c7c:	000d883a 	mov	r6,zero
 2010c80:	000f883a 	mov	r7,zero
 2010c84:	1009883a 	mov	r4,r2
 2010c88:	1021883a 	mov	r16,r2
 2010c8c:	1823883a 	mov	r17,r3
 2010c90:	20166880 	call	2016688 <__nedf2>
 2010c94:	10004526 	beq	r2,zero,2010dac <_dtoa_r+0x728>
 2010c98:	900d883a 	mov	r6,r18
 2010c9c:	980f883a 	mov	r7,r19
 2010ca0:	8009883a 	mov	r4,r16
 2010ca4:	880b883a 	mov	r5,r17
 2010ca8:	20163a80 	call	20163a8 <__divdf3>
 2010cac:	180b883a 	mov	r5,r3
 2010cb0:	1009883a 	mov	r4,r2
 2010cb4:	20169a00 	call	20169a0 <__fixdfsi>
 2010cb8:	1009883a 	mov	r4,r2
 2010cbc:	1029883a 	mov	r20,r2
 2010cc0:	20168a80 	call	20168a8 <__floatsidf>
 2010cc4:	180f883a 	mov	r7,r3
 2010cc8:	9009883a 	mov	r4,r18
 2010ccc:	980b883a 	mov	r5,r19
 2010cd0:	100d883a 	mov	r6,r2
 2010cd4:	2015fe40 	call	2015fe4 <__muldf3>
 2010cd8:	180f883a 	mov	r7,r3
 2010cdc:	880b883a 	mov	r5,r17
 2010ce0:	8009883a 	mov	r4,r16
 2010ce4:	100d883a 	mov	r6,r2
 2010ce8:	2015ef00 	call	2015ef0 <__subdf3>
 2010cec:	1015883a 	mov	r10,r2
 2010cf0:	a0800c04 	addi	r2,r20,48
 2010cf4:	e0800005 	stb	r2,0(fp)
 2010cf8:	e7000044 	addi	fp,fp,1
 2010cfc:	1817883a 	mov	r11,r3
 2010d00:	e57fd61e 	bne	fp,r21,2010c5c <_dtoa_r+0x5d8>
 2010d04:	500d883a 	mov	r6,r10
 2010d08:	180f883a 	mov	r7,r3
 2010d0c:	5009883a 	mov	r4,r10
 2010d10:	180b883a 	mov	r5,r3
 2010d14:	2015f700 	call	2015f70 <__adddf3>
 2010d18:	100d883a 	mov	r6,r2
 2010d1c:	9009883a 	mov	r4,r18
 2010d20:	980b883a 	mov	r5,r19
 2010d24:	180f883a 	mov	r7,r3
 2010d28:	1021883a 	mov	r16,r2
 2010d2c:	1823883a 	mov	r17,r3
 2010d30:	20168200 	call	2016820 <__ltdf2>
 2010d34:	10000816 	blt	r2,zero,2010d58 <_dtoa_r+0x6d4>
 2010d38:	980b883a 	mov	r5,r19
 2010d3c:	800d883a 	mov	r6,r16
 2010d40:	880f883a 	mov	r7,r17
 2010d44:	9009883a 	mov	r4,r18
 2010d48:	20166000 	call	2016600 <__eqdf2>
 2010d4c:	1000171e 	bne	r2,zero,2010dac <_dtoa_r+0x728>
 2010d50:	a080004c 	andi	r2,r20,1
 2010d54:	10001526 	beq	r2,zero,2010dac <_dtoa_r+0x728>
 2010d58:	d8800d17 	ldw	r2,52(sp)
 2010d5c:	d8800415 	stw	r2,16(sp)
 2010d60:	e009883a 	mov	r4,fp
 2010d64:	213fffc4 	addi	r4,r4,-1
 2010d68:	20c00007 	ldb	r3,0(r4)
 2010d6c:	00800e44 	movi	r2,57
 2010d70:	1880081e 	bne	r3,r2,2010d94 <_dtoa_r+0x710>
 2010d74:	d8800517 	ldw	r2,20(sp)
 2010d78:	113ffa1e 	bne	r2,r4,2010d64 <_dtoa_r+0x6e0>
 2010d7c:	d8c00417 	ldw	r3,16(sp)
 2010d80:	d9800517 	ldw	r6,20(sp)
 2010d84:	00800c04 	movi	r2,48
 2010d88:	18c00044 	addi	r3,r3,1
 2010d8c:	d8c00415 	stw	r3,16(sp)
 2010d90:	30800005 	stb	r2,0(r6)
 2010d94:	20800003 	ldbu	r2,0(r4)
 2010d98:	d8c00417 	ldw	r3,16(sp)
 2010d9c:	27000044 	addi	fp,r4,1
 2010da0:	10800044 	addi	r2,r2,1
 2010da4:	d8c00d15 	stw	r3,52(sp)
 2010da8:	20800005 	stb	r2,0(r4)
 2010dac:	d9001617 	ldw	r4,88(sp)
 2010db0:	d9400717 	ldw	r5,28(sp)
 2010db4:	20130740 	call	2013074 <_Bfree>
 2010db8:	e0000005 	stb	zero,0(fp)
 2010dbc:	d9800d17 	ldw	r6,52(sp)
 2010dc0:	d8c02717 	ldw	r3,156(sp)
 2010dc4:	d9002917 	ldw	r4,164(sp)
 2010dc8:	30800044 	addi	r2,r6,1
 2010dcc:	18800015 	stw	r2,0(r3)
 2010dd0:	20029c26 	beq	r4,zero,2011844 <_dtoa_r+0x11c0>
 2010dd4:	d8c00517 	ldw	r3,20(sp)
 2010dd8:	27000015 	stw	fp,0(r4)
 2010ddc:	003e5d06 	br	2010754 <_dtoa_r+0xd0>
 2010de0:	d9800d17 	ldw	r6,52(sp)
 2010de4:	00c080b4 	movhi	r3,514
 2010de8:	18efc904 	addi	r3,r3,-16604
 2010dec:	d9001217 	ldw	r4,72(sp)
 2010df0:	300490fa 	slli	r2,r6,3
 2010df4:	d9401317 	ldw	r5,76(sp)
 2010df8:	10c5883a 	add	r2,r2,r3
 2010dfc:	12000017 	ldw	r8,0(r2)
 2010e00:	12400117 	ldw	r9,4(r2)
 2010e04:	400d883a 	mov	r6,r8
 2010e08:	480f883a 	mov	r7,r9
 2010e0c:	20168200 	call	2016820 <__ltdf2>
 2010e10:	1000030e 	bge	r2,zero,2010e20 <_dtoa_r+0x79c>
 2010e14:	d8800d17 	ldw	r2,52(sp)
 2010e18:	10bfffc4 	addi	r2,r2,-1
 2010e1c:	d8800d15 	stw	r2,52(sp)
 2010e20:	d8000c15 	stw	zero,48(sp)
 2010e24:	003ea806 	br	20108c8 <_dtoa_r+0x244>
 2010e28:	d9000b17 	ldw	r4,44(sp)
 2010e2c:	202cc03a 	cmpne	r22,r4,zero
 2010e30:	b000c71e 	bne	r22,zero,2011150 <_dtoa_r+0xacc>
 2010e34:	dc001117 	ldw	r16,68(sp)
 2010e38:	dc801017 	ldw	r18,64(sp)
 2010e3c:	0027883a 	mov	r19,zero
 2010e40:	04000b0e 	bge	zero,r16,2010e70 <_dtoa_r+0x7ec>
 2010e44:	d8c00a17 	ldw	r3,40(sp)
 2010e48:	00c0090e 	bge	zero,r3,2010e70 <_dtoa_r+0x7ec>
 2010e4c:	8005883a 	mov	r2,r16
 2010e50:	1c011316 	blt	r3,r16,20112a0 <_dtoa_r+0xc1c>
 2010e54:	d9000a17 	ldw	r4,40(sp)
 2010e58:	d9801117 	ldw	r6,68(sp)
 2010e5c:	80a1c83a 	sub	r16,r16,r2
 2010e60:	2089c83a 	sub	r4,r4,r2
 2010e64:	308dc83a 	sub	r6,r6,r2
 2010e68:	d9000a15 	stw	r4,40(sp)
 2010e6c:	d9801115 	stw	r6,68(sp)
 2010e70:	d8801017 	ldw	r2,64(sp)
 2010e74:	0080150e 	bge	zero,r2,2010ecc <_dtoa_r+0x848>
 2010e78:	d8c00b17 	ldw	r3,44(sp)
 2010e7c:	1805003a 	cmpeq	r2,r3,zero
 2010e80:	1001c91e 	bne	r2,zero,20115a8 <_dtoa_r+0xf24>
 2010e84:	04800e0e 	bge	zero,r18,2010ec0 <_dtoa_r+0x83c>
 2010e88:	d9001617 	ldw	r4,88(sp)
 2010e8c:	980b883a 	mov	r5,r19
 2010e90:	900d883a 	mov	r6,r18
 2010e94:	2013ec00 	call	2013ec0 <__pow5mult>
 2010e98:	d9001617 	ldw	r4,88(sp)
 2010e9c:	d9800717 	ldw	r6,28(sp)
 2010ea0:	100b883a 	mov	r5,r2
 2010ea4:	1027883a 	mov	r19,r2
 2010ea8:	2013b040 	call	2013b04 <__multiply>
 2010eac:	d9001617 	ldw	r4,88(sp)
 2010eb0:	d9400717 	ldw	r5,28(sp)
 2010eb4:	1023883a 	mov	r17,r2
 2010eb8:	20130740 	call	2013074 <_Bfree>
 2010ebc:	dc400715 	stw	r17,28(sp)
 2010ec0:	d9001017 	ldw	r4,64(sp)
 2010ec4:	248dc83a 	sub	r6,r4,r18
 2010ec8:	30010e1e 	bne	r6,zero,2011304 <_dtoa_r+0xc80>
 2010ecc:	d9001617 	ldw	r4,88(sp)
 2010ed0:	04400044 	movi	r17,1
 2010ed4:	880b883a 	mov	r5,r17
 2010ed8:	2013d580 	call	2013d58 <__i2b>
 2010edc:	d9800917 	ldw	r6,36(sp)
 2010ee0:	1025883a 	mov	r18,r2
 2010ee4:	0180040e 	bge	zero,r6,2010ef8 <_dtoa_r+0x874>
 2010ee8:	d9001617 	ldw	r4,88(sp)
 2010eec:	100b883a 	mov	r5,r2
 2010ef0:	2013ec00 	call	2013ec0 <__pow5mult>
 2010ef4:	1025883a 	mov	r18,r2
 2010ef8:	d8801717 	ldw	r2,92(sp)
 2010efc:	8880f30e 	bge	r17,r2,20112cc <_dtoa_r+0xc48>
 2010f00:	0023883a 	mov	r17,zero
 2010f04:	d9800917 	ldw	r6,36(sp)
 2010f08:	30019e1e 	bne	r6,zero,2011584 <_dtoa_r+0xf00>
 2010f0c:	00c00044 	movi	r3,1
 2010f10:	d9000a17 	ldw	r4,40(sp)
 2010f14:	20c5883a 	add	r2,r4,r3
 2010f18:	10c007cc 	andi	r3,r2,31
 2010f1c:	1800841e 	bne	r3,zero,2011130 <_dtoa_r+0xaac>
 2010f20:	00800704 	movi	r2,28
 2010f24:	d9000a17 	ldw	r4,40(sp)
 2010f28:	d9801117 	ldw	r6,68(sp)
 2010f2c:	80a1883a 	add	r16,r16,r2
 2010f30:	2089883a 	add	r4,r4,r2
 2010f34:	308d883a 	add	r6,r6,r2
 2010f38:	d9000a15 	stw	r4,40(sp)
 2010f3c:	d9801115 	stw	r6,68(sp)
 2010f40:	d8801117 	ldw	r2,68(sp)
 2010f44:	0080050e 	bge	zero,r2,2010f5c <_dtoa_r+0x8d8>
 2010f48:	d9400717 	ldw	r5,28(sp)
 2010f4c:	d9001617 	ldw	r4,88(sp)
 2010f50:	100d883a 	mov	r6,r2
 2010f54:	20139b80 	call	20139b8 <__lshift>
 2010f58:	d8800715 	stw	r2,28(sp)
 2010f5c:	d8c00a17 	ldw	r3,40(sp)
 2010f60:	00c0050e 	bge	zero,r3,2010f78 <_dtoa_r+0x8f4>
 2010f64:	d9001617 	ldw	r4,88(sp)
 2010f68:	900b883a 	mov	r5,r18
 2010f6c:	180d883a 	mov	r6,r3
 2010f70:	20139b80 	call	20139b8 <__lshift>
 2010f74:	1025883a 	mov	r18,r2
 2010f78:	d9000c17 	ldw	r4,48(sp)
 2010f7c:	2005003a 	cmpeq	r2,r4,zero
 2010f80:	10016f26 	beq	r2,zero,2011540 <_dtoa_r+0xebc>
 2010f84:	d9000f17 	ldw	r4,60(sp)
 2010f88:	0102170e 	bge	zero,r4,20117e8 <_dtoa_r+0x1164>
 2010f8c:	d9800b17 	ldw	r6,44(sp)
 2010f90:	3005003a 	cmpeq	r2,r6,zero
 2010f94:	1000881e 	bne	r2,zero,20111b8 <_dtoa_r+0xb34>
 2010f98:	0400050e 	bge	zero,r16,2010fb0 <_dtoa_r+0x92c>
 2010f9c:	d9001617 	ldw	r4,88(sp)
 2010fa0:	980b883a 	mov	r5,r19
 2010fa4:	800d883a 	mov	r6,r16
 2010fa8:	20139b80 	call	20139b8 <__lshift>
 2010fac:	1027883a 	mov	r19,r2
 2010fb0:	8804c03a 	cmpne	r2,r17,zero
 2010fb4:	1002541e 	bne	r2,zero,2011908 <_dtoa_r+0x1284>
 2010fb8:	980b883a 	mov	r5,r19
 2010fbc:	dd800517 	ldw	r22,20(sp)
 2010fc0:	dcc00615 	stw	r19,24(sp)
 2010fc4:	a700004c 	andi	fp,r20,1
 2010fc8:	2827883a 	mov	r19,r5
 2010fcc:	d9000717 	ldw	r4,28(sp)
 2010fd0:	900b883a 	mov	r5,r18
 2010fd4:	20104400 	call	2010440 <quorem>
 2010fd8:	d9000717 	ldw	r4,28(sp)
 2010fdc:	d9400617 	ldw	r5,24(sp)
 2010fe0:	1023883a 	mov	r17,r2
 2010fe4:	8dc00c04 	addi	r23,r17,48
 2010fe8:	20131d00 	call	20131d0 <__mcmp>
 2010fec:	d9001617 	ldw	r4,88(sp)
 2010ff0:	900b883a 	mov	r5,r18
 2010ff4:	980d883a 	mov	r6,r19
 2010ff8:	1029883a 	mov	r20,r2
 2010ffc:	201382c0 	call	201382c <__mdiff>
 2011000:	102b883a 	mov	r21,r2
 2011004:	10800317 	ldw	r2,12(r2)
 2011008:	1001281e 	bne	r2,zero,20114ac <_dtoa_r+0xe28>
 201100c:	d9000717 	ldw	r4,28(sp)
 2011010:	a80b883a 	mov	r5,r21
 2011014:	20131d00 	call	20131d0 <__mcmp>
 2011018:	d9001617 	ldw	r4,88(sp)
 201101c:	1021883a 	mov	r16,r2
 2011020:	a80b883a 	mov	r5,r21
 2011024:	20130740 	call	2013074 <_Bfree>
 2011028:	8000041e 	bne	r16,zero,201103c <_dtoa_r+0x9b8>
 201102c:	d8801717 	ldw	r2,92(sp)
 2011030:	1000021e 	bne	r2,zero,201103c <_dtoa_r+0x9b8>
 2011034:	e004c03a 	cmpne	r2,fp,zero
 2011038:	10011726 	beq	r2,zero,2011498 <_dtoa_r+0xe14>
 201103c:	a0010616 	blt	r20,zero,2011458 <_dtoa_r+0xdd4>
 2011040:	a000041e 	bne	r20,zero,2011054 <_dtoa_r+0x9d0>
 2011044:	d8c01717 	ldw	r3,92(sp)
 2011048:	1800021e 	bne	r3,zero,2011054 <_dtoa_r+0x9d0>
 201104c:	e004c03a 	cmpne	r2,fp,zero
 2011050:	10010126 	beq	r2,zero,2011458 <_dtoa_r+0xdd4>
 2011054:	04023d16 	blt	zero,r16,201194c <_dtoa_r+0x12c8>
 2011058:	b5c00005 	stb	r23,0(r22)
 201105c:	d9800517 	ldw	r6,20(sp)
 2011060:	d9000f17 	ldw	r4,60(sp)
 2011064:	b5800044 	addi	r22,r22,1
 2011068:	3105883a 	add	r2,r6,r4
 201106c:	b0806526 	beq	r22,r2,2011204 <_dtoa_r+0xb80>
 2011070:	d9400717 	ldw	r5,28(sp)
 2011074:	d9001617 	ldw	r4,88(sp)
 2011078:	01800284 	movi	r6,10
 201107c:	000f883a 	mov	r7,zero
 2011080:	2013d940 	call	2013d94 <__multadd>
 2011084:	d8800715 	stw	r2,28(sp)
 2011088:	d8800617 	ldw	r2,24(sp)
 201108c:	14c10c26 	beq	r2,r19,20114c0 <_dtoa_r+0xe3c>
 2011090:	d9400617 	ldw	r5,24(sp)
 2011094:	d9001617 	ldw	r4,88(sp)
 2011098:	01800284 	movi	r6,10
 201109c:	000f883a 	mov	r7,zero
 20110a0:	2013d940 	call	2013d94 <__multadd>
 20110a4:	d9001617 	ldw	r4,88(sp)
 20110a8:	980b883a 	mov	r5,r19
 20110ac:	01800284 	movi	r6,10
 20110b0:	000f883a 	mov	r7,zero
 20110b4:	d8800615 	stw	r2,24(sp)
 20110b8:	2013d940 	call	2013d94 <__multadd>
 20110bc:	1027883a 	mov	r19,r2
 20110c0:	003fc206 	br	2010fcc <_dtoa_r+0x948>
 20110c4:	2445c83a 	sub	r2,r4,r17
 20110c8:	a088983a 	sll	r4,r20,r2
 20110cc:	003e4b06 	br	20109fc <_dtoa_r+0x378>
 20110d0:	01bfffc4 	movi	r6,-1
 20110d4:	00800044 	movi	r2,1
 20110d8:	d9800e15 	stw	r6,56(sp)
 20110dc:	d9800f15 	stw	r6,60(sp)
 20110e0:	d8800b15 	stw	r2,44(sp)
 20110e4:	d8c01617 	ldw	r3,88(sp)
 20110e8:	008005c4 	movi	r2,23
 20110ec:	18001115 	stw	zero,68(r3)
 20110f0:	1580082e 	bgeu	r2,r22,2011114 <_dtoa_r+0xa90>
 20110f4:	00c00104 	movi	r3,4
 20110f8:	0009883a 	mov	r4,zero
 20110fc:	18c7883a 	add	r3,r3,r3
 2011100:	18800504 	addi	r2,r3,20
 2011104:	21000044 	addi	r4,r4,1
 2011108:	b0bffc2e 	bgeu	r22,r2,20110fc <_dtoa_r+0xa78>
 201110c:	d9801617 	ldw	r6,88(sp)
 2011110:	31001115 	stw	r4,68(r6)
 2011114:	dc000f17 	ldw	r16,60(sp)
 2011118:	003e4b06 	br	2010a48 <_dtoa_r+0x3c4>
 201111c:	d9801717 	ldw	r6,92(sp)
 2011120:	0023883a 	mov	r17,zero
 2011124:	31bfff04 	addi	r6,r6,-4
 2011128:	d9801715 	stw	r6,92(sp)
 201112c:	003df806 	br	2010910 <_dtoa_r+0x28c>
 2011130:	00800804 	movi	r2,32
 2011134:	10c9c83a 	sub	r4,r2,r3
 2011138:	00c00104 	movi	r3,4
 201113c:	19005a16 	blt	r3,r4,20112a8 <_dtoa_r+0xc24>
 2011140:	008000c4 	movi	r2,3
 2011144:	113f7e16 	blt	r2,r4,2010f40 <_dtoa_r+0x8bc>
 2011148:	20800704 	addi	r2,r4,28
 201114c:	003f7506 	br	2010f24 <_dtoa_r+0x8a0>
 2011150:	d9801717 	ldw	r6,92(sp)
 2011154:	00800044 	movi	r2,1
 2011158:	1180a10e 	bge	r2,r6,20113e0 <_dtoa_r+0xd5c>
 201115c:	d9800f17 	ldw	r6,60(sp)
 2011160:	d8c01017 	ldw	r3,64(sp)
 2011164:	30bfffc4 	addi	r2,r6,-1
 2011168:	1881c616 	blt	r3,r2,2011884 <_dtoa_r+0x1200>
 201116c:	18a5c83a 	sub	r18,r3,r2
 2011170:	d8800f17 	ldw	r2,60(sp)
 2011174:	10026216 	blt	r2,zero,2011b00 <_dtoa_r+0x147c>
 2011178:	dc001117 	ldw	r16,68(sp)
 201117c:	1007883a 	mov	r3,r2
 2011180:	d9800a17 	ldw	r6,40(sp)
 2011184:	d8801117 	ldw	r2,68(sp)
 2011188:	d9001617 	ldw	r4,88(sp)
 201118c:	30cd883a 	add	r6,r6,r3
 2011190:	10c5883a 	add	r2,r2,r3
 2011194:	01400044 	movi	r5,1
 2011198:	d9800a15 	stw	r6,40(sp)
 201119c:	d8801115 	stw	r2,68(sp)
 20111a0:	2013d580 	call	2013d58 <__i2b>
 20111a4:	1027883a 	mov	r19,r2
 20111a8:	003f2506 	br	2010e40 <_dtoa_r+0x7bc>
 20111ac:	00c080b4 	movhi	r3,514
 20111b0:	18efab04 	addi	r3,r3,-16724
 20111b4:	003d6706 	br	2010754 <_dtoa_r+0xd0>
 20111b8:	dd800517 	ldw	r22,20(sp)
 20111bc:	04000044 	movi	r16,1
 20111c0:	00000706 	br	20111e0 <_dtoa_r+0xb5c>
 20111c4:	d9400717 	ldw	r5,28(sp)
 20111c8:	d9001617 	ldw	r4,88(sp)
 20111cc:	01800284 	movi	r6,10
 20111d0:	000f883a 	mov	r7,zero
 20111d4:	2013d940 	call	2013d94 <__multadd>
 20111d8:	d8800715 	stw	r2,28(sp)
 20111dc:	84000044 	addi	r16,r16,1
 20111e0:	d9000717 	ldw	r4,28(sp)
 20111e4:	900b883a 	mov	r5,r18
 20111e8:	20104400 	call	2010440 <quorem>
 20111ec:	15c00c04 	addi	r23,r2,48
 20111f0:	b5c00005 	stb	r23,0(r22)
 20111f4:	d8c00f17 	ldw	r3,60(sp)
 20111f8:	b5800044 	addi	r22,r22,1
 20111fc:	80fff116 	blt	r16,r3,20111c4 <_dtoa_r+0xb40>
 2011200:	d8000615 	stw	zero,24(sp)
 2011204:	d9400717 	ldw	r5,28(sp)
 2011208:	d9001617 	ldw	r4,88(sp)
 201120c:	01800044 	movi	r6,1
 2011210:	20139b80 	call	20139b8 <__lshift>
 2011214:	1009883a 	mov	r4,r2
 2011218:	900b883a 	mov	r5,r18
 201121c:	d8800715 	stw	r2,28(sp)
 2011220:	20131d00 	call	20131d0 <__mcmp>
 2011224:	00803c0e 	bge	zero,r2,2011318 <_dtoa_r+0xc94>
 2011228:	b009883a 	mov	r4,r22
 201122c:	213fffc4 	addi	r4,r4,-1
 2011230:	21400003 	ldbu	r5,0(r4)
 2011234:	00800e44 	movi	r2,57
 2011238:	28c03fcc 	andi	r3,r5,255
 201123c:	18c0201c 	xori	r3,r3,128
 2011240:	18ffe004 	addi	r3,r3,-128
 2011244:	1881981e 	bne	r3,r2,20118a8 <_dtoa_r+0x1224>
 2011248:	d9800517 	ldw	r6,20(sp)
 201124c:	21bff71e 	bne	r4,r6,201122c <_dtoa_r+0xba8>
 2011250:	d8800d17 	ldw	r2,52(sp)
 2011254:	37000044 	addi	fp,r6,1
 2011258:	10800044 	addi	r2,r2,1
 201125c:	d8800d15 	stw	r2,52(sp)
 2011260:	00800c44 	movi	r2,49
 2011264:	30800005 	stb	r2,0(r6)
 2011268:	d9001617 	ldw	r4,88(sp)
 201126c:	900b883a 	mov	r5,r18
 2011270:	20130740 	call	2013074 <_Bfree>
 2011274:	983ecd26 	beq	r19,zero,2010dac <_dtoa_r+0x728>
 2011278:	d8c00617 	ldw	r3,24(sp)
 201127c:	18000426 	beq	r3,zero,2011290 <_dtoa_r+0xc0c>
 2011280:	1cc00326 	beq	r3,r19,2011290 <_dtoa_r+0xc0c>
 2011284:	d9001617 	ldw	r4,88(sp)
 2011288:	180b883a 	mov	r5,r3
 201128c:	20130740 	call	2013074 <_Bfree>
 2011290:	d9001617 	ldw	r4,88(sp)
 2011294:	980b883a 	mov	r5,r19
 2011298:	20130740 	call	2013074 <_Bfree>
 201129c:	003ec306 	br	2010dac <_dtoa_r+0x728>
 20112a0:	1805883a 	mov	r2,r3
 20112a4:	003eeb06 	br	2010e54 <_dtoa_r+0x7d0>
 20112a8:	d9800a17 	ldw	r6,40(sp)
 20112ac:	d8c01117 	ldw	r3,68(sp)
 20112b0:	20bfff04 	addi	r2,r4,-4
 20112b4:	308d883a 	add	r6,r6,r2
 20112b8:	1887883a 	add	r3,r3,r2
 20112bc:	80a1883a 	add	r16,r16,r2
 20112c0:	d9800a15 	stw	r6,40(sp)
 20112c4:	d8c01115 	stw	r3,68(sp)
 20112c8:	003f1d06 	br	2010f40 <_dtoa_r+0x8bc>
 20112cc:	a03f0c1e 	bne	r20,zero,2010f00 <_dtoa_r+0x87c>
 20112d0:	00800434 	movhi	r2,16
 20112d4:	10bfffc4 	addi	r2,r2,-1
 20112d8:	a884703a 	and	r2,r21,r2
 20112dc:	103f081e 	bne	r2,zero,2010f00 <_dtoa_r+0x87c>
 20112e0:	a89ffc2c 	andhi	r2,r21,32752
 20112e4:	103f0626 	beq	r2,zero,2010f00 <_dtoa_r+0x87c>
 20112e8:	d8c01117 	ldw	r3,68(sp)
 20112ec:	d9000a17 	ldw	r4,40(sp)
 20112f0:	18c00044 	addi	r3,r3,1
 20112f4:	21000044 	addi	r4,r4,1
 20112f8:	d8c01115 	stw	r3,68(sp)
 20112fc:	d9000a15 	stw	r4,40(sp)
 2011300:	003f0006 	br	2010f04 <_dtoa_r+0x880>
 2011304:	d9400717 	ldw	r5,28(sp)
 2011308:	d9001617 	ldw	r4,88(sp)
 201130c:	2013ec00 	call	2013ec0 <__pow5mult>
 2011310:	d8800715 	stw	r2,28(sp)
 2011314:	003eed06 	br	2010ecc <_dtoa_r+0x848>
 2011318:	1000021e 	bne	r2,zero,2011324 <_dtoa_r+0xca0>
 201131c:	b880004c 	andi	r2,r23,1
 2011320:	103fc11e 	bne	r2,zero,2011228 <_dtoa_r+0xba4>
 2011324:	b5bfffc4 	addi	r22,r22,-1
 2011328:	b0c00007 	ldb	r3,0(r22)
 201132c:	00800c04 	movi	r2,48
 2011330:	18bffc26 	beq	r3,r2,2011324 <_dtoa_r+0xca0>
 2011334:	b7000044 	addi	fp,r22,1
 2011338:	003fcb06 	br	2011268 <_dtoa_r+0xbe4>
 201133c:	d9800d17 	ldw	r6,52(sp)
 2011340:	018fc83a 	sub	r7,zero,r6
 2011344:	3801f726 	beq	r7,zero,2011b24 <_dtoa_r+0x14a0>
 2011348:	398003cc 	andi	r6,r7,15
 201134c:	300c90fa 	slli	r6,r6,3
 2011350:	014080b4 	movhi	r5,514
 2011354:	296fc904 	addi	r5,r5,-16604
 2011358:	d9001217 	ldw	r4,72(sp)
 201135c:	314d883a 	add	r6,r6,r5
 2011360:	30c00117 	ldw	r3,4(r6)
 2011364:	30800017 	ldw	r2,0(r6)
 2011368:	d9401317 	ldw	r5,76(sp)
 201136c:	3821d13a 	srai	r16,r7,4
 2011370:	100d883a 	mov	r6,r2
 2011374:	180f883a 	mov	r7,r3
 2011378:	2015fe40 	call	2015fe4 <__muldf3>
 201137c:	1011883a 	mov	r8,r2
 2011380:	1813883a 	mov	r9,r3
 2011384:	1029883a 	mov	r20,r2
 2011388:	182b883a 	mov	r21,r3
 201138c:	8001e526 	beq	r16,zero,2011b24 <_dtoa_r+0x14a0>
 2011390:	05800084 	movi	r22,2
 2011394:	044080b4 	movhi	r17,514
 2011398:	8c6ffb04 	addi	r17,r17,-16404
 201139c:	8080004c 	andi	r2,r16,1
 20113a0:	1005003a 	cmpeq	r2,r2,zero
 20113a4:	1000081e 	bne	r2,zero,20113c8 <_dtoa_r+0xd44>
 20113a8:	89800017 	ldw	r6,0(r17)
 20113ac:	89c00117 	ldw	r7,4(r17)
 20113b0:	480b883a 	mov	r5,r9
 20113b4:	4009883a 	mov	r4,r8
 20113b8:	2015fe40 	call	2015fe4 <__muldf3>
 20113bc:	1011883a 	mov	r8,r2
 20113c0:	b5800044 	addi	r22,r22,1
 20113c4:	1813883a 	mov	r9,r3
 20113c8:	8021d07a 	srai	r16,r16,1
 20113cc:	8c400204 	addi	r17,r17,8
 20113d0:	803ff21e 	bne	r16,zero,201139c <_dtoa_r+0xd18>
 20113d4:	4029883a 	mov	r20,r8
 20113d8:	482b883a 	mov	r21,r9
 20113dc:	003dca06 	br	2010b08 <_dtoa_r+0x484>
 20113e0:	d9000817 	ldw	r4,32(sp)
 20113e4:	2005003a 	cmpeq	r2,r4,zero
 20113e8:	1001f61e 	bne	r2,zero,2011bc4 <_dtoa_r+0x1540>
 20113ec:	dc001117 	ldw	r16,68(sp)
 20113f0:	dc801017 	ldw	r18,64(sp)
 20113f4:	18c10cc4 	addi	r3,r3,1075
 20113f8:	003f6106 	br	2011180 <_dtoa_r+0xafc>
 20113fc:	d8000b15 	stw	zero,44(sp)
 2011400:	d9802617 	ldw	r6,152(sp)
 2011404:	d8c00d17 	ldw	r3,52(sp)
 2011408:	30800044 	addi	r2,r6,1
 201140c:	18ad883a 	add	r22,r3,r2
 2011410:	b13fffc4 	addi	r4,r22,-1
 2011414:	d9000e15 	stw	r4,56(sp)
 2011418:	0581f60e 	bge	zero,r22,2011bf4 <_dtoa_r+0x1570>
 201141c:	dd800f15 	stw	r22,60(sp)
 2011420:	003f3006 	br	20110e4 <_dtoa_r+0xa60>
 2011424:	d8000b15 	stw	zero,44(sp)
 2011428:	d9002617 	ldw	r4,152(sp)
 201142c:	0101eb0e 	bge	zero,r4,2011bdc <_dtoa_r+0x1558>
 2011430:	202d883a 	mov	r22,r4
 2011434:	d9000e15 	stw	r4,56(sp)
 2011438:	d9000f15 	stw	r4,60(sp)
 201143c:	003f2906 	br	20110e4 <_dtoa_r+0xa60>
 2011440:	01800044 	movi	r6,1
 2011444:	d9800b15 	stw	r6,44(sp)
 2011448:	003ff706 	br	2011428 <_dtoa_r+0xda4>
 201144c:	01000044 	movi	r4,1
 2011450:	d9000b15 	stw	r4,44(sp)
 2011454:	003fea06 	br	2011400 <_dtoa_r+0xd7c>
 2011458:	04000c0e 	bge	zero,r16,201148c <_dtoa_r+0xe08>
 201145c:	d9400717 	ldw	r5,28(sp)
 2011460:	d9001617 	ldw	r4,88(sp)
 2011464:	01800044 	movi	r6,1
 2011468:	20139b80 	call	20139b8 <__lshift>
 201146c:	1009883a 	mov	r4,r2
 2011470:	900b883a 	mov	r5,r18
 2011474:	d8800715 	stw	r2,28(sp)
 2011478:	20131d00 	call	20131d0 <__mcmp>
 201147c:	0081e00e 	bge	zero,r2,2011c00 <_dtoa_r+0x157c>
 2011480:	bdc00044 	addi	r23,r23,1
 2011484:	00800e84 	movi	r2,58
 2011488:	b881a226 	beq	r23,r2,2011b14 <_dtoa_r+0x1490>
 201148c:	b7000044 	addi	fp,r22,1
 2011490:	b5c00005 	stb	r23,0(r22)
 2011494:	003f7406 	br	2011268 <_dtoa_r+0xbe4>
 2011498:	00800e44 	movi	r2,57
 201149c:	b8819d26 	beq	r23,r2,2011b14 <_dtoa_r+0x1490>
 20114a0:	053ffa0e 	bge	zero,r20,201148c <_dtoa_r+0xe08>
 20114a4:	8dc00c44 	addi	r23,r17,49
 20114a8:	003ff806 	br	201148c <_dtoa_r+0xe08>
 20114ac:	d9001617 	ldw	r4,88(sp)
 20114b0:	a80b883a 	mov	r5,r21
 20114b4:	04000044 	movi	r16,1
 20114b8:	20130740 	call	2013074 <_Bfree>
 20114bc:	003edf06 	br	201103c <_dtoa_r+0x9b8>
 20114c0:	d9001617 	ldw	r4,88(sp)
 20114c4:	980b883a 	mov	r5,r19
 20114c8:	01800284 	movi	r6,10
 20114cc:	000f883a 	mov	r7,zero
 20114d0:	2013d940 	call	2013d94 <__multadd>
 20114d4:	1027883a 	mov	r19,r2
 20114d8:	d8800615 	stw	r2,24(sp)
 20114dc:	003ebb06 	br	2010fcc <_dtoa_r+0x948>
 20114e0:	d9801117 	ldw	r6,68(sp)
 20114e4:	d8800d17 	ldw	r2,52(sp)
 20114e8:	d8000915 	stw	zero,36(sp)
 20114ec:	308dc83a 	sub	r6,r6,r2
 20114f0:	0087c83a 	sub	r3,zero,r2
 20114f4:	d9801115 	stw	r6,68(sp)
 20114f8:	d8c01015 	stw	r3,64(sp)
 20114fc:	003cfe06 	br	20108f8 <_dtoa_r+0x274>
 2011500:	018dc83a 	sub	r6,zero,r6
 2011504:	d9801115 	stw	r6,68(sp)
 2011508:	d8000a15 	stw	zero,40(sp)
 201150c:	003cf306 	br	20108dc <_dtoa_r+0x258>
 2011510:	d9000d17 	ldw	r4,52(sp)
 2011514:	20168a80 	call	20168a8 <__floatsidf>
 2011518:	880b883a 	mov	r5,r17
 201151c:	8009883a 	mov	r4,r16
 2011520:	180f883a 	mov	r7,r3
 2011524:	100d883a 	mov	r6,r2
 2011528:	20166880 	call	2016688 <__nedf2>
 201152c:	103ce126 	beq	r2,zero,20108b4 <_dtoa_r+0x230>
 2011530:	d9800d17 	ldw	r6,52(sp)
 2011534:	31bfffc4 	addi	r6,r6,-1
 2011538:	d9800d15 	stw	r6,52(sp)
 201153c:	003cdd06 	br	20108b4 <_dtoa_r+0x230>
 2011540:	d9000717 	ldw	r4,28(sp)
 2011544:	900b883a 	mov	r5,r18
 2011548:	20131d00 	call	20131d0 <__mcmp>
 201154c:	103e8d0e 	bge	r2,zero,2010f84 <_dtoa_r+0x900>
 2011550:	d9400717 	ldw	r5,28(sp)
 2011554:	d9001617 	ldw	r4,88(sp)
 2011558:	01800284 	movi	r6,10
 201155c:	000f883a 	mov	r7,zero
 2011560:	2013d940 	call	2013d94 <__multadd>
 2011564:	d9800d17 	ldw	r6,52(sp)
 2011568:	d8800715 	stw	r2,28(sp)
 201156c:	31bfffc4 	addi	r6,r6,-1
 2011570:	d9800d15 	stw	r6,52(sp)
 2011574:	b001a71e 	bne	r22,zero,2011c14 <_dtoa_r+0x1590>
 2011578:	d8800e17 	ldw	r2,56(sp)
 201157c:	d8800f15 	stw	r2,60(sp)
 2011580:	003e8006 	br	2010f84 <_dtoa_r+0x900>
 2011584:	90800417 	ldw	r2,16(r18)
 2011588:	1085883a 	add	r2,r2,r2
 201158c:	1085883a 	add	r2,r2,r2
 2011590:	1485883a 	add	r2,r2,r18
 2011594:	11000417 	ldw	r4,16(r2)
 2011598:	201309c0 	call	201309c <__hi0bits>
 201159c:	00c00804 	movi	r3,32
 20115a0:	1887c83a 	sub	r3,r3,r2
 20115a4:	003e5a06 	br	2010f10 <_dtoa_r+0x88c>
 20115a8:	d9400717 	ldw	r5,28(sp)
 20115ac:	d9801017 	ldw	r6,64(sp)
 20115b0:	d9001617 	ldw	r4,88(sp)
 20115b4:	2013ec00 	call	2013ec0 <__pow5mult>
 20115b8:	d8800715 	stw	r2,28(sp)
 20115bc:	003e4306 	br	2010ecc <_dtoa_r+0x848>
 20115c0:	d9800f17 	ldw	r6,60(sp)
 20115c4:	d8800d17 	ldw	r2,52(sp)
 20115c8:	d9800315 	stw	r6,12(sp)
 20115cc:	d8800415 	stw	r2,16(sp)
 20115d0:	d8c00b17 	ldw	r3,44(sp)
 20115d4:	1805003a 	cmpeq	r2,r3,zero
 20115d8:	1000e21e 	bne	r2,zero,2011964 <_dtoa_r+0x12e0>
 20115dc:	d9000317 	ldw	r4,12(sp)
 20115e0:	0005883a 	mov	r2,zero
 20115e4:	00cff834 	movhi	r3,16352
 20115e8:	200c90fa 	slli	r6,r4,3
 20115ec:	010080b4 	movhi	r4,514
 20115f0:	212fc904 	addi	r4,r4,-16604
 20115f4:	180b883a 	mov	r5,r3
 20115f8:	310d883a 	add	r6,r6,r4
 20115fc:	327fff17 	ldw	r9,-4(r6)
 2011600:	323ffe17 	ldw	r8,-8(r6)
 2011604:	1009883a 	mov	r4,r2
 2011608:	480f883a 	mov	r7,r9
 201160c:	400d883a 	mov	r6,r8
 2011610:	20163a80 	call	20163a8 <__divdf3>
 2011614:	180b883a 	mov	r5,r3
 2011618:	b00d883a 	mov	r6,r22
 201161c:	b80f883a 	mov	r7,r23
 2011620:	1009883a 	mov	r4,r2
 2011624:	2015ef00 	call	2015ef0 <__subdf3>
 2011628:	a80b883a 	mov	r5,r21
 201162c:	a009883a 	mov	r4,r20
 2011630:	d8c01915 	stw	r3,100(sp)
 2011634:	d8801815 	stw	r2,96(sp)
 2011638:	20169a00 	call	20169a0 <__fixdfsi>
 201163c:	1009883a 	mov	r4,r2
 2011640:	1027883a 	mov	r19,r2
 2011644:	20168a80 	call	20168a8 <__floatsidf>
 2011648:	a80b883a 	mov	r5,r21
 201164c:	a009883a 	mov	r4,r20
 2011650:	180f883a 	mov	r7,r3
 2011654:	100d883a 	mov	r6,r2
 2011658:	2015ef00 	call	2015ef0 <__subdf3>
 201165c:	d9801817 	ldw	r6,96(sp)
 2011660:	1823883a 	mov	r17,r3
 2011664:	d8801415 	stw	r2,80(sp)
 2011668:	302d883a 	mov	r22,r6
 201166c:	d9800517 	ldw	r6,20(sp)
 2011670:	9cc00c04 	addi	r19,r19,48
 2011674:	dc401515 	stw	r17,84(sp)
 2011678:	d8c01917 	ldw	r3,100(sp)
 201167c:	34c00005 	stb	r19,0(r6)
 2011680:	d8800517 	ldw	r2,20(sp)
 2011684:	d9401917 	ldw	r5,100(sp)
 2011688:	d9801417 	ldw	r6,80(sp)
 201168c:	b009883a 	mov	r4,r22
 2011690:	880f883a 	mov	r7,r17
 2011694:	182f883a 	mov	r23,r3
 2011698:	17000044 	addi	fp,r2,1
 201169c:	20167100 	call	2016710 <__gtdf2>
 20116a0:	00804e16 	blt	zero,r2,20117dc <_dtoa_r+0x1158>
 20116a4:	d9801417 	ldw	r6,80(sp)
 20116a8:	0005883a 	mov	r2,zero
 20116ac:	00cffc34 	movhi	r3,16368
 20116b0:	180b883a 	mov	r5,r3
 20116b4:	880f883a 	mov	r7,r17
 20116b8:	1009883a 	mov	r4,r2
 20116bc:	2015ef00 	call	2015ef0 <__subdf3>
 20116c0:	d9401917 	ldw	r5,100(sp)
 20116c4:	180f883a 	mov	r7,r3
 20116c8:	b009883a 	mov	r4,r22
 20116cc:	100d883a 	mov	r6,r2
 20116d0:	20167100 	call	2016710 <__gtdf2>
 20116d4:	00bda216 	blt	zero,r2,2010d60 <_dtoa_r+0x6dc>
 20116d8:	d8c00317 	ldw	r3,12(sp)
 20116dc:	00800044 	movi	r2,1
 20116e0:	10c01216 	blt	r2,r3,201172c <_dtoa_r+0x10a8>
 20116e4:	003d4506 	br	2010bfc <_dtoa_r+0x578>
 20116e8:	d9801417 	ldw	r6,80(sp)
 20116ec:	0005883a 	mov	r2,zero
 20116f0:	00cffc34 	movhi	r3,16368
 20116f4:	180b883a 	mov	r5,r3
 20116f8:	880f883a 	mov	r7,r17
 20116fc:	1009883a 	mov	r4,r2
 2011700:	2015ef00 	call	2015ef0 <__subdf3>
 2011704:	d9c01b17 	ldw	r7,108(sp)
 2011708:	180b883a 	mov	r5,r3
 201170c:	1009883a 	mov	r4,r2
 2011710:	b00d883a 	mov	r6,r22
 2011714:	20168200 	call	2016820 <__ltdf2>
 2011718:	103d9116 	blt	r2,zero,2010d60 <_dtoa_r+0x6dc>
 201171c:	d9800517 	ldw	r6,20(sp)
 2011720:	d9000317 	ldw	r4,12(sp)
 2011724:	3105883a 	add	r2,r6,r4
 2011728:	e0bd3426 	beq	fp,r2,2010bfc <_dtoa_r+0x578>
 201172c:	04500934 	movhi	r17,16420
 2011730:	0021883a 	mov	r16,zero
 2011734:	b80b883a 	mov	r5,r23
 2011738:	b009883a 	mov	r4,r22
 201173c:	800d883a 	mov	r6,r16
 2011740:	880f883a 	mov	r7,r17
 2011744:	2015fe40 	call	2015fe4 <__muldf3>
 2011748:	d9401517 	ldw	r5,84(sp)
 201174c:	d9001417 	ldw	r4,80(sp)
 2011750:	880f883a 	mov	r7,r17
 2011754:	000d883a 	mov	r6,zero
 2011758:	d8801a15 	stw	r2,104(sp)
 201175c:	d8c01b15 	stw	r3,108(sp)
 2011760:	2015fe40 	call	2015fe4 <__muldf3>
 2011764:	180b883a 	mov	r5,r3
 2011768:	1009883a 	mov	r4,r2
 201176c:	1823883a 	mov	r17,r3
 2011770:	1021883a 	mov	r16,r2
 2011774:	20169a00 	call	20169a0 <__fixdfsi>
 2011778:	1009883a 	mov	r4,r2
 201177c:	102b883a 	mov	r21,r2
 2011780:	20168a80 	call	20168a8 <__floatsidf>
 2011784:	880b883a 	mov	r5,r17
 2011788:	8009883a 	mov	r4,r16
 201178c:	180f883a 	mov	r7,r3
 2011790:	100d883a 	mov	r6,r2
 2011794:	2015ef00 	call	2015ef0 <__subdf3>
 2011798:	1021883a 	mov	r16,r2
 201179c:	d9001b17 	ldw	r4,108(sp)
 20117a0:	1823883a 	mov	r17,r3
 20117a4:	dc001415 	stw	r16,80(sp)
 20117a8:	ad400c04 	addi	r21,r21,48
 20117ac:	dc401515 	stw	r17,84(sp)
 20117b0:	d8801a17 	ldw	r2,104(sp)
 20117b4:	e5400005 	stb	r21,0(fp)
 20117b8:	202f883a 	mov	r23,r4
 20117bc:	d9c01b17 	ldw	r7,108(sp)
 20117c0:	d9001417 	ldw	r4,80(sp)
 20117c4:	880b883a 	mov	r5,r17
 20117c8:	100d883a 	mov	r6,r2
 20117cc:	102d883a 	mov	r22,r2
 20117d0:	e7000044 	addi	fp,fp,1
 20117d4:	20168200 	call	2016820 <__ltdf2>
 20117d8:	103fc30e 	bge	r2,zero,20116e8 <_dtoa_r+0x1064>
 20117dc:	d9000417 	ldw	r4,16(sp)
 20117e0:	d9000d15 	stw	r4,52(sp)
 20117e4:	003d7106 	br	2010dac <_dtoa_r+0x728>
 20117e8:	d9801717 	ldw	r6,92(sp)
 20117ec:	00800084 	movi	r2,2
 20117f0:	11bde60e 	bge	r2,r6,2010f8c <_dtoa_r+0x908>
 20117f4:	203cfb1e 	bne	r4,zero,2010be4 <_dtoa_r+0x560>
 20117f8:	d9001617 	ldw	r4,88(sp)
 20117fc:	900b883a 	mov	r5,r18
 2011800:	01800144 	movi	r6,5
 2011804:	000f883a 	mov	r7,zero
 2011808:	2013d940 	call	2013d94 <__multadd>
 201180c:	d9000717 	ldw	r4,28(sp)
 2011810:	100b883a 	mov	r5,r2
 2011814:	1025883a 	mov	r18,r2
 2011818:	20131d00 	call	20131d0 <__mcmp>
 201181c:	00bcf10e 	bge	zero,r2,2010be4 <_dtoa_r+0x560>
 2011820:	d8c00d17 	ldw	r3,52(sp)
 2011824:	d9000517 	ldw	r4,20(sp)
 2011828:	d8000615 	stw	zero,24(sp)
 201182c:	18c00044 	addi	r3,r3,1
 2011830:	d8c00d15 	stw	r3,52(sp)
 2011834:	00800c44 	movi	r2,49
 2011838:	27000044 	addi	fp,r4,1
 201183c:	20800005 	stb	r2,0(r4)
 2011840:	003e8906 	br	2011268 <_dtoa_r+0xbe4>
 2011844:	d8c00517 	ldw	r3,20(sp)
 2011848:	003bc206 	br	2010754 <_dtoa_r+0xd0>
 201184c:	018080b4 	movhi	r6,514
 2011850:	31affb04 	addi	r6,r6,-16404
 2011854:	30c00917 	ldw	r3,36(r6)
 2011858:	30800817 	ldw	r2,32(r6)
 201185c:	d9001217 	ldw	r4,72(sp)
 2011860:	d9401317 	ldw	r5,76(sp)
 2011864:	180f883a 	mov	r7,r3
 2011868:	100d883a 	mov	r6,r2
 201186c:	20163a80 	call	20163a8 <__divdf3>
 2011870:	948003cc 	andi	r18,r18,15
 2011874:	058000c4 	movi	r22,3
 2011878:	1029883a 	mov	r20,r2
 201187c:	182b883a 	mov	r21,r3
 2011880:	003c8906 	br	2010aa8 <_dtoa_r+0x424>
 2011884:	d9001017 	ldw	r4,64(sp)
 2011888:	d9800917 	ldw	r6,36(sp)
 201188c:	0025883a 	mov	r18,zero
 2011890:	1105c83a 	sub	r2,r2,r4
 2011894:	2089883a 	add	r4,r4,r2
 2011898:	308d883a 	add	r6,r6,r2
 201189c:	d9001015 	stw	r4,64(sp)
 20118a0:	d9800915 	stw	r6,36(sp)
 20118a4:	003e3206 	br	2011170 <_dtoa_r+0xaec>
 20118a8:	28800044 	addi	r2,r5,1
 20118ac:	27000044 	addi	fp,r4,1
 20118b0:	20800005 	stb	r2,0(r4)
 20118b4:	003e6c06 	br	2011268 <_dtoa_r+0xbe4>
 20118b8:	d8800f17 	ldw	r2,60(sp)
 20118bc:	00bce016 	blt	zero,r2,2010c40 <_dtoa_r+0x5bc>
 20118c0:	d9800f17 	ldw	r6,60(sp)
 20118c4:	303cc51e 	bne	r6,zero,2010bdc <_dtoa_r+0x558>
 20118c8:	0005883a 	mov	r2,zero
 20118cc:	00d00534 	movhi	r3,16404
 20118d0:	980b883a 	mov	r5,r19
 20118d4:	180f883a 	mov	r7,r3
 20118d8:	9009883a 	mov	r4,r18
 20118dc:	100d883a 	mov	r6,r2
 20118e0:	2015fe40 	call	2015fe4 <__muldf3>
 20118e4:	180b883a 	mov	r5,r3
 20118e8:	a80f883a 	mov	r7,r21
 20118ec:	1009883a 	mov	r4,r2
 20118f0:	a00d883a 	mov	r6,r20
 20118f4:	20167980 	call	2016798 <__gedf2>
 20118f8:	103cb80e 	bge	r2,zero,2010bdc <_dtoa_r+0x558>
 20118fc:	0027883a 	mov	r19,zero
 2011900:	0025883a 	mov	r18,zero
 2011904:	003fc606 	br	2011820 <_dtoa_r+0x119c>
 2011908:	99400117 	ldw	r5,4(r19)
 201190c:	d9001617 	ldw	r4,88(sp)
 2011910:	20135f40 	call	20135f4 <_Balloc>
 2011914:	99800417 	ldw	r6,16(r19)
 2011918:	11000304 	addi	r4,r2,12
 201191c:	99400304 	addi	r5,r19,12
 2011920:	318d883a 	add	r6,r6,r6
 2011924:	318d883a 	add	r6,r6,r6
 2011928:	31800204 	addi	r6,r6,8
 201192c:	1023883a 	mov	r17,r2
 2011930:	2012ef40 	call	2012ef4 <memcpy>
 2011934:	d9001617 	ldw	r4,88(sp)
 2011938:	880b883a 	mov	r5,r17
 201193c:	01800044 	movi	r6,1
 2011940:	20139b80 	call	20139b8 <__lshift>
 2011944:	100b883a 	mov	r5,r2
 2011948:	003d9c06 	br	2010fbc <_dtoa_r+0x938>
 201194c:	00800e44 	movi	r2,57
 2011950:	b8807026 	beq	r23,r2,2011b14 <_dtoa_r+0x1490>
 2011954:	b8800044 	addi	r2,r23,1
 2011958:	b7000044 	addi	fp,r22,1
 201195c:	b0800005 	stb	r2,0(r22)
 2011960:	003e4106 	br	2011268 <_dtoa_r+0xbe4>
 2011964:	d8800317 	ldw	r2,12(sp)
 2011968:	018080b4 	movhi	r6,514
 201196c:	31afc904 	addi	r6,r6,-16604
 2011970:	b009883a 	mov	r4,r22
 2011974:	100e90fa 	slli	r7,r2,3
 2011978:	b80b883a 	mov	r5,r23
 201197c:	398f883a 	add	r7,r7,r6
 2011980:	38bffe17 	ldw	r2,-8(r7)
 2011984:	d9800517 	ldw	r6,20(sp)
 2011988:	38ffff17 	ldw	r3,-4(r7)
 201198c:	37000044 	addi	fp,r6,1
 2011990:	180f883a 	mov	r7,r3
 2011994:	100d883a 	mov	r6,r2
 2011998:	2015fe40 	call	2015fe4 <__muldf3>
 201199c:	a80b883a 	mov	r5,r21
 20119a0:	a009883a 	mov	r4,r20
 20119a4:	182f883a 	mov	r23,r3
 20119a8:	102d883a 	mov	r22,r2
 20119ac:	20169a00 	call	20169a0 <__fixdfsi>
 20119b0:	1009883a 	mov	r4,r2
 20119b4:	1027883a 	mov	r19,r2
 20119b8:	20168a80 	call	20168a8 <__floatsidf>
 20119bc:	a80b883a 	mov	r5,r21
 20119c0:	a009883a 	mov	r4,r20
 20119c4:	180f883a 	mov	r7,r3
 20119c8:	100d883a 	mov	r6,r2
 20119cc:	2015ef00 	call	2015ef0 <__subdf3>
 20119d0:	180b883a 	mov	r5,r3
 20119d4:	d8c00517 	ldw	r3,20(sp)
 20119d8:	9cc00c04 	addi	r19,r19,48
 20119dc:	1009883a 	mov	r4,r2
 20119e0:	1cc00005 	stb	r19,0(r3)
 20119e4:	2021883a 	mov	r16,r4
 20119e8:	d9000317 	ldw	r4,12(sp)
 20119ec:	00800044 	movi	r2,1
 20119f0:	2823883a 	mov	r17,r5
 20119f4:	20802226 	beq	r4,r2,2011a80 <_dtoa_r+0x13fc>
 20119f8:	1029883a 	mov	r20,r2
 20119fc:	0005883a 	mov	r2,zero
 2011a00:	00d00934 	movhi	r3,16420
 2011a04:	180f883a 	mov	r7,r3
 2011a08:	100d883a 	mov	r6,r2
 2011a0c:	880b883a 	mov	r5,r17
 2011a10:	8009883a 	mov	r4,r16
 2011a14:	2015fe40 	call	2015fe4 <__muldf3>
 2011a18:	180b883a 	mov	r5,r3
 2011a1c:	1009883a 	mov	r4,r2
 2011a20:	1823883a 	mov	r17,r3
 2011a24:	1021883a 	mov	r16,r2
 2011a28:	20169a00 	call	20169a0 <__fixdfsi>
 2011a2c:	1009883a 	mov	r4,r2
 2011a30:	102b883a 	mov	r21,r2
 2011a34:	20168a80 	call	20168a8 <__floatsidf>
 2011a38:	880b883a 	mov	r5,r17
 2011a3c:	8009883a 	mov	r4,r16
 2011a40:	180f883a 	mov	r7,r3
 2011a44:	100d883a 	mov	r6,r2
 2011a48:	2015ef00 	call	2015ef0 <__subdf3>
 2011a4c:	180b883a 	mov	r5,r3
 2011a50:	d8c00517 	ldw	r3,20(sp)
 2011a54:	1009883a 	mov	r4,r2
 2011a58:	ad400c04 	addi	r21,r21,48
 2011a5c:	1d05883a 	add	r2,r3,r20
 2011a60:	15400005 	stb	r21,0(r2)
 2011a64:	2021883a 	mov	r16,r4
 2011a68:	d9000317 	ldw	r4,12(sp)
 2011a6c:	a5000044 	addi	r20,r20,1
 2011a70:	2823883a 	mov	r17,r5
 2011a74:	a13fe11e 	bne	r20,r4,20119fc <_dtoa_r+0x1378>
 2011a78:	e505883a 	add	r2,fp,r20
 2011a7c:	173fffc4 	addi	fp,r2,-1
 2011a80:	0025883a 	mov	r18,zero
 2011a84:	04cff834 	movhi	r19,16352
 2011a88:	b009883a 	mov	r4,r22
 2011a8c:	b80b883a 	mov	r5,r23
 2011a90:	900d883a 	mov	r6,r18
 2011a94:	980f883a 	mov	r7,r19
 2011a98:	2015f700 	call	2015f70 <__adddf3>
 2011a9c:	180b883a 	mov	r5,r3
 2011aa0:	1009883a 	mov	r4,r2
 2011aa4:	800d883a 	mov	r6,r16
 2011aa8:	880f883a 	mov	r7,r17
 2011aac:	20168200 	call	2016820 <__ltdf2>
 2011ab0:	103cab16 	blt	r2,zero,2010d60 <_dtoa_r+0x6dc>
 2011ab4:	0009883a 	mov	r4,zero
 2011ab8:	980b883a 	mov	r5,r19
 2011abc:	b80f883a 	mov	r7,r23
 2011ac0:	b00d883a 	mov	r6,r22
 2011ac4:	2015ef00 	call	2015ef0 <__subdf3>
 2011ac8:	180b883a 	mov	r5,r3
 2011acc:	880f883a 	mov	r7,r17
 2011ad0:	1009883a 	mov	r4,r2
 2011ad4:	800d883a 	mov	r6,r16
 2011ad8:	20167100 	call	2016710 <__gtdf2>
 2011adc:	00bc470e 	bge	zero,r2,2010bfc <_dtoa_r+0x578>
 2011ae0:	00c00c04 	movi	r3,48
 2011ae4:	e73fffc4 	addi	fp,fp,-1
 2011ae8:	e0800007 	ldb	r2,0(fp)
 2011aec:	10fffd26 	beq	r2,r3,2011ae4 <_dtoa_r+0x1460>
 2011af0:	d9800417 	ldw	r6,16(sp)
 2011af4:	e7000044 	addi	fp,fp,1
 2011af8:	d9800d15 	stw	r6,52(sp)
 2011afc:	003cab06 	br	2010dac <_dtoa_r+0x728>
 2011b00:	d8c00f17 	ldw	r3,60(sp)
 2011b04:	d9001117 	ldw	r4,68(sp)
 2011b08:	20e1c83a 	sub	r16,r4,r3
 2011b0c:	0007883a 	mov	r3,zero
 2011b10:	003d9b06 	br	2011180 <_dtoa_r+0xafc>
 2011b14:	00800e44 	movi	r2,57
 2011b18:	b0800005 	stb	r2,0(r22)
 2011b1c:	b5800044 	addi	r22,r22,1
 2011b20:	003dc106 	br	2011228 <_dtoa_r+0xba4>
 2011b24:	05800084 	movi	r22,2
 2011b28:	003bf706 	br	2010b08 <_dtoa_r+0x484>
 2011b2c:	d9000f17 	ldw	r4,60(sp)
 2011b30:	013c000e 	bge	zero,r4,2010b34 <_dtoa_r+0x4b0>
 2011b34:	d9800e17 	ldw	r6,56(sp)
 2011b38:	01bc300e 	bge	zero,r6,2010bfc <_dtoa_r+0x578>
 2011b3c:	0005883a 	mov	r2,zero
 2011b40:	00d00934 	movhi	r3,16420
 2011b44:	a80b883a 	mov	r5,r21
 2011b48:	180f883a 	mov	r7,r3
 2011b4c:	a009883a 	mov	r4,r20
 2011b50:	100d883a 	mov	r6,r2
 2011b54:	2015fe40 	call	2015fe4 <__muldf3>
 2011b58:	b1000044 	addi	r4,r22,1
 2011b5c:	1021883a 	mov	r16,r2
 2011b60:	1823883a 	mov	r17,r3
 2011b64:	20168a80 	call	20168a8 <__floatsidf>
 2011b68:	880b883a 	mov	r5,r17
 2011b6c:	8009883a 	mov	r4,r16
 2011b70:	180f883a 	mov	r7,r3
 2011b74:	100d883a 	mov	r6,r2
 2011b78:	2015fe40 	call	2015fe4 <__muldf3>
 2011b7c:	0011883a 	mov	r8,zero
 2011b80:	02500734 	movhi	r9,16412
 2011b84:	180b883a 	mov	r5,r3
 2011b88:	480f883a 	mov	r7,r9
 2011b8c:	1009883a 	mov	r4,r2
 2011b90:	400d883a 	mov	r6,r8
 2011b94:	2015f700 	call	2015f70 <__adddf3>
 2011b98:	102d883a 	mov	r22,r2
 2011b9c:	00bf3034 	movhi	r2,64704
 2011ba0:	10ef883a 	add	r23,r2,r3
 2011ba4:	d8800d17 	ldw	r2,52(sp)
 2011ba8:	d8c00e17 	ldw	r3,56(sp)
 2011bac:	8029883a 	mov	r20,r16
 2011bb0:	10bfffc4 	addi	r2,r2,-1
 2011bb4:	882b883a 	mov	r21,r17
 2011bb8:	d8800415 	stw	r2,16(sp)
 2011bbc:	d8c00315 	stw	r3,12(sp)
 2011bc0:	003e8306 	br	20115d0 <_dtoa_r+0xf4c>
 2011bc4:	d8800117 	ldw	r2,4(sp)
 2011bc8:	dc001117 	ldw	r16,68(sp)
 2011bcc:	dc801017 	ldw	r18,64(sp)
 2011bd0:	00c00d84 	movi	r3,54
 2011bd4:	1887c83a 	sub	r3,r3,r2
 2011bd8:	003d6906 	br	2011180 <_dtoa_r+0xafc>
 2011bdc:	01800044 	movi	r6,1
 2011be0:	3021883a 	mov	r16,r6
 2011be4:	d9800f15 	stw	r6,60(sp)
 2011be8:	d9802615 	stw	r6,152(sp)
 2011bec:	d9800e15 	stw	r6,56(sp)
 2011bf0:	003b9306 	br	2010a40 <_dtoa_r+0x3bc>
 2011bf4:	b021883a 	mov	r16,r22
 2011bf8:	dd800f15 	stw	r22,60(sp)
 2011bfc:	003b9006 	br	2010a40 <_dtoa_r+0x3bc>
 2011c00:	103e221e 	bne	r2,zero,201148c <_dtoa_r+0xe08>
 2011c04:	b880004c 	andi	r2,r23,1
 2011c08:	1005003a 	cmpeq	r2,r2,zero
 2011c0c:	103e1f1e 	bne	r2,zero,201148c <_dtoa_r+0xe08>
 2011c10:	003e1b06 	br	2011480 <_dtoa_r+0xdfc>
 2011c14:	d9001617 	ldw	r4,88(sp)
 2011c18:	980b883a 	mov	r5,r19
 2011c1c:	01800284 	movi	r6,10
 2011c20:	000f883a 	mov	r7,zero
 2011c24:	2013d940 	call	2013d94 <__multadd>
 2011c28:	d8c00e17 	ldw	r3,56(sp)
 2011c2c:	1027883a 	mov	r19,r2
 2011c30:	d8c00f15 	stw	r3,60(sp)
 2011c34:	003cd306 	br	2010f84 <_dtoa_r+0x900>

02011c38 <_fflush_r>:
 2011c38:	defffb04 	addi	sp,sp,-20
 2011c3c:	dcc00315 	stw	r19,12(sp)
 2011c40:	dc800215 	stw	r18,8(sp)
 2011c44:	dfc00415 	stw	ra,16(sp)
 2011c48:	dc400115 	stw	r17,4(sp)
 2011c4c:	dc000015 	stw	r16,0(sp)
 2011c50:	2027883a 	mov	r19,r4
 2011c54:	2825883a 	mov	r18,r5
 2011c58:	20000226 	beq	r4,zero,2011c64 <_fflush_r+0x2c>
 2011c5c:	20800e17 	ldw	r2,56(r4)
 2011c60:	10005626 	beq	r2,zero,2011dbc <_fflush_r+0x184>
 2011c64:	9100030b 	ldhu	r4,12(r18)
 2011c68:	20ffffcc 	andi	r3,r4,65535
 2011c6c:	18e0001c 	xori	r3,r3,32768
 2011c70:	18e00004 	addi	r3,r3,-32768
 2011c74:	1880020c 	andi	r2,r3,8
 2011c78:	1000261e 	bne	r2,zero,2011d14 <_fflush_r+0xdc>
 2011c7c:	90c00117 	ldw	r3,4(r18)
 2011c80:	20820014 	ori	r2,r4,2048
 2011c84:	9080030d 	sth	r2,12(r18)
 2011c88:	1009883a 	mov	r4,r2
 2011c8c:	00c0400e 	bge	zero,r3,2011d90 <_fflush_r+0x158>
 2011c90:	92000a17 	ldw	r8,40(r18)
 2011c94:	40004026 	beq	r8,zero,2011d98 <_fflush_r+0x160>
 2011c98:	2084000c 	andi	r2,r4,4096
 2011c9c:	10005326 	beq	r2,zero,2011dec <_fflush_r+0x1b4>
 2011ca0:	94001417 	ldw	r16,80(r18)
 2011ca4:	9080030b 	ldhu	r2,12(r18)
 2011ca8:	1080010c 	andi	r2,r2,4
 2011cac:	1000481e 	bne	r2,zero,2011dd0 <_fflush_r+0x198>
 2011cb0:	91400717 	ldw	r5,28(r18)
 2011cb4:	9809883a 	mov	r4,r19
 2011cb8:	800d883a 	mov	r6,r16
 2011cbc:	000f883a 	mov	r7,zero
 2011cc0:	403ee83a 	callr	r8
 2011cc4:	8080261e 	bne	r16,r2,2011d60 <_fflush_r+0x128>
 2011cc8:	9080030b 	ldhu	r2,12(r18)
 2011ccc:	91000417 	ldw	r4,16(r18)
 2011cd0:	90000115 	stw	zero,4(r18)
 2011cd4:	10bdffcc 	andi	r2,r2,63487
 2011cd8:	10ffffcc 	andi	r3,r2,65535
 2011cdc:	18c4000c 	andi	r3,r3,4096
 2011ce0:	9080030d 	sth	r2,12(r18)
 2011ce4:	91000015 	stw	r4,0(r18)
 2011ce8:	18002b26 	beq	r3,zero,2011d98 <_fflush_r+0x160>
 2011cec:	0007883a 	mov	r3,zero
 2011cf0:	1805883a 	mov	r2,r3
 2011cf4:	94001415 	stw	r16,80(r18)
 2011cf8:	dfc00417 	ldw	ra,16(sp)
 2011cfc:	dcc00317 	ldw	r19,12(sp)
 2011d00:	dc800217 	ldw	r18,8(sp)
 2011d04:	dc400117 	ldw	r17,4(sp)
 2011d08:	dc000017 	ldw	r16,0(sp)
 2011d0c:	dec00504 	addi	sp,sp,20
 2011d10:	f800283a 	ret
 2011d14:	94400417 	ldw	r17,16(r18)
 2011d18:	88001f26 	beq	r17,zero,2011d98 <_fflush_r+0x160>
 2011d1c:	90800017 	ldw	r2,0(r18)
 2011d20:	18c000cc 	andi	r3,r3,3
 2011d24:	94400015 	stw	r17,0(r18)
 2011d28:	1461c83a 	sub	r16,r2,r17
 2011d2c:	18002526 	beq	r3,zero,2011dc4 <_fflush_r+0x18c>
 2011d30:	0005883a 	mov	r2,zero
 2011d34:	90800215 	stw	r2,8(r18)
 2011d38:	0400170e 	bge	zero,r16,2011d98 <_fflush_r+0x160>
 2011d3c:	90c00917 	ldw	r3,36(r18)
 2011d40:	91400717 	ldw	r5,28(r18)
 2011d44:	880d883a 	mov	r6,r17
 2011d48:	800f883a 	mov	r7,r16
 2011d4c:	9809883a 	mov	r4,r19
 2011d50:	183ee83a 	callr	r3
 2011d54:	88a3883a 	add	r17,r17,r2
 2011d58:	80a1c83a 	sub	r16,r16,r2
 2011d5c:	00bff616 	blt	zero,r2,2011d38 <_fflush_r+0x100>
 2011d60:	9080030b 	ldhu	r2,12(r18)
 2011d64:	00ffffc4 	movi	r3,-1
 2011d68:	10801014 	ori	r2,r2,64
 2011d6c:	9080030d 	sth	r2,12(r18)
 2011d70:	1805883a 	mov	r2,r3
 2011d74:	dfc00417 	ldw	ra,16(sp)
 2011d78:	dcc00317 	ldw	r19,12(sp)
 2011d7c:	dc800217 	ldw	r18,8(sp)
 2011d80:	dc400117 	ldw	r17,4(sp)
 2011d84:	dc000017 	ldw	r16,0(sp)
 2011d88:	dec00504 	addi	sp,sp,20
 2011d8c:	f800283a 	ret
 2011d90:	90800f17 	ldw	r2,60(r18)
 2011d94:	00bfbe16 	blt	zero,r2,2011c90 <_fflush_r+0x58>
 2011d98:	0007883a 	mov	r3,zero
 2011d9c:	1805883a 	mov	r2,r3
 2011da0:	dfc00417 	ldw	ra,16(sp)
 2011da4:	dcc00317 	ldw	r19,12(sp)
 2011da8:	dc800217 	ldw	r18,8(sp)
 2011dac:	dc400117 	ldw	r17,4(sp)
 2011db0:	dc000017 	ldw	r16,0(sp)
 2011db4:	dec00504 	addi	sp,sp,20
 2011db8:	f800283a 	ret
 2011dbc:	2011ed00 	call	2011ed0 <__sinit>
 2011dc0:	003fa806 	br	2011c64 <_fflush_r+0x2c>
 2011dc4:	90800517 	ldw	r2,20(r18)
 2011dc8:	90800215 	stw	r2,8(r18)
 2011dcc:	003fda06 	br	2011d38 <_fflush_r+0x100>
 2011dd0:	90800117 	ldw	r2,4(r18)
 2011dd4:	90c00c17 	ldw	r3,48(r18)
 2011dd8:	80a1c83a 	sub	r16,r16,r2
 2011ddc:	183fb426 	beq	r3,zero,2011cb0 <_fflush_r+0x78>
 2011de0:	90800f17 	ldw	r2,60(r18)
 2011de4:	80a1c83a 	sub	r16,r16,r2
 2011de8:	003fb106 	br	2011cb0 <_fflush_r+0x78>
 2011dec:	91400717 	ldw	r5,28(r18)
 2011df0:	9809883a 	mov	r4,r19
 2011df4:	000d883a 	mov	r6,zero
 2011df8:	01c00044 	movi	r7,1
 2011dfc:	403ee83a 	callr	r8
 2011e00:	1021883a 	mov	r16,r2
 2011e04:	00bfffc4 	movi	r2,-1
 2011e08:	80800226 	beq	r16,r2,2011e14 <_fflush_r+0x1dc>
 2011e0c:	92000a17 	ldw	r8,40(r18)
 2011e10:	003fa406 	br	2011ca4 <_fflush_r+0x6c>
 2011e14:	98c00017 	ldw	r3,0(r19)
 2011e18:	00800744 	movi	r2,29
 2011e1c:	18bfde26 	beq	r3,r2,2011d98 <_fflush_r+0x160>
 2011e20:	9080030b 	ldhu	r2,12(r18)
 2011e24:	8007883a 	mov	r3,r16
 2011e28:	10801014 	ori	r2,r2,64
 2011e2c:	9080030d 	sth	r2,12(r18)
 2011e30:	003fcf06 	br	2011d70 <_fflush_r+0x138>

02011e34 <fflush>:
 2011e34:	01408074 	movhi	r5,513
 2011e38:	29470e04 	addi	r5,r5,7224
 2011e3c:	2007883a 	mov	r3,r4
 2011e40:	20000526 	beq	r4,zero,2011e58 <fflush+0x24>
 2011e44:	008080b4 	movhi	r2,514
 2011e48:	10b6fa04 	addi	r2,r2,-9240
 2011e4c:	11000017 	ldw	r4,0(r2)
 2011e50:	180b883a 	mov	r5,r3
 2011e54:	2011c381 	jmpi	2011c38 <_fflush_r>
 2011e58:	008080b4 	movhi	r2,514
 2011e5c:	10b6fb04 	addi	r2,r2,-9236
 2011e60:	11000017 	ldw	r4,0(r2)
 2011e64:	2012a381 	jmpi	2012a38 <_fwalk_reent>

02011e68 <std>:
 2011e68:	00808074 	movhi	r2,513
 2011e6c:	1091d904 	addi	r2,r2,18276
 2011e70:	20800b15 	stw	r2,44(r4)
 2011e74:	00808074 	movhi	r2,513
 2011e78:	10921404 	addi	r2,r2,18512
 2011e7c:	20800815 	stw	r2,32(r4)
 2011e80:	00c08074 	movhi	r3,513
 2011e84:	18d1f504 	addi	r3,r3,18388
 2011e88:	00808074 	movhi	r2,513
 2011e8c:	1091db04 	addi	r2,r2,18284
 2011e90:	2140030d 	sth	r5,12(r4)
 2011e94:	2180038d 	sth	r6,14(r4)
 2011e98:	20c00915 	stw	r3,36(r4)
 2011e9c:	20800a15 	stw	r2,40(r4)
 2011ea0:	20000015 	stw	zero,0(r4)
 2011ea4:	20000115 	stw	zero,4(r4)
 2011ea8:	20000215 	stw	zero,8(r4)
 2011eac:	20000415 	stw	zero,16(r4)
 2011eb0:	20000515 	stw	zero,20(r4)
 2011eb4:	20000615 	stw	zero,24(r4)
 2011eb8:	21000715 	stw	r4,28(r4)
 2011ebc:	f800283a 	ret

02011ec0 <__sfp_lock_acquire>:
 2011ec0:	f800283a 	ret

02011ec4 <__sfp_lock_release>:
 2011ec4:	f800283a 	ret

02011ec8 <__sinit_lock_acquire>:
 2011ec8:	f800283a 	ret

02011ecc <__sinit_lock_release>:
 2011ecc:	f800283a 	ret

02011ed0 <__sinit>:
 2011ed0:	20800e17 	ldw	r2,56(r4)
 2011ed4:	defffd04 	addi	sp,sp,-12
 2011ed8:	dc400115 	stw	r17,4(sp)
 2011edc:	dc000015 	stw	r16,0(sp)
 2011ee0:	dfc00215 	stw	ra,8(sp)
 2011ee4:	04400044 	movi	r17,1
 2011ee8:	01400104 	movi	r5,4
 2011eec:	000d883a 	mov	r6,zero
 2011ef0:	2021883a 	mov	r16,r4
 2011ef4:	2200bb04 	addi	r8,r4,748
 2011ef8:	200f883a 	mov	r7,r4
 2011efc:	10000526 	beq	r2,zero,2011f14 <__sinit+0x44>
 2011f00:	dfc00217 	ldw	ra,8(sp)
 2011f04:	dc400117 	ldw	r17,4(sp)
 2011f08:	dc000017 	ldw	r16,0(sp)
 2011f0c:	dec00304 	addi	sp,sp,12
 2011f10:	f800283a 	ret
 2011f14:	21000117 	ldw	r4,4(r4)
 2011f18:	00808074 	movhi	r2,513
 2011f1c:	1087ed04 	addi	r2,r2,8116
 2011f20:	00c000c4 	movi	r3,3
 2011f24:	80800f15 	stw	r2,60(r16)
 2011f28:	80c0b915 	stw	r3,740(r16)
 2011f2c:	8200ba15 	stw	r8,744(r16)
 2011f30:	84400e15 	stw	r17,56(r16)
 2011f34:	8000b815 	stw	zero,736(r16)
 2011f38:	2011e680 	call	2011e68 <std>
 2011f3c:	81000217 	ldw	r4,8(r16)
 2011f40:	880d883a 	mov	r6,r17
 2011f44:	800f883a 	mov	r7,r16
 2011f48:	01400284 	movi	r5,10
 2011f4c:	2011e680 	call	2011e68 <std>
 2011f50:	81000317 	ldw	r4,12(r16)
 2011f54:	800f883a 	mov	r7,r16
 2011f58:	01400484 	movi	r5,18
 2011f5c:	01800084 	movi	r6,2
 2011f60:	dfc00217 	ldw	ra,8(sp)
 2011f64:	dc400117 	ldw	r17,4(sp)
 2011f68:	dc000017 	ldw	r16,0(sp)
 2011f6c:	dec00304 	addi	sp,sp,12
 2011f70:	2011e681 	jmpi	2011e68 <std>

02011f74 <__fp_lock>:
 2011f74:	0005883a 	mov	r2,zero
 2011f78:	f800283a 	ret

02011f7c <__fp_unlock>:
 2011f7c:	0005883a 	mov	r2,zero
 2011f80:	f800283a 	ret

02011f84 <__fp_unlock_all>:
 2011f84:	008080b4 	movhi	r2,514
 2011f88:	10b6fa04 	addi	r2,r2,-9240
 2011f8c:	11000017 	ldw	r4,0(r2)
 2011f90:	01408074 	movhi	r5,513
 2011f94:	2947df04 	addi	r5,r5,8060
 2011f98:	2012b001 	jmpi	2012b00 <_fwalk>

02011f9c <__fp_lock_all>:
 2011f9c:	008080b4 	movhi	r2,514
 2011fa0:	10b6fa04 	addi	r2,r2,-9240
 2011fa4:	11000017 	ldw	r4,0(r2)
 2011fa8:	01408074 	movhi	r5,513
 2011fac:	2947dd04 	addi	r5,r5,8052
 2011fb0:	2012b001 	jmpi	2012b00 <_fwalk>

02011fb4 <_cleanup_r>:
 2011fb4:	01408074 	movhi	r5,513
 2011fb8:	29530b04 	addi	r5,r5,19500
 2011fbc:	2012b001 	jmpi	2012b00 <_fwalk>

02011fc0 <_cleanup>:
 2011fc0:	008080b4 	movhi	r2,514
 2011fc4:	10b6fb04 	addi	r2,r2,-9236
 2011fc8:	11000017 	ldw	r4,0(r2)
 2011fcc:	2011fb41 	jmpi	2011fb4 <_cleanup_r>

02011fd0 <__sfmoreglue>:
 2011fd0:	defffc04 	addi	sp,sp,-16
 2011fd4:	dc000015 	stw	r16,0(sp)
 2011fd8:	2821883a 	mov	r16,r5
 2011fdc:	dc400115 	stw	r17,4(sp)
 2011fe0:	01401704 	movi	r5,92
 2011fe4:	2023883a 	mov	r17,r4
 2011fe8:	8009883a 	mov	r4,r16
 2011fec:	dfc00315 	stw	ra,12(sp)
 2011ff0:	dcc00215 	stw	r19,8(sp)
 2011ff4:	200d0cc0 	call	200d0cc <__mulsi3>
 2011ff8:	11400304 	addi	r5,r2,12
 2011ffc:	8809883a 	mov	r4,r17
 2012000:	1027883a 	mov	r19,r2
 2012004:	200d68c0 	call	200d68c <_malloc_r>
 2012008:	10c00304 	addi	r3,r2,12
 201200c:	1023883a 	mov	r17,r2
 2012010:	1809883a 	mov	r4,r3
 2012014:	980d883a 	mov	r6,r19
 2012018:	000b883a 	mov	r5,zero
 201201c:	10000b26 	beq	r2,zero,201204c <__sfmoreglue+0x7c>
 2012020:	14000115 	stw	r16,4(r2)
 2012024:	10c00215 	stw	r3,8(r2)
 2012028:	10000015 	stw	zero,0(r2)
 201202c:	200ddcc0 	call	200ddcc <memset>
 2012030:	8805883a 	mov	r2,r17
 2012034:	dfc00317 	ldw	ra,12(sp)
 2012038:	dcc00217 	ldw	r19,8(sp)
 201203c:	dc400117 	ldw	r17,4(sp)
 2012040:	dc000017 	ldw	r16,0(sp)
 2012044:	dec00404 	addi	sp,sp,16
 2012048:	f800283a 	ret
 201204c:	0023883a 	mov	r17,zero
 2012050:	8805883a 	mov	r2,r17
 2012054:	dfc00317 	ldw	ra,12(sp)
 2012058:	dcc00217 	ldw	r19,8(sp)
 201205c:	dc400117 	ldw	r17,4(sp)
 2012060:	dc000017 	ldw	r16,0(sp)
 2012064:	dec00404 	addi	sp,sp,16
 2012068:	f800283a 	ret

0201206c <__sfp>:
 201206c:	defffd04 	addi	sp,sp,-12
 2012070:	008080b4 	movhi	r2,514
 2012074:	10b6fb04 	addi	r2,r2,-9236
 2012078:	dc000015 	stw	r16,0(sp)
 201207c:	14000017 	ldw	r16,0(r2)
 2012080:	dc400115 	stw	r17,4(sp)
 2012084:	dfc00215 	stw	ra,8(sp)
 2012088:	80800e17 	ldw	r2,56(r16)
 201208c:	2023883a 	mov	r17,r4
 2012090:	10002626 	beq	r2,zero,201212c <__sfp+0xc0>
 2012094:	8400b804 	addi	r16,r16,736
 2012098:	80800117 	ldw	r2,4(r16)
 201209c:	81000217 	ldw	r4,8(r16)
 20120a0:	10ffffc4 	addi	r3,r2,-1
 20120a4:	18000916 	blt	r3,zero,20120cc <__sfp+0x60>
 20120a8:	2080030f 	ldh	r2,12(r4)
 20120ac:	10000b26 	beq	r2,zero,20120dc <__sfp+0x70>
 20120b0:	017fffc4 	movi	r5,-1
 20120b4:	00000206 	br	20120c0 <__sfp+0x54>
 20120b8:	2080030f 	ldh	r2,12(r4)
 20120bc:	10000726 	beq	r2,zero,20120dc <__sfp+0x70>
 20120c0:	18ffffc4 	addi	r3,r3,-1
 20120c4:	21001704 	addi	r4,r4,92
 20120c8:	197ffb1e 	bne	r3,r5,20120b8 <__sfp+0x4c>
 20120cc:	80800017 	ldw	r2,0(r16)
 20120d0:	10001926 	beq	r2,zero,2012138 <__sfp+0xcc>
 20120d4:	1021883a 	mov	r16,r2
 20120d8:	003fef06 	br	2012098 <__sfp+0x2c>
 20120dc:	00bfffc4 	movi	r2,-1
 20120e0:	00c00044 	movi	r3,1
 20120e4:	2080038d 	sth	r2,14(r4)
 20120e8:	20c0030d 	sth	r3,12(r4)
 20120ec:	20000015 	stw	zero,0(r4)
 20120f0:	20000215 	stw	zero,8(r4)
 20120f4:	20000115 	stw	zero,4(r4)
 20120f8:	20000415 	stw	zero,16(r4)
 20120fc:	20000515 	stw	zero,20(r4)
 2012100:	20000615 	stw	zero,24(r4)
 2012104:	20000c15 	stw	zero,48(r4)
 2012108:	20000d15 	stw	zero,52(r4)
 201210c:	20001115 	stw	zero,68(r4)
 2012110:	20001215 	stw	zero,72(r4)
 2012114:	2005883a 	mov	r2,r4
 2012118:	dfc00217 	ldw	ra,8(sp)
 201211c:	dc400117 	ldw	r17,4(sp)
 2012120:	dc000017 	ldw	r16,0(sp)
 2012124:	dec00304 	addi	sp,sp,12
 2012128:	f800283a 	ret
 201212c:	8009883a 	mov	r4,r16
 2012130:	2011ed00 	call	2011ed0 <__sinit>
 2012134:	003fd706 	br	2012094 <__sfp+0x28>
 2012138:	8809883a 	mov	r4,r17
 201213c:	01400104 	movi	r5,4
 2012140:	2011fd00 	call	2011fd0 <__sfmoreglue>
 2012144:	80800015 	stw	r2,0(r16)
 2012148:	103fe21e 	bne	r2,zero,20120d4 <__sfp+0x68>
 201214c:	00800304 	movi	r2,12
 2012150:	0009883a 	mov	r4,zero
 2012154:	88800015 	stw	r2,0(r17)
 2012158:	003fee06 	br	2012114 <__sfp+0xa8>

0201215c <_malloc_trim_r>:
 201215c:	defffb04 	addi	sp,sp,-20
 2012160:	dcc00315 	stw	r19,12(sp)
 2012164:	04c080b4 	movhi	r19,514
 2012168:	9cf02804 	addi	r19,r19,-16224
 201216c:	dc800215 	stw	r18,8(sp)
 2012170:	dc400115 	stw	r17,4(sp)
 2012174:	dc000015 	stw	r16,0(sp)
 2012178:	2823883a 	mov	r17,r5
 201217c:	2025883a 	mov	r18,r4
 2012180:	dfc00415 	stw	ra,16(sp)
 2012184:	2017ccc0 	call	2017ccc <__malloc_lock>
 2012188:	98800217 	ldw	r2,8(r19)
 201218c:	9009883a 	mov	r4,r18
 2012190:	000b883a 	mov	r5,zero
 2012194:	10c00117 	ldw	r3,4(r2)
 2012198:	00bfff04 	movi	r2,-4
 201219c:	18a0703a 	and	r16,r3,r2
 20121a0:	8463c83a 	sub	r17,r16,r17
 20121a4:	8c43fbc4 	addi	r17,r17,4079
 20121a8:	8822d33a 	srli	r17,r17,12
 20121ac:	0083ffc4 	movi	r2,4095
 20121b0:	8c7fffc4 	addi	r17,r17,-1
 20121b4:	8822933a 	slli	r17,r17,12
 20121b8:	1440060e 	bge	r2,r17,20121d4 <_malloc_trim_r+0x78>
 20121bc:	200df900 	call	200df90 <_sbrk_r>
 20121c0:	98c00217 	ldw	r3,8(r19)
 20121c4:	9009883a 	mov	r4,r18
 20121c8:	044bc83a 	sub	r5,zero,r17
 20121cc:	80c7883a 	add	r3,r16,r3
 20121d0:	10c00926 	beq	r2,r3,20121f8 <_malloc_trim_r+0x9c>
 20121d4:	2017cec0 	call	2017cec <__malloc_unlock>
 20121d8:	0005883a 	mov	r2,zero
 20121dc:	dfc00417 	ldw	ra,16(sp)
 20121e0:	dcc00317 	ldw	r19,12(sp)
 20121e4:	dc800217 	ldw	r18,8(sp)
 20121e8:	dc400117 	ldw	r17,4(sp)
 20121ec:	dc000017 	ldw	r16,0(sp)
 20121f0:	dec00504 	addi	sp,sp,20
 20121f4:	f800283a 	ret
 20121f8:	9009883a 	mov	r4,r18
 20121fc:	200df900 	call	200df90 <_sbrk_r>
 2012200:	844dc83a 	sub	r6,r16,r17
 2012204:	00ffffc4 	movi	r3,-1
 2012208:	9009883a 	mov	r4,r18
 201220c:	000b883a 	mov	r5,zero
 2012210:	01c080b4 	movhi	r7,514
 2012214:	39c00d04 	addi	r7,r7,52
 2012218:	31800054 	ori	r6,r6,1
 201221c:	10c00926 	beq	r2,r3,2012244 <_malloc_trim_r+0xe8>
 2012220:	38800017 	ldw	r2,0(r7)
 2012224:	98c00217 	ldw	r3,8(r19)
 2012228:	9009883a 	mov	r4,r18
 201222c:	1445c83a 	sub	r2,r2,r17
 2012230:	38800015 	stw	r2,0(r7)
 2012234:	19800115 	stw	r6,4(r3)
 2012238:	2017cec0 	call	2017cec <__malloc_unlock>
 201223c:	00800044 	movi	r2,1
 2012240:	003fe606 	br	20121dc <_malloc_trim_r+0x80>
 2012244:	200df900 	call	200df90 <_sbrk_r>
 2012248:	99800217 	ldw	r6,8(r19)
 201224c:	100f883a 	mov	r7,r2
 2012250:	9009883a 	mov	r4,r18
 2012254:	1187c83a 	sub	r3,r2,r6
 2012258:	008003c4 	movi	r2,15
 201225c:	19400054 	ori	r5,r3,1
 2012260:	10ffdc0e 	bge	r2,r3,20121d4 <_malloc_trim_r+0x78>
 2012264:	008080b4 	movhi	r2,514
 2012268:	10b6f904 	addi	r2,r2,-9244
 201226c:	10c00017 	ldw	r3,0(r2)
 2012270:	008080b4 	movhi	r2,514
 2012274:	10800d04 	addi	r2,r2,52
 2012278:	31400115 	stw	r5,4(r6)
 201227c:	38c7c83a 	sub	r3,r7,r3
 2012280:	10c00015 	stw	r3,0(r2)
 2012284:	003fd306 	br	20121d4 <_malloc_trim_r+0x78>

02012288 <_free_r>:
 2012288:	defffd04 	addi	sp,sp,-12
 201228c:	dc400115 	stw	r17,4(sp)
 2012290:	dc000015 	stw	r16,0(sp)
 2012294:	dfc00215 	stw	ra,8(sp)
 2012298:	2821883a 	mov	r16,r5
 201229c:	2023883a 	mov	r17,r4
 20122a0:	28005a26 	beq	r5,zero,201240c <_free_r+0x184>
 20122a4:	2017ccc0 	call	2017ccc <__malloc_lock>
 20122a8:	823ffe04 	addi	r8,r16,-8
 20122ac:	41400117 	ldw	r5,4(r8)
 20122b0:	00bfff84 	movi	r2,-2
 20122b4:	028080b4 	movhi	r10,514
 20122b8:	52b02804 	addi	r10,r10,-16224
 20122bc:	288e703a 	and	r7,r5,r2
 20122c0:	41cd883a 	add	r6,r8,r7
 20122c4:	30c00117 	ldw	r3,4(r6)
 20122c8:	51000217 	ldw	r4,8(r10)
 20122cc:	00bfff04 	movi	r2,-4
 20122d0:	1892703a 	and	r9,r3,r2
 20122d4:	5017883a 	mov	r11,r10
 20122d8:	31006726 	beq	r6,r4,2012478 <_free_r+0x1f0>
 20122dc:	2880004c 	andi	r2,r5,1
 20122e0:	1005003a 	cmpeq	r2,r2,zero
 20122e4:	32400115 	stw	r9,4(r6)
 20122e8:	10001a1e 	bne	r2,zero,2012354 <_free_r+0xcc>
 20122ec:	000b883a 	mov	r5,zero
 20122f0:	3247883a 	add	r3,r6,r9
 20122f4:	18800117 	ldw	r2,4(r3)
 20122f8:	1080004c 	andi	r2,r2,1
 20122fc:	1000231e 	bne	r2,zero,201238c <_free_r+0x104>
 2012300:	280ac03a 	cmpne	r5,r5,zero
 2012304:	3a4f883a 	add	r7,r7,r9
 2012308:	2800451e 	bne	r5,zero,2012420 <_free_r+0x198>
 201230c:	31000217 	ldw	r4,8(r6)
 2012310:	008080b4 	movhi	r2,514
 2012314:	10b02a04 	addi	r2,r2,-16216
 2012318:	20807b26 	beq	r4,r2,2012508 <_free_r+0x280>
 201231c:	30800317 	ldw	r2,12(r6)
 2012320:	3a07883a 	add	r3,r7,r8
 2012324:	19c00015 	stw	r7,0(r3)
 2012328:	11000215 	stw	r4,8(r2)
 201232c:	20800315 	stw	r2,12(r4)
 2012330:	38800054 	ori	r2,r7,1
 2012334:	40800115 	stw	r2,4(r8)
 2012338:	28001a26 	beq	r5,zero,20123a4 <_free_r+0x11c>
 201233c:	8809883a 	mov	r4,r17
 2012340:	dfc00217 	ldw	ra,8(sp)
 2012344:	dc400117 	ldw	r17,4(sp)
 2012348:	dc000017 	ldw	r16,0(sp)
 201234c:	dec00304 	addi	sp,sp,12
 2012350:	2017cec1 	jmpi	2017cec <__malloc_unlock>
 2012354:	80bffe17 	ldw	r2,-8(r16)
 2012358:	50c00204 	addi	r3,r10,8
 201235c:	4091c83a 	sub	r8,r8,r2
 2012360:	41000217 	ldw	r4,8(r8)
 2012364:	388f883a 	add	r7,r7,r2
 2012368:	20c06126 	beq	r4,r3,20124f0 <_free_r+0x268>
 201236c:	40800317 	ldw	r2,12(r8)
 2012370:	3247883a 	add	r3,r6,r9
 2012374:	000b883a 	mov	r5,zero
 2012378:	11000215 	stw	r4,8(r2)
 201237c:	20800315 	stw	r2,12(r4)
 2012380:	18800117 	ldw	r2,4(r3)
 2012384:	1080004c 	andi	r2,r2,1
 2012388:	103fdd26 	beq	r2,zero,2012300 <_free_r+0x78>
 201238c:	38800054 	ori	r2,r7,1
 2012390:	3a07883a 	add	r3,r7,r8
 2012394:	280ac03a 	cmpne	r5,r5,zero
 2012398:	40800115 	stw	r2,4(r8)
 201239c:	19c00015 	stw	r7,0(r3)
 20123a0:	283fe61e 	bne	r5,zero,201233c <_free_r+0xb4>
 20123a4:	00807fc4 	movi	r2,511
 20123a8:	11c01f2e 	bgeu	r2,r7,2012428 <_free_r+0x1a0>
 20123ac:	3806d27a 	srli	r3,r7,9
 20123b0:	1800481e 	bne	r3,zero,20124d4 <_free_r+0x24c>
 20123b4:	3804d0fa 	srli	r2,r7,3
 20123b8:	100690fa 	slli	r3,r2,3
 20123bc:	1acd883a 	add	r6,r3,r11
 20123c0:	31400217 	ldw	r5,8(r6)
 20123c4:	31405926 	beq	r6,r5,201252c <_free_r+0x2a4>
 20123c8:	28800117 	ldw	r2,4(r5)
 20123cc:	00ffff04 	movi	r3,-4
 20123d0:	10c4703a 	and	r2,r2,r3
 20123d4:	3880022e 	bgeu	r7,r2,20123e0 <_free_r+0x158>
 20123d8:	29400217 	ldw	r5,8(r5)
 20123dc:	317ffa1e 	bne	r6,r5,20123c8 <_free_r+0x140>
 20123e0:	29800317 	ldw	r6,12(r5)
 20123e4:	41800315 	stw	r6,12(r8)
 20123e8:	41400215 	stw	r5,8(r8)
 20123ec:	8809883a 	mov	r4,r17
 20123f0:	2a000315 	stw	r8,12(r5)
 20123f4:	32000215 	stw	r8,8(r6)
 20123f8:	dfc00217 	ldw	ra,8(sp)
 20123fc:	dc400117 	ldw	r17,4(sp)
 2012400:	dc000017 	ldw	r16,0(sp)
 2012404:	dec00304 	addi	sp,sp,12
 2012408:	2017cec1 	jmpi	2017cec <__malloc_unlock>
 201240c:	dfc00217 	ldw	ra,8(sp)
 2012410:	dc400117 	ldw	r17,4(sp)
 2012414:	dc000017 	ldw	r16,0(sp)
 2012418:	dec00304 	addi	sp,sp,12
 201241c:	f800283a 	ret
 2012420:	31000217 	ldw	r4,8(r6)
 2012424:	003fbd06 	br	201231c <_free_r+0x94>
 2012428:	3806d0fa 	srli	r3,r7,3
 201242c:	00800044 	movi	r2,1
 2012430:	51400117 	ldw	r5,4(r10)
 2012434:	180890fa 	slli	r4,r3,3
 2012438:	1807d0ba 	srai	r3,r3,2
 201243c:	22c9883a 	add	r4,r4,r11
 2012440:	21800217 	ldw	r6,8(r4)
 2012444:	10c4983a 	sll	r2,r2,r3
 2012448:	41000315 	stw	r4,12(r8)
 201244c:	41800215 	stw	r6,8(r8)
 2012450:	288ab03a 	or	r5,r5,r2
 2012454:	22000215 	stw	r8,8(r4)
 2012458:	8809883a 	mov	r4,r17
 201245c:	51400115 	stw	r5,4(r10)
 2012460:	32000315 	stw	r8,12(r6)
 2012464:	dfc00217 	ldw	ra,8(sp)
 2012468:	dc400117 	ldw	r17,4(sp)
 201246c:	dc000017 	ldw	r16,0(sp)
 2012470:	dec00304 	addi	sp,sp,12
 2012474:	2017cec1 	jmpi	2017cec <__malloc_unlock>
 2012478:	2880004c 	andi	r2,r5,1
 201247c:	3a4d883a 	add	r6,r7,r9
 2012480:	1000071e 	bne	r2,zero,20124a0 <_free_r+0x218>
 2012484:	80bffe17 	ldw	r2,-8(r16)
 2012488:	4091c83a 	sub	r8,r8,r2
 201248c:	41000317 	ldw	r4,12(r8)
 2012490:	40c00217 	ldw	r3,8(r8)
 2012494:	308d883a 	add	r6,r6,r2
 2012498:	20c00215 	stw	r3,8(r4)
 201249c:	19000315 	stw	r4,12(r3)
 20124a0:	008080b4 	movhi	r2,514
 20124a4:	10b6f804 	addi	r2,r2,-9248
 20124a8:	11000017 	ldw	r4,0(r2)
 20124ac:	30c00054 	ori	r3,r6,1
 20124b0:	52000215 	stw	r8,8(r10)
 20124b4:	40c00115 	stw	r3,4(r8)
 20124b8:	313fa036 	bltu	r6,r4,201233c <_free_r+0xb4>
 20124bc:	008080b4 	movhi	r2,514
 20124c0:	10bdfa04 	addi	r2,r2,-2072
 20124c4:	11400017 	ldw	r5,0(r2)
 20124c8:	8809883a 	mov	r4,r17
 20124cc:	201215c0 	call	201215c <_malloc_trim_r>
 20124d0:	003f9a06 	br	201233c <_free_r+0xb4>
 20124d4:	00800104 	movi	r2,4
 20124d8:	10c0072e 	bgeu	r2,r3,20124f8 <_free_r+0x270>
 20124dc:	00800504 	movi	r2,20
 20124e0:	10c01936 	bltu	r2,r3,2012548 <_free_r+0x2c0>
 20124e4:	188016c4 	addi	r2,r3,91
 20124e8:	100690fa 	slli	r3,r2,3
 20124ec:	003fb306 	br	20123bc <_free_r+0x134>
 20124f0:	01400044 	movi	r5,1
 20124f4:	003f7e06 	br	20122f0 <_free_r+0x68>
 20124f8:	3804d1ba 	srli	r2,r7,6
 20124fc:	10800e04 	addi	r2,r2,56
 2012500:	100690fa 	slli	r3,r2,3
 2012504:	003fad06 	br	20123bc <_free_r+0x134>
 2012508:	22000315 	stw	r8,12(r4)
 201250c:	22000215 	stw	r8,8(r4)
 2012510:	3a05883a 	add	r2,r7,r8
 2012514:	38c00054 	ori	r3,r7,1
 2012518:	11c00015 	stw	r7,0(r2)
 201251c:	41000215 	stw	r4,8(r8)
 2012520:	40c00115 	stw	r3,4(r8)
 2012524:	41000315 	stw	r4,12(r8)
 2012528:	003f8406 	br	201233c <_free_r+0xb4>
 201252c:	1005d0ba 	srai	r2,r2,2
 2012530:	00c00044 	movi	r3,1
 2012534:	51000117 	ldw	r4,4(r10)
 2012538:	1886983a 	sll	r3,r3,r2
 201253c:	20c8b03a 	or	r4,r4,r3
 2012540:	51000115 	stw	r4,4(r10)
 2012544:	003fa706 	br	20123e4 <_free_r+0x15c>
 2012548:	00801504 	movi	r2,84
 201254c:	10c00436 	bltu	r2,r3,2012560 <_free_r+0x2d8>
 2012550:	3804d33a 	srli	r2,r7,12
 2012554:	10801b84 	addi	r2,r2,110
 2012558:	100690fa 	slli	r3,r2,3
 201255c:	003f9706 	br	20123bc <_free_r+0x134>
 2012560:	00805504 	movi	r2,340
 2012564:	10c00436 	bltu	r2,r3,2012578 <_free_r+0x2f0>
 2012568:	3804d3fa 	srli	r2,r7,15
 201256c:	10801dc4 	addi	r2,r2,119
 2012570:	100690fa 	slli	r3,r2,3
 2012574:	003f9106 	br	20123bc <_free_r+0x134>
 2012578:	00815504 	movi	r2,1364
 201257c:	10c0032e 	bgeu	r2,r3,201258c <_free_r+0x304>
 2012580:	00801f84 	movi	r2,126
 2012584:	00c0fc04 	movi	r3,1008
 2012588:	003f8c06 	br	20123bc <_free_r+0x134>
 201258c:	3804d4ba 	srli	r2,r7,18
 2012590:	10801f04 	addi	r2,r2,124
 2012594:	100690fa 	slli	r3,r2,3
 2012598:	003f8806 	br	20123bc <_free_r+0x134>

0201259c <__sfvwrite_r>:
 201259c:	30800217 	ldw	r2,8(r6)
 20125a0:	defff504 	addi	sp,sp,-44
 20125a4:	df000915 	stw	fp,36(sp)
 20125a8:	dd800715 	stw	r22,28(sp)
 20125ac:	dc800315 	stw	r18,12(sp)
 20125b0:	dfc00a15 	stw	ra,40(sp)
 20125b4:	ddc00815 	stw	r23,32(sp)
 20125b8:	dd400615 	stw	r21,24(sp)
 20125bc:	dd000515 	stw	r20,20(sp)
 20125c0:	dcc00415 	stw	r19,16(sp)
 20125c4:	dc400215 	stw	r17,8(sp)
 20125c8:	dc000115 	stw	r16,4(sp)
 20125cc:	302d883a 	mov	r22,r6
 20125d0:	2039883a 	mov	fp,r4
 20125d4:	2825883a 	mov	r18,r5
 20125d8:	10001c26 	beq	r2,zero,201264c <__sfvwrite_r+0xb0>
 20125dc:	29c0030b 	ldhu	r7,12(r5)
 20125e0:	3880020c 	andi	r2,r7,8
 20125e4:	10002726 	beq	r2,zero,2012684 <__sfvwrite_r+0xe8>
 20125e8:	28800417 	ldw	r2,16(r5)
 20125ec:	10002526 	beq	r2,zero,2012684 <__sfvwrite_r+0xe8>
 20125f0:	3880008c 	andi	r2,r7,2
 20125f4:	b5400017 	ldw	r21,0(r22)
 20125f8:	10002826 	beq	r2,zero,201269c <__sfvwrite_r+0x100>
 20125fc:	0021883a 	mov	r16,zero
 2012600:	0023883a 	mov	r17,zero
 2012604:	880d883a 	mov	r6,r17
 2012608:	e009883a 	mov	r4,fp
 201260c:	00810004 	movi	r2,1024
 2012610:	80006e26 	beq	r16,zero,20127cc <__sfvwrite_r+0x230>
 2012614:	800f883a 	mov	r7,r16
 2012618:	91400717 	ldw	r5,28(r18)
 201261c:	1400012e 	bgeu	r2,r16,2012624 <__sfvwrite_r+0x88>
 2012620:	100f883a 	mov	r7,r2
 2012624:	90c00917 	ldw	r3,36(r18)
 2012628:	183ee83a 	callr	r3
 201262c:	1007883a 	mov	r3,r2
 2012630:	80a1c83a 	sub	r16,r16,r2
 2012634:	88a3883a 	add	r17,r17,r2
 2012638:	00806d0e 	bge	zero,r2,20127f0 <__sfvwrite_r+0x254>
 201263c:	b0800217 	ldw	r2,8(r22)
 2012640:	10c5c83a 	sub	r2,r2,r3
 2012644:	b0800215 	stw	r2,8(r22)
 2012648:	103fee1e 	bne	r2,zero,2012604 <__sfvwrite_r+0x68>
 201264c:	0009883a 	mov	r4,zero
 2012650:	2005883a 	mov	r2,r4
 2012654:	dfc00a17 	ldw	ra,40(sp)
 2012658:	df000917 	ldw	fp,36(sp)
 201265c:	ddc00817 	ldw	r23,32(sp)
 2012660:	dd800717 	ldw	r22,28(sp)
 2012664:	dd400617 	ldw	r21,24(sp)
 2012668:	dd000517 	ldw	r20,20(sp)
 201266c:	dcc00417 	ldw	r19,16(sp)
 2012670:	dc800317 	ldw	r18,12(sp)
 2012674:	dc400217 	ldw	r17,8(sp)
 2012678:	dc000117 	ldw	r16,4(sp)
 201267c:	dec00b04 	addi	sp,sp,44
 2012680:	f800283a 	ret
 2012684:	20103040 	call	2010304 <__swsetup_r>
 2012688:	1000e41e 	bne	r2,zero,2012a1c <__sfvwrite_r+0x480>
 201268c:	91c0030b 	ldhu	r7,12(r18)
 2012690:	b5400017 	ldw	r21,0(r22)
 2012694:	3880008c 	andi	r2,r7,2
 2012698:	103fd81e 	bne	r2,zero,20125fc <__sfvwrite_r+0x60>
 201269c:	3880004c 	andi	r2,r7,1
 20126a0:	1005003a 	cmpeq	r2,r2,zero
 20126a4:	10005726 	beq	r2,zero,2012804 <__sfvwrite_r+0x268>
 20126a8:	0029883a 	mov	r20,zero
 20126ac:	002f883a 	mov	r23,zero
 20126b0:	a0004226 	beq	r20,zero,20127bc <__sfvwrite_r+0x220>
 20126b4:	3880800c 	andi	r2,r7,512
 20126b8:	94000217 	ldw	r16,8(r18)
 20126bc:	10008b26 	beq	r2,zero,20128ec <__sfvwrite_r+0x350>
 20126c0:	800d883a 	mov	r6,r16
 20126c4:	a400a536 	bltu	r20,r16,201295c <__sfvwrite_r+0x3c0>
 20126c8:	3881200c 	andi	r2,r7,1152
 20126cc:	10002726 	beq	r2,zero,201276c <__sfvwrite_r+0x1d0>
 20126d0:	90800517 	ldw	r2,20(r18)
 20126d4:	92000417 	ldw	r8,16(r18)
 20126d8:	91400017 	ldw	r5,0(r18)
 20126dc:	1087883a 	add	r3,r2,r2
 20126e0:	1887883a 	add	r3,r3,r2
 20126e4:	1808d7fa 	srli	r4,r3,31
 20126e8:	2a21c83a 	sub	r16,r5,r8
 20126ec:	80800044 	addi	r2,r16,1
 20126f0:	20c9883a 	add	r4,r4,r3
 20126f4:	2027d07a 	srai	r19,r4,1
 20126f8:	a085883a 	add	r2,r20,r2
 20126fc:	980d883a 	mov	r6,r19
 2012700:	9880022e 	bgeu	r19,r2,201270c <__sfvwrite_r+0x170>
 2012704:	1027883a 	mov	r19,r2
 2012708:	100d883a 	mov	r6,r2
 201270c:	3881000c 	andi	r2,r7,1024
 2012710:	1000b826 	beq	r2,zero,20129f4 <__sfvwrite_r+0x458>
 2012714:	300b883a 	mov	r5,r6
 2012718:	e009883a 	mov	r4,fp
 201271c:	200d68c0 	call	200d68c <_malloc_r>
 2012720:	10003126 	beq	r2,zero,20127e8 <__sfvwrite_r+0x24c>
 2012724:	91400417 	ldw	r5,16(r18)
 2012728:	1009883a 	mov	r4,r2
 201272c:	800d883a 	mov	r6,r16
 2012730:	1023883a 	mov	r17,r2
 2012734:	2012ef40 	call	2012ef4 <memcpy>
 2012738:	90c0030b 	ldhu	r3,12(r18)
 201273c:	00beffc4 	movi	r2,-1025
 2012740:	1886703a 	and	r3,r3,r2
 2012744:	18c02014 	ori	r3,r3,128
 2012748:	90c0030d 	sth	r3,12(r18)
 201274c:	9c07c83a 	sub	r3,r19,r16
 2012750:	8c05883a 	add	r2,r17,r16
 2012754:	a00d883a 	mov	r6,r20
 2012758:	a021883a 	mov	r16,r20
 201275c:	90800015 	stw	r2,0(r18)
 2012760:	90c00215 	stw	r3,8(r18)
 2012764:	94400415 	stw	r17,16(r18)
 2012768:	94c00515 	stw	r19,20(r18)
 201276c:	91000017 	ldw	r4,0(r18)
 2012770:	b80b883a 	mov	r5,r23
 2012774:	a023883a 	mov	r17,r20
 2012778:	2012f940 	call	2012f94 <memmove>
 201277c:	90c00217 	ldw	r3,8(r18)
 2012780:	90800017 	ldw	r2,0(r18)
 2012784:	a027883a 	mov	r19,r20
 2012788:	1c07c83a 	sub	r3,r3,r16
 201278c:	1405883a 	add	r2,r2,r16
 2012790:	90c00215 	stw	r3,8(r18)
 2012794:	a021883a 	mov	r16,r20
 2012798:	90800015 	stw	r2,0(r18)
 201279c:	b0800217 	ldw	r2,8(r22)
 20127a0:	1405c83a 	sub	r2,r2,r16
 20127a4:	b0800215 	stw	r2,8(r22)
 20127a8:	103fa826 	beq	r2,zero,201264c <__sfvwrite_r+0xb0>
 20127ac:	a469c83a 	sub	r20,r20,r17
 20127b0:	91c0030b 	ldhu	r7,12(r18)
 20127b4:	bcef883a 	add	r23,r23,r19
 20127b8:	a03fbe1e 	bne	r20,zero,20126b4 <__sfvwrite_r+0x118>
 20127bc:	adc00017 	ldw	r23,0(r21)
 20127c0:	ad000117 	ldw	r20,4(r21)
 20127c4:	ad400204 	addi	r21,r21,8
 20127c8:	003fb906 	br	20126b0 <__sfvwrite_r+0x114>
 20127cc:	ac400017 	ldw	r17,0(r21)
 20127d0:	ac000117 	ldw	r16,4(r21)
 20127d4:	ad400204 	addi	r21,r21,8
 20127d8:	003f8a06 	br	2012604 <__sfvwrite_r+0x68>
 20127dc:	91400417 	ldw	r5,16(r18)
 20127e0:	e009883a 	mov	r4,fp
 20127e4:	20122880 	call	2012288 <_free_r>
 20127e8:	00800304 	movi	r2,12
 20127ec:	e0800015 	stw	r2,0(fp)
 20127f0:	9080030b 	ldhu	r2,12(r18)
 20127f4:	013fffc4 	movi	r4,-1
 20127f8:	10801014 	ori	r2,r2,64
 20127fc:	9080030d 	sth	r2,12(r18)
 2012800:	003f9306 	br	2012650 <__sfvwrite_r+0xb4>
 2012804:	0027883a 	mov	r19,zero
 2012808:	002f883a 	mov	r23,zero
 201280c:	d8000015 	stw	zero,0(sp)
 2012810:	0029883a 	mov	r20,zero
 2012814:	98001e26 	beq	r19,zero,2012890 <__sfvwrite_r+0x2f4>
 2012818:	d8c00017 	ldw	r3,0(sp)
 201281c:	1804c03a 	cmpne	r2,r3,zero
 2012820:	10005e26 	beq	r2,zero,201299c <__sfvwrite_r+0x400>
 2012824:	9821883a 	mov	r16,r19
 2012828:	a4c0012e 	bgeu	r20,r19,2012830 <__sfvwrite_r+0x294>
 201282c:	a021883a 	mov	r16,r20
 2012830:	91000017 	ldw	r4,0(r18)
 2012834:	90800417 	ldw	r2,16(r18)
 2012838:	91800217 	ldw	r6,8(r18)
 201283c:	91c00517 	ldw	r7,20(r18)
 2012840:	1100022e 	bgeu	r2,r4,201284c <__sfvwrite_r+0x2b0>
 2012844:	31e3883a 	add	r17,r6,r7
 2012848:	8c001616 	blt	r17,r16,20128a4 <__sfvwrite_r+0x308>
 201284c:	81c03816 	blt	r16,r7,2012930 <__sfvwrite_r+0x394>
 2012850:	90c00917 	ldw	r3,36(r18)
 2012854:	91400717 	ldw	r5,28(r18)
 2012858:	e009883a 	mov	r4,fp
 201285c:	b80d883a 	mov	r6,r23
 2012860:	183ee83a 	callr	r3
 2012864:	1023883a 	mov	r17,r2
 2012868:	00bfe10e 	bge	zero,r2,20127f0 <__sfvwrite_r+0x254>
 201286c:	a469c83a 	sub	r20,r20,r17
 2012870:	a0001826 	beq	r20,zero,20128d4 <__sfvwrite_r+0x338>
 2012874:	b0800217 	ldw	r2,8(r22)
 2012878:	1445c83a 	sub	r2,r2,r17
 201287c:	b0800215 	stw	r2,8(r22)
 2012880:	103f7226 	beq	r2,zero,201264c <__sfvwrite_r+0xb0>
 2012884:	9c67c83a 	sub	r19,r19,r17
 2012888:	bc6f883a 	add	r23,r23,r17
 201288c:	983fe21e 	bne	r19,zero,2012818 <__sfvwrite_r+0x27c>
 2012890:	adc00017 	ldw	r23,0(r21)
 2012894:	acc00117 	ldw	r19,4(r21)
 2012898:	ad400204 	addi	r21,r21,8
 201289c:	d8000015 	stw	zero,0(sp)
 20128a0:	003fdc06 	br	2012814 <__sfvwrite_r+0x278>
 20128a4:	b80b883a 	mov	r5,r23
 20128a8:	880d883a 	mov	r6,r17
 20128ac:	2012f940 	call	2012f94 <memmove>
 20128b0:	90c00017 	ldw	r3,0(r18)
 20128b4:	e009883a 	mov	r4,fp
 20128b8:	900b883a 	mov	r5,r18
 20128bc:	1c47883a 	add	r3,r3,r17
 20128c0:	90c00015 	stw	r3,0(r18)
 20128c4:	2011c380 	call	2011c38 <_fflush_r>
 20128c8:	103fc91e 	bne	r2,zero,20127f0 <__sfvwrite_r+0x254>
 20128cc:	a469c83a 	sub	r20,r20,r17
 20128d0:	a03fe81e 	bne	r20,zero,2012874 <__sfvwrite_r+0x2d8>
 20128d4:	e009883a 	mov	r4,fp
 20128d8:	900b883a 	mov	r5,r18
 20128dc:	2011c380 	call	2011c38 <_fflush_r>
 20128e0:	103fc31e 	bne	r2,zero,20127f0 <__sfvwrite_r+0x254>
 20128e4:	d8000015 	stw	zero,0(sp)
 20128e8:	003fe206 	br	2012874 <__sfvwrite_r+0x2d8>
 20128ec:	91000017 	ldw	r4,0(r18)
 20128f0:	90800417 	ldw	r2,16(r18)
 20128f4:	1100022e 	bgeu	r2,r4,2012900 <__sfvwrite_r+0x364>
 20128f8:	8023883a 	mov	r17,r16
 20128fc:	85003136 	bltu	r16,r20,20129c4 <__sfvwrite_r+0x428>
 2012900:	91c00517 	ldw	r7,20(r18)
 2012904:	a1c01836 	bltu	r20,r7,2012968 <__sfvwrite_r+0x3cc>
 2012908:	90c00917 	ldw	r3,36(r18)
 201290c:	91400717 	ldw	r5,28(r18)
 2012910:	e009883a 	mov	r4,fp
 2012914:	b80d883a 	mov	r6,r23
 2012918:	183ee83a 	callr	r3
 201291c:	1021883a 	mov	r16,r2
 2012920:	00bfb30e 	bge	zero,r2,20127f0 <__sfvwrite_r+0x254>
 2012924:	1023883a 	mov	r17,r2
 2012928:	1027883a 	mov	r19,r2
 201292c:	003f9b06 	br	201279c <__sfvwrite_r+0x200>
 2012930:	b80b883a 	mov	r5,r23
 2012934:	800d883a 	mov	r6,r16
 2012938:	2012f940 	call	2012f94 <memmove>
 201293c:	90c00217 	ldw	r3,8(r18)
 2012940:	90800017 	ldw	r2,0(r18)
 2012944:	8023883a 	mov	r17,r16
 2012948:	1c07c83a 	sub	r3,r3,r16
 201294c:	1405883a 	add	r2,r2,r16
 2012950:	90c00215 	stw	r3,8(r18)
 2012954:	90800015 	stw	r2,0(r18)
 2012958:	003fc406 	br	201286c <__sfvwrite_r+0x2d0>
 201295c:	a00d883a 	mov	r6,r20
 2012960:	a021883a 	mov	r16,r20
 2012964:	003f8106 	br	201276c <__sfvwrite_r+0x1d0>
 2012968:	b80b883a 	mov	r5,r23
 201296c:	a00d883a 	mov	r6,r20
 2012970:	2012f940 	call	2012f94 <memmove>
 2012974:	90c00217 	ldw	r3,8(r18)
 2012978:	90800017 	ldw	r2,0(r18)
 201297c:	a021883a 	mov	r16,r20
 2012980:	1d07c83a 	sub	r3,r3,r20
 2012984:	1505883a 	add	r2,r2,r20
 2012988:	a023883a 	mov	r17,r20
 201298c:	a027883a 	mov	r19,r20
 2012990:	90c00215 	stw	r3,8(r18)
 2012994:	90800015 	stw	r2,0(r18)
 2012998:	003f8006 	br	201279c <__sfvwrite_r+0x200>
 201299c:	b809883a 	mov	r4,r23
 20129a0:	01400284 	movi	r5,10
 20129a4:	980d883a 	mov	r6,r19
 20129a8:	2012e100 	call	2012e10 <memchr>
 20129ac:	10001726 	beq	r2,zero,2012a0c <__sfvwrite_r+0x470>
 20129b0:	15c5c83a 	sub	r2,r2,r23
 20129b4:	15000044 	addi	r20,r2,1
 20129b8:	00800044 	movi	r2,1
 20129bc:	d8800015 	stw	r2,0(sp)
 20129c0:	003f9806 	br	2012824 <__sfvwrite_r+0x288>
 20129c4:	b80b883a 	mov	r5,r23
 20129c8:	800d883a 	mov	r6,r16
 20129cc:	2012f940 	call	2012f94 <memmove>
 20129d0:	90c00017 	ldw	r3,0(r18)
 20129d4:	e009883a 	mov	r4,fp
 20129d8:	900b883a 	mov	r5,r18
 20129dc:	1c07883a 	add	r3,r3,r16
 20129e0:	90c00015 	stw	r3,0(r18)
 20129e4:	8027883a 	mov	r19,r16
 20129e8:	2011c380 	call	2011c38 <_fflush_r>
 20129ec:	103f6b26 	beq	r2,zero,201279c <__sfvwrite_r+0x200>
 20129f0:	003f7f06 	br	20127f0 <__sfvwrite_r+0x254>
 20129f4:	400b883a 	mov	r5,r8
 20129f8:	e009883a 	mov	r4,fp
 20129fc:	20141000 	call	2014100 <_realloc_r>
 2012a00:	103f7626 	beq	r2,zero,20127dc <__sfvwrite_r+0x240>
 2012a04:	1023883a 	mov	r17,r2
 2012a08:	003f5006 	br	201274c <__sfvwrite_r+0x1b0>
 2012a0c:	00c00044 	movi	r3,1
 2012a10:	9d000044 	addi	r20,r19,1
 2012a14:	d8c00015 	stw	r3,0(sp)
 2012a18:	003f8206 	br	2012824 <__sfvwrite_r+0x288>
 2012a1c:	9080030b 	ldhu	r2,12(r18)
 2012a20:	00c00244 	movi	r3,9
 2012a24:	013fffc4 	movi	r4,-1
 2012a28:	10801014 	ori	r2,r2,64
 2012a2c:	9080030d 	sth	r2,12(r18)
 2012a30:	e0c00015 	stw	r3,0(fp)
 2012a34:	003f0606 	br	2012650 <__sfvwrite_r+0xb4>

02012a38 <_fwalk_reent>:
 2012a38:	defff704 	addi	sp,sp,-36
 2012a3c:	dcc00315 	stw	r19,12(sp)
 2012a40:	24c0b804 	addi	r19,r4,736
 2012a44:	dd800615 	stw	r22,24(sp)
 2012a48:	dd400515 	stw	r21,20(sp)
 2012a4c:	dfc00815 	stw	ra,32(sp)
 2012a50:	ddc00715 	stw	r23,28(sp)
 2012a54:	dd000415 	stw	r20,16(sp)
 2012a58:	dc800215 	stw	r18,8(sp)
 2012a5c:	dc400115 	stw	r17,4(sp)
 2012a60:	dc000015 	stw	r16,0(sp)
 2012a64:	202b883a 	mov	r21,r4
 2012a68:	282d883a 	mov	r22,r5
 2012a6c:	2011ec00 	call	2011ec0 <__sfp_lock_acquire>
 2012a70:	98002126 	beq	r19,zero,2012af8 <_fwalk_reent+0xc0>
 2012a74:	002f883a 	mov	r23,zero
 2012a78:	9c800117 	ldw	r18,4(r19)
 2012a7c:	9c000217 	ldw	r16,8(r19)
 2012a80:	90bfffc4 	addi	r2,r18,-1
 2012a84:	10000d16 	blt	r2,zero,2012abc <_fwalk_reent+0x84>
 2012a88:	0023883a 	mov	r17,zero
 2012a8c:	053fffc4 	movi	r20,-1
 2012a90:	8080030f 	ldh	r2,12(r16)
 2012a94:	8c400044 	addi	r17,r17,1
 2012a98:	10000626 	beq	r2,zero,2012ab4 <_fwalk_reent+0x7c>
 2012a9c:	8080038f 	ldh	r2,14(r16)
 2012aa0:	800b883a 	mov	r5,r16
 2012aa4:	a809883a 	mov	r4,r21
 2012aa8:	15000226 	beq	r2,r20,2012ab4 <_fwalk_reent+0x7c>
 2012aac:	b03ee83a 	callr	r22
 2012ab0:	b8aeb03a 	or	r23,r23,r2
 2012ab4:	84001704 	addi	r16,r16,92
 2012ab8:	947ff51e 	bne	r18,r17,2012a90 <_fwalk_reent+0x58>
 2012abc:	9cc00017 	ldw	r19,0(r19)
 2012ac0:	983fed1e 	bne	r19,zero,2012a78 <_fwalk_reent+0x40>
 2012ac4:	2011ec40 	call	2011ec4 <__sfp_lock_release>
 2012ac8:	b805883a 	mov	r2,r23
 2012acc:	dfc00817 	ldw	ra,32(sp)
 2012ad0:	ddc00717 	ldw	r23,28(sp)
 2012ad4:	dd800617 	ldw	r22,24(sp)
 2012ad8:	dd400517 	ldw	r21,20(sp)
 2012adc:	dd000417 	ldw	r20,16(sp)
 2012ae0:	dcc00317 	ldw	r19,12(sp)
 2012ae4:	dc800217 	ldw	r18,8(sp)
 2012ae8:	dc400117 	ldw	r17,4(sp)
 2012aec:	dc000017 	ldw	r16,0(sp)
 2012af0:	dec00904 	addi	sp,sp,36
 2012af4:	f800283a 	ret
 2012af8:	002f883a 	mov	r23,zero
 2012afc:	003ff106 	br	2012ac4 <_fwalk_reent+0x8c>

02012b00 <_fwalk>:
 2012b00:	defff804 	addi	sp,sp,-32
 2012b04:	dcc00315 	stw	r19,12(sp)
 2012b08:	24c0b804 	addi	r19,r4,736
 2012b0c:	dd400515 	stw	r21,20(sp)
 2012b10:	dfc00715 	stw	ra,28(sp)
 2012b14:	dd800615 	stw	r22,24(sp)
 2012b18:	dd000415 	stw	r20,16(sp)
 2012b1c:	dc800215 	stw	r18,8(sp)
 2012b20:	dc400115 	stw	r17,4(sp)
 2012b24:	dc000015 	stw	r16,0(sp)
 2012b28:	282b883a 	mov	r21,r5
 2012b2c:	2011ec00 	call	2011ec0 <__sfp_lock_acquire>
 2012b30:	98001f26 	beq	r19,zero,2012bb0 <_fwalk+0xb0>
 2012b34:	002d883a 	mov	r22,zero
 2012b38:	9c800117 	ldw	r18,4(r19)
 2012b3c:	9c000217 	ldw	r16,8(r19)
 2012b40:	90bfffc4 	addi	r2,r18,-1
 2012b44:	10000c16 	blt	r2,zero,2012b78 <_fwalk+0x78>
 2012b48:	0023883a 	mov	r17,zero
 2012b4c:	053fffc4 	movi	r20,-1
 2012b50:	8080030f 	ldh	r2,12(r16)
 2012b54:	8c400044 	addi	r17,r17,1
 2012b58:	10000526 	beq	r2,zero,2012b70 <_fwalk+0x70>
 2012b5c:	8080038f 	ldh	r2,14(r16)
 2012b60:	8009883a 	mov	r4,r16
 2012b64:	15000226 	beq	r2,r20,2012b70 <_fwalk+0x70>
 2012b68:	a83ee83a 	callr	r21
 2012b6c:	b0acb03a 	or	r22,r22,r2
 2012b70:	84001704 	addi	r16,r16,92
 2012b74:	947ff61e 	bne	r18,r17,2012b50 <_fwalk+0x50>
 2012b78:	9cc00017 	ldw	r19,0(r19)
 2012b7c:	983fee1e 	bne	r19,zero,2012b38 <_fwalk+0x38>
 2012b80:	2011ec40 	call	2011ec4 <__sfp_lock_release>
 2012b84:	b005883a 	mov	r2,r22
 2012b88:	dfc00717 	ldw	ra,28(sp)
 2012b8c:	dd800617 	ldw	r22,24(sp)
 2012b90:	dd400517 	ldw	r21,20(sp)
 2012b94:	dd000417 	ldw	r20,16(sp)
 2012b98:	dcc00317 	ldw	r19,12(sp)
 2012b9c:	dc800217 	ldw	r18,8(sp)
 2012ba0:	dc400117 	ldw	r17,4(sp)
 2012ba4:	dc000017 	ldw	r16,0(sp)
 2012ba8:	dec00804 	addi	sp,sp,32
 2012bac:	f800283a 	ret
 2012bb0:	002d883a 	mov	r22,zero
 2012bb4:	003ff206 	br	2012b80 <_fwalk+0x80>

02012bb8 <__locale_charset>:
 2012bb8:	d0a01117 	ldw	r2,-32700(gp)
 2012bbc:	f800283a 	ret

02012bc0 <_localeconv_r>:
 2012bc0:	008080b4 	movhi	r2,514
 2012bc4:	10afbd04 	addi	r2,r2,-16652
 2012bc8:	f800283a 	ret

02012bcc <localeconv>:
 2012bcc:	008080b4 	movhi	r2,514
 2012bd0:	10b6fa04 	addi	r2,r2,-9240
 2012bd4:	11000017 	ldw	r4,0(r2)
 2012bd8:	2012bc01 	jmpi	2012bc0 <_localeconv_r>

02012bdc <_setlocale_r>:
 2012bdc:	defffc04 	addi	sp,sp,-16
 2012be0:	00c080b4 	movhi	r3,514
 2012be4:	18efb804 	addi	r3,r3,-16672
 2012be8:	dc800215 	stw	r18,8(sp)
 2012bec:	dc400115 	stw	r17,4(sp)
 2012bf0:	dc000015 	stw	r16,0(sp)
 2012bf4:	2023883a 	mov	r17,r4
 2012bf8:	2825883a 	mov	r18,r5
 2012bfc:	dfc00315 	stw	ra,12(sp)
 2012c00:	3021883a 	mov	r16,r6
 2012c04:	3009883a 	mov	r4,r6
 2012c08:	180b883a 	mov	r5,r3
 2012c0c:	30000926 	beq	r6,zero,2012c34 <_setlocale_r+0x58>
 2012c10:	20148b00 	call	20148b0 <strcmp>
 2012c14:	8009883a 	mov	r4,r16
 2012c18:	014080b4 	movhi	r5,514
 2012c1c:	296fa304 	addi	r5,r5,-16756
 2012c20:	10000b1e 	bne	r2,zero,2012c50 <_setlocale_r+0x74>
 2012c24:	8c000d15 	stw	r16,52(r17)
 2012c28:	8c800c15 	stw	r18,48(r17)
 2012c2c:	00c080b4 	movhi	r3,514
 2012c30:	18efb804 	addi	r3,r3,-16672
 2012c34:	1805883a 	mov	r2,r3
 2012c38:	dfc00317 	ldw	ra,12(sp)
 2012c3c:	dc800217 	ldw	r18,8(sp)
 2012c40:	dc400117 	ldw	r17,4(sp)
 2012c44:	dc000017 	ldw	r16,0(sp)
 2012c48:	dec00404 	addi	sp,sp,16
 2012c4c:	f800283a 	ret
 2012c50:	20148b00 	call	20148b0 <strcmp>
 2012c54:	0007883a 	mov	r3,zero
 2012c58:	103ff226 	beq	r2,zero,2012c24 <_setlocale_r+0x48>
 2012c5c:	003ff506 	br	2012c34 <_setlocale_r+0x58>

02012c60 <setlocale>:
 2012c60:	018080b4 	movhi	r6,514
 2012c64:	31b6fa04 	addi	r6,r6,-9240
 2012c68:	2007883a 	mov	r3,r4
 2012c6c:	31000017 	ldw	r4,0(r6)
 2012c70:	280d883a 	mov	r6,r5
 2012c74:	180b883a 	mov	r5,r3
 2012c78:	2012bdc1 	jmpi	2012bdc <_setlocale_r>

02012c7c <__smakebuf_r>:
 2012c7c:	2880030b 	ldhu	r2,12(r5)
 2012c80:	deffed04 	addi	sp,sp,-76
 2012c84:	dc401015 	stw	r17,64(sp)
 2012c88:	1080008c 	andi	r2,r2,2
 2012c8c:	dc000f15 	stw	r16,60(sp)
 2012c90:	dfc01215 	stw	ra,72(sp)
 2012c94:	dc801115 	stw	r18,68(sp)
 2012c98:	2821883a 	mov	r16,r5
 2012c9c:	2023883a 	mov	r17,r4
 2012ca0:	10000b26 	beq	r2,zero,2012cd0 <__smakebuf_r+0x54>
 2012ca4:	28c010c4 	addi	r3,r5,67
 2012ca8:	00800044 	movi	r2,1
 2012cac:	28800515 	stw	r2,20(r5)
 2012cb0:	28c00415 	stw	r3,16(r5)
 2012cb4:	28c00015 	stw	r3,0(r5)
 2012cb8:	dfc01217 	ldw	ra,72(sp)
 2012cbc:	dc801117 	ldw	r18,68(sp)
 2012cc0:	dc401017 	ldw	r17,64(sp)
 2012cc4:	dc000f17 	ldw	r16,60(sp)
 2012cc8:	dec01304 	addi	sp,sp,76
 2012ccc:	f800283a 	ret
 2012cd0:	2940038f 	ldh	r5,14(r5)
 2012cd4:	28002116 	blt	r5,zero,2012d5c <__smakebuf_r+0xe0>
 2012cd8:	d80d883a 	mov	r6,sp
 2012cdc:	2014c400 	call	2014c40 <_fstat_r>
 2012ce0:	10001e16 	blt	r2,zero,2012d5c <__smakebuf_r+0xe0>
 2012ce4:	d8800117 	ldw	r2,4(sp)
 2012ce8:	00e00014 	movui	r3,32768
 2012cec:	113c000c 	andi	r4,r2,61440
 2012cf0:	20c03126 	beq	r4,r3,2012db8 <__smakebuf_r+0x13c>
 2012cf4:	8080030b 	ldhu	r2,12(r16)
 2012cf8:	00c80004 	movi	r3,8192
 2012cfc:	10820014 	ori	r2,r2,2048
 2012d00:	8080030d 	sth	r2,12(r16)
 2012d04:	20c01e26 	beq	r4,r3,2012d80 <__smakebuf_r+0x104>
 2012d08:	04810004 	movi	r18,1024
 2012d0c:	8809883a 	mov	r4,r17
 2012d10:	900b883a 	mov	r5,r18
 2012d14:	200d68c0 	call	200d68c <_malloc_r>
 2012d18:	1009883a 	mov	r4,r2
 2012d1c:	10003126 	beq	r2,zero,2012de4 <__smakebuf_r+0x168>
 2012d20:	80c0030b 	ldhu	r3,12(r16)
 2012d24:	00808074 	movhi	r2,513
 2012d28:	1087ed04 	addi	r2,r2,8116
 2012d2c:	88800f15 	stw	r2,60(r17)
 2012d30:	18c02014 	ori	r3,r3,128
 2012d34:	84800515 	stw	r18,20(r16)
 2012d38:	80c0030d 	sth	r3,12(r16)
 2012d3c:	81000415 	stw	r4,16(r16)
 2012d40:	81000015 	stw	r4,0(r16)
 2012d44:	dfc01217 	ldw	ra,72(sp)
 2012d48:	dc801117 	ldw	r18,68(sp)
 2012d4c:	dc401017 	ldw	r17,64(sp)
 2012d50:	dc000f17 	ldw	r16,60(sp)
 2012d54:	dec01304 	addi	sp,sp,76
 2012d58:	f800283a 	ret
 2012d5c:	80c0030b 	ldhu	r3,12(r16)
 2012d60:	1880200c 	andi	r2,r3,128
 2012d64:	10000426 	beq	r2,zero,2012d78 <__smakebuf_r+0xfc>
 2012d68:	04801004 	movi	r18,64
 2012d6c:	18820014 	ori	r2,r3,2048
 2012d70:	8080030d 	sth	r2,12(r16)
 2012d74:	003fe506 	br	2012d0c <__smakebuf_r+0x90>
 2012d78:	04810004 	movi	r18,1024
 2012d7c:	003ffb06 	br	2012d6c <__smakebuf_r+0xf0>
 2012d80:	8140038f 	ldh	r5,14(r16)
 2012d84:	8809883a 	mov	r4,r17
 2012d88:	2014cb40 	call	2014cb4 <_isatty_r>
 2012d8c:	103fde26 	beq	r2,zero,2012d08 <__smakebuf_r+0x8c>
 2012d90:	8080030b 	ldhu	r2,12(r16)
 2012d94:	80c010c4 	addi	r3,r16,67
 2012d98:	04810004 	movi	r18,1024
 2012d9c:	10800054 	ori	r2,r2,1
 2012da0:	8080030d 	sth	r2,12(r16)
 2012da4:	00800044 	movi	r2,1
 2012da8:	80c00415 	stw	r3,16(r16)
 2012dac:	80800515 	stw	r2,20(r16)
 2012db0:	80c00015 	stw	r3,0(r16)
 2012db4:	003fd506 	br	2012d0c <__smakebuf_r+0x90>
 2012db8:	80c00a17 	ldw	r3,40(r16)
 2012dbc:	00808074 	movhi	r2,513
 2012dc0:	1091db04 	addi	r2,r2,18284
 2012dc4:	18bfcb1e 	bne	r3,r2,2012cf4 <__smakebuf_r+0x78>
 2012dc8:	8080030b 	ldhu	r2,12(r16)
 2012dcc:	00c10004 	movi	r3,1024
 2012dd0:	1825883a 	mov	r18,r3
 2012dd4:	10c4b03a 	or	r2,r2,r3
 2012dd8:	8080030d 	sth	r2,12(r16)
 2012ddc:	80c01315 	stw	r3,76(r16)
 2012de0:	003fca06 	br	2012d0c <__smakebuf_r+0x90>
 2012de4:	8100030b 	ldhu	r4,12(r16)
 2012de8:	2080800c 	andi	r2,r4,512
 2012dec:	103fb21e 	bne	r2,zero,2012cb8 <__smakebuf_r+0x3c>
 2012df0:	80c010c4 	addi	r3,r16,67
 2012df4:	21000094 	ori	r4,r4,2
 2012df8:	00800044 	movi	r2,1
 2012dfc:	80800515 	stw	r2,20(r16)
 2012e00:	8100030d 	sth	r4,12(r16)
 2012e04:	80c00415 	stw	r3,16(r16)
 2012e08:	80c00015 	stw	r3,0(r16)
 2012e0c:	003faa06 	br	2012cb8 <__smakebuf_r+0x3c>

02012e10 <memchr>:
 2012e10:	008000c4 	movi	r2,3
 2012e14:	29403fcc 	andi	r5,r5,255
 2012e18:	2007883a 	mov	r3,r4
 2012e1c:	1180022e 	bgeu	r2,r6,2012e28 <memchr+0x18>
 2012e20:	2084703a 	and	r2,r4,r2
 2012e24:	10000b26 	beq	r2,zero,2012e54 <memchr+0x44>
 2012e28:	313fffc4 	addi	r4,r6,-1
 2012e2c:	3000051e 	bne	r6,zero,2012e44 <memchr+0x34>
 2012e30:	00002c06 	br	2012ee4 <memchr+0xd4>
 2012e34:	213fffc4 	addi	r4,r4,-1
 2012e38:	00bfffc4 	movi	r2,-1
 2012e3c:	18c00044 	addi	r3,r3,1
 2012e40:	20802826 	beq	r4,r2,2012ee4 <memchr+0xd4>
 2012e44:	18800003 	ldbu	r2,0(r3)
 2012e48:	28bffa1e 	bne	r5,r2,2012e34 <memchr+0x24>
 2012e4c:	1805883a 	mov	r2,r3
 2012e50:	f800283a 	ret
 2012e54:	0011883a 	mov	r8,zero
 2012e58:	0007883a 	mov	r3,zero
 2012e5c:	01c00104 	movi	r7,4
 2012e60:	4004923a 	slli	r2,r8,8
 2012e64:	18c00044 	addi	r3,r3,1
 2012e68:	1151883a 	add	r8,r2,r5
 2012e6c:	19fffc1e 	bne	r3,r7,2012e60 <memchr+0x50>
 2012e70:	02bfbff4 	movhi	r10,65279
 2012e74:	52bfbfc4 	addi	r10,r10,-257
 2012e78:	02602074 	movhi	r9,32897
 2012e7c:	4a602004 	addi	r9,r9,-32640
 2012e80:	02c000c4 	movi	r11,3
 2012e84:	20800017 	ldw	r2,0(r4)
 2012e88:	31bfff04 	addi	r6,r6,-4
 2012e8c:	200f883a 	mov	r7,r4
 2012e90:	1204f03a 	xor	r2,r2,r8
 2012e94:	1287883a 	add	r3,r2,r10
 2012e98:	1a46703a 	and	r3,r3,r9
 2012e9c:	0084303a 	nor	r2,zero,r2
 2012ea0:	10c4703a 	and	r2,r2,r3
 2012ea4:	10000b26 	beq	r2,zero,2012ed4 <memchr+0xc4>
 2012ea8:	20800003 	ldbu	r2,0(r4)
 2012eac:	28800f26 	beq	r5,r2,2012eec <memchr+0xdc>
 2012eb0:	20800043 	ldbu	r2,1(r4)
 2012eb4:	21c00044 	addi	r7,r4,1
 2012eb8:	28800c26 	beq	r5,r2,2012eec <memchr+0xdc>
 2012ebc:	20800083 	ldbu	r2,2(r4)
 2012ec0:	21c00084 	addi	r7,r4,2
 2012ec4:	28800926 	beq	r5,r2,2012eec <memchr+0xdc>
 2012ec8:	208000c3 	ldbu	r2,3(r4)
 2012ecc:	21c000c4 	addi	r7,r4,3
 2012ed0:	28800626 	beq	r5,r2,2012eec <memchr+0xdc>
 2012ed4:	21000104 	addi	r4,r4,4
 2012ed8:	59bfea36 	bltu	r11,r6,2012e84 <memchr+0x74>
 2012edc:	2007883a 	mov	r3,r4
 2012ee0:	003fd106 	br	2012e28 <memchr+0x18>
 2012ee4:	0005883a 	mov	r2,zero
 2012ee8:	f800283a 	ret
 2012eec:	3805883a 	mov	r2,r7
 2012ef0:	f800283a 	ret

02012ef4 <memcpy>:
 2012ef4:	01c003c4 	movi	r7,15
 2012ef8:	2007883a 	mov	r3,r4
 2012efc:	3980032e 	bgeu	r7,r6,2012f0c <memcpy+0x18>
 2012f00:	2904b03a 	or	r2,r5,r4
 2012f04:	108000cc 	andi	r2,r2,3
 2012f08:	10000926 	beq	r2,zero,2012f30 <memcpy+0x3c>
 2012f0c:	30000626 	beq	r6,zero,2012f28 <memcpy+0x34>
 2012f10:	30cd883a 	add	r6,r6,r3
 2012f14:	28800003 	ldbu	r2,0(r5)
 2012f18:	29400044 	addi	r5,r5,1
 2012f1c:	18800005 	stb	r2,0(r3)
 2012f20:	18c00044 	addi	r3,r3,1
 2012f24:	30fffb1e 	bne	r6,r3,2012f14 <memcpy+0x20>
 2012f28:	2005883a 	mov	r2,r4
 2012f2c:	f800283a 	ret
 2012f30:	3811883a 	mov	r8,r7
 2012f34:	200f883a 	mov	r7,r4
 2012f38:	28c00017 	ldw	r3,0(r5)
 2012f3c:	31bffc04 	addi	r6,r6,-16
 2012f40:	38c00015 	stw	r3,0(r7)
 2012f44:	28800117 	ldw	r2,4(r5)
 2012f48:	38800115 	stw	r2,4(r7)
 2012f4c:	28c00217 	ldw	r3,8(r5)
 2012f50:	38c00215 	stw	r3,8(r7)
 2012f54:	28800317 	ldw	r2,12(r5)
 2012f58:	29400404 	addi	r5,r5,16
 2012f5c:	38800315 	stw	r2,12(r7)
 2012f60:	39c00404 	addi	r7,r7,16
 2012f64:	41bff436 	bltu	r8,r6,2012f38 <memcpy+0x44>
 2012f68:	008000c4 	movi	r2,3
 2012f6c:	1180072e 	bgeu	r2,r6,2012f8c <memcpy+0x98>
 2012f70:	1007883a 	mov	r3,r2
 2012f74:	28800017 	ldw	r2,0(r5)
 2012f78:	31bfff04 	addi	r6,r6,-4
 2012f7c:	29400104 	addi	r5,r5,4
 2012f80:	38800015 	stw	r2,0(r7)
 2012f84:	39c00104 	addi	r7,r7,4
 2012f88:	19bffa36 	bltu	r3,r6,2012f74 <memcpy+0x80>
 2012f8c:	3807883a 	mov	r3,r7
 2012f90:	003fde06 	br	2012f0c <memcpy+0x18>

02012f94 <memmove>:
 2012f94:	2807883a 	mov	r3,r5
 2012f98:	2011883a 	mov	r8,r4
 2012f9c:	29000c2e 	bgeu	r5,r4,2012fd0 <memmove+0x3c>
 2012fa0:	298f883a 	add	r7,r5,r6
 2012fa4:	21c00a2e 	bgeu	r4,r7,2012fd0 <memmove+0x3c>
 2012fa8:	30000726 	beq	r6,zero,2012fc8 <memmove+0x34>
 2012fac:	2187883a 	add	r3,r4,r6
 2012fb0:	198dc83a 	sub	r6,r3,r6
 2012fb4:	39ffffc4 	addi	r7,r7,-1
 2012fb8:	38800003 	ldbu	r2,0(r7)
 2012fbc:	18ffffc4 	addi	r3,r3,-1
 2012fc0:	18800005 	stb	r2,0(r3)
 2012fc4:	19bffb1e 	bne	r3,r6,2012fb4 <memmove+0x20>
 2012fc8:	2005883a 	mov	r2,r4
 2012fcc:	f800283a 	ret
 2012fd0:	01c003c4 	movi	r7,15
 2012fd4:	39800a36 	bltu	r7,r6,2013000 <memmove+0x6c>
 2012fd8:	303ffb26 	beq	r6,zero,2012fc8 <memmove+0x34>
 2012fdc:	400f883a 	mov	r7,r8
 2012fe0:	320d883a 	add	r6,r6,r8
 2012fe4:	28800003 	ldbu	r2,0(r5)
 2012fe8:	29400044 	addi	r5,r5,1
 2012fec:	38800005 	stb	r2,0(r7)
 2012ff0:	39c00044 	addi	r7,r7,1
 2012ff4:	39bffb1e 	bne	r7,r6,2012fe4 <memmove+0x50>
 2012ff8:	2005883a 	mov	r2,r4
 2012ffc:	f800283a 	ret
 2013000:	1904b03a 	or	r2,r3,r4
 2013004:	108000cc 	andi	r2,r2,3
 2013008:	103ff31e 	bne	r2,zero,2012fd8 <memmove+0x44>
 201300c:	3811883a 	mov	r8,r7
 2013010:	180b883a 	mov	r5,r3
 2013014:	200f883a 	mov	r7,r4
 2013018:	28c00017 	ldw	r3,0(r5)
 201301c:	31bffc04 	addi	r6,r6,-16
 2013020:	38c00015 	stw	r3,0(r7)
 2013024:	28800117 	ldw	r2,4(r5)
 2013028:	38800115 	stw	r2,4(r7)
 201302c:	28c00217 	ldw	r3,8(r5)
 2013030:	38c00215 	stw	r3,8(r7)
 2013034:	28800317 	ldw	r2,12(r5)
 2013038:	29400404 	addi	r5,r5,16
 201303c:	38800315 	stw	r2,12(r7)
 2013040:	39c00404 	addi	r7,r7,16
 2013044:	41bff436 	bltu	r8,r6,2013018 <memmove+0x84>
 2013048:	008000c4 	movi	r2,3
 201304c:	1180072e 	bgeu	r2,r6,201306c <memmove+0xd8>
 2013050:	1007883a 	mov	r3,r2
 2013054:	28800017 	ldw	r2,0(r5)
 2013058:	31bfff04 	addi	r6,r6,-4
 201305c:	29400104 	addi	r5,r5,4
 2013060:	38800015 	stw	r2,0(r7)
 2013064:	39c00104 	addi	r7,r7,4
 2013068:	19bffa36 	bltu	r3,r6,2013054 <memmove+0xc0>
 201306c:	3811883a 	mov	r8,r7
 2013070:	003fd906 	br	2012fd8 <memmove+0x44>

02013074 <_Bfree>:
 2013074:	28000826 	beq	r5,zero,2013098 <_Bfree+0x24>
 2013078:	28800117 	ldw	r2,4(r5)
 201307c:	21001317 	ldw	r4,76(r4)
 2013080:	1085883a 	add	r2,r2,r2
 2013084:	1085883a 	add	r2,r2,r2
 2013088:	1105883a 	add	r2,r2,r4
 201308c:	10c00017 	ldw	r3,0(r2)
 2013090:	28c00015 	stw	r3,0(r5)
 2013094:	11400015 	stw	r5,0(r2)
 2013098:	f800283a 	ret

0201309c <__hi0bits>:
 201309c:	20bfffec 	andhi	r2,r4,65535
 20130a0:	10001426 	beq	r2,zero,20130f4 <__hi0bits+0x58>
 20130a4:	0007883a 	mov	r3,zero
 20130a8:	20bfc02c 	andhi	r2,r4,65280
 20130ac:	1000021e 	bne	r2,zero,20130b8 <__hi0bits+0x1c>
 20130b0:	2008923a 	slli	r4,r4,8
 20130b4:	18c00204 	addi	r3,r3,8
 20130b8:	20bc002c 	andhi	r2,r4,61440
 20130bc:	1000021e 	bne	r2,zero,20130c8 <__hi0bits+0x2c>
 20130c0:	2008913a 	slli	r4,r4,4
 20130c4:	18c00104 	addi	r3,r3,4
 20130c8:	20b0002c 	andhi	r2,r4,49152
 20130cc:	1000031e 	bne	r2,zero,20130dc <__hi0bits+0x40>
 20130d0:	2105883a 	add	r2,r4,r4
 20130d4:	18c00084 	addi	r3,r3,2
 20130d8:	1089883a 	add	r4,r2,r2
 20130dc:	20000316 	blt	r4,zero,20130ec <__hi0bits+0x50>
 20130e0:	2090002c 	andhi	r2,r4,16384
 20130e4:	10000626 	beq	r2,zero,2013100 <__hi0bits+0x64>
 20130e8:	18c00044 	addi	r3,r3,1
 20130ec:	1805883a 	mov	r2,r3
 20130f0:	f800283a 	ret
 20130f4:	2008943a 	slli	r4,r4,16
 20130f8:	00c00404 	movi	r3,16
 20130fc:	003fea06 	br	20130a8 <__hi0bits+0xc>
 2013100:	00c00804 	movi	r3,32
 2013104:	1805883a 	mov	r2,r3
 2013108:	f800283a 	ret

0201310c <__lo0bits>:
 201310c:	20c00017 	ldw	r3,0(r4)
 2013110:	188001cc 	andi	r2,r3,7
 2013114:	10000a26 	beq	r2,zero,2013140 <__lo0bits+0x34>
 2013118:	1880004c 	andi	r2,r3,1
 201311c:	1005003a 	cmpeq	r2,r2,zero
 2013120:	10002126 	beq	r2,zero,20131a8 <__lo0bits+0x9c>
 2013124:	1880008c 	andi	r2,r3,2
 2013128:	1000251e 	bne	r2,zero,20131c0 <__lo0bits+0xb4>
 201312c:	1804d0ba 	srli	r2,r3,2
 2013130:	01400084 	movi	r5,2
 2013134:	20800015 	stw	r2,0(r4)
 2013138:	2805883a 	mov	r2,r5
 201313c:	f800283a 	ret
 2013140:	18bfffcc 	andi	r2,r3,65535
 2013144:	10001526 	beq	r2,zero,201319c <__lo0bits+0x90>
 2013148:	000b883a 	mov	r5,zero
 201314c:	18803fcc 	andi	r2,r3,255
 2013150:	1000021e 	bne	r2,zero,201315c <__lo0bits+0x50>
 2013154:	1806d23a 	srli	r3,r3,8
 2013158:	29400204 	addi	r5,r5,8
 201315c:	188003cc 	andi	r2,r3,15
 2013160:	1000021e 	bne	r2,zero,201316c <__lo0bits+0x60>
 2013164:	1806d13a 	srli	r3,r3,4
 2013168:	29400104 	addi	r5,r5,4
 201316c:	188000cc 	andi	r2,r3,3
 2013170:	1000021e 	bne	r2,zero,201317c <__lo0bits+0x70>
 2013174:	1806d0ba 	srli	r3,r3,2
 2013178:	29400084 	addi	r5,r5,2
 201317c:	1880004c 	andi	r2,r3,1
 2013180:	1000031e 	bne	r2,zero,2013190 <__lo0bits+0x84>
 2013184:	1806d07a 	srli	r3,r3,1
 2013188:	18000a26 	beq	r3,zero,20131b4 <__lo0bits+0xa8>
 201318c:	29400044 	addi	r5,r5,1
 2013190:	2805883a 	mov	r2,r5
 2013194:	20c00015 	stw	r3,0(r4)
 2013198:	f800283a 	ret
 201319c:	1806d43a 	srli	r3,r3,16
 20131a0:	01400404 	movi	r5,16
 20131a4:	003fe906 	br	201314c <__lo0bits+0x40>
 20131a8:	000b883a 	mov	r5,zero
 20131ac:	2805883a 	mov	r2,r5
 20131b0:	f800283a 	ret
 20131b4:	01400804 	movi	r5,32
 20131b8:	2805883a 	mov	r2,r5
 20131bc:	f800283a 	ret
 20131c0:	1804d07a 	srli	r2,r3,1
 20131c4:	01400044 	movi	r5,1
 20131c8:	20800015 	stw	r2,0(r4)
 20131cc:	003fda06 	br	2013138 <__lo0bits+0x2c>

020131d0 <__mcmp>:
 20131d0:	20800417 	ldw	r2,16(r4)
 20131d4:	28c00417 	ldw	r3,16(r5)
 20131d8:	10cfc83a 	sub	r7,r2,r3
 20131dc:	38000c1e 	bne	r7,zero,2013210 <__mcmp+0x40>
 20131e0:	18c5883a 	add	r2,r3,r3
 20131e4:	1085883a 	add	r2,r2,r2
 20131e8:	10c00504 	addi	r3,r2,20
 20131ec:	21000504 	addi	r4,r4,20
 20131f0:	28cb883a 	add	r5,r5,r3
 20131f4:	2085883a 	add	r2,r4,r2
 20131f8:	10bfff04 	addi	r2,r2,-4
 20131fc:	297fff04 	addi	r5,r5,-4
 2013200:	11800017 	ldw	r6,0(r2)
 2013204:	28c00017 	ldw	r3,0(r5)
 2013208:	30c0031e 	bne	r6,r3,2013218 <__mcmp+0x48>
 201320c:	20bffa36 	bltu	r4,r2,20131f8 <__mcmp+0x28>
 2013210:	3805883a 	mov	r2,r7
 2013214:	f800283a 	ret
 2013218:	30c00336 	bltu	r6,r3,2013228 <__mcmp+0x58>
 201321c:	01c00044 	movi	r7,1
 2013220:	3805883a 	mov	r2,r7
 2013224:	f800283a 	ret
 2013228:	01ffffc4 	movi	r7,-1
 201322c:	003ff806 	br	2013210 <__mcmp+0x40>

02013230 <__ulp>:
 2013230:	295ffc2c 	andhi	r5,r5,32752
 2013234:	013f3034 	movhi	r4,64704
 2013238:	290b883a 	add	r5,r5,r4
 201323c:	0145c83a 	sub	r2,zero,r5
 2013240:	1007d53a 	srai	r3,r2,20
 2013244:	000d883a 	mov	r6,zero
 2013248:	0140040e 	bge	zero,r5,201325c <__ulp+0x2c>
 201324c:	280f883a 	mov	r7,r5
 2013250:	3807883a 	mov	r3,r7
 2013254:	3005883a 	mov	r2,r6
 2013258:	f800283a 	ret
 201325c:	008004c4 	movi	r2,19
 2013260:	193ffb04 	addi	r4,r3,-20
 2013264:	10c00c0e 	bge	r2,r3,2013298 <__ulp+0x68>
 2013268:	008007c4 	movi	r2,31
 201326c:	1107c83a 	sub	r3,r2,r4
 2013270:	00800784 	movi	r2,30
 2013274:	01400044 	movi	r5,1
 2013278:	11000216 	blt	r2,r4,2013284 <__ulp+0x54>
 201327c:	00800044 	movi	r2,1
 2013280:	10ca983a 	sll	r5,r2,r3
 2013284:	000f883a 	mov	r7,zero
 2013288:	280d883a 	mov	r6,r5
 201328c:	3807883a 	mov	r3,r7
 2013290:	3005883a 	mov	r2,r6
 2013294:	f800283a 	ret
 2013298:	00800234 	movhi	r2,8
 201329c:	10cfd83a 	sra	r7,r2,r3
 20132a0:	000d883a 	mov	r6,zero
 20132a4:	3005883a 	mov	r2,r6
 20132a8:	3807883a 	mov	r3,r7
 20132ac:	f800283a 	ret

020132b0 <__b2d>:
 20132b0:	20800417 	ldw	r2,16(r4)
 20132b4:	defff904 	addi	sp,sp,-28
 20132b8:	dd000415 	stw	r20,16(sp)
 20132bc:	1085883a 	add	r2,r2,r2
 20132c0:	25000504 	addi	r20,r4,20
 20132c4:	1085883a 	add	r2,r2,r2
 20132c8:	dc000015 	stw	r16,0(sp)
 20132cc:	a0a1883a 	add	r16,r20,r2
 20132d0:	dd400515 	stw	r21,20(sp)
 20132d4:	857fff17 	ldw	r21,-4(r16)
 20132d8:	dc400115 	stw	r17,4(sp)
 20132dc:	dfc00615 	stw	ra,24(sp)
 20132e0:	a809883a 	mov	r4,r21
 20132e4:	2823883a 	mov	r17,r5
 20132e8:	dcc00315 	stw	r19,12(sp)
 20132ec:	dc800215 	stw	r18,8(sp)
 20132f0:	201309c0 	call	201309c <__hi0bits>
 20132f4:	100b883a 	mov	r5,r2
 20132f8:	00800804 	movi	r2,32
 20132fc:	1145c83a 	sub	r2,r2,r5
 2013300:	88800015 	stw	r2,0(r17)
 2013304:	00800284 	movi	r2,10
 2013308:	80ffff04 	addi	r3,r16,-4
 201330c:	11401416 	blt	r2,r5,2013360 <__b2d+0xb0>
 2013310:	008002c4 	movi	r2,11
 2013314:	1149c83a 	sub	r4,r2,r5
 2013318:	a0c02736 	bltu	r20,r3,20133b8 <__b2d+0x108>
 201331c:	000d883a 	mov	r6,zero
 2013320:	28800544 	addi	r2,r5,21
 2013324:	a906d83a 	srl	r3,r21,r4
 2013328:	a884983a 	sll	r2,r21,r2
 201332c:	1ccffc34 	orhi	r19,r3,16368
 2013330:	11a4b03a 	or	r18,r2,r6
 2013334:	9005883a 	mov	r2,r18
 2013338:	9807883a 	mov	r3,r19
 201333c:	dfc00617 	ldw	ra,24(sp)
 2013340:	dd400517 	ldw	r21,20(sp)
 2013344:	dd000417 	ldw	r20,16(sp)
 2013348:	dcc00317 	ldw	r19,12(sp)
 201334c:	dc800217 	ldw	r18,8(sp)
 2013350:	dc400117 	ldw	r17,4(sp)
 2013354:	dc000017 	ldw	r16,0(sp)
 2013358:	dec00704 	addi	sp,sp,28
 201335c:	f800283a 	ret
 2013360:	a0c00e36 	bltu	r20,r3,201339c <__b2d+0xec>
 2013364:	293ffd44 	addi	r4,r5,-11
 2013368:	000d883a 	mov	r6,zero
 201336c:	20000f26 	beq	r4,zero,20133ac <__b2d+0xfc>
 2013370:	00800804 	movi	r2,32
 2013374:	110bc83a 	sub	r5,r2,r4
 2013378:	a0c01236 	bltu	r20,r3,20133c4 <__b2d+0x114>
 201337c:	000f883a 	mov	r7,zero
 2013380:	a904983a 	sll	r2,r21,r4
 2013384:	3146d83a 	srl	r3,r6,r5
 2013388:	3108983a 	sll	r4,r6,r4
 201338c:	108ffc34 	orhi	r2,r2,16368
 2013390:	18a6b03a 	or	r19,r3,r2
 2013394:	3924b03a 	or	r18,r7,r4
 2013398:	003fe606 	br	2013334 <__b2d+0x84>
 201339c:	293ffd44 	addi	r4,r5,-11
 20133a0:	81bffe17 	ldw	r6,-8(r16)
 20133a4:	80fffe04 	addi	r3,r16,-8
 20133a8:	203ff11e 	bne	r4,zero,2013370 <__b2d+0xc0>
 20133ac:	accffc34 	orhi	r19,r21,16368
 20133b0:	3025883a 	mov	r18,r6
 20133b4:	003fdf06 	br	2013334 <__b2d+0x84>
 20133b8:	18bfff17 	ldw	r2,-4(r3)
 20133bc:	110cd83a 	srl	r6,r2,r4
 20133c0:	003fd706 	br	2013320 <__b2d+0x70>
 20133c4:	18bfff17 	ldw	r2,-4(r3)
 20133c8:	114ed83a 	srl	r7,r2,r5
 20133cc:	003fec06 	br	2013380 <__b2d+0xd0>

020133d0 <__ratio>:
 20133d0:	defff904 	addi	sp,sp,-28
 20133d4:	dc400215 	stw	r17,8(sp)
 20133d8:	2823883a 	mov	r17,r5
 20133dc:	d80b883a 	mov	r5,sp
 20133e0:	dfc00615 	stw	ra,24(sp)
 20133e4:	dd000515 	stw	r20,20(sp)
 20133e8:	dcc00415 	stw	r19,16(sp)
 20133ec:	dc800315 	stw	r18,12(sp)
 20133f0:	2025883a 	mov	r18,r4
 20133f4:	20132b00 	call	20132b0 <__b2d>
 20133f8:	8809883a 	mov	r4,r17
 20133fc:	d9400104 	addi	r5,sp,4
 2013400:	1027883a 	mov	r19,r2
 2013404:	1829883a 	mov	r20,r3
 2013408:	20132b00 	call	20132b0 <__b2d>
 201340c:	89000417 	ldw	r4,16(r17)
 2013410:	91c00417 	ldw	r7,16(r18)
 2013414:	d9800117 	ldw	r6,4(sp)
 2013418:	180b883a 	mov	r5,r3
 201341c:	390fc83a 	sub	r7,r7,r4
 2013420:	1009883a 	mov	r4,r2
 2013424:	d8800017 	ldw	r2,0(sp)
 2013428:	380e917a 	slli	r7,r7,5
 201342c:	2011883a 	mov	r8,r4
 2013430:	1185c83a 	sub	r2,r2,r6
 2013434:	11c5883a 	add	r2,r2,r7
 2013438:	1006953a 	slli	r3,r2,20
 201343c:	2813883a 	mov	r9,r5
 2013440:	00800d0e 	bge	zero,r2,2013478 <__ratio+0xa8>
 2013444:	1d29883a 	add	r20,r3,r20
 2013448:	a00b883a 	mov	r5,r20
 201344c:	480f883a 	mov	r7,r9
 2013450:	9809883a 	mov	r4,r19
 2013454:	400d883a 	mov	r6,r8
 2013458:	20163a80 	call	20163a8 <__divdf3>
 201345c:	dfc00617 	ldw	ra,24(sp)
 2013460:	dd000517 	ldw	r20,20(sp)
 2013464:	dcc00417 	ldw	r19,16(sp)
 2013468:	dc800317 	ldw	r18,12(sp)
 201346c:	dc400217 	ldw	r17,8(sp)
 2013470:	dec00704 	addi	sp,sp,28
 2013474:	f800283a 	ret
 2013478:	28d3c83a 	sub	r9,r5,r3
 201347c:	003ff206 	br	2013448 <__ratio+0x78>

02013480 <_mprec_log10>:
 2013480:	defffe04 	addi	sp,sp,-8
 2013484:	008005c4 	movi	r2,23
 2013488:	dc000015 	stw	r16,0(sp)
 201348c:	dfc00115 	stw	ra,4(sp)
 2013490:	2021883a 	mov	r16,r4
 2013494:	11000c16 	blt	r2,r4,20134c8 <_mprec_log10+0x48>
 2013498:	200490fa 	slli	r2,r4,3
 201349c:	00c080b4 	movhi	r3,514
 20134a0:	18efc904 	addi	r3,r3,-16604
 20134a4:	10c5883a 	add	r2,r2,r3
 20134a8:	12400117 	ldw	r9,4(r2)
 20134ac:	12000017 	ldw	r8,0(r2)
 20134b0:	4807883a 	mov	r3,r9
 20134b4:	4005883a 	mov	r2,r8
 20134b8:	dfc00117 	ldw	ra,4(sp)
 20134bc:	dc000017 	ldw	r16,0(sp)
 20134c0:	dec00204 	addi	sp,sp,8
 20134c4:	f800283a 	ret
 20134c8:	0011883a 	mov	r8,zero
 20134cc:	024ffc34 	movhi	r9,16368
 20134d0:	0005883a 	mov	r2,zero
 20134d4:	00d00934 	movhi	r3,16420
 20134d8:	480b883a 	mov	r5,r9
 20134dc:	4009883a 	mov	r4,r8
 20134e0:	180f883a 	mov	r7,r3
 20134e4:	100d883a 	mov	r6,r2
 20134e8:	2015fe40 	call	2015fe4 <__muldf3>
 20134ec:	843fffc4 	addi	r16,r16,-1
 20134f0:	1011883a 	mov	r8,r2
 20134f4:	1813883a 	mov	r9,r3
 20134f8:	803ff51e 	bne	r16,zero,20134d0 <_mprec_log10+0x50>
 20134fc:	4005883a 	mov	r2,r8
 2013500:	4807883a 	mov	r3,r9
 2013504:	dfc00117 	ldw	ra,4(sp)
 2013508:	dc000017 	ldw	r16,0(sp)
 201350c:	dec00204 	addi	sp,sp,8
 2013510:	f800283a 	ret

02013514 <__copybits>:
 2013514:	297fffc4 	addi	r5,r5,-1
 2013518:	30800417 	ldw	r2,16(r6)
 201351c:	280bd17a 	srai	r5,r5,5
 2013520:	31800504 	addi	r6,r6,20
 2013524:	1085883a 	add	r2,r2,r2
 2013528:	294b883a 	add	r5,r5,r5
 201352c:	294b883a 	add	r5,r5,r5
 2013530:	1085883a 	add	r2,r2,r2
 2013534:	290b883a 	add	r5,r5,r4
 2013538:	3087883a 	add	r3,r6,r2
 201353c:	29400104 	addi	r5,r5,4
 2013540:	30c0052e 	bgeu	r6,r3,2013558 <__copybits+0x44>
 2013544:	30800017 	ldw	r2,0(r6)
 2013548:	31800104 	addi	r6,r6,4
 201354c:	20800015 	stw	r2,0(r4)
 2013550:	21000104 	addi	r4,r4,4
 2013554:	30fffb36 	bltu	r6,r3,2013544 <__copybits+0x30>
 2013558:	2140032e 	bgeu	r4,r5,2013568 <__copybits+0x54>
 201355c:	20000015 	stw	zero,0(r4)
 2013560:	21000104 	addi	r4,r4,4
 2013564:	217ffd36 	bltu	r4,r5,201355c <__copybits+0x48>
 2013568:	f800283a 	ret

0201356c <__any_on>:
 201356c:	20800417 	ldw	r2,16(r4)
 2013570:	2807d17a 	srai	r3,r5,5
 2013574:	21000504 	addi	r4,r4,20
 2013578:	10c00d0e 	bge	r2,r3,20135b0 <__any_on+0x44>
 201357c:	1085883a 	add	r2,r2,r2
 2013580:	1085883a 	add	r2,r2,r2
 2013584:	208d883a 	add	r6,r4,r2
 2013588:	2180182e 	bgeu	r4,r6,20135ec <__any_on+0x80>
 201358c:	30bfff17 	ldw	r2,-4(r6)
 2013590:	30ffff04 	addi	r3,r6,-4
 2013594:	1000041e 	bne	r2,zero,20135a8 <__any_on+0x3c>
 2013598:	20c0142e 	bgeu	r4,r3,20135ec <__any_on+0x80>
 201359c:	18ffff04 	addi	r3,r3,-4
 20135a0:	18800017 	ldw	r2,0(r3)
 20135a4:	103ffc26 	beq	r2,zero,2013598 <__any_on+0x2c>
 20135a8:	00800044 	movi	r2,1
 20135ac:	f800283a 	ret
 20135b0:	18800a0e 	bge	r3,r2,20135dc <__any_on+0x70>
 20135b4:	294007cc 	andi	r5,r5,31
 20135b8:	28000826 	beq	r5,zero,20135dc <__any_on+0x70>
 20135bc:	18c5883a 	add	r2,r3,r3
 20135c0:	1085883a 	add	r2,r2,r2
 20135c4:	208d883a 	add	r6,r4,r2
 20135c8:	30c00017 	ldw	r3,0(r6)
 20135cc:	1944d83a 	srl	r2,r3,r5
 20135d0:	1144983a 	sll	r2,r2,r5
 20135d4:	18bff41e 	bne	r3,r2,20135a8 <__any_on+0x3c>
 20135d8:	003feb06 	br	2013588 <__any_on+0x1c>
 20135dc:	18c5883a 	add	r2,r3,r3
 20135e0:	1085883a 	add	r2,r2,r2
 20135e4:	208d883a 	add	r6,r4,r2
 20135e8:	003fe706 	br	2013588 <__any_on+0x1c>
 20135ec:	0005883a 	mov	r2,zero
 20135f0:	f800283a 	ret

020135f4 <_Balloc>:
 20135f4:	20c01317 	ldw	r3,76(r4)
 20135f8:	defffb04 	addi	sp,sp,-20
 20135fc:	dcc00315 	stw	r19,12(sp)
 2013600:	dc800215 	stw	r18,8(sp)
 2013604:	dfc00415 	stw	ra,16(sp)
 2013608:	2825883a 	mov	r18,r5
 201360c:	dc400115 	stw	r17,4(sp)
 2013610:	dc000015 	stw	r16,0(sp)
 2013614:	2027883a 	mov	r19,r4
 2013618:	01800404 	movi	r6,16
 201361c:	01400104 	movi	r5,4
 2013620:	18001726 	beq	r3,zero,2013680 <_Balloc+0x8c>
 2013624:	01400044 	movi	r5,1
 2013628:	9485883a 	add	r2,r18,r18
 201362c:	2ca2983a 	sll	r17,r5,r18
 2013630:	1085883a 	add	r2,r2,r2
 2013634:	10c7883a 	add	r3,r2,r3
 2013638:	1c000017 	ldw	r16,0(r3)
 201363c:	8c4d883a 	add	r6,r17,r17
 2013640:	318d883a 	add	r6,r6,r6
 2013644:	9809883a 	mov	r4,r19
 2013648:	31800504 	addi	r6,r6,20
 201364c:	80001226 	beq	r16,zero,2013698 <_Balloc+0xa4>
 2013650:	80800017 	ldw	r2,0(r16)
 2013654:	18800015 	stw	r2,0(r3)
 2013658:	80000415 	stw	zero,16(r16)
 201365c:	80000315 	stw	zero,12(r16)
 2013660:	8005883a 	mov	r2,r16
 2013664:	dfc00417 	ldw	ra,16(sp)
 2013668:	dcc00317 	ldw	r19,12(sp)
 201366c:	dc800217 	ldw	r18,8(sp)
 2013670:	dc400117 	ldw	r17,4(sp)
 2013674:	dc000017 	ldw	r16,0(sp)
 2013678:	dec00504 	addi	sp,sp,20
 201367c:	f800283a 	ret
 2013680:	20149e40 	call	20149e4 <_calloc_r>
 2013684:	1007883a 	mov	r3,r2
 2013688:	0021883a 	mov	r16,zero
 201368c:	98801315 	stw	r2,76(r19)
 2013690:	103fe41e 	bne	r2,zero,2013624 <_Balloc+0x30>
 2013694:	003ff206 	br	2013660 <_Balloc+0x6c>
 2013698:	20149e40 	call	20149e4 <_calloc_r>
 201369c:	103ff026 	beq	r2,zero,2013660 <_Balloc+0x6c>
 20136a0:	1021883a 	mov	r16,r2
 20136a4:	14800115 	stw	r18,4(r2)
 20136a8:	14400215 	stw	r17,8(r2)
 20136ac:	003fea06 	br	2013658 <_Balloc+0x64>

020136b0 <__d2b>:
 20136b0:	defff504 	addi	sp,sp,-44
 20136b4:	dcc00515 	stw	r19,20(sp)
 20136b8:	04c00044 	movi	r19,1
 20136bc:	dc000215 	stw	r16,8(sp)
 20136c0:	2821883a 	mov	r16,r5
 20136c4:	980b883a 	mov	r5,r19
 20136c8:	ddc00915 	stw	r23,36(sp)
 20136cc:	dd800815 	stw	r22,32(sp)
 20136d0:	dd400715 	stw	r21,28(sp)
 20136d4:	dd000615 	stw	r20,24(sp)
 20136d8:	dc800415 	stw	r18,16(sp)
 20136dc:	dc400315 	stw	r17,12(sp)
 20136e0:	dfc00a15 	stw	ra,40(sp)
 20136e4:	3023883a 	mov	r17,r6
 20136e8:	382d883a 	mov	r22,r7
 20136ec:	ddc00b17 	ldw	r23,44(sp)
 20136f0:	20135f40 	call	20135f4 <_Balloc>
 20136f4:	1025883a 	mov	r18,r2
 20136f8:	00a00034 	movhi	r2,32768
 20136fc:	10bfffc4 	addi	r2,r2,-1
 2013700:	8888703a 	and	r4,r17,r2
 2013704:	202ad53a 	srli	r21,r4,20
 2013708:	00800434 	movhi	r2,16
 201370c:	10bfffc4 	addi	r2,r2,-1
 2013710:	8886703a 	and	r3,r17,r2
 2013714:	a829003a 	cmpeq	r20,r21,zero
 2013718:	800b883a 	mov	r5,r16
 201371c:	d8c00115 	stw	r3,4(sp)
 2013720:	94000504 	addi	r16,r18,20
 2013724:	a000021e 	bne	r20,zero,2013730 <__d2b+0x80>
 2013728:	18c00434 	orhi	r3,r3,16
 201372c:	d8c00115 	stw	r3,4(sp)
 2013730:	28002726 	beq	r5,zero,20137d0 <__d2b+0x120>
 2013734:	d809883a 	mov	r4,sp
 2013738:	d9400015 	stw	r5,0(sp)
 201373c:	201310c0 	call	201310c <__lo0bits>
 2013740:	100d883a 	mov	r6,r2
 2013744:	10003526 	beq	r2,zero,201381c <__d2b+0x16c>
 2013748:	d8c00117 	ldw	r3,4(sp)
 201374c:	00800804 	movi	r2,32
 2013750:	1185c83a 	sub	r2,r2,r6
 2013754:	d9000017 	ldw	r4,0(sp)
 2013758:	1886983a 	sll	r3,r3,r2
 201375c:	1906b03a 	or	r3,r3,r4
 2013760:	90c00515 	stw	r3,20(r18)
 2013764:	d8c00117 	ldw	r3,4(sp)
 2013768:	1986d83a 	srl	r3,r3,r6
 201376c:	d8c00115 	stw	r3,4(sp)
 2013770:	180b003a 	cmpeq	r5,r3,zero
 2013774:	00800084 	movi	r2,2
 2013778:	114bc83a 	sub	r5,r2,r5
 201377c:	80c00115 	stw	r3,4(r16)
 2013780:	91400415 	stw	r5,16(r18)
 2013784:	a0001a1e 	bne	r20,zero,20137f0 <__d2b+0x140>
 2013788:	3545883a 	add	r2,r6,r21
 201378c:	10bef344 	addi	r2,r2,-1075
 2013790:	00c00d44 	movi	r3,53
 2013794:	b0800015 	stw	r2,0(r22)
 2013798:	1987c83a 	sub	r3,r3,r6
 201379c:	b8c00015 	stw	r3,0(r23)
 20137a0:	9005883a 	mov	r2,r18
 20137a4:	dfc00a17 	ldw	ra,40(sp)
 20137a8:	ddc00917 	ldw	r23,36(sp)
 20137ac:	dd800817 	ldw	r22,32(sp)
 20137b0:	dd400717 	ldw	r21,28(sp)
 20137b4:	dd000617 	ldw	r20,24(sp)
 20137b8:	dcc00517 	ldw	r19,20(sp)
 20137bc:	dc800417 	ldw	r18,16(sp)
 20137c0:	dc400317 	ldw	r17,12(sp)
 20137c4:	dc000217 	ldw	r16,8(sp)
 20137c8:	dec00b04 	addi	sp,sp,44
 20137cc:	f800283a 	ret
 20137d0:	d9000104 	addi	r4,sp,4
 20137d4:	201310c0 	call	201310c <__lo0bits>
 20137d8:	11800804 	addi	r6,r2,32
 20137dc:	d8800117 	ldw	r2,4(sp)
 20137e0:	94c00415 	stw	r19,16(r18)
 20137e4:	980b883a 	mov	r5,r19
 20137e8:	90800515 	stw	r2,20(r18)
 20137ec:	a03fe626 	beq	r20,zero,2013788 <__d2b+0xd8>
 20137f0:	2945883a 	add	r2,r5,r5
 20137f4:	1085883a 	add	r2,r2,r2
 20137f8:	1405883a 	add	r2,r2,r16
 20137fc:	113fff17 	ldw	r4,-4(r2)
 2013800:	30fef384 	addi	r3,r6,-1074
 2013804:	2820917a 	slli	r16,r5,5
 2013808:	b0c00015 	stw	r3,0(r22)
 201380c:	201309c0 	call	201309c <__hi0bits>
 2013810:	80a1c83a 	sub	r16,r16,r2
 2013814:	bc000015 	stw	r16,0(r23)
 2013818:	003fe106 	br	20137a0 <__d2b+0xf0>
 201381c:	d8800017 	ldw	r2,0(sp)
 2013820:	90800515 	stw	r2,20(r18)
 2013824:	d8c00117 	ldw	r3,4(sp)
 2013828:	003fd106 	br	2013770 <__d2b+0xc0>

0201382c <__mdiff>:
 201382c:	defffb04 	addi	sp,sp,-20
 2013830:	dc000015 	stw	r16,0(sp)
 2013834:	2821883a 	mov	r16,r5
 2013838:	dc800215 	stw	r18,8(sp)
 201383c:	300b883a 	mov	r5,r6
 2013840:	2025883a 	mov	r18,r4
 2013844:	8009883a 	mov	r4,r16
 2013848:	dc400115 	stw	r17,4(sp)
 201384c:	dfc00415 	stw	ra,16(sp)
 2013850:	dcc00315 	stw	r19,12(sp)
 2013854:	3023883a 	mov	r17,r6
 2013858:	20131d00 	call	20131d0 <__mcmp>
 201385c:	10004226 	beq	r2,zero,2013968 <__mdiff+0x13c>
 2013860:	10005016 	blt	r2,zero,20139a4 <__mdiff+0x178>
 2013864:	0027883a 	mov	r19,zero
 2013868:	81400117 	ldw	r5,4(r16)
 201386c:	9009883a 	mov	r4,r18
 2013870:	20135f40 	call	20135f4 <_Balloc>
 2013874:	1019883a 	mov	r12,r2
 2013878:	82800417 	ldw	r10,16(r16)
 201387c:	88800417 	ldw	r2,16(r17)
 2013880:	81800504 	addi	r6,r16,20
 2013884:	5287883a 	add	r3,r10,r10
 2013888:	1085883a 	add	r2,r2,r2
 201388c:	18c7883a 	add	r3,r3,r3
 2013890:	1085883a 	add	r2,r2,r2
 2013894:	8a000504 	addi	r8,r17,20
 2013898:	64c00315 	stw	r19,12(r12)
 201389c:	30db883a 	add	r13,r6,r3
 20138a0:	4097883a 	add	r11,r8,r2
 20138a4:	61c00504 	addi	r7,r12,20
 20138a8:	0013883a 	mov	r9,zero
 20138ac:	31000017 	ldw	r4,0(r6)
 20138b0:	41400017 	ldw	r5,0(r8)
 20138b4:	42000104 	addi	r8,r8,4
 20138b8:	20bfffcc 	andi	r2,r4,65535
 20138bc:	28ffffcc 	andi	r3,r5,65535
 20138c0:	10c5c83a 	sub	r2,r2,r3
 20138c4:	1245883a 	add	r2,r2,r9
 20138c8:	2008d43a 	srli	r4,r4,16
 20138cc:	280ad43a 	srli	r5,r5,16
 20138d0:	1007d43a 	srai	r3,r2,16
 20138d4:	3880000d 	sth	r2,0(r7)
 20138d8:	2149c83a 	sub	r4,r4,r5
 20138dc:	20c9883a 	add	r4,r4,r3
 20138e0:	3900008d 	sth	r4,2(r7)
 20138e4:	31800104 	addi	r6,r6,4
 20138e8:	39c00104 	addi	r7,r7,4
 20138ec:	2013d43a 	srai	r9,r4,16
 20138f0:	42ffee36 	bltu	r8,r11,20138ac <__mdiff+0x80>
 20138f4:	33400c2e 	bgeu	r6,r13,2013928 <__mdiff+0xfc>
 20138f8:	30800017 	ldw	r2,0(r6)
 20138fc:	31800104 	addi	r6,r6,4
 2013900:	10ffffcc 	andi	r3,r2,65535
 2013904:	1a47883a 	add	r3,r3,r9
 2013908:	1004d43a 	srli	r2,r2,16
 201390c:	1809d43a 	srai	r4,r3,16
 2013910:	38c0000d 	sth	r3,0(r7)
 2013914:	1105883a 	add	r2,r2,r4
 2013918:	3880008d 	sth	r2,2(r7)
 201391c:	1013d43a 	srai	r9,r2,16
 2013920:	39c00104 	addi	r7,r7,4
 2013924:	337ff436 	bltu	r6,r13,20138f8 <__mdiff+0xcc>
 2013928:	38bfff17 	ldw	r2,-4(r7)
 201392c:	38ffff04 	addi	r3,r7,-4
 2013930:	1000041e 	bne	r2,zero,2013944 <__mdiff+0x118>
 2013934:	18ffff04 	addi	r3,r3,-4
 2013938:	18800017 	ldw	r2,0(r3)
 201393c:	52bfffc4 	addi	r10,r10,-1
 2013940:	103ffc26 	beq	r2,zero,2013934 <__mdiff+0x108>
 2013944:	6005883a 	mov	r2,r12
 2013948:	62800415 	stw	r10,16(r12)
 201394c:	dfc00417 	ldw	ra,16(sp)
 2013950:	dcc00317 	ldw	r19,12(sp)
 2013954:	dc800217 	ldw	r18,8(sp)
 2013958:	dc400117 	ldw	r17,4(sp)
 201395c:	dc000017 	ldw	r16,0(sp)
 2013960:	dec00504 	addi	sp,sp,20
 2013964:	f800283a 	ret
 2013968:	9009883a 	mov	r4,r18
 201396c:	000b883a 	mov	r5,zero
 2013970:	20135f40 	call	20135f4 <_Balloc>
 2013974:	1019883a 	mov	r12,r2
 2013978:	00800044 	movi	r2,1
 201397c:	60800415 	stw	r2,16(r12)
 2013980:	6005883a 	mov	r2,r12
 2013984:	60000515 	stw	zero,20(r12)
 2013988:	dfc00417 	ldw	ra,16(sp)
 201398c:	dcc00317 	ldw	r19,12(sp)
 2013990:	dc800217 	ldw	r18,8(sp)
 2013994:	dc400117 	ldw	r17,4(sp)
 2013998:	dc000017 	ldw	r16,0(sp)
 201399c:	dec00504 	addi	sp,sp,20
 20139a0:	f800283a 	ret
 20139a4:	880d883a 	mov	r6,r17
 20139a8:	04c00044 	movi	r19,1
 20139ac:	8023883a 	mov	r17,r16
 20139b0:	3021883a 	mov	r16,r6
 20139b4:	003fac06 	br	2013868 <__mdiff+0x3c>

020139b8 <__lshift>:
 20139b8:	defff904 	addi	sp,sp,-28
 20139bc:	28800417 	ldw	r2,16(r5)
 20139c0:	dc000015 	stw	r16,0(sp)
 20139c4:	3021d17a 	srai	r16,r6,5
 20139c8:	28c00217 	ldw	r3,8(r5)
 20139cc:	10800044 	addi	r2,r2,1
 20139d0:	dc400115 	stw	r17,4(sp)
 20139d4:	80a3883a 	add	r17,r16,r2
 20139d8:	dd400515 	stw	r21,20(sp)
 20139dc:	dd000415 	stw	r20,16(sp)
 20139e0:	dc800215 	stw	r18,8(sp)
 20139e4:	dfc00615 	stw	ra,24(sp)
 20139e8:	2825883a 	mov	r18,r5
 20139ec:	dcc00315 	stw	r19,12(sp)
 20139f0:	3029883a 	mov	r20,r6
 20139f4:	202b883a 	mov	r21,r4
 20139f8:	29400117 	ldw	r5,4(r5)
 20139fc:	1c40030e 	bge	r3,r17,2013a0c <__lshift+0x54>
 2013a00:	18c7883a 	add	r3,r3,r3
 2013a04:	29400044 	addi	r5,r5,1
 2013a08:	1c7ffd16 	blt	r3,r17,2013a00 <__lshift+0x48>
 2013a0c:	a809883a 	mov	r4,r21
 2013a10:	20135f40 	call	20135f4 <_Balloc>
 2013a14:	1027883a 	mov	r19,r2
 2013a18:	11400504 	addi	r5,r2,20
 2013a1c:	0400090e 	bge	zero,r16,2013a44 <__lshift+0x8c>
 2013a20:	2805883a 	mov	r2,r5
 2013a24:	0007883a 	mov	r3,zero
 2013a28:	18c00044 	addi	r3,r3,1
 2013a2c:	10000015 	stw	zero,0(r2)
 2013a30:	10800104 	addi	r2,r2,4
 2013a34:	80fffc1e 	bne	r16,r3,2013a28 <__lshift+0x70>
 2013a38:	8405883a 	add	r2,r16,r16
 2013a3c:	1085883a 	add	r2,r2,r2
 2013a40:	288b883a 	add	r5,r5,r2
 2013a44:	90800417 	ldw	r2,16(r18)
 2013a48:	91000504 	addi	r4,r18,20
 2013a4c:	a18007cc 	andi	r6,r20,31
 2013a50:	1085883a 	add	r2,r2,r2
 2013a54:	1085883a 	add	r2,r2,r2
 2013a58:	208f883a 	add	r7,r4,r2
 2013a5c:	30001e26 	beq	r6,zero,2013ad8 <__lshift+0x120>
 2013a60:	00800804 	movi	r2,32
 2013a64:	1191c83a 	sub	r8,r2,r6
 2013a68:	0007883a 	mov	r3,zero
 2013a6c:	20800017 	ldw	r2,0(r4)
 2013a70:	1184983a 	sll	r2,r2,r6
 2013a74:	1884b03a 	or	r2,r3,r2
 2013a78:	28800015 	stw	r2,0(r5)
 2013a7c:	20c00017 	ldw	r3,0(r4)
 2013a80:	21000104 	addi	r4,r4,4
 2013a84:	29400104 	addi	r5,r5,4
 2013a88:	1a06d83a 	srl	r3,r3,r8
 2013a8c:	21fff736 	bltu	r4,r7,2013a6c <__lshift+0xb4>
 2013a90:	28c00015 	stw	r3,0(r5)
 2013a94:	18000126 	beq	r3,zero,2013a9c <__lshift+0xe4>
 2013a98:	8c400044 	addi	r17,r17,1
 2013a9c:	88bfffc4 	addi	r2,r17,-1
 2013aa0:	98800415 	stw	r2,16(r19)
 2013aa4:	a809883a 	mov	r4,r21
 2013aa8:	900b883a 	mov	r5,r18
 2013aac:	20130740 	call	2013074 <_Bfree>
 2013ab0:	9805883a 	mov	r2,r19
 2013ab4:	dfc00617 	ldw	ra,24(sp)
 2013ab8:	dd400517 	ldw	r21,20(sp)
 2013abc:	dd000417 	ldw	r20,16(sp)
 2013ac0:	dcc00317 	ldw	r19,12(sp)
 2013ac4:	dc800217 	ldw	r18,8(sp)
 2013ac8:	dc400117 	ldw	r17,4(sp)
 2013acc:	dc000017 	ldw	r16,0(sp)
 2013ad0:	dec00704 	addi	sp,sp,28
 2013ad4:	f800283a 	ret
 2013ad8:	20800017 	ldw	r2,0(r4)
 2013adc:	21000104 	addi	r4,r4,4
 2013ae0:	28800015 	stw	r2,0(r5)
 2013ae4:	29400104 	addi	r5,r5,4
 2013ae8:	21ffec2e 	bgeu	r4,r7,2013a9c <__lshift+0xe4>
 2013aec:	20800017 	ldw	r2,0(r4)
 2013af0:	21000104 	addi	r4,r4,4
 2013af4:	28800015 	stw	r2,0(r5)
 2013af8:	29400104 	addi	r5,r5,4
 2013afc:	21fff636 	bltu	r4,r7,2013ad8 <__lshift+0x120>
 2013b00:	003fe606 	br	2013a9c <__lshift+0xe4>

02013b04 <__multiply>:
 2013b04:	defff004 	addi	sp,sp,-64
 2013b08:	dc800815 	stw	r18,32(sp)
 2013b0c:	dc400715 	stw	r17,28(sp)
 2013b10:	2c800417 	ldw	r18,16(r5)
 2013b14:	34400417 	ldw	r17,16(r6)
 2013b18:	dcc00915 	stw	r19,36(sp)
 2013b1c:	dc000615 	stw	r16,24(sp)
 2013b20:	dfc00f15 	stw	ra,60(sp)
 2013b24:	df000e15 	stw	fp,56(sp)
 2013b28:	ddc00d15 	stw	r23,52(sp)
 2013b2c:	dd800c15 	stw	r22,48(sp)
 2013b30:	dd400b15 	stw	r21,44(sp)
 2013b34:	dd000a15 	stw	r20,40(sp)
 2013b38:	2821883a 	mov	r16,r5
 2013b3c:	3027883a 	mov	r19,r6
 2013b40:	9440040e 	bge	r18,r17,2013b54 <__multiply+0x50>
 2013b44:	8825883a 	mov	r18,r17
 2013b48:	2c400417 	ldw	r17,16(r5)
 2013b4c:	2827883a 	mov	r19,r5
 2013b50:	3021883a 	mov	r16,r6
 2013b54:	80800217 	ldw	r2,8(r16)
 2013b58:	9447883a 	add	r3,r18,r17
 2013b5c:	d8c00415 	stw	r3,16(sp)
 2013b60:	81400117 	ldw	r5,4(r16)
 2013b64:	10c0010e 	bge	r2,r3,2013b6c <__multiply+0x68>
 2013b68:	29400044 	addi	r5,r5,1
 2013b6c:	20135f40 	call	20135f4 <_Balloc>
 2013b70:	d8800515 	stw	r2,20(sp)
 2013b74:	d9000417 	ldw	r4,16(sp)
 2013b78:	d8c00517 	ldw	r3,20(sp)
 2013b7c:	2105883a 	add	r2,r4,r4
 2013b80:	1085883a 	add	r2,r2,r2
 2013b84:	19000504 	addi	r4,r3,20
 2013b88:	2085883a 	add	r2,r4,r2
 2013b8c:	d8800315 	stw	r2,12(sp)
 2013b90:	2080052e 	bgeu	r4,r2,2013ba8 <__multiply+0xa4>
 2013b94:	2005883a 	mov	r2,r4
 2013b98:	d8c00317 	ldw	r3,12(sp)
 2013b9c:	10000015 	stw	zero,0(r2)
 2013ba0:	10800104 	addi	r2,r2,4
 2013ba4:	10fffc36 	bltu	r2,r3,2013b98 <__multiply+0x94>
 2013ba8:	8c45883a 	add	r2,r17,r17
 2013bac:	9487883a 	add	r3,r18,r18
 2013bb0:	9dc00504 	addi	r23,r19,20
 2013bb4:	1085883a 	add	r2,r2,r2
 2013bb8:	84000504 	addi	r16,r16,20
 2013bbc:	18c7883a 	add	r3,r3,r3
 2013bc0:	b885883a 	add	r2,r23,r2
 2013bc4:	dc000015 	stw	r16,0(sp)
 2013bc8:	d8800215 	stw	r2,8(sp)
 2013bcc:	80f9883a 	add	fp,r16,r3
 2013bd0:	b880432e 	bgeu	r23,r2,2013ce0 <__multiply+0x1dc>
 2013bd4:	d9000115 	stw	r4,4(sp)
 2013bd8:	b9000017 	ldw	r4,0(r23)
 2013bdc:	253fffcc 	andi	r20,r4,65535
 2013be0:	a0001a26 	beq	r20,zero,2013c4c <__multiply+0x148>
 2013be4:	dcc00017 	ldw	r19,0(sp)
 2013be8:	dc800117 	ldw	r18,4(sp)
 2013bec:	002b883a 	mov	r21,zero
 2013bf0:	9c400017 	ldw	r17,0(r19)
 2013bf4:	94000017 	ldw	r16,0(r18)
 2013bf8:	a009883a 	mov	r4,r20
 2013bfc:	897fffcc 	andi	r5,r17,65535
 2013c00:	200d0cc0 	call	200d0cc <__mulsi3>
 2013c04:	880ad43a 	srli	r5,r17,16
 2013c08:	80ffffcc 	andi	r3,r16,65535
 2013c0c:	a8c7883a 	add	r3,r21,r3
 2013c10:	a009883a 	mov	r4,r20
 2013c14:	10e3883a 	add	r17,r2,r3
 2013c18:	8020d43a 	srli	r16,r16,16
 2013c1c:	200d0cc0 	call	200d0cc <__mulsi3>
 2013c20:	8806d43a 	srli	r3,r17,16
 2013c24:	1405883a 	add	r2,r2,r16
 2013c28:	9cc00104 	addi	r19,r19,4
 2013c2c:	1887883a 	add	r3,r3,r2
 2013c30:	90c0008d 	sth	r3,2(r18)
 2013c34:	9440000d 	sth	r17,0(r18)
 2013c38:	182ad43a 	srli	r21,r3,16
 2013c3c:	94800104 	addi	r18,r18,4
 2013c40:	9f3feb36 	bltu	r19,fp,2013bf0 <__multiply+0xec>
 2013c44:	95400015 	stw	r21,0(r18)
 2013c48:	b9000017 	ldw	r4,0(r23)
 2013c4c:	202ad43a 	srli	r21,r4,16
 2013c50:	a8001c26 	beq	r21,zero,2013cc4 <__multiply+0x1c0>
 2013c54:	d9000117 	ldw	r4,4(sp)
 2013c58:	dd000017 	ldw	r20,0(sp)
 2013c5c:	002d883a 	mov	r22,zero
 2013c60:	24c00017 	ldw	r19,0(r4)
 2013c64:	2025883a 	mov	r18,r4
 2013c68:	9823883a 	mov	r17,r19
 2013c6c:	a4000017 	ldw	r16,0(r20)
 2013c70:	a809883a 	mov	r4,r21
 2013c74:	a5000104 	addi	r20,r20,4
 2013c78:	817fffcc 	andi	r5,r16,65535
 2013c7c:	200d0cc0 	call	200d0cc <__mulsi3>
 2013c80:	8806d43a 	srli	r3,r17,16
 2013c84:	800ad43a 	srli	r5,r16,16
 2013c88:	94c0000d 	sth	r19,0(r18)
 2013c8c:	b0c7883a 	add	r3,r22,r3
 2013c90:	10e1883a 	add	r16,r2,r3
 2013c94:	9400008d 	sth	r16,2(r18)
 2013c98:	a809883a 	mov	r4,r21
 2013c9c:	94800104 	addi	r18,r18,4
 2013ca0:	200d0cc0 	call	200d0cc <__mulsi3>
 2013ca4:	94400017 	ldw	r17,0(r18)
 2013ca8:	8020d43a 	srli	r16,r16,16
 2013cac:	88ffffcc 	andi	r3,r17,65535
 2013cb0:	10c5883a 	add	r2,r2,r3
 2013cb4:	80a7883a 	add	r19,r16,r2
 2013cb8:	982cd43a 	srli	r22,r19,16
 2013cbc:	a73feb36 	bltu	r20,fp,2013c6c <__multiply+0x168>
 2013cc0:	94c00015 	stw	r19,0(r18)
 2013cc4:	d8800217 	ldw	r2,8(sp)
 2013cc8:	bdc00104 	addi	r23,r23,4
 2013ccc:	b880042e 	bgeu	r23,r2,2013ce0 <__multiply+0x1dc>
 2013cd0:	d8c00117 	ldw	r3,4(sp)
 2013cd4:	18c00104 	addi	r3,r3,4
 2013cd8:	d8c00115 	stw	r3,4(sp)
 2013cdc:	003fbe06 	br	2013bd8 <__multiply+0xd4>
 2013ce0:	d9000417 	ldw	r4,16(sp)
 2013ce4:	01000c0e 	bge	zero,r4,2013d18 <__multiply+0x214>
 2013ce8:	d8c00317 	ldw	r3,12(sp)
 2013cec:	18bfff17 	ldw	r2,-4(r3)
 2013cf0:	18ffff04 	addi	r3,r3,-4
 2013cf4:	10000326 	beq	r2,zero,2013d04 <__multiply+0x200>
 2013cf8:	00000706 	br	2013d18 <__multiply+0x214>
 2013cfc:	18800017 	ldw	r2,0(r3)
 2013d00:	1000051e 	bne	r2,zero,2013d18 <__multiply+0x214>
 2013d04:	d9000417 	ldw	r4,16(sp)
 2013d08:	18ffff04 	addi	r3,r3,-4
 2013d0c:	213fffc4 	addi	r4,r4,-1
 2013d10:	d9000415 	stw	r4,16(sp)
 2013d14:	203ff91e 	bne	r4,zero,2013cfc <__multiply+0x1f8>
 2013d18:	d8800417 	ldw	r2,16(sp)
 2013d1c:	d8c00517 	ldw	r3,20(sp)
 2013d20:	18800415 	stw	r2,16(r3)
 2013d24:	1805883a 	mov	r2,r3
 2013d28:	dfc00f17 	ldw	ra,60(sp)
 2013d2c:	df000e17 	ldw	fp,56(sp)
 2013d30:	ddc00d17 	ldw	r23,52(sp)
 2013d34:	dd800c17 	ldw	r22,48(sp)
 2013d38:	dd400b17 	ldw	r21,44(sp)
 2013d3c:	dd000a17 	ldw	r20,40(sp)
 2013d40:	dcc00917 	ldw	r19,36(sp)
 2013d44:	dc800817 	ldw	r18,32(sp)
 2013d48:	dc400717 	ldw	r17,28(sp)
 2013d4c:	dc000617 	ldw	r16,24(sp)
 2013d50:	dec01004 	addi	sp,sp,64
 2013d54:	f800283a 	ret

02013d58 <__i2b>:
 2013d58:	defffd04 	addi	sp,sp,-12
 2013d5c:	dc000015 	stw	r16,0(sp)
 2013d60:	04000044 	movi	r16,1
 2013d64:	dc800115 	stw	r18,4(sp)
 2013d68:	2825883a 	mov	r18,r5
 2013d6c:	800b883a 	mov	r5,r16
 2013d70:	dfc00215 	stw	ra,8(sp)
 2013d74:	20135f40 	call	20135f4 <_Balloc>
 2013d78:	14000415 	stw	r16,16(r2)
 2013d7c:	14800515 	stw	r18,20(r2)
 2013d80:	dfc00217 	ldw	ra,8(sp)
 2013d84:	dc800117 	ldw	r18,4(sp)
 2013d88:	dc000017 	ldw	r16,0(sp)
 2013d8c:	dec00304 	addi	sp,sp,12
 2013d90:	f800283a 	ret

02013d94 <__multadd>:
 2013d94:	defff604 	addi	sp,sp,-40
 2013d98:	dd800615 	stw	r22,24(sp)
 2013d9c:	2d800417 	ldw	r22,16(r5)
 2013da0:	df000815 	stw	fp,32(sp)
 2013da4:	ddc00715 	stw	r23,28(sp)
 2013da8:	dd400515 	stw	r21,20(sp)
 2013dac:	dd000415 	stw	r20,16(sp)
 2013db0:	dcc00315 	stw	r19,12(sp)
 2013db4:	dc800215 	stw	r18,8(sp)
 2013db8:	dfc00915 	stw	ra,36(sp)
 2013dbc:	dc400115 	stw	r17,4(sp)
 2013dc0:	dc000015 	stw	r16,0(sp)
 2013dc4:	282f883a 	mov	r23,r5
 2013dc8:	2039883a 	mov	fp,r4
 2013dcc:	302b883a 	mov	r21,r6
 2013dd0:	3829883a 	mov	r20,r7
 2013dd4:	2c800504 	addi	r18,r5,20
 2013dd8:	0027883a 	mov	r19,zero
 2013ddc:	94400017 	ldw	r17,0(r18)
 2013de0:	a80b883a 	mov	r5,r21
 2013de4:	9cc00044 	addi	r19,r19,1
 2013de8:	893fffcc 	andi	r4,r17,65535
 2013dec:	200d0cc0 	call	200d0cc <__mulsi3>
 2013df0:	8808d43a 	srli	r4,r17,16
 2013df4:	1521883a 	add	r16,r2,r20
 2013df8:	a80b883a 	mov	r5,r21
 2013dfc:	200d0cc0 	call	200d0cc <__mulsi3>
 2013e00:	8008d43a 	srli	r4,r16,16
 2013e04:	843fffcc 	andi	r16,r16,65535
 2013e08:	1105883a 	add	r2,r2,r4
 2013e0c:	1006943a 	slli	r3,r2,16
 2013e10:	1028d43a 	srli	r20,r2,16
 2013e14:	1c07883a 	add	r3,r3,r16
 2013e18:	90c00015 	stw	r3,0(r18)
 2013e1c:	94800104 	addi	r18,r18,4
 2013e20:	9dbfee16 	blt	r19,r22,2013ddc <__multadd+0x48>
 2013e24:	a0000826 	beq	r20,zero,2013e48 <__multadd+0xb4>
 2013e28:	b8800217 	ldw	r2,8(r23)
 2013e2c:	b080130e 	bge	r22,r2,2013e7c <__multadd+0xe8>
 2013e30:	b585883a 	add	r2,r22,r22
 2013e34:	1085883a 	add	r2,r2,r2
 2013e38:	15c5883a 	add	r2,r2,r23
 2013e3c:	b0c00044 	addi	r3,r22,1
 2013e40:	15000515 	stw	r20,20(r2)
 2013e44:	b8c00415 	stw	r3,16(r23)
 2013e48:	b805883a 	mov	r2,r23
 2013e4c:	dfc00917 	ldw	ra,36(sp)
 2013e50:	df000817 	ldw	fp,32(sp)
 2013e54:	ddc00717 	ldw	r23,28(sp)
 2013e58:	dd800617 	ldw	r22,24(sp)
 2013e5c:	dd400517 	ldw	r21,20(sp)
 2013e60:	dd000417 	ldw	r20,16(sp)
 2013e64:	dcc00317 	ldw	r19,12(sp)
 2013e68:	dc800217 	ldw	r18,8(sp)
 2013e6c:	dc400117 	ldw	r17,4(sp)
 2013e70:	dc000017 	ldw	r16,0(sp)
 2013e74:	dec00a04 	addi	sp,sp,40
 2013e78:	f800283a 	ret
 2013e7c:	b9400117 	ldw	r5,4(r23)
 2013e80:	e009883a 	mov	r4,fp
 2013e84:	29400044 	addi	r5,r5,1
 2013e88:	20135f40 	call	20135f4 <_Balloc>
 2013e8c:	b9800417 	ldw	r6,16(r23)
 2013e90:	b9400304 	addi	r5,r23,12
 2013e94:	11000304 	addi	r4,r2,12
 2013e98:	318d883a 	add	r6,r6,r6
 2013e9c:	318d883a 	add	r6,r6,r6
 2013ea0:	31800204 	addi	r6,r6,8
 2013ea4:	1023883a 	mov	r17,r2
 2013ea8:	2012ef40 	call	2012ef4 <memcpy>
 2013eac:	b80b883a 	mov	r5,r23
 2013eb0:	e009883a 	mov	r4,fp
 2013eb4:	20130740 	call	2013074 <_Bfree>
 2013eb8:	882f883a 	mov	r23,r17
 2013ebc:	003fdc06 	br	2013e30 <__multadd+0x9c>

02013ec0 <__pow5mult>:
 2013ec0:	defffa04 	addi	sp,sp,-24
 2013ec4:	308000cc 	andi	r2,r6,3
 2013ec8:	dd000415 	stw	r20,16(sp)
 2013ecc:	dcc00315 	stw	r19,12(sp)
 2013ed0:	dc000015 	stw	r16,0(sp)
 2013ed4:	dfc00515 	stw	ra,20(sp)
 2013ed8:	dc800215 	stw	r18,8(sp)
 2013edc:	dc400115 	stw	r17,4(sp)
 2013ee0:	3021883a 	mov	r16,r6
 2013ee4:	2027883a 	mov	r19,r4
 2013ee8:	2829883a 	mov	r20,r5
 2013eec:	10002b1e 	bne	r2,zero,2013f9c <__pow5mult+0xdc>
 2013ef0:	8025d0ba 	srai	r18,r16,2
 2013ef4:	90001b26 	beq	r18,zero,2013f64 <__pow5mult+0xa4>
 2013ef8:	9c001217 	ldw	r16,72(r19)
 2013efc:	8000081e 	bne	r16,zero,2013f20 <__pow5mult+0x60>
 2013f00:	00003006 	br	2013fc4 <__pow5mult+0x104>
 2013f04:	800b883a 	mov	r5,r16
 2013f08:	800d883a 	mov	r6,r16
 2013f0c:	9809883a 	mov	r4,r19
 2013f10:	90001426 	beq	r18,zero,2013f64 <__pow5mult+0xa4>
 2013f14:	80800017 	ldw	r2,0(r16)
 2013f18:	10001b26 	beq	r2,zero,2013f88 <__pow5mult+0xc8>
 2013f1c:	1021883a 	mov	r16,r2
 2013f20:	9080004c 	andi	r2,r18,1
 2013f24:	1005003a 	cmpeq	r2,r2,zero
 2013f28:	9025d07a 	srai	r18,r18,1
 2013f2c:	800d883a 	mov	r6,r16
 2013f30:	9809883a 	mov	r4,r19
 2013f34:	a00b883a 	mov	r5,r20
 2013f38:	103ff21e 	bne	r2,zero,2013f04 <__pow5mult+0x44>
 2013f3c:	2013b040 	call	2013b04 <__multiply>
 2013f40:	a00b883a 	mov	r5,r20
 2013f44:	9809883a 	mov	r4,r19
 2013f48:	1023883a 	mov	r17,r2
 2013f4c:	20130740 	call	2013074 <_Bfree>
 2013f50:	8829883a 	mov	r20,r17
 2013f54:	800b883a 	mov	r5,r16
 2013f58:	800d883a 	mov	r6,r16
 2013f5c:	9809883a 	mov	r4,r19
 2013f60:	903fec1e 	bne	r18,zero,2013f14 <__pow5mult+0x54>
 2013f64:	a005883a 	mov	r2,r20
 2013f68:	dfc00517 	ldw	ra,20(sp)
 2013f6c:	dd000417 	ldw	r20,16(sp)
 2013f70:	dcc00317 	ldw	r19,12(sp)
 2013f74:	dc800217 	ldw	r18,8(sp)
 2013f78:	dc400117 	ldw	r17,4(sp)
 2013f7c:	dc000017 	ldw	r16,0(sp)
 2013f80:	dec00604 	addi	sp,sp,24
 2013f84:	f800283a 	ret
 2013f88:	2013b040 	call	2013b04 <__multiply>
 2013f8c:	80800015 	stw	r2,0(r16)
 2013f90:	1021883a 	mov	r16,r2
 2013f94:	10000015 	stw	zero,0(r2)
 2013f98:	003fe106 	br	2013f20 <__pow5mult+0x60>
 2013f9c:	1085883a 	add	r2,r2,r2
 2013fa0:	00c080b4 	movhi	r3,514
 2013fa4:	18f00f04 	addi	r3,r3,-16324
 2013fa8:	1085883a 	add	r2,r2,r2
 2013fac:	10c5883a 	add	r2,r2,r3
 2013fb0:	11bfff17 	ldw	r6,-4(r2)
 2013fb4:	000f883a 	mov	r7,zero
 2013fb8:	2013d940 	call	2013d94 <__multadd>
 2013fbc:	1029883a 	mov	r20,r2
 2013fc0:	003fcb06 	br	2013ef0 <__pow5mult+0x30>
 2013fc4:	9809883a 	mov	r4,r19
 2013fc8:	01409c44 	movi	r5,625
 2013fcc:	2013d580 	call	2013d58 <__i2b>
 2013fd0:	98801215 	stw	r2,72(r19)
 2013fd4:	1021883a 	mov	r16,r2
 2013fd8:	10000015 	stw	zero,0(r2)
 2013fdc:	003fd006 	br	2013f20 <__pow5mult+0x60>

02013fe0 <__s2b>:
 2013fe0:	defff904 	addi	sp,sp,-28
 2013fe4:	dcc00315 	stw	r19,12(sp)
 2013fe8:	dc800215 	stw	r18,8(sp)
 2013fec:	2827883a 	mov	r19,r5
 2013ff0:	2025883a 	mov	r18,r4
 2013ff4:	01400244 	movi	r5,9
 2013ff8:	39000204 	addi	r4,r7,8
 2013ffc:	dd000415 	stw	r20,16(sp)
 2014000:	dc400115 	stw	r17,4(sp)
 2014004:	dfc00615 	stw	ra,24(sp)
 2014008:	dd400515 	stw	r21,20(sp)
 201400c:	dc000015 	stw	r16,0(sp)
 2014010:	3829883a 	mov	r20,r7
 2014014:	3023883a 	mov	r17,r6
 2014018:	200cffc0 	call	200cffc <__divsi3>
 201401c:	00c00044 	movi	r3,1
 2014020:	1880350e 	bge	r3,r2,20140f8 <__s2b+0x118>
 2014024:	000b883a 	mov	r5,zero
 2014028:	18c7883a 	add	r3,r3,r3
 201402c:	29400044 	addi	r5,r5,1
 2014030:	18bffd16 	blt	r3,r2,2014028 <__s2b+0x48>
 2014034:	9009883a 	mov	r4,r18
 2014038:	20135f40 	call	20135f4 <_Balloc>
 201403c:	1011883a 	mov	r8,r2
 2014040:	d8800717 	ldw	r2,28(sp)
 2014044:	00c00044 	movi	r3,1
 2014048:	01800244 	movi	r6,9
 201404c:	40800515 	stw	r2,20(r8)
 2014050:	40c00415 	stw	r3,16(r8)
 2014054:	3440260e 	bge	r6,r17,20140f0 <__s2b+0x110>
 2014058:	3021883a 	mov	r16,r6
 201405c:	99ab883a 	add	r21,r19,r6
 2014060:	9c05883a 	add	r2,r19,r16
 2014064:	11c00007 	ldb	r7,0(r2)
 2014068:	400b883a 	mov	r5,r8
 201406c:	9009883a 	mov	r4,r18
 2014070:	39fff404 	addi	r7,r7,-48
 2014074:	01800284 	movi	r6,10
 2014078:	2013d940 	call	2013d94 <__multadd>
 201407c:	84000044 	addi	r16,r16,1
 2014080:	1011883a 	mov	r8,r2
 2014084:	8c3ff61e 	bne	r17,r16,2014060 <__s2b+0x80>
 2014088:	ac45883a 	add	r2,r21,r17
 201408c:	117ffe04 	addi	r5,r2,-8
 2014090:	880d883a 	mov	r6,r17
 2014094:	35000c0e 	bge	r6,r20,20140c8 <__s2b+0xe8>
 2014098:	a185c83a 	sub	r2,r20,r6
 201409c:	2821883a 	mov	r16,r5
 20140a0:	28a3883a 	add	r17,r5,r2
 20140a4:	81c00007 	ldb	r7,0(r16)
 20140a8:	400b883a 	mov	r5,r8
 20140ac:	9009883a 	mov	r4,r18
 20140b0:	39fff404 	addi	r7,r7,-48
 20140b4:	01800284 	movi	r6,10
 20140b8:	2013d940 	call	2013d94 <__multadd>
 20140bc:	84000044 	addi	r16,r16,1
 20140c0:	1011883a 	mov	r8,r2
 20140c4:	847ff71e 	bne	r16,r17,20140a4 <__s2b+0xc4>
 20140c8:	4005883a 	mov	r2,r8
 20140cc:	dfc00617 	ldw	ra,24(sp)
 20140d0:	dd400517 	ldw	r21,20(sp)
 20140d4:	dd000417 	ldw	r20,16(sp)
 20140d8:	dcc00317 	ldw	r19,12(sp)
 20140dc:	dc800217 	ldw	r18,8(sp)
 20140e0:	dc400117 	ldw	r17,4(sp)
 20140e4:	dc000017 	ldw	r16,0(sp)
 20140e8:	dec00704 	addi	sp,sp,28
 20140ec:	f800283a 	ret
 20140f0:	99400284 	addi	r5,r19,10
 20140f4:	003fe706 	br	2014094 <__s2b+0xb4>
 20140f8:	000b883a 	mov	r5,zero
 20140fc:	003fcd06 	br	2014034 <__s2b+0x54>

02014100 <_realloc_r>:
 2014100:	defff404 	addi	sp,sp,-48
 2014104:	dd800815 	stw	r22,32(sp)
 2014108:	dc800415 	stw	r18,16(sp)
 201410c:	dc400315 	stw	r17,12(sp)
 2014110:	dfc00b15 	stw	ra,44(sp)
 2014114:	df000a15 	stw	fp,40(sp)
 2014118:	ddc00915 	stw	r23,36(sp)
 201411c:	dd400715 	stw	r21,28(sp)
 2014120:	dd000615 	stw	r20,24(sp)
 2014124:	dcc00515 	stw	r19,20(sp)
 2014128:	dc000215 	stw	r16,8(sp)
 201412c:	2825883a 	mov	r18,r5
 2014130:	3023883a 	mov	r17,r6
 2014134:	202d883a 	mov	r22,r4
 2014138:	2800c926 	beq	r5,zero,2014460 <_realloc_r+0x360>
 201413c:	2017ccc0 	call	2017ccc <__malloc_lock>
 2014140:	943ffe04 	addi	r16,r18,-8
 2014144:	88c002c4 	addi	r3,r17,11
 2014148:	00800584 	movi	r2,22
 201414c:	82000117 	ldw	r8,4(r16)
 2014150:	10c01b2e 	bgeu	r2,r3,20141c0 <_realloc_r+0xc0>
 2014154:	00bffe04 	movi	r2,-8
 2014158:	188e703a 	and	r7,r3,r2
 201415c:	3839883a 	mov	fp,r7
 2014160:	38001a16 	blt	r7,zero,20141cc <_realloc_r+0xcc>
 2014164:	e4401936 	bltu	fp,r17,20141cc <_realloc_r+0xcc>
 2014168:	013fff04 	movi	r4,-4
 201416c:	4126703a 	and	r19,r8,r4
 2014170:	99c02616 	blt	r19,r7,201420c <_realloc_r+0x10c>
 2014174:	802b883a 	mov	r21,r16
 2014178:	9829883a 	mov	r20,r19
 201417c:	84000204 	addi	r16,r16,8
 2014180:	a80f883a 	mov	r7,r21
 2014184:	a70dc83a 	sub	r6,r20,fp
 2014188:	008003c4 	movi	r2,15
 201418c:	1180c136 	bltu	r2,r6,2014494 <_realloc_r+0x394>
 2014190:	38800117 	ldw	r2,4(r7)
 2014194:	a549883a 	add	r4,r20,r21
 2014198:	1080004c 	andi	r2,r2,1
 201419c:	a084b03a 	or	r2,r20,r2
 20141a0:	38800115 	stw	r2,4(r7)
 20141a4:	20c00117 	ldw	r3,4(r4)
 20141a8:	18c00054 	ori	r3,r3,1
 20141ac:	20c00115 	stw	r3,4(r4)
 20141b0:	b009883a 	mov	r4,r22
 20141b4:	2017cec0 	call	2017cec <__malloc_unlock>
 20141b8:	8023883a 	mov	r17,r16
 20141bc:	00000606 	br	20141d8 <_realloc_r+0xd8>
 20141c0:	01c00404 	movi	r7,16
 20141c4:	3839883a 	mov	fp,r7
 20141c8:	e47fe72e 	bgeu	fp,r17,2014168 <_realloc_r+0x68>
 20141cc:	00800304 	movi	r2,12
 20141d0:	0023883a 	mov	r17,zero
 20141d4:	b0800015 	stw	r2,0(r22)
 20141d8:	8805883a 	mov	r2,r17
 20141dc:	dfc00b17 	ldw	ra,44(sp)
 20141e0:	df000a17 	ldw	fp,40(sp)
 20141e4:	ddc00917 	ldw	r23,36(sp)
 20141e8:	dd800817 	ldw	r22,32(sp)
 20141ec:	dd400717 	ldw	r21,28(sp)
 20141f0:	dd000617 	ldw	r20,24(sp)
 20141f4:	dcc00517 	ldw	r19,20(sp)
 20141f8:	dc800417 	ldw	r18,16(sp)
 20141fc:	dc400317 	ldw	r17,12(sp)
 2014200:	dc000217 	ldw	r16,8(sp)
 2014204:	dec00c04 	addi	sp,sp,48
 2014208:	f800283a 	ret
 201420c:	008080b4 	movhi	r2,514
 2014210:	10b02804 	addi	r2,r2,-16224
 2014214:	12400217 	ldw	r9,8(r2)
 2014218:	84cd883a 	add	r6,r16,r19
 201421c:	802b883a 	mov	r21,r16
 2014220:	3240b926 	beq	r6,r9,2014508 <_realloc_r+0x408>
 2014224:	31400117 	ldw	r5,4(r6)
 2014228:	00bfff84 	movi	r2,-2
 201422c:	2884703a 	and	r2,r5,r2
 2014230:	1185883a 	add	r2,r2,r6
 2014234:	10c00117 	ldw	r3,4(r2)
 2014238:	18c0004c 	andi	r3,r3,1
 201423c:	1807003a 	cmpeq	r3,r3,zero
 2014240:	1800a326 	beq	r3,zero,20144d0 <_realloc_r+0x3d0>
 2014244:	2908703a 	and	r4,r5,r4
 2014248:	9929883a 	add	r20,r19,r4
 201424c:	a1c0a30e 	bge	r20,r7,20144dc <_realloc_r+0x3dc>
 2014250:	4080004c 	andi	r2,r8,1
 2014254:	1000551e 	bne	r2,zero,20143ac <_realloc_r+0x2ac>
 2014258:	80800017 	ldw	r2,0(r16)
 201425c:	80afc83a 	sub	r23,r16,r2
 2014260:	b8c00117 	ldw	r3,4(r23)
 2014264:	00bfff04 	movi	r2,-4
 2014268:	1884703a 	and	r2,r3,r2
 201426c:	30002e26 	beq	r6,zero,2014328 <_realloc_r+0x228>
 2014270:	3240b926 	beq	r6,r9,2014558 <_realloc_r+0x458>
 2014274:	98a9883a 	add	r20,r19,r2
 2014278:	2509883a 	add	r4,r4,r20
 201427c:	d9000015 	stw	r4,0(sp)
 2014280:	21c02a16 	blt	r4,r7,201432c <_realloc_r+0x22c>
 2014284:	30800317 	ldw	r2,12(r6)
 2014288:	30c00217 	ldw	r3,8(r6)
 201428c:	01400904 	movi	r5,36
 2014290:	99bfff04 	addi	r6,r19,-4
 2014294:	18800315 	stw	r2,12(r3)
 2014298:	10c00215 	stw	r3,8(r2)
 201429c:	b9000317 	ldw	r4,12(r23)
 20142a0:	b8800217 	ldw	r2,8(r23)
 20142a4:	b82b883a 	mov	r21,r23
 20142a8:	bc000204 	addi	r16,r23,8
 20142ac:	20800215 	stw	r2,8(r4)
 20142b0:	11000315 	stw	r4,12(r2)
 20142b4:	2980e436 	bltu	r5,r6,2014648 <_realloc_r+0x548>
 20142b8:	008004c4 	movi	r2,19
 20142bc:	9009883a 	mov	r4,r18
 20142c0:	8011883a 	mov	r8,r16
 20142c4:	11800f2e 	bgeu	r2,r6,2014304 <_realloc_r+0x204>
 20142c8:	90800017 	ldw	r2,0(r18)
 20142cc:	ba000404 	addi	r8,r23,16
 20142d0:	91000204 	addi	r4,r18,8
 20142d4:	b8800215 	stw	r2,8(r23)
 20142d8:	90c00117 	ldw	r3,4(r18)
 20142dc:	008006c4 	movi	r2,27
 20142e0:	b8c00315 	stw	r3,12(r23)
 20142e4:	1180072e 	bgeu	r2,r6,2014304 <_realloc_r+0x204>
 20142e8:	90c00217 	ldw	r3,8(r18)
 20142ec:	ba000604 	addi	r8,r23,24
 20142f0:	91000404 	addi	r4,r18,16
 20142f4:	b8c00415 	stw	r3,16(r23)
 20142f8:	90800317 	ldw	r2,12(r18)
 20142fc:	b8800515 	stw	r2,20(r23)
 2014300:	3140e726 	beq	r6,r5,20146a0 <_realloc_r+0x5a0>
 2014304:	20800017 	ldw	r2,0(r4)
 2014308:	dd000017 	ldw	r20,0(sp)
 201430c:	b80f883a 	mov	r7,r23
 2014310:	40800015 	stw	r2,0(r8)
 2014314:	20c00117 	ldw	r3,4(r4)
 2014318:	40c00115 	stw	r3,4(r8)
 201431c:	20800217 	ldw	r2,8(r4)
 2014320:	40800215 	stw	r2,8(r8)
 2014324:	003f9706 	br	2014184 <_realloc_r+0x84>
 2014328:	98a9883a 	add	r20,r19,r2
 201432c:	a1c01f16 	blt	r20,r7,20143ac <_realloc_r+0x2ac>
 2014330:	b8c00317 	ldw	r3,12(r23)
 2014334:	b8800217 	ldw	r2,8(r23)
 2014338:	99bfff04 	addi	r6,r19,-4
 201433c:	01400904 	movi	r5,36
 2014340:	b82b883a 	mov	r21,r23
 2014344:	18800215 	stw	r2,8(r3)
 2014348:	10c00315 	stw	r3,12(r2)
 201434c:	bc000204 	addi	r16,r23,8
 2014350:	2980c336 	bltu	r5,r6,2014660 <_realloc_r+0x560>
 2014354:	008004c4 	movi	r2,19
 2014358:	9009883a 	mov	r4,r18
 201435c:	8011883a 	mov	r8,r16
 2014360:	11800f2e 	bgeu	r2,r6,20143a0 <_realloc_r+0x2a0>
 2014364:	90800017 	ldw	r2,0(r18)
 2014368:	ba000404 	addi	r8,r23,16
 201436c:	91000204 	addi	r4,r18,8
 2014370:	b8800215 	stw	r2,8(r23)
 2014374:	90c00117 	ldw	r3,4(r18)
 2014378:	008006c4 	movi	r2,27
 201437c:	b8c00315 	stw	r3,12(r23)
 2014380:	1180072e 	bgeu	r2,r6,20143a0 <_realloc_r+0x2a0>
 2014384:	90c00217 	ldw	r3,8(r18)
 2014388:	ba000604 	addi	r8,r23,24
 201438c:	91000404 	addi	r4,r18,16
 2014390:	b8c00415 	stw	r3,16(r23)
 2014394:	90800317 	ldw	r2,12(r18)
 2014398:	b8800515 	stw	r2,20(r23)
 201439c:	3140c726 	beq	r6,r5,20146bc <_realloc_r+0x5bc>
 20143a0:	20800017 	ldw	r2,0(r4)
 20143a4:	b80f883a 	mov	r7,r23
 20143a8:	003fd906 	br	2014310 <_realloc_r+0x210>
 20143ac:	880b883a 	mov	r5,r17
 20143b0:	b009883a 	mov	r4,r22
 20143b4:	200d68c0 	call	200d68c <_malloc_r>
 20143b8:	1023883a 	mov	r17,r2
 20143bc:	10002526 	beq	r2,zero,2014454 <_realloc_r+0x354>
 20143c0:	80800117 	ldw	r2,4(r16)
 20143c4:	00ffff84 	movi	r3,-2
 20143c8:	893ffe04 	addi	r4,r17,-8
 20143cc:	10c4703a 	and	r2,r2,r3
 20143d0:	8085883a 	add	r2,r16,r2
 20143d4:	20809526 	beq	r4,r2,201462c <_realloc_r+0x52c>
 20143d8:	99bfff04 	addi	r6,r19,-4
 20143dc:	01c00904 	movi	r7,36
 20143e0:	39804536 	bltu	r7,r6,20144f8 <_realloc_r+0x3f8>
 20143e4:	008004c4 	movi	r2,19
 20143e8:	9009883a 	mov	r4,r18
 20143ec:	880b883a 	mov	r5,r17
 20143f0:	11800f2e 	bgeu	r2,r6,2014430 <_realloc_r+0x330>
 20143f4:	90800017 	ldw	r2,0(r18)
 20143f8:	89400204 	addi	r5,r17,8
 20143fc:	91000204 	addi	r4,r18,8
 2014400:	88800015 	stw	r2,0(r17)
 2014404:	90c00117 	ldw	r3,4(r18)
 2014408:	008006c4 	movi	r2,27
 201440c:	88c00115 	stw	r3,4(r17)
 2014410:	1180072e 	bgeu	r2,r6,2014430 <_realloc_r+0x330>
 2014414:	90c00217 	ldw	r3,8(r18)
 2014418:	89400404 	addi	r5,r17,16
 201441c:	91000404 	addi	r4,r18,16
 2014420:	88c00215 	stw	r3,8(r17)
 2014424:	90800317 	ldw	r2,12(r18)
 2014428:	88800315 	stw	r2,12(r17)
 201442c:	31c09126 	beq	r6,r7,2014674 <_realloc_r+0x574>
 2014430:	20800017 	ldw	r2,0(r4)
 2014434:	28800015 	stw	r2,0(r5)
 2014438:	20c00117 	ldw	r3,4(r4)
 201443c:	28c00115 	stw	r3,4(r5)
 2014440:	20800217 	ldw	r2,8(r4)
 2014444:	28800215 	stw	r2,8(r5)
 2014448:	900b883a 	mov	r5,r18
 201444c:	b009883a 	mov	r4,r22
 2014450:	20122880 	call	2012288 <_free_r>
 2014454:	b009883a 	mov	r4,r22
 2014458:	2017cec0 	call	2017cec <__malloc_unlock>
 201445c:	003f5e06 	br	20141d8 <_realloc_r+0xd8>
 2014460:	300b883a 	mov	r5,r6
 2014464:	dfc00b17 	ldw	ra,44(sp)
 2014468:	df000a17 	ldw	fp,40(sp)
 201446c:	ddc00917 	ldw	r23,36(sp)
 2014470:	dd800817 	ldw	r22,32(sp)
 2014474:	dd400717 	ldw	r21,28(sp)
 2014478:	dd000617 	ldw	r20,24(sp)
 201447c:	dcc00517 	ldw	r19,20(sp)
 2014480:	dc800417 	ldw	r18,16(sp)
 2014484:	dc400317 	ldw	r17,12(sp)
 2014488:	dc000217 	ldw	r16,8(sp)
 201448c:	dec00c04 	addi	sp,sp,48
 2014490:	200d68c1 	jmpi	200d68c <_malloc_r>
 2014494:	38800117 	ldw	r2,4(r7)
 2014498:	e54b883a 	add	r5,fp,r21
 201449c:	31000054 	ori	r4,r6,1
 20144a0:	1080004c 	andi	r2,r2,1
 20144a4:	1704b03a 	or	r2,r2,fp
 20144a8:	38800115 	stw	r2,4(r7)
 20144ac:	29000115 	stw	r4,4(r5)
 20144b0:	2987883a 	add	r3,r5,r6
 20144b4:	18800117 	ldw	r2,4(r3)
 20144b8:	29400204 	addi	r5,r5,8
 20144bc:	b009883a 	mov	r4,r22
 20144c0:	10800054 	ori	r2,r2,1
 20144c4:	18800115 	stw	r2,4(r3)
 20144c8:	20122880 	call	2012288 <_free_r>
 20144cc:	003f3806 	br	20141b0 <_realloc_r+0xb0>
 20144d0:	000d883a 	mov	r6,zero
 20144d4:	0009883a 	mov	r4,zero
 20144d8:	003f5d06 	br	2014250 <_realloc_r+0x150>
 20144dc:	30c00217 	ldw	r3,8(r6)
 20144e0:	30800317 	ldw	r2,12(r6)
 20144e4:	800f883a 	mov	r7,r16
 20144e8:	84000204 	addi	r16,r16,8
 20144ec:	10c00215 	stw	r3,8(r2)
 20144f0:	18800315 	stw	r2,12(r3)
 20144f4:	003f2306 	br	2014184 <_realloc_r+0x84>
 20144f8:	8809883a 	mov	r4,r17
 20144fc:	900b883a 	mov	r5,r18
 2014500:	2012f940 	call	2012f94 <memmove>
 2014504:	003fd006 	br	2014448 <_realloc_r+0x348>
 2014508:	30800117 	ldw	r2,4(r6)
 201450c:	e0c00404 	addi	r3,fp,16
 2014510:	1108703a 	and	r4,r2,r4
 2014514:	9905883a 	add	r2,r19,r4
 2014518:	10ff4d16 	blt	r2,r3,2014250 <_realloc_r+0x150>
 201451c:	1705c83a 	sub	r2,r2,fp
 2014520:	870b883a 	add	r5,r16,fp
 2014524:	10800054 	ori	r2,r2,1
 2014528:	28800115 	stw	r2,4(r5)
 201452c:	80c00117 	ldw	r3,4(r16)
 2014530:	008080b4 	movhi	r2,514
 2014534:	10b02804 	addi	r2,r2,-16224
 2014538:	b009883a 	mov	r4,r22
 201453c:	18c0004c 	andi	r3,r3,1
 2014540:	e0c6b03a 	or	r3,fp,r3
 2014544:	11400215 	stw	r5,8(r2)
 2014548:	80c00115 	stw	r3,4(r16)
 201454c:	2017cec0 	call	2017cec <__malloc_unlock>
 2014550:	84400204 	addi	r17,r16,8
 2014554:	003f2006 	br	20141d8 <_realloc_r+0xd8>
 2014558:	98a9883a 	add	r20,r19,r2
 201455c:	2509883a 	add	r4,r4,r20
 2014560:	e0800404 	addi	r2,fp,16
 2014564:	d9000115 	stw	r4,4(sp)
 2014568:	20bf7016 	blt	r4,r2,201432c <_realloc_r+0x22c>
 201456c:	b8c00317 	ldw	r3,12(r23)
 2014570:	b8800217 	ldw	r2,8(r23)
 2014574:	99bfff04 	addi	r6,r19,-4
 2014578:	01400904 	movi	r5,36
 201457c:	18800215 	stw	r2,8(r3)
 2014580:	10c00315 	stw	r3,12(r2)
 2014584:	bc400204 	addi	r17,r23,8
 2014588:	29804136 	bltu	r5,r6,2014690 <_realloc_r+0x590>
 201458c:	008004c4 	movi	r2,19
 2014590:	9009883a 	mov	r4,r18
 2014594:	880f883a 	mov	r7,r17
 2014598:	11800f2e 	bgeu	r2,r6,20145d8 <_realloc_r+0x4d8>
 201459c:	90800017 	ldw	r2,0(r18)
 20145a0:	b9c00404 	addi	r7,r23,16
 20145a4:	91000204 	addi	r4,r18,8
 20145a8:	b8800215 	stw	r2,8(r23)
 20145ac:	90c00117 	ldw	r3,4(r18)
 20145b0:	008006c4 	movi	r2,27
 20145b4:	b8c00315 	stw	r3,12(r23)
 20145b8:	1180072e 	bgeu	r2,r6,20145d8 <_realloc_r+0x4d8>
 20145bc:	90c00217 	ldw	r3,8(r18)
 20145c0:	b9c00604 	addi	r7,r23,24
 20145c4:	91000404 	addi	r4,r18,16
 20145c8:	b8c00415 	stw	r3,16(r23)
 20145cc:	90800317 	ldw	r2,12(r18)
 20145d0:	b8800515 	stw	r2,20(r23)
 20145d4:	31404026 	beq	r6,r5,20146d8 <_realloc_r+0x5d8>
 20145d8:	20800017 	ldw	r2,0(r4)
 20145dc:	38800015 	stw	r2,0(r7)
 20145e0:	20c00117 	ldw	r3,4(r4)
 20145e4:	38c00115 	stw	r3,4(r7)
 20145e8:	20800217 	ldw	r2,8(r4)
 20145ec:	38800215 	stw	r2,8(r7)
 20145f0:	d8c00117 	ldw	r3,4(sp)
 20145f4:	bf0b883a 	add	r5,r23,fp
 20145f8:	b009883a 	mov	r4,r22
 20145fc:	1f05c83a 	sub	r2,r3,fp
 2014600:	10800054 	ori	r2,r2,1
 2014604:	28800115 	stw	r2,4(r5)
 2014608:	b8c00117 	ldw	r3,4(r23)
 201460c:	008080b4 	movhi	r2,514
 2014610:	10b02804 	addi	r2,r2,-16224
 2014614:	11400215 	stw	r5,8(r2)
 2014618:	18c0004c 	andi	r3,r3,1
 201461c:	e0c6b03a 	or	r3,fp,r3
 2014620:	b8c00115 	stw	r3,4(r23)
 2014624:	2017cec0 	call	2017cec <__malloc_unlock>
 2014628:	003eeb06 	br	20141d8 <_realloc_r+0xd8>
 201462c:	20800117 	ldw	r2,4(r4)
 2014630:	00ffff04 	movi	r3,-4
 2014634:	800f883a 	mov	r7,r16
 2014638:	10c4703a 	and	r2,r2,r3
 201463c:	98a9883a 	add	r20,r19,r2
 2014640:	84000204 	addi	r16,r16,8
 2014644:	003ecf06 	br	2014184 <_realloc_r+0x84>
 2014648:	900b883a 	mov	r5,r18
 201464c:	8009883a 	mov	r4,r16
 2014650:	2012f940 	call	2012f94 <memmove>
 2014654:	dd000017 	ldw	r20,0(sp)
 2014658:	b80f883a 	mov	r7,r23
 201465c:	003ec906 	br	2014184 <_realloc_r+0x84>
 2014660:	900b883a 	mov	r5,r18
 2014664:	8009883a 	mov	r4,r16
 2014668:	2012f940 	call	2012f94 <memmove>
 201466c:	b80f883a 	mov	r7,r23
 2014670:	003ec406 	br	2014184 <_realloc_r+0x84>
 2014674:	90c00417 	ldw	r3,16(r18)
 2014678:	89400604 	addi	r5,r17,24
 201467c:	91000604 	addi	r4,r18,24
 2014680:	88c00415 	stw	r3,16(r17)
 2014684:	90800517 	ldw	r2,20(r18)
 2014688:	88800515 	stw	r2,20(r17)
 201468c:	003f6806 	br	2014430 <_realloc_r+0x330>
 2014690:	900b883a 	mov	r5,r18
 2014694:	8809883a 	mov	r4,r17
 2014698:	2012f940 	call	2012f94 <memmove>
 201469c:	003fd406 	br	20145f0 <_realloc_r+0x4f0>
 20146a0:	90c00417 	ldw	r3,16(r18)
 20146a4:	91000604 	addi	r4,r18,24
 20146a8:	ba000804 	addi	r8,r23,32
 20146ac:	b8c00615 	stw	r3,24(r23)
 20146b0:	90800517 	ldw	r2,20(r18)
 20146b4:	b8800715 	stw	r2,28(r23)
 20146b8:	003f1206 	br	2014304 <_realloc_r+0x204>
 20146bc:	90c00417 	ldw	r3,16(r18)
 20146c0:	91000604 	addi	r4,r18,24
 20146c4:	ba000804 	addi	r8,r23,32
 20146c8:	b8c00615 	stw	r3,24(r23)
 20146cc:	90800517 	ldw	r2,20(r18)
 20146d0:	b8800715 	stw	r2,28(r23)
 20146d4:	003f3206 	br	20143a0 <_realloc_r+0x2a0>
 20146d8:	90c00417 	ldw	r3,16(r18)
 20146dc:	91000604 	addi	r4,r18,24
 20146e0:	b9c00804 	addi	r7,r23,32
 20146e4:	b8c00615 	stw	r3,24(r23)
 20146e8:	90800517 	ldw	r2,20(r18)
 20146ec:	b8800715 	stw	r2,28(r23)
 20146f0:	003fb906 	br	20145d8 <_realloc_r+0x4d8>

020146f4 <__isinfd>:
 20146f4:	200d883a 	mov	r6,r4
 20146f8:	0109c83a 	sub	r4,zero,r4
 20146fc:	2188b03a 	or	r4,r4,r6
 2014700:	2008d7fa 	srli	r4,r4,31
 2014704:	00a00034 	movhi	r2,32768
 2014708:	10bfffc4 	addi	r2,r2,-1
 201470c:	1144703a 	and	r2,r2,r5
 2014710:	2088b03a 	or	r4,r4,r2
 2014714:	009ffc34 	movhi	r2,32752
 2014718:	1105c83a 	sub	r2,r2,r4
 201471c:	0087c83a 	sub	r3,zero,r2
 2014720:	10c4b03a 	or	r2,r2,r3
 2014724:	1004d7fa 	srli	r2,r2,31
 2014728:	00c00044 	movi	r3,1
 201472c:	1885c83a 	sub	r2,r3,r2
 2014730:	f800283a 	ret

02014734 <__isnand>:
 2014734:	200d883a 	mov	r6,r4
 2014738:	0109c83a 	sub	r4,zero,r4
 201473c:	2188b03a 	or	r4,r4,r6
 2014740:	2008d7fa 	srli	r4,r4,31
 2014744:	00a00034 	movhi	r2,32768
 2014748:	10bfffc4 	addi	r2,r2,-1
 201474c:	1144703a 	and	r2,r2,r5
 2014750:	2088b03a 	or	r4,r4,r2
 2014754:	009ffc34 	movhi	r2,32752
 2014758:	1105c83a 	sub	r2,r2,r4
 201475c:	1004d7fa 	srli	r2,r2,31
 2014760:	f800283a 	ret

02014764 <__sclose>:
 2014764:	2940038f 	ldh	r5,14(r5)
 2014768:	2014aac1 	jmpi	2014aac <_close_r>

0201476c <__sseek>:
 201476c:	defffe04 	addi	sp,sp,-8
 2014770:	dc000015 	stw	r16,0(sp)
 2014774:	2821883a 	mov	r16,r5
 2014778:	2940038f 	ldh	r5,14(r5)
 201477c:	dfc00115 	stw	ra,4(sp)
 2014780:	2014d240 	call	2014d24 <_lseek_r>
 2014784:	1007883a 	mov	r3,r2
 2014788:	00bfffc4 	movi	r2,-1
 201478c:	18800926 	beq	r3,r2,20147b4 <__sseek+0x48>
 2014790:	8080030b 	ldhu	r2,12(r16)
 2014794:	80c01415 	stw	r3,80(r16)
 2014798:	10840014 	ori	r2,r2,4096
 201479c:	8080030d 	sth	r2,12(r16)
 20147a0:	1805883a 	mov	r2,r3
 20147a4:	dfc00117 	ldw	ra,4(sp)
 20147a8:	dc000017 	ldw	r16,0(sp)
 20147ac:	dec00204 	addi	sp,sp,8
 20147b0:	f800283a 	ret
 20147b4:	8080030b 	ldhu	r2,12(r16)
 20147b8:	10bbffcc 	andi	r2,r2,61439
 20147bc:	8080030d 	sth	r2,12(r16)
 20147c0:	1805883a 	mov	r2,r3
 20147c4:	dfc00117 	ldw	ra,4(sp)
 20147c8:	dc000017 	ldw	r16,0(sp)
 20147cc:	dec00204 	addi	sp,sp,8
 20147d0:	f800283a 	ret

020147d4 <__swrite>:
 20147d4:	2880030b 	ldhu	r2,12(r5)
 20147d8:	defffb04 	addi	sp,sp,-20
 20147dc:	dcc00315 	stw	r19,12(sp)
 20147e0:	1080400c 	andi	r2,r2,256
 20147e4:	dc800215 	stw	r18,8(sp)
 20147e8:	dc400115 	stw	r17,4(sp)
 20147ec:	dc000015 	stw	r16,0(sp)
 20147f0:	3027883a 	mov	r19,r6
 20147f4:	3825883a 	mov	r18,r7
 20147f8:	dfc00415 	stw	ra,16(sp)
 20147fc:	2821883a 	mov	r16,r5
 2014800:	000d883a 	mov	r6,zero
 2014804:	01c00084 	movi	r7,2
 2014808:	2023883a 	mov	r17,r4
 201480c:	10000226 	beq	r2,zero,2014818 <__swrite+0x44>
 2014810:	2940038f 	ldh	r5,14(r5)
 2014814:	2014d240 	call	2014d24 <_lseek_r>
 2014818:	8080030b 	ldhu	r2,12(r16)
 201481c:	8140038f 	ldh	r5,14(r16)
 2014820:	8809883a 	mov	r4,r17
 2014824:	10bbffcc 	andi	r2,r2,61439
 2014828:	980d883a 	mov	r6,r19
 201482c:	900f883a 	mov	r7,r18
 2014830:	8080030d 	sth	r2,12(r16)
 2014834:	dfc00417 	ldw	ra,16(sp)
 2014838:	dcc00317 	ldw	r19,12(sp)
 201483c:	dc800217 	ldw	r18,8(sp)
 2014840:	dc400117 	ldw	r17,4(sp)
 2014844:	dc000017 	ldw	r16,0(sp)
 2014848:	dec00504 	addi	sp,sp,20
 201484c:	201496c1 	jmpi	201496c <_write_r>

02014850 <__sread>:
 2014850:	defffe04 	addi	sp,sp,-8
 2014854:	dc000015 	stw	r16,0(sp)
 2014858:	2821883a 	mov	r16,r5
 201485c:	2940038f 	ldh	r5,14(r5)
 2014860:	dfc00115 	stw	ra,4(sp)
 2014864:	2014d9c0 	call	2014d9c <_read_r>
 2014868:	1007883a 	mov	r3,r2
 201486c:	10000816 	blt	r2,zero,2014890 <__sread+0x40>
 2014870:	80801417 	ldw	r2,80(r16)
 2014874:	10c5883a 	add	r2,r2,r3
 2014878:	80801415 	stw	r2,80(r16)
 201487c:	1805883a 	mov	r2,r3
 2014880:	dfc00117 	ldw	ra,4(sp)
 2014884:	dc000017 	ldw	r16,0(sp)
 2014888:	dec00204 	addi	sp,sp,8
 201488c:	f800283a 	ret
 2014890:	8080030b 	ldhu	r2,12(r16)
 2014894:	10bbffcc 	andi	r2,r2,61439
 2014898:	8080030d 	sth	r2,12(r16)
 201489c:	1805883a 	mov	r2,r3
 20148a0:	dfc00117 	ldw	ra,4(sp)
 20148a4:	dc000017 	ldw	r16,0(sp)
 20148a8:	dec00204 	addi	sp,sp,8
 20148ac:	f800283a 	ret

020148b0 <strcmp>:
 20148b0:	2144b03a 	or	r2,r4,r5
 20148b4:	108000cc 	andi	r2,r2,3
 20148b8:	10001d1e 	bne	r2,zero,2014930 <strcmp+0x80>
 20148bc:	200f883a 	mov	r7,r4
 20148c0:	28800017 	ldw	r2,0(r5)
 20148c4:	21000017 	ldw	r4,0(r4)
 20148c8:	280d883a 	mov	r6,r5
 20148cc:	2080161e 	bne	r4,r2,2014928 <strcmp+0x78>
 20148d0:	023fbff4 	movhi	r8,65279
 20148d4:	423fbfc4 	addi	r8,r8,-257
 20148d8:	2207883a 	add	r3,r4,r8
 20148dc:	01602074 	movhi	r5,32897
 20148e0:	29602004 	addi	r5,r5,-32640
 20148e4:	1946703a 	and	r3,r3,r5
 20148e8:	0104303a 	nor	r2,zero,r4
 20148ec:	10c4703a 	and	r2,r2,r3
 20148f0:	10001c1e 	bne	r2,zero,2014964 <strcmp+0xb4>
 20148f4:	4013883a 	mov	r9,r8
 20148f8:	2811883a 	mov	r8,r5
 20148fc:	00000106 	br	2014904 <strcmp+0x54>
 2014900:	1800181e 	bne	r3,zero,2014964 <strcmp+0xb4>
 2014904:	39c00104 	addi	r7,r7,4
 2014908:	39000017 	ldw	r4,0(r7)
 201490c:	31800104 	addi	r6,r6,4
 2014910:	31400017 	ldw	r5,0(r6)
 2014914:	2245883a 	add	r2,r4,r9
 2014918:	1204703a 	and	r2,r2,r8
 201491c:	0106303a 	nor	r3,zero,r4
 2014920:	1886703a 	and	r3,r3,r2
 2014924:	217ff626 	beq	r4,r5,2014900 <strcmp+0x50>
 2014928:	3809883a 	mov	r4,r7
 201492c:	300b883a 	mov	r5,r6
 2014930:	20c00007 	ldb	r3,0(r4)
 2014934:	1800051e 	bne	r3,zero,201494c <strcmp+0x9c>
 2014938:	00000606 	br	2014954 <strcmp+0xa4>
 201493c:	21000044 	addi	r4,r4,1
 2014940:	20c00007 	ldb	r3,0(r4)
 2014944:	29400044 	addi	r5,r5,1
 2014948:	18000226 	beq	r3,zero,2014954 <strcmp+0xa4>
 201494c:	28800007 	ldb	r2,0(r5)
 2014950:	18bffa26 	beq	r3,r2,201493c <strcmp+0x8c>
 2014954:	20c00003 	ldbu	r3,0(r4)
 2014958:	28800003 	ldbu	r2,0(r5)
 201495c:	1885c83a 	sub	r2,r3,r2
 2014960:	f800283a 	ret
 2014964:	0005883a 	mov	r2,zero
 2014968:	f800283a 	ret

0201496c <_write_r>:
 201496c:	defffd04 	addi	sp,sp,-12
 2014970:	dc000015 	stw	r16,0(sp)
 2014974:	040080b4 	movhi	r16,514
 2014978:	843dfd04 	addi	r16,r16,-2060
 201497c:	dc400115 	stw	r17,4(sp)
 2014980:	80000015 	stw	zero,0(r16)
 2014984:	2023883a 	mov	r17,r4
 2014988:	2809883a 	mov	r4,r5
 201498c:	300b883a 	mov	r5,r6
 2014990:	380d883a 	mov	r6,r7
 2014994:	dfc00215 	stw	ra,8(sp)
 2014998:	20181980 	call	2018198 <write>
 201499c:	1007883a 	mov	r3,r2
 20149a0:	00bfffc4 	movi	r2,-1
 20149a4:	18800626 	beq	r3,r2,20149c0 <_write_r+0x54>
 20149a8:	1805883a 	mov	r2,r3
 20149ac:	dfc00217 	ldw	ra,8(sp)
 20149b0:	dc400117 	ldw	r17,4(sp)
 20149b4:	dc000017 	ldw	r16,0(sp)
 20149b8:	dec00304 	addi	sp,sp,12
 20149bc:	f800283a 	ret
 20149c0:	80800017 	ldw	r2,0(r16)
 20149c4:	103ff826 	beq	r2,zero,20149a8 <_write_r+0x3c>
 20149c8:	88800015 	stw	r2,0(r17)
 20149cc:	1805883a 	mov	r2,r3
 20149d0:	dfc00217 	ldw	ra,8(sp)
 20149d4:	dc400117 	ldw	r17,4(sp)
 20149d8:	dc000017 	ldw	r16,0(sp)
 20149dc:	dec00304 	addi	sp,sp,12
 20149e0:	f800283a 	ret

020149e4 <_calloc_r>:
 20149e4:	defffe04 	addi	sp,sp,-8
 20149e8:	dc400015 	stw	r17,0(sp)
 20149ec:	2023883a 	mov	r17,r4
 20149f0:	2809883a 	mov	r4,r5
 20149f4:	300b883a 	mov	r5,r6
 20149f8:	dfc00115 	stw	ra,4(sp)
 20149fc:	200d0cc0 	call	200d0cc <__mulsi3>
 2014a00:	100b883a 	mov	r5,r2
 2014a04:	8809883a 	mov	r4,r17
 2014a08:	200d68c0 	call	200d68c <_malloc_r>
 2014a0c:	1023883a 	mov	r17,r2
 2014a10:	01c00904 	movi	r7,36
 2014a14:	10000d26 	beq	r2,zero,2014a4c <_calloc_r+0x68>
 2014a18:	10ffff17 	ldw	r3,-4(r2)
 2014a1c:	1009883a 	mov	r4,r2
 2014a20:	00bfff04 	movi	r2,-4
 2014a24:	1886703a 	and	r3,r3,r2
 2014a28:	1887883a 	add	r3,r3,r2
 2014a2c:	180d883a 	mov	r6,r3
 2014a30:	000b883a 	mov	r5,zero
 2014a34:	38c01736 	bltu	r7,r3,2014a94 <_calloc_r+0xb0>
 2014a38:	008004c4 	movi	r2,19
 2014a3c:	10c00836 	bltu	r2,r3,2014a60 <_calloc_r+0x7c>
 2014a40:	20000215 	stw	zero,8(r4)
 2014a44:	20000015 	stw	zero,0(r4)
 2014a48:	20000115 	stw	zero,4(r4)
 2014a4c:	8805883a 	mov	r2,r17
 2014a50:	dfc00117 	ldw	ra,4(sp)
 2014a54:	dc400017 	ldw	r17,0(sp)
 2014a58:	dec00204 	addi	sp,sp,8
 2014a5c:	f800283a 	ret
 2014a60:	008006c4 	movi	r2,27
 2014a64:	88000015 	stw	zero,0(r17)
 2014a68:	88000115 	stw	zero,4(r17)
 2014a6c:	89000204 	addi	r4,r17,8
 2014a70:	10fff32e 	bgeu	r2,r3,2014a40 <_calloc_r+0x5c>
 2014a74:	88000215 	stw	zero,8(r17)
 2014a78:	88000315 	stw	zero,12(r17)
 2014a7c:	89000404 	addi	r4,r17,16
 2014a80:	19ffef1e 	bne	r3,r7,2014a40 <_calloc_r+0x5c>
 2014a84:	89000604 	addi	r4,r17,24
 2014a88:	88000415 	stw	zero,16(r17)
 2014a8c:	88000515 	stw	zero,20(r17)
 2014a90:	003feb06 	br	2014a40 <_calloc_r+0x5c>
 2014a94:	200ddcc0 	call	200ddcc <memset>
 2014a98:	8805883a 	mov	r2,r17
 2014a9c:	dfc00117 	ldw	ra,4(sp)
 2014aa0:	dc400017 	ldw	r17,0(sp)
 2014aa4:	dec00204 	addi	sp,sp,8
 2014aa8:	f800283a 	ret

02014aac <_close_r>:
 2014aac:	defffd04 	addi	sp,sp,-12
 2014ab0:	dc000015 	stw	r16,0(sp)
 2014ab4:	040080b4 	movhi	r16,514
 2014ab8:	843dfd04 	addi	r16,r16,-2060
 2014abc:	dc400115 	stw	r17,4(sp)
 2014ac0:	80000015 	stw	zero,0(r16)
 2014ac4:	2023883a 	mov	r17,r4
 2014ac8:	2809883a 	mov	r4,r5
 2014acc:	dfc00215 	stw	ra,8(sp)
 2014ad0:	20174180 	call	2017418 <close>
 2014ad4:	1007883a 	mov	r3,r2
 2014ad8:	00bfffc4 	movi	r2,-1
 2014adc:	18800626 	beq	r3,r2,2014af8 <_close_r+0x4c>
 2014ae0:	1805883a 	mov	r2,r3
 2014ae4:	dfc00217 	ldw	ra,8(sp)
 2014ae8:	dc400117 	ldw	r17,4(sp)
 2014aec:	dc000017 	ldw	r16,0(sp)
 2014af0:	dec00304 	addi	sp,sp,12
 2014af4:	f800283a 	ret
 2014af8:	80800017 	ldw	r2,0(r16)
 2014afc:	103ff826 	beq	r2,zero,2014ae0 <_close_r+0x34>
 2014b00:	88800015 	stw	r2,0(r17)
 2014b04:	1805883a 	mov	r2,r3
 2014b08:	dfc00217 	ldw	ra,8(sp)
 2014b0c:	dc400117 	ldw	r17,4(sp)
 2014b10:	dc000017 	ldw	r16,0(sp)
 2014b14:	dec00304 	addi	sp,sp,12
 2014b18:	f800283a 	ret

02014b1c <_fclose_r>:
 2014b1c:	defffc04 	addi	sp,sp,-16
 2014b20:	dc400115 	stw	r17,4(sp)
 2014b24:	dc000015 	stw	r16,0(sp)
 2014b28:	dfc00315 	stw	ra,12(sp)
 2014b2c:	dc800215 	stw	r18,8(sp)
 2014b30:	2821883a 	mov	r16,r5
 2014b34:	2023883a 	mov	r17,r4
 2014b38:	28002926 	beq	r5,zero,2014be0 <_fclose_r+0xc4>
 2014b3c:	2011ec00 	call	2011ec0 <__sfp_lock_acquire>
 2014b40:	88000226 	beq	r17,zero,2014b4c <_fclose_r+0x30>
 2014b44:	88800e17 	ldw	r2,56(r17)
 2014b48:	10002d26 	beq	r2,zero,2014c00 <_fclose_r+0xe4>
 2014b4c:	8080030f 	ldh	r2,12(r16)
 2014b50:	10002226 	beq	r2,zero,2014bdc <_fclose_r+0xc0>
 2014b54:	8809883a 	mov	r4,r17
 2014b58:	800b883a 	mov	r5,r16
 2014b5c:	2011c380 	call	2011c38 <_fflush_r>
 2014b60:	1025883a 	mov	r18,r2
 2014b64:	80800b17 	ldw	r2,44(r16)
 2014b68:	10000426 	beq	r2,zero,2014b7c <_fclose_r+0x60>
 2014b6c:	81400717 	ldw	r5,28(r16)
 2014b70:	8809883a 	mov	r4,r17
 2014b74:	103ee83a 	callr	r2
 2014b78:	10002a16 	blt	r2,zero,2014c24 <_fclose_r+0x108>
 2014b7c:	8080030b 	ldhu	r2,12(r16)
 2014b80:	1080200c 	andi	r2,r2,128
 2014b84:	1000231e 	bne	r2,zero,2014c14 <_fclose_r+0xf8>
 2014b88:	81400c17 	ldw	r5,48(r16)
 2014b8c:	28000526 	beq	r5,zero,2014ba4 <_fclose_r+0x88>
 2014b90:	80801004 	addi	r2,r16,64
 2014b94:	28800226 	beq	r5,r2,2014ba0 <_fclose_r+0x84>
 2014b98:	8809883a 	mov	r4,r17
 2014b9c:	20122880 	call	2012288 <_free_r>
 2014ba0:	80000c15 	stw	zero,48(r16)
 2014ba4:	81401117 	ldw	r5,68(r16)
 2014ba8:	28000326 	beq	r5,zero,2014bb8 <_fclose_r+0x9c>
 2014bac:	8809883a 	mov	r4,r17
 2014bb0:	20122880 	call	2012288 <_free_r>
 2014bb4:	80001115 	stw	zero,68(r16)
 2014bb8:	8000030d 	sth	zero,12(r16)
 2014bbc:	2011ec40 	call	2011ec4 <__sfp_lock_release>
 2014bc0:	9005883a 	mov	r2,r18
 2014bc4:	dfc00317 	ldw	ra,12(sp)
 2014bc8:	dc800217 	ldw	r18,8(sp)
 2014bcc:	dc400117 	ldw	r17,4(sp)
 2014bd0:	dc000017 	ldw	r16,0(sp)
 2014bd4:	dec00404 	addi	sp,sp,16
 2014bd8:	f800283a 	ret
 2014bdc:	2011ec40 	call	2011ec4 <__sfp_lock_release>
 2014be0:	0025883a 	mov	r18,zero
 2014be4:	9005883a 	mov	r2,r18
 2014be8:	dfc00317 	ldw	ra,12(sp)
 2014bec:	dc800217 	ldw	r18,8(sp)
 2014bf0:	dc400117 	ldw	r17,4(sp)
 2014bf4:	dc000017 	ldw	r16,0(sp)
 2014bf8:	dec00404 	addi	sp,sp,16
 2014bfc:	f800283a 	ret
 2014c00:	8809883a 	mov	r4,r17
 2014c04:	2011ed00 	call	2011ed0 <__sinit>
 2014c08:	8080030f 	ldh	r2,12(r16)
 2014c0c:	103fd11e 	bne	r2,zero,2014b54 <_fclose_r+0x38>
 2014c10:	003ff206 	br	2014bdc <_fclose_r+0xc0>
 2014c14:	81400417 	ldw	r5,16(r16)
 2014c18:	8809883a 	mov	r4,r17
 2014c1c:	20122880 	call	2012288 <_free_r>
 2014c20:	003fd906 	br	2014b88 <_fclose_r+0x6c>
 2014c24:	04bfffc4 	movi	r18,-1
 2014c28:	003fd406 	br	2014b7c <_fclose_r+0x60>

02014c2c <fclose>:
 2014c2c:	008080b4 	movhi	r2,514
 2014c30:	10b6fa04 	addi	r2,r2,-9240
 2014c34:	200b883a 	mov	r5,r4
 2014c38:	11000017 	ldw	r4,0(r2)
 2014c3c:	2014b1c1 	jmpi	2014b1c <_fclose_r>

02014c40 <_fstat_r>:
 2014c40:	defffd04 	addi	sp,sp,-12
 2014c44:	dc000015 	stw	r16,0(sp)
 2014c48:	040080b4 	movhi	r16,514
 2014c4c:	843dfd04 	addi	r16,r16,-2060
 2014c50:	dc400115 	stw	r17,4(sp)
 2014c54:	80000015 	stw	zero,0(r16)
 2014c58:	2023883a 	mov	r17,r4
 2014c5c:	2809883a 	mov	r4,r5
 2014c60:	300b883a 	mov	r5,r6
 2014c64:	dfc00215 	stw	ra,8(sp)
 2014c68:	20176040 	call	2017604 <fstat>
 2014c6c:	1007883a 	mov	r3,r2
 2014c70:	00bfffc4 	movi	r2,-1
 2014c74:	18800626 	beq	r3,r2,2014c90 <_fstat_r+0x50>
 2014c78:	1805883a 	mov	r2,r3
 2014c7c:	dfc00217 	ldw	ra,8(sp)
 2014c80:	dc400117 	ldw	r17,4(sp)
 2014c84:	dc000017 	ldw	r16,0(sp)
 2014c88:	dec00304 	addi	sp,sp,12
 2014c8c:	f800283a 	ret
 2014c90:	80800017 	ldw	r2,0(r16)
 2014c94:	103ff826 	beq	r2,zero,2014c78 <_fstat_r+0x38>
 2014c98:	88800015 	stw	r2,0(r17)
 2014c9c:	1805883a 	mov	r2,r3
 2014ca0:	dfc00217 	ldw	ra,8(sp)
 2014ca4:	dc400117 	ldw	r17,4(sp)
 2014ca8:	dc000017 	ldw	r16,0(sp)
 2014cac:	dec00304 	addi	sp,sp,12
 2014cb0:	f800283a 	ret

02014cb4 <_isatty_r>:
 2014cb4:	defffd04 	addi	sp,sp,-12
 2014cb8:	dc000015 	stw	r16,0(sp)
 2014cbc:	040080b4 	movhi	r16,514
 2014cc0:	843dfd04 	addi	r16,r16,-2060
 2014cc4:	dc400115 	stw	r17,4(sp)
 2014cc8:	80000015 	stw	zero,0(r16)
 2014ccc:	2023883a 	mov	r17,r4
 2014cd0:	2809883a 	mov	r4,r5
 2014cd4:	dfc00215 	stw	ra,8(sp)
 2014cd8:	201775c0 	call	201775c <isatty>
 2014cdc:	1007883a 	mov	r3,r2
 2014ce0:	00bfffc4 	movi	r2,-1
 2014ce4:	18800626 	beq	r3,r2,2014d00 <_isatty_r+0x4c>
 2014ce8:	1805883a 	mov	r2,r3
 2014cec:	dfc00217 	ldw	ra,8(sp)
 2014cf0:	dc400117 	ldw	r17,4(sp)
 2014cf4:	dc000017 	ldw	r16,0(sp)
 2014cf8:	dec00304 	addi	sp,sp,12
 2014cfc:	f800283a 	ret
 2014d00:	80800017 	ldw	r2,0(r16)
 2014d04:	103ff826 	beq	r2,zero,2014ce8 <_isatty_r+0x34>
 2014d08:	88800015 	stw	r2,0(r17)
 2014d0c:	1805883a 	mov	r2,r3
 2014d10:	dfc00217 	ldw	ra,8(sp)
 2014d14:	dc400117 	ldw	r17,4(sp)
 2014d18:	dc000017 	ldw	r16,0(sp)
 2014d1c:	dec00304 	addi	sp,sp,12
 2014d20:	f800283a 	ret

02014d24 <_lseek_r>:
 2014d24:	defffd04 	addi	sp,sp,-12
 2014d28:	dc000015 	stw	r16,0(sp)
 2014d2c:	040080b4 	movhi	r16,514
 2014d30:	843dfd04 	addi	r16,r16,-2060
 2014d34:	dc400115 	stw	r17,4(sp)
 2014d38:	80000015 	stw	zero,0(r16)
 2014d3c:	2023883a 	mov	r17,r4
 2014d40:	2809883a 	mov	r4,r5
 2014d44:	300b883a 	mov	r5,r6
 2014d48:	380d883a 	mov	r6,r7
 2014d4c:	dfc00215 	stw	ra,8(sp)
 2014d50:	2017b0c0 	call	2017b0c <lseek>
 2014d54:	1007883a 	mov	r3,r2
 2014d58:	00bfffc4 	movi	r2,-1
 2014d5c:	18800626 	beq	r3,r2,2014d78 <_lseek_r+0x54>
 2014d60:	1805883a 	mov	r2,r3
 2014d64:	dfc00217 	ldw	ra,8(sp)
 2014d68:	dc400117 	ldw	r17,4(sp)
 2014d6c:	dc000017 	ldw	r16,0(sp)
 2014d70:	dec00304 	addi	sp,sp,12
 2014d74:	f800283a 	ret
 2014d78:	80800017 	ldw	r2,0(r16)
 2014d7c:	103ff826 	beq	r2,zero,2014d60 <_lseek_r+0x3c>
 2014d80:	88800015 	stw	r2,0(r17)
 2014d84:	1805883a 	mov	r2,r3
 2014d88:	dfc00217 	ldw	ra,8(sp)
 2014d8c:	dc400117 	ldw	r17,4(sp)
 2014d90:	dc000017 	ldw	r16,0(sp)
 2014d94:	dec00304 	addi	sp,sp,12
 2014d98:	f800283a 	ret

02014d9c <_read_r>:
 2014d9c:	defffd04 	addi	sp,sp,-12
 2014da0:	dc000015 	stw	r16,0(sp)
 2014da4:	040080b4 	movhi	r16,514
 2014da8:	843dfd04 	addi	r16,r16,-2060
 2014dac:	dc400115 	stw	r17,4(sp)
 2014db0:	80000015 	stw	zero,0(r16)
 2014db4:	2023883a 	mov	r17,r4
 2014db8:	2809883a 	mov	r4,r5
 2014dbc:	300b883a 	mov	r5,r6
 2014dc0:	380d883a 	mov	r6,r7
 2014dc4:	dfc00215 	stw	ra,8(sp)
 2014dc8:	2017d0c0 	call	2017d0c <read>
 2014dcc:	1007883a 	mov	r3,r2
 2014dd0:	00bfffc4 	movi	r2,-1
 2014dd4:	18800626 	beq	r3,r2,2014df0 <_read_r+0x54>
 2014dd8:	1805883a 	mov	r2,r3
 2014ddc:	dfc00217 	ldw	ra,8(sp)
 2014de0:	dc400117 	ldw	r17,4(sp)
 2014de4:	dc000017 	ldw	r16,0(sp)
 2014de8:	dec00304 	addi	sp,sp,12
 2014dec:	f800283a 	ret
 2014df0:	80800017 	ldw	r2,0(r16)
 2014df4:	103ff826 	beq	r2,zero,2014dd8 <_read_r+0x3c>
 2014df8:	88800015 	stw	r2,0(r17)
 2014dfc:	1805883a 	mov	r2,r3
 2014e00:	dfc00217 	ldw	ra,8(sp)
 2014e04:	dc400117 	ldw	r17,4(sp)
 2014e08:	dc000017 	ldw	r16,0(sp)
 2014e0c:	dec00304 	addi	sp,sp,12
 2014e10:	f800283a 	ret

02014e14 <__udivdi3>:
 2014e14:	defff104 	addi	sp,sp,-60
 2014e18:	0015883a 	mov	r10,zero
 2014e1c:	2005883a 	mov	r2,r4
 2014e20:	3011883a 	mov	r8,r6
 2014e24:	df000d15 	stw	fp,52(sp)
 2014e28:	dd400a15 	stw	r21,40(sp)
 2014e2c:	dcc00815 	stw	r19,32(sp)
 2014e30:	dfc00e15 	stw	ra,56(sp)
 2014e34:	ddc00c15 	stw	r23,48(sp)
 2014e38:	dd800b15 	stw	r22,44(sp)
 2014e3c:	dd000915 	stw	r20,36(sp)
 2014e40:	dc800715 	stw	r18,28(sp)
 2014e44:	dc400615 	stw	r17,24(sp)
 2014e48:	dc000515 	stw	r16,20(sp)
 2014e4c:	da800315 	stw	r10,12(sp)
 2014e50:	4027883a 	mov	r19,r8
 2014e54:	1039883a 	mov	fp,r2
 2014e58:	282b883a 	mov	r21,r5
 2014e5c:	da800415 	stw	r10,16(sp)
 2014e60:	3800401e 	bne	r7,zero,2014f64 <__udivdi3+0x150>
 2014e64:	2a006536 	bltu	r5,r8,2014ffc <__udivdi3+0x1e8>
 2014e68:	4000b526 	beq	r8,zero,2015140 <__udivdi3+0x32c>
 2014e6c:	00bfffd4 	movui	r2,65535
 2014e70:	14c0ad36 	bltu	r2,r19,2015128 <__udivdi3+0x314>
 2014e74:	00803fc4 	movi	r2,255
 2014e78:	14c15e36 	bltu	r2,r19,20153f4 <__udivdi3+0x5e0>
 2014e7c:	000b883a 	mov	r5,zero
 2014e80:	0005883a 	mov	r2,zero
 2014e84:	9884d83a 	srl	r2,r19,r2
 2014e88:	010080b4 	movhi	r4,514
 2014e8c:	212f5304 	addi	r4,r4,-17076
 2014e90:	01800804 	movi	r6,32
 2014e94:	1105883a 	add	r2,r2,r4
 2014e98:	10c00003 	ldbu	r3,0(r2)
 2014e9c:	28c7883a 	add	r3,r5,r3
 2014ea0:	30e9c83a 	sub	r20,r6,r3
 2014ea4:	a0010a1e 	bne	r20,zero,20152d0 <__udivdi3+0x4bc>
 2014ea8:	982ed43a 	srli	r23,r19,16
 2014eac:	acebc83a 	sub	r21,r21,r19
 2014eb0:	9dbfffcc 	andi	r22,r19,65535
 2014eb4:	05000044 	movi	r20,1
 2014eb8:	a809883a 	mov	r4,r21
 2014ebc:	b80b883a 	mov	r5,r23
 2014ec0:	200d0bc0 	call	200d0bc <__udivsi3>
 2014ec4:	100b883a 	mov	r5,r2
 2014ec8:	b009883a 	mov	r4,r22
 2014ecc:	1021883a 	mov	r16,r2
 2014ed0:	200d0cc0 	call	200d0cc <__mulsi3>
 2014ed4:	a809883a 	mov	r4,r21
 2014ed8:	b80b883a 	mov	r5,r23
 2014edc:	1023883a 	mov	r17,r2
 2014ee0:	200d0c40 	call	200d0c4 <__umodsi3>
 2014ee4:	1004943a 	slli	r2,r2,16
 2014ee8:	e006d43a 	srli	r3,fp,16
 2014eec:	10c4b03a 	or	r2,r2,r3
 2014ef0:	1440042e 	bgeu	r2,r17,2014f04 <__udivdi3+0xf0>
 2014ef4:	14c5883a 	add	r2,r2,r19
 2014ef8:	843fffc4 	addi	r16,r16,-1
 2014efc:	14c00136 	bltu	r2,r19,2014f04 <__udivdi3+0xf0>
 2014f00:	14415c36 	bltu	r2,r17,2015474 <__udivdi3+0x660>
 2014f04:	1463c83a 	sub	r17,r2,r17
 2014f08:	8809883a 	mov	r4,r17
 2014f0c:	b80b883a 	mov	r5,r23
 2014f10:	200d0bc0 	call	200d0bc <__udivsi3>
 2014f14:	100b883a 	mov	r5,r2
 2014f18:	b009883a 	mov	r4,r22
 2014f1c:	102b883a 	mov	r21,r2
 2014f20:	200d0cc0 	call	200d0cc <__mulsi3>
 2014f24:	8809883a 	mov	r4,r17
 2014f28:	b80b883a 	mov	r5,r23
 2014f2c:	1025883a 	mov	r18,r2
 2014f30:	200d0c40 	call	200d0c4 <__umodsi3>
 2014f34:	1004943a 	slli	r2,r2,16
 2014f38:	e0ffffcc 	andi	r3,fp,65535
 2014f3c:	10c4b03a 	or	r2,r2,r3
 2014f40:	1480042e 	bgeu	r2,r18,2014f54 <__udivdi3+0x140>
 2014f44:	9885883a 	add	r2,r19,r2
 2014f48:	ad7fffc4 	addi	r21,r21,-1
 2014f4c:	14c00136 	bltu	r2,r19,2014f54 <__udivdi3+0x140>
 2014f50:	14813c36 	bltu	r2,r18,2015444 <__udivdi3+0x630>
 2014f54:	8004943a 	slli	r2,r16,16
 2014f58:	a009883a 	mov	r4,r20
 2014f5c:	a884b03a 	or	r2,r21,r2
 2014f60:	00001506 	br	2014fb8 <__udivdi3+0x1a4>
 2014f64:	380d883a 	mov	r6,r7
 2014f68:	29c06c36 	bltu	r5,r7,201511c <__udivdi3+0x308>
 2014f6c:	00bfffd4 	movui	r2,65535
 2014f70:	11c06436 	bltu	r2,r7,2015104 <__udivdi3+0x2f0>
 2014f74:	00803fc4 	movi	r2,255
 2014f78:	11c11836 	bltu	r2,r7,20153dc <__udivdi3+0x5c8>
 2014f7c:	000b883a 	mov	r5,zero
 2014f80:	0005883a 	mov	r2,zero
 2014f84:	3084d83a 	srl	r2,r6,r2
 2014f88:	010080b4 	movhi	r4,514
 2014f8c:	212f5304 	addi	r4,r4,-17076
 2014f90:	01c00804 	movi	r7,32
 2014f94:	1105883a 	add	r2,r2,r4
 2014f98:	10c00003 	ldbu	r3,0(r2)
 2014f9c:	28c7883a 	add	r3,r5,r3
 2014fa0:	38edc83a 	sub	r22,r7,r3
 2014fa4:	b000731e 	bne	r22,zero,2015174 <__udivdi3+0x360>
 2014fa8:	35400136 	bltu	r6,r21,2014fb0 <__udivdi3+0x19c>
 2014fac:	e4c05b36 	bltu	fp,r19,201511c <__udivdi3+0x308>
 2014fb0:	00800044 	movi	r2,1
 2014fb4:	0009883a 	mov	r4,zero
 2014fb8:	d8800315 	stw	r2,12(sp)
 2014fbc:	d9400317 	ldw	r5,12(sp)
 2014fc0:	2007883a 	mov	r3,r4
 2014fc4:	d9000415 	stw	r4,16(sp)
 2014fc8:	2805883a 	mov	r2,r5
 2014fcc:	dfc00e17 	ldw	ra,56(sp)
 2014fd0:	df000d17 	ldw	fp,52(sp)
 2014fd4:	ddc00c17 	ldw	r23,48(sp)
 2014fd8:	dd800b17 	ldw	r22,44(sp)
 2014fdc:	dd400a17 	ldw	r21,40(sp)
 2014fe0:	dd000917 	ldw	r20,36(sp)
 2014fe4:	dcc00817 	ldw	r19,32(sp)
 2014fe8:	dc800717 	ldw	r18,28(sp)
 2014fec:	dc400617 	ldw	r17,24(sp)
 2014ff0:	dc000517 	ldw	r16,20(sp)
 2014ff4:	dec00f04 	addi	sp,sp,60
 2014ff8:	f800283a 	ret
 2014ffc:	00bfffd4 	movui	r2,65535
 2015000:	12005636 	bltu	r2,r8,201515c <__udivdi3+0x348>
 2015004:	00803fc4 	movi	r2,255
 2015008:	12010036 	bltu	r2,r8,201540c <__udivdi3+0x5f8>
 201500c:	000b883a 	mov	r5,zero
 2015010:	0005883a 	mov	r2,zero
 2015014:	9884d83a 	srl	r2,r19,r2
 2015018:	010080b4 	movhi	r4,514
 201501c:	212f5304 	addi	r4,r4,-17076
 2015020:	01800804 	movi	r6,32
 2015024:	1105883a 	add	r2,r2,r4
 2015028:	10c00003 	ldbu	r3,0(r2)
 201502c:	28c7883a 	add	r3,r5,r3
 2015030:	30cbc83a 	sub	r5,r6,r3
 2015034:	28000626 	beq	r5,zero,2015050 <__udivdi3+0x23c>
 2015038:	3145c83a 	sub	r2,r6,r5
 201503c:	e084d83a 	srl	r2,fp,r2
 2015040:	a946983a 	sll	r3,r21,r5
 2015044:	e178983a 	sll	fp,fp,r5
 2015048:	9966983a 	sll	r19,r19,r5
 201504c:	18aab03a 	or	r21,r3,r2
 2015050:	982ed43a 	srli	r23,r19,16
 2015054:	a809883a 	mov	r4,r21
 2015058:	9cbfffcc 	andi	r18,r19,65535
 201505c:	b80b883a 	mov	r5,r23
 2015060:	200d0bc0 	call	200d0bc <__udivsi3>
 2015064:	100b883a 	mov	r5,r2
 2015068:	9009883a 	mov	r4,r18
 201506c:	1021883a 	mov	r16,r2
 2015070:	200d0cc0 	call	200d0cc <__mulsi3>
 2015074:	a809883a 	mov	r4,r21
 2015078:	b80b883a 	mov	r5,r23
 201507c:	1023883a 	mov	r17,r2
 2015080:	200d0c40 	call	200d0c4 <__umodsi3>
 2015084:	1004943a 	slli	r2,r2,16
 2015088:	e006d43a 	srli	r3,fp,16
 201508c:	10c4b03a 	or	r2,r2,r3
 2015090:	1440042e 	bgeu	r2,r17,20150a4 <__udivdi3+0x290>
 2015094:	14c5883a 	add	r2,r2,r19
 2015098:	843fffc4 	addi	r16,r16,-1
 201509c:	14c00136 	bltu	r2,r19,20150a4 <__udivdi3+0x290>
 20150a0:	1440ea36 	bltu	r2,r17,201544c <__udivdi3+0x638>
 20150a4:	1463c83a 	sub	r17,r2,r17
 20150a8:	8809883a 	mov	r4,r17
 20150ac:	b80b883a 	mov	r5,r23
 20150b0:	200d0bc0 	call	200d0bc <__udivsi3>
 20150b4:	100b883a 	mov	r5,r2
 20150b8:	9009883a 	mov	r4,r18
 20150bc:	102b883a 	mov	r21,r2
 20150c0:	200d0cc0 	call	200d0cc <__mulsi3>
 20150c4:	8809883a 	mov	r4,r17
 20150c8:	b80b883a 	mov	r5,r23
 20150cc:	1025883a 	mov	r18,r2
 20150d0:	200d0c40 	call	200d0c4 <__umodsi3>
 20150d4:	1004943a 	slli	r2,r2,16
 20150d8:	e0ffffcc 	andi	r3,fp,65535
 20150dc:	10c4b03a 	or	r2,r2,r3
 20150e0:	1480042e 	bgeu	r2,r18,20150f4 <__udivdi3+0x2e0>
 20150e4:	9885883a 	add	r2,r19,r2
 20150e8:	ad7fffc4 	addi	r21,r21,-1
 20150ec:	14c00136 	bltu	r2,r19,20150f4 <__udivdi3+0x2e0>
 20150f0:	1480d936 	bltu	r2,r18,2015458 <__udivdi3+0x644>
 20150f4:	8004943a 	slli	r2,r16,16
 20150f8:	0009883a 	mov	r4,zero
 20150fc:	a884b03a 	or	r2,r21,r2
 2015100:	003fad06 	br	2014fb8 <__udivdi3+0x1a4>
 2015104:	00804034 	movhi	r2,256
 2015108:	10bfffc4 	addi	r2,r2,-1
 201510c:	11c0b636 	bltu	r2,r7,20153e8 <__udivdi3+0x5d4>
 2015110:	01400404 	movi	r5,16
 2015114:	2805883a 	mov	r2,r5
 2015118:	003f9a06 	br	2014f84 <__udivdi3+0x170>
 201511c:	0005883a 	mov	r2,zero
 2015120:	0009883a 	mov	r4,zero
 2015124:	003fa406 	br	2014fb8 <__udivdi3+0x1a4>
 2015128:	00804034 	movhi	r2,256
 201512c:	10bfffc4 	addi	r2,r2,-1
 2015130:	14c0b336 	bltu	r2,r19,2015400 <__udivdi3+0x5ec>
 2015134:	01400404 	movi	r5,16
 2015138:	2805883a 	mov	r2,r5
 201513c:	003f5106 	br	2014e84 <__udivdi3+0x70>
 2015140:	01000044 	movi	r4,1
 2015144:	000b883a 	mov	r5,zero
 2015148:	200d0bc0 	call	200d0bc <__udivsi3>
 201514c:	1027883a 	mov	r19,r2
 2015150:	00bfffd4 	movui	r2,65535
 2015154:	14fff436 	bltu	r2,r19,2015128 <__udivdi3+0x314>
 2015158:	003f4606 	br	2014e74 <__udivdi3+0x60>
 201515c:	00804034 	movhi	r2,256
 2015160:	10bfffc4 	addi	r2,r2,-1
 2015164:	1200ac36 	bltu	r2,r8,2015418 <__udivdi3+0x604>
 2015168:	01400404 	movi	r5,16
 201516c:	2805883a 	mov	r2,r5
 2015170:	003fa806 	br	2015014 <__udivdi3+0x200>
 2015174:	3d85c83a 	sub	r2,r7,r22
 2015178:	3588983a 	sll	r4,r6,r22
 201517c:	9886d83a 	srl	r3,r19,r2
 2015180:	a8a2d83a 	srl	r17,r21,r2
 2015184:	e084d83a 	srl	r2,fp,r2
 2015188:	20eeb03a 	or	r23,r4,r3
 201518c:	b824d43a 	srli	r18,r23,16
 2015190:	ad86983a 	sll	r3,r21,r22
 2015194:	8809883a 	mov	r4,r17
 2015198:	900b883a 	mov	r5,r18
 201519c:	1886b03a 	or	r3,r3,r2
 20151a0:	d8c00115 	stw	r3,4(sp)
 20151a4:	bc3fffcc 	andi	r16,r23,65535
 20151a8:	200d0bc0 	call	200d0bc <__udivsi3>
 20151ac:	100b883a 	mov	r5,r2
 20151b0:	8009883a 	mov	r4,r16
 20151b4:	1029883a 	mov	r20,r2
 20151b8:	200d0cc0 	call	200d0cc <__mulsi3>
 20151bc:	900b883a 	mov	r5,r18
 20151c0:	8809883a 	mov	r4,r17
 20151c4:	102b883a 	mov	r21,r2
 20151c8:	200d0c40 	call	200d0c4 <__umodsi3>
 20151cc:	d9400117 	ldw	r5,4(sp)
 20151d0:	1004943a 	slli	r2,r2,16
 20151d4:	9da6983a 	sll	r19,r19,r22
 20151d8:	2806d43a 	srli	r3,r5,16
 20151dc:	10c4b03a 	or	r2,r2,r3
 20151e0:	1540032e 	bgeu	r2,r21,20151f0 <__udivdi3+0x3dc>
 20151e4:	15c5883a 	add	r2,r2,r23
 20151e8:	a53fffc4 	addi	r20,r20,-1
 20151ec:	15c0912e 	bgeu	r2,r23,2015434 <__udivdi3+0x620>
 20151f0:	1563c83a 	sub	r17,r2,r21
 20151f4:	8809883a 	mov	r4,r17
 20151f8:	900b883a 	mov	r5,r18
 20151fc:	200d0bc0 	call	200d0bc <__udivsi3>
 2015200:	100b883a 	mov	r5,r2
 2015204:	8009883a 	mov	r4,r16
 2015208:	102b883a 	mov	r21,r2
 201520c:	200d0cc0 	call	200d0cc <__mulsi3>
 2015210:	8809883a 	mov	r4,r17
 2015214:	900b883a 	mov	r5,r18
 2015218:	1021883a 	mov	r16,r2
 201521c:	200d0c40 	call	200d0c4 <__umodsi3>
 2015220:	da800117 	ldw	r10,4(sp)
 2015224:	1004943a 	slli	r2,r2,16
 2015228:	50ffffcc 	andi	r3,r10,65535
 201522c:	10c6b03a 	or	r3,r2,r3
 2015230:	1c00032e 	bgeu	r3,r16,2015240 <__udivdi3+0x42c>
 2015234:	1dc7883a 	add	r3,r3,r23
 2015238:	ad7fffc4 	addi	r21,r21,-1
 201523c:	1dc0792e 	bgeu	r3,r23,2015424 <__udivdi3+0x610>
 2015240:	a004943a 	slli	r2,r20,16
 2015244:	982ed43a 	srli	r23,r19,16
 2015248:	9cffffcc 	andi	r19,r19,65535
 201524c:	a8a4b03a 	or	r18,r21,r2
 2015250:	947fffcc 	andi	r17,r18,65535
 2015254:	902ad43a 	srli	r21,r18,16
 2015258:	8809883a 	mov	r4,r17
 201525c:	980b883a 	mov	r5,r19
 2015260:	1c21c83a 	sub	r16,r3,r16
 2015264:	200d0cc0 	call	200d0cc <__mulsi3>
 2015268:	8809883a 	mov	r4,r17
 201526c:	b80b883a 	mov	r5,r23
 2015270:	1029883a 	mov	r20,r2
 2015274:	200d0cc0 	call	200d0cc <__mulsi3>
 2015278:	980b883a 	mov	r5,r19
 201527c:	a809883a 	mov	r4,r21
 2015280:	1023883a 	mov	r17,r2
 2015284:	200d0cc0 	call	200d0cc <__mulsi3>
 2015288:	a809883a 	mov	r4,r21
 201528c:	b80b883a 	mov	r5,r23
 2015290:	1027883a 	mov	r19,r2
 2015294:	200d0cc0 	call	200d0cc <__mulsi3>
 2015298:	1009883a 	mov	r4,r2
 201529c:	a004d43a 	srli	r2,r20,16
 20152a0:	8ce3883a 	add	r17,r17,r19
 20152a4:	1447883a 	add	r3,r2,r17
 20152a8:	1cc0022e 	bgeu	r3,r19,20152b4 <__udivdi3+0x4a0>
 20152ac:	00800074 	movhi	r2,1
 20152b0:	2089883a 	add	r4,r4,r2
 20152b4:	1804d43a 	srli	r2,r3,16
 20152b8:	2085883a 	add	r2,r4,r2
 20152bc:	80804436 	bltu	r16,r2,20153d0 <__udivdi3+0x5bc>
 20152c0:	80803e26 	beq	r16,r2,20153bc <__udivdi3+0x5a8>
 20152c4:	9005883a 	mov	r2,r18
 20152c8:	0009883a 	mov	r4,zero
 20152cc:	003f3a06 	br	2014fb8 <__udivdi3+0x1a4>
 20152d0:	9d26983a 	sll	r19,r19,r20
 20152d4:	3505c83a 	sub	r2,r6,r20
 20152d8:	a8a2d83a 	srl	r17,r21,r2
 20152dc:	982ed43a 	srli	r23,r19,16
 20152e0:	e084d83a 	srl	r2,fp,r2
 20152e4:	ad06983a 	sll	r3,r21,r20
 20152e8:	8809883a 	mov	r4,r17
 20152ec:	b80b883a 	mov	r5,r23
 20152f0:	1886b03a 	or	r3,r3,r2
 20152f4:	d8c00015 	stw	r3,0(sp)
 20152f8:	9dbfffcc 	andi	r22,r19,65535
 20152fc:	200d0bc0 	call	200d0bc <__udivsi3>
 2015300:	100b883a 	mov	r5,r2
 2015304:	b009883a 	mov	r4,r22
 2015308:	d8800215 	stw	r2,8(sp)
 201530c:	200d0cc0 	call	200d0cc <__mulsi3>
 2015310:	8809883a 	mov	r4,r17
 2015314:	b80b883a 	mov	r5,r23
 2015318:	102b883a 	mov	r21,r2
 201531c:	200d0c40 	call	200d0c4 <__umodsi3>
 2015320:	d9000017 	ldw	r4,0(sp)
 2015324:	1004943a 	slli	r2,r2,16
 2015328:	2006d43a 	srli	r3,r4,16
 201532c:	10c4b03a 	or	r2,r2,r3
 2015330:	1540052e 	bgeu	r2,r21,2015348 <__udivdi3+0x534>
 2015334:	d9400217 	ldw	r5,8(sp)
 2015338:	14c5883a 	add	r2,r2,r19
 201533c:	297fffc4 	addi	r5,r5,-1
 2015340:	d9400215 	stw	r5,8(sp)
 2015344:	14c0462e 	bgeu	r2,r19,2015460 <__udivdi3+0x64c>
 2015348:	1563c83a 	sub	r17,r2,r21
 201534c:	8809883a 	mov	r4,r17
 2015350:	b80b883a 	mov	r5,r23
 2015354:	200d0bc0 	call	200d0bc <__udivsi3>
 2015358:	100b883a 	mov	r5,r2
 201535c:	b009883a 	mov	r4,r22
 2015360:	1025883a 	mov	r18,r2
 2015364:	200d0cc0 	call	200d0cc <__mulsi3>
 2015368:	8809883a 	mov	r4,r17
 201536c:	b80b883a 	mov	r5,r23
 2015370:	1021883a 	mov	r16,r2
 2015374:	200d0c40 	call	200d0c4 <__umodsi3>
 2015378:	da800017 	ldw	r10,0(sp)
 201537c:	1004943a 	slli	r2,r2,16
 2015380:	50ffffcc 	andi	r3,r10,65535
 2015384:	10c6b03a 	or	r3,r2,r3
 2015388:	1c00062e 	bgeu	r3,r16,20153a4 <__udivdi3+0x590>
 201538c:	1cc7883a 	add	r3,r3,r19
 2015390:	94bfffc4 	addi	r18,r18,-1
 2015394:	1cc00336 	bltu	r3,r19,20153a4 <__udivdi3+0x590>
 2015398:	1c00022e 	bgeu	r3,r16,20153a4 <__udivdi3+0x590>
 201539c:	94bfffc4 	addi	r18,r18,-1
 20153a0:	1cc7883a 	add	r3,r3,r19
 20153a4:	d9000217 	ldw	r4,8(sp)
 20153a8:	e538983a 	sll	fp,fp,r20
 20153ac:	1c2bc83a 	sub	r21,r3,r16
 20153b0:	2004943a 	slli	r2,r4,16
 20153b4:	90a8b03a 	or	r20,r18,r2
 20153b8:	003ebf06 	br	2014eb8 <__udivdi3+0xa4>
 20153bc:	1804943a 	slli	r2,r3,16
 20153c0:	e588983a 	sll	r4,fp,r22
 20153c4:	a0ffffcc 	andi	r3,r20,65535
 20153c8:	10c5883a 	add	r2,r2,r3
 20153cc:	20bfbd2e 	bgeu	r4,r2,20152c4 <__udivdi3+0x4b0>
 20153d0:	90bfffc4 	addi	r2,r18,-1
 20153d4:	0009883a 	mov	r4,zero
 20153d8:	003ef706 	br	2014fb8 <__udivdi3+0x1a4>
 20153dc:	01400204 	movi	r5,8
 20153e0:	2805883a 	mov	r2,r5
 20153e4:	003ee706 	br	2014f84 <__udivdi3+0x170>
 20153e8:	01400604 	movi	r5,24
 20153ec:	2805883a 	mov	r2,r5
 20153f0:	003ee406 	br	2014f84 <__udivdi3+0x170>
 20153f4:	01400204 	movi	r5,8
 20153f8:	2805883a 	mov	r2,r5
 20153fc:	003ea106 	br	2014e84 <__udivdi3+0x70>
 2015400:	01400604 	movi	r5,24
 2015404:	2805883a 	mov	r2,r5
 2015408:	003e9e06 	br	2014e84 <__udivdi3+0x70>
 201540c:	01400204 	movi	r5,8
 2015410:	2805883a 	mov	r2,r5
 2015414:	003eff06 	br	2015014 <__udivdi3+0x200>
 2015418:	01400604 	movi	r5,24
 201541c:	2805883a 	mov	r2,r5
 2015420:	003efc06 	br	2015014 <__udivdi3+0x200>
 2015424:	1c3f862e 	bgeu	r3,r16,2015240 <__udivdi3+0x42c>
 2015428:	1dc7883a 	add	r3,r3,r23
 201542c:	ad7fffc4 	addi	r21,r21,-1
 2015430:	003f8306 	br	2015240 <__udivdi3+0x42c>
 2015434:	157f6e2e 	bgeu	r2,r21,20151f0 <__udivdi3+0x3dc>
 2015438:	a53fffc4 	addi	r20,r20,-1
 201543c:	15c5883a 	add	r2,r2,r23
 2015440:	003f6b06 	br	20151f0 <__udivdi3+0x3dc>
 2015444:	ad7fffc4 	addi	r21,r21,-1
 2015448:	003ec206 	br	2014f54 <__udivdi3+0x140>
 201544c:	843fffc4 	addi	r16,r16,-1
 2015450:	14c5883a 	add	r2,r2,r19
 2015454:	003f1306 	br	20150a4 <__udivdi3+0x290>
 2015458:	ad7fffc4 	addi	r21,r21,-1
 201545c:	003f2506 	br	20150f4 <__udivdi3+0x2e0>
 2015460:	157fb92e 	bgeu	r2,r21,2015348 <__udivdi3+0x534>
 2015464:	297fffc4 	addi	r5,r5,-1
 2015468:	14c5883a 	add	r2,r2,r19
 201546c:	d9400215 	stw	r5,8(sp)
 2015470:	003fb506 	br	2015348 <__udivdi3+0x534>
 2015474:	843fffc4 	addi	r16,r16,-1
 2015478:	14c5883a 	add	r2,r2,r19
 201547c:	003ea106 	br	2014f04 <__udivdi3+0xf0>

02015480 <__umoddi3>:
 2015480:	defff004 	addi	sp,sp,-64
 2015484:	3011883a 	mov	r8,r6
 2015488:	000d883a 	mov	r6,zero
 201548c:	dd400b15 	stw	r21,44(sp)
 2015490:	dcc00915 	stw	r19,36(sp)
 2015494:	dc000615 	stw	r16,24(sp)
 2015498:	dfc00f15 	stw	ra,60(sp)
 201549c:	df000e15 	stw	fp,56(sp)
 20154a0:	ddc00d15 	stw	r23,52(sp)
 20154a4:	dd800c15 	stw	r22,48(sp)
 20154a8:	dd000a15 	stw	r20,40(sp)
 20154ac:	dc800815 	stw	r18,32(sp)
 20154b0:	dc400715 	stw	r17,28(sp)
 20154b4:	2817883a 	mov	r11,r5
 20154b8:	d9800415 	stw	r6,16(sp)
 20154bc:	4027883a 	mov	r19,r8
 20154c0:	d9800515 	stw	r6,20(sp)
 20154c4:	2021883a 	mov	r16,r4
 20154c8:	282b883a 	mov	r21,r5
 20154cc:	38002c1e 	bne	r7,zero,2015580 <__umoddi3+0x100>
 20154d0:	2a005636 	bltu	r5,r8,201562c <__umoddi3+0x1ac>
 20154d4:	40009a26 	beq	r8,zero,2015740 <__umoddi3+0x2c0>
 20154d8:	00bfffd4 	movui	r2,65535
 20154dc:	14c09236 	bltu	r2,r19,2015728 <__umoddi3+0x2a8>
 20154e0:	00803fc4 	movi	r2,255
 20154e4:	14c15c36 	bltu	r2,r19,2015a58 <__umoddi3+0x5d8>
 20154e8:	000b883a 	mov	r5,zero
 20154ec:	0005883a 	mov	r2,zero
 20154f0:	9884d83a 	srl	r2,r19,r2
 20154f4:	010080b4 	movhi	r4,514
 20154f8:	212f5304 	addi	r4,r4,-17076
 20154fc:	01800804 	movi	r6,32
 2015500:	1105883a 	add	r2,r2,r4
 2015504:	10c00003 	ldbu	r3,0(r2)
 2015508:	28c7883a 	add	r3,r5,r3
 201550c:	30e5c83a 	sub	r18,r6,r3
 2015510:	9000a41e 	bne	r18,zero,20157a4 <__umoddi3+0x324>
 2015514:	982ed43a 	srli	r23,r19,16
 2015518:	acebc83a 	sub	r21,r21,r19
 201551c:	9d3fffcc 	andi	r20,r19,65535
 2015520:	002d883a 	mov	r22,zero
 2015524:	a809883a 	mov	r4,r21
 2015528:	b80b883a 	mov	r5,r23
 201552c:	200d0bc0 	call	200d0bc <__udivsi3>
 2015530:	100b883a 	mov	r5,r2
 2015534:	a009883a 	mov	r4,r20
 2015538:	200d0cc0 	call	200d0cc <__mulsi3>
 201553c:	a809883a 	mov	r4,r21
 2015540:	b80b883a 	mov	r5,r23
 2015544:	1023883a 	mov	r17,r2
 2015548:	200d0c40 	call	200d0c4 <__umodsi3>
 201554c:	1004943a 	slli	r2,r2,16
 2015550:	8006d43a 	srli	r3,r16,16
 2015554:	10c4b03a 	or	r2,r2,r3
 2015558:	1440032e 	bgeu	r2,r17,2015568 <__umoddi3+0xe8>
 201555c:	14c5883a 	add	r2,r2,r19
 2015560:	14c00136 	bltu	r2,r19,2015568 <__umoddi3+0xe8>
 2015564:	14415836 	bltu	r2,r17,2015ac8 <__umoddi3+0x648>
 2015568:	1463c83a 	sub	r17,r2,r17
 201556c:	8809883a 	mov	r4,r17
 2015570:	b80b883a 	mov	r5,r23
 2015574:	200d0bc0 	call	200d0bc <__udivsi3>
 2015578:	a009883a 	mov	r4,r20
 201557c:	00005306 	br	20156cc <__umoddi3+0x24c>
 2015580:	380d883a 	mov	r6,r7
 2015584:	29c0132e 	bgeu	r5,r7,20155d4 <__umoddi3+0x154>
 2015588:	d9000415 	stw	r4,16(sp)
 201558c:	d9400515 	stw	r5,20(sp)
 2015590:	d9400417 	ldw	r5,16(sp)
 2015594:	5813883a 	mov	r9,r11
 2015598:	2811883a 	mov	r8,r5
 201559c:	4005883a 	mov	r2,r8
 20155a0:	4807883a 	mov	r3,r9
 20155a4:	dfc00f17 	ldw	ra,60(sp)
 20155a8:	df000e17 	ldw	fp,56(sp)
 20155ac:	ddc00d17 	ldw	r23,52(sp)
 20155b0:	dd800c17 	ldw	r22,48(sp)
 20155b4:	dd400b17 	ldw	r21,44(sp)
 20155b8:	dd000a17 	ldw	r20,40(sp)
 20155bc:	dcc00917 	ldw	r19,36(sp)
 20155c0:	dc800817 	ldw	r18,32(sp)
 20155c4:	dc400717 	ldw	r17,28(sp)
 20155c8:	dc000617 	ldw	r16,24(sp)
 20155cc:	dec01004 	addi	sp,sp,64
 20155d0:	f800283a 	ret
 20155d4:	00bfffd4 	movui	r2,65535
 20155d8:	11c06636 	bltu	r2,r7,2015774 <__umoddi3+0x2f4>
 20155dc:	00803fc4 	movi	r2,255
 20155e0:	11c12036 	bltu	r2,r7,2015a64 <__umoddi3+0x5e4>
 20155e4:	000b883a 	mov	r5,zero
 20155e8:	0005883a 	mov	r2,zero
 20155ec:	3084d83a 	srl	r2,r6,r2
 20155f0:	010080b4 	movhi	r4,514
 20155f4:	212f5304 	addi	r4,r4,-17076
 20155f8:	01c00804 	movi	r7,32
 20155fc:	1105883a 	add	r2,r2,r4
 2015600:	10c00003 	ldbu	r3,0(r2)
 2015604:	28c7883a 	add	r3,r5,r3
 2015608:	38e5c83a 	sub	r18,r7,r3
 201560c:	9000941e 	bne	r18,zero,2015860 <__umoddi3+0x3e0>
 2015610:	35405e36 	bltu	r6,r21,201578c <__umoddi3+0x30c>
 2015614:	84c05d2e 	bgeu	r16,r19,201578c <__umoddi3+0x30c>
 2015618:	8011883a 	mov	r8,r16
 201561c:	a813883a 	mov	r9,r21
 2015620:	dc000415 	stw	r16,16(sp)
 2015624:	dd400515 	stw	r21,20(sp)
 2015628:	003fdc06 	br	201559c <__umoddi3+0x11c>
 201562c:	00bfffd4 	movui	r2,65535
 2015630:	12004a36 	bltu	r2,r8,201575c <__umoddi3+0x2dc>
 2015634:	00803fc4 	movi	r2,255
 2015638:	12010d36 	bltu	r2,r8,2015a70 <__umoddi3+0x5f0>
 201563c:	000b883a 	mov	r5,zero
 2015640:	0005883a 	mov	r2,zero
 2015644:	9884d83a 	srl	r2,r19,r2
 2015648:	010080b4 	movhi	r4,514
 201564c:	212f5304 	addi	r4,r4,-17076
 2015650:	01800804 	movi	r6,32
 2015654:	1105883a 	add	r2,r2,r4
 2015658:	10c00003 	ldbu	r3,0(r2)
 201565c:	28c7883a 	add	r3,r5,r3
 2015660:	30c7c83a 	sub	r3,r6,r3
 2015664:	1800dc1e 	bne	r3,zero,20159d8 <__umoddi3+0x558>
 2015668:	002d883a 	mov	r22,zero
 201566c:	982ed43a 	srli	r23,r19,16
 2015670:	a809883a 	mov	r4,r21
 2015674:	9cbfffcc 	andi	r18,r19,65535
 2015678:	b80b883a 	mov	r5,r23
 201567c:	200d0bc0 	call	200d0bc <__udivsi3>
 2015680:	100b883a 	mov	r5,r2
 2015684:	9009883a 	mov	r4,r18
 2015688:	200d0cc0 	call	200d0cc <__mulsi3>
 201568c:	a809883a 	mov	r4,r21
 2015690:	b80b883a 	mov	r5,r23
 2015694:	1023883a 	mov	r17,r2
 2015698:	200d0c40 	call	200d0c4 <__umodsi3>
 201569c:	1004943a 	slli	r2,r2,16
 20156a0:	8006d43a 	srli	r3,r16,16
 20156a4:	10c4b03a 	or	r2,r2,r3
 20156a8:	1440032e 	bgeu	r2,r17,20156b8 <__umoddi3+0x238>
 20156ac:	14c5883a 	add	r2,r2,r19
 20156b0:	14c00136 	bltu	r2,r19,20156b8 <__umoddi3+0x238>
 20156b4:	14410236 	bltu	r2,r17,2015ac0 <__umoddi3+0x640>
 20156b8:	1463c83a 	sub	r17,r2,r17
 20156bc:	8809883a 	mov	r4,r17
 20156c0:	b80b883a 	mov	r5,r23
 20156c4:	200d0bc0 	call	200d0bc <__udivsi3>
 20156c8:	9009883a 	mov	r4,r18
 20156cc:	100b883a 	mov	r5,r2
 20156d0:	200d0cc0 	call	200d0cc <__mulsi3>
 20156d4:	8809883a 	mov	r4,r17
 20156d8:	b80b883a 	mov	r5,r23
 20156dc:	102b883a 	mov	r21,r2
 20156e0:	200d0c40 	call	200d0c4 <__umodsi3>
 20156e4:	1004943a 	slli	r2,r2,16
 20156e8:	80ffffcc 	andi	r3,r16,65535
 20156ec:	10c4b03a 	or	r2,r2,r3
 20156f0:	1540042e 	bgeu	r2,r21,2015704 <__umoddi3+0x284>
 20156f4:	14c5883a 	add	r2,r2,r19
 20156f8:	14c00236 	bltu	r2,r19,2015704 <__umoddi3+0x284>
 20156fc:	1540012e 	bgeu	r2,r21,2015704 <__umoddi3+0x284>
 2015700:	14c5883a 	add	r2,r2,r19
 2015704:	1545c83a 	sub	r2,r2,r21
 2015708:	1584d83a 	srl	r2,r2,r22
 201570c:	0013883a 	mov	r9,zero
 2015710:	d8800415 	stw	r2,16(sp)
 2015714:	d8c00417 	ldw	r3,16(sp)
 2015718:	0005883a 	mov	r2,zero
 201571c:	d8800515 	stw	r2,20(sp)
 2015720:	1811883a 	mov	r8,r3
 2015724:	003f9d06 	br	201559c <__umoddi3+0x11c>
 2015728:	00804034 	movhi	r2,256
 201572c:	10bfffc4 	addi	r2,r2,-1
 2015730:	14c0c636 	bltu	r2,r19,2015a4c <__umoddi3+0x5cc>
 2015734:	01400404 	movi	r5,16
 2015738:	2805883a 	mov	r2,r5
 201573c:	003f6c06 	br	20154f0 <__umoddi3+0x70>
 2015740:	01000044 	movi	r4,1
 2015744:	000b883a 	mov	r5,zero
 2015748:	200d0bc0 	call	200d0bc <__udivsi3>
 201574c:	1027883a 	mov	r19,r2
 2015750:	00bfffd4 	movui	r2,65535
 2015754:	14fff436 	bltu	r2,r19,2015728 <__umoddi3+0x2a8>
 2015758:	003f6106 	br	20154e0 <__umoddi3+0x60>
 201575c:	00804034 	movhi	r2,256
 2015760:	10bfffc4 	addi	r2,r2,-1
 2015764:	1200c536 	bltu	r2,r8,2015a7c <__umoddi3+0x5fc>
 2015768:	01400404 	movi	r5,16
 201576c:	2805883a 	mov	r2,r5
 2015770:	003fb406 	br	2015644 <__umoddi3+0x1c4>
 2015774:	00804034 	movhi	r2,256
 2015778:	10bfffc4 	addi	r2,r2,-1
 201577c:	11c0c236 	bltu	r2,r7,2015a88 <__umoddi3+0x608>
 2015780:	01400404 	movi	r5,16
 2015784:	2805883a 	mov	r2,r5
 2015788:	003f9806 	br	20155ec <__umoddi3+0x16c>
 201578c:	84c9c83a 	sub	r4,r16,r19
 2015790:	8105803a 	cmpltu	r2,r16,r4
 2015794:	a987c83a 	sub	r3,r21,r6
 2015798:	18abc83a 	sub	r21,r3,r2
 201579c:	2021883a 	mov	r16,r4
 20157a0:	003f9d06 	br	2015618 <__umoddi3+0x198>
 20157a4:	9ca6983a 	sll	r19,r19,r18
 20157a8:	3485c83a 	sub	r2,r6,r18
 20157ac:	a8a2d83a 	srl	r17,r21,r2
 20157b0:	982ed43a 	srli	r23,r19,16
 20157b4:	ac86983a 	sll	r3,r21,r18
 20157b8:	8084d83a 	srl	r2,r16,r2
 20157bc:	8809883a 	mov	r4,r17
 20157c0:	b80b883a 	mov	r5,r23
 20157c4:	18b8b03a 	or	fp,r3,r2
 20157c8:	9d3fffcc 	andi	r20,r19,65535
 20157cc:	200d0bc0 	call	200d0bc <__udivsi3>
 20157d0:	100b883a 	mov	r5,r2
 20157d4:	a009883a 	mov	r4,r20
 20157d8:	200d0cc0 	call	200d0cc <__mulsi3>
 20157dc:	8809883a 	mov	r4,r17
 20157e0:	b80b883a 	mov	r5,r23
 20157e4:	102b883a 	mov	r21,r2
 20157e8:	200d0c40 	call	200d0c4 <__umodsi3>
 20157ec:	1004943a 	slli	r2,r2,16
 20157f0:	e006d43a 	srli	r3,fp,16
 20157f4:	902d883a 	mov	r22,r18
 20157f8:	10c4b03a 	or	r2,r2,r3
 20157fc:	1540022e 	bgeu	r2,r21,2015808 <__umoddi3+0x388>
 2015800:	14c5883a 	add	r2,r2,r19
 2015804:	14c0ab2e 	bgeu	r2,r19,2015ab4 <__umoddi3+0x634>
 2015808:	1563c83a 	sub	r17,r2,r21
 201580c:	8809883a 	mov	r4,r17
 2015810:	b80b883a 	mov	r5,r23
 2015814:	200d0bc0 	call	200d0bc <__udivsi3>
 2015818:	100b883a 	mov	r5,r2
 201581c:	a009883a 	mov	r4,r20
 2015820:	200d0cc0 	call	200d0cc <__mulsi3>
 2015824:	8809883a 	mov	r4,r17
 2015828:	b80b883a 	mov	r5,r23
 201582c:	102b883a 	mov	r21,r2
 2015830:	200d0c40 	call	200d0c4 <__umodsi3>
 2015834:	1004943a 	slli	r2,r2,16
 2015838:	e0ffffcc 	andi	r3,fp,65535
 201583c:	10c4b03a 	or	r2,r2,r3
 2015840:	1540042e 	bgeu	r2,r21,2015854 <__umoddi3+0x3d4>
 2015844:	14c5883a 	add	r2,r2,r19
 2015848:	14c00236 	bltu	r2,r19,2015854 <__umoddi3+0x3d4>
 201584c:	1540012e 	bgeu	r2,r21,2015854 <__umoddi3+0x3d4>
 2015850:	14c5883a 	add	r2,r2,r19
 2015854:	84a0983a 	sll	r16,r16,r18
 2015858:	156bc83a 	sub	r21,r2,r21
 201585c:	003f3106 	br	2015524 <__umoddi3+0xa4>
 2015860:	3c8fc83a 	sub	r7,r7,r18
 2015864:	3486983a 	sll	r3,r6,r18
 2015868:	99c4d83a 	srl	r2,r19,r7
 201586c:	a9e2d83a 	srl	r17,r21,r7
 2015870:	ac8c983a 	sll	r6,r21,r18
 2015874:	18acb03a 	or	r22,r3,r2
 2015878:	b02ed43a 	srli	r23,r22,16
 201587c:	81c4d83a 	srl	r2,r16,r7
 2015880:	8809883a 	mov	r4,r17
 2015884:	b80b883a 	mov	r5,r23
 2015888:	308cb03a 	or	r6,r6,r2
 201588c:	d9c00315 	stw	r7,12(sp)
 2015890:	d9800215 	stw	r6,8(sp)
 2015894:	b53fffcc 	andi	r20,r22,65535
 2015898:	200d0bc0 	call	200d0bc <__udivsi3>
 201589c:	100b883a 	mov	r5,r2
 20158a0:	a009883a 	mov	r4,r20
 20158a4:	1039883a 	mov	fp,r2
 20158a8:	200d0cc0 	call	200d0cc <__mulsi3>
 20158ac:	8809883a 	mov	r4,r17
 20158b0:	b80b883a 	mov	r5,r23
 20158b4:	102b883a 	mov	r21,r2
 20158b8:	200d0c40 	call	200d0c4 <__umodsi3>
 20158bc:	d9000217 	ldw	r4,8(sp)
 20158c0:	1004943a 	slli	r2,r2,16
 20158c4:	9ca6983a 	sll	r19,r19,r18
 20158c8:	2006d43a 	srli	r3,r4,16
 20158cc:	84a0983a 	sll	r16,r16,r18
 20158d0:	dcc00015 	stw	r19,0(sp)
 20158d4:	10c4b03a 	or	r2,r2,r3
 20158d8:	dc000115 	stw	r16,4(sp)
 20158dc:	1540032e 	bgeu	r2,r21,20158ec <__umoddi3+0x46c>
 20158e0:	1585883a 	add	r2,r2,r22
 20158e4:	e73fffc4 	addi	fp,fp,-1
 20158e8:	15806e2e 	bgeu	r2,r22,2015aa4 <__umoddi3+0x624>
 20158ec:	1563c83a 	sub	r17,r2,r21
 20158f0:	8809883a 	mov	r4,r17
 20158f4:	b80b883a 	mov	r5,r23
 20158f8:	200d0bc0 	call	200d0bc <__udivsi3>
 20158fc:	100b883a 	mov	r5,r2
 2015900:	a009883a 	mov	r4,r20
 2015904:	1021883a 	mov	r16,r2
 2015908:	200d0cc0 	call	200d0cc <__mulsi3>
 201590c:	b80b883a 	mov	r5,r23
 2015910:	8809883a 	mov	r4,r17
 2015914:	1029883a 	mov	r20,r2
 2015918:	200d0c40 	call	200d0c4 <__umodsi3>
 201591c:	d9400217 	ldw	r5,8(sp)
 2015920:	1004943a 	slli	r2,r2,16
 2015924:	28ffffcc 	andi	r3,r5,65535
 2015928:	10c4b03a 	or	r2,r2,r3
 201592c:	1500032e 	bgeu	r2,r20,201593c <__umoddi3+0x4bc>
 2015930:	1585883a 	add	r2,r2,r22
 2015934:	843fffc4 	addi	r16,r16,-1
 2015938:	1580562e 	bgeu	r2,r22,2015a94 <__umoddi3+0x614>
 201593c:	d9800017 	ldw	r6,0(sp)
 2015940:	e022943a 	slli	r17,fp,16
 2015944:	302ed43a 	srli	r23,r6,16
 2015948:	8462b03a 	or	r17,r16,r17
 201594c:	34ffffcc 	andi	r19,r6,65535
 2015950:	882ad43a 	srli	r21,r17,16
 2015954:	8c7fffcc 	andi	r17,r17,65535
 2015958:	8809883a 	mov	r4,r17
 201595c:	980b883a 	mov	r5,r19
 2015960:	1521c83a 	sub	r16,r2,r20
 2015964:	200d0cc0 	call	200d0cc <__mulsi3>
 2015968:	8809883a 	mov	r4,r17
 201596c:	b80b883a 	mov	r5,r23
 2015970:	1029883a 	mov	r20,r2
 2015974:	200d0cc0 	call	200d0cc <__mulsi3>
 2015978:	980b883a 	mov	r5,r19
 201597c:	a809883a 	mov	r4,r21
 2015980:	1023883a 	mov	r17,r2
 2015984:	200d0cc0 	call	200d0cc <__mulsi3>
 2015988:	a809883a 	mov	r4,r21
 201598c:	b80b883a 	mov	r5,r23
 2015990:	1027883a 	mov	r19,r2
 2015994:	200d0cc0 	call	200d0cc <__mulsi3>
 2015998:	100b883a 	mov	r5,r2
 201599c:	a004d43a 	srli	r2,r20,16
 20159a0:	8ce3883a 	add	r17,r17,r19
 20159a4:	1449883a 	add	r4,r2,r17
 20159a8:	24c0022e 	bgeu	r4,r19,20159b4 <__umoddi3+0x534>
 20159ac:	00800074 	movhi	r2,1
 20159b0:	288b883a 	add	r5,r5,r2
 20159b4:	2004d43a 	srli	r2,r4,16
 20159b8:	2008943a 	slli	r4,r4,16
 20159bc:	a0ffffcc 	andi	r3,r20,65535
 20159c0:	288d883a 	add	r6,r5,r2
 20159c4:	20c9883a 	add	r4,r4,r3
 20159c8:	81800b36 	bltu	r16,r6,20159f8 <__umoddi3+0x578>
 20159cc:	81804026 	beq	r16,r6,2015ad0 <__umoddi3+0x650>
 20159d0:	818dc83a 	sub	r6,r16,r6
 20159d4:	00000f06 	br	2015a14 <__umoddi3+0x594>
 20159d8:	30c5c83a 	sub	r2,r6,r3
 20159dc:	182d883a 	mov	r22,r3
 20159e0:	8084d83a 	srl	r2,r16,r2
 20159e4:	a8c6983a 	sll	r3,r21,r3
 20159e8:	9da6983a 	sll	r19,r19,r22
 20159ec:	85a0983a 	sll	r16,r16,r22
 20159f0:	18aab03a 	or	r21,r3,r2
 20159f4:	003f1d06 	br	201566c <__umoddi3+0x1ec>
 20159f8:	d8c00017 	ldw	r3,0(sp)
 20159fc:	20c5c83a 	sub	r2,r4,r3
 2015a00:	2089803a 	cmpltu	r4,r4,r2
 2015a04:	3587c83a 	sub	r3,r6,r22
 2015a08:	1907c83a 	sub	r3,r3,r4
 2015a0c:	80cdc83a 	sub	r6,r16,r3
 2015a10:	1009883a 	mov	r4,r2
 2015a14:	d9400117 	ldw	r5,4(sp)
 2015a18:	2905c83a 	sub	r2,r5,r4
 2015a1c:	2887803a 	cmpltu	r3,r5,r2
 2015a20:	30c7c83a 	sub	r3,r6,r3
 2015a24:	d9800317 	ldw	r6,12(sp)
 2015a28:	1484d83a 	srl	r2,r2,r18
 2015a2c:	1988983a 	sll	r4,r3,r6
 2015a30:	1c86d83a 	srl	r3,r3,r18
 2015a34:	2088b03a 	or	r4,r4,r2
 2015a38:	2011883a 	mov	r8,r4
 2015a3c:	1813883a 	mov	r9,r3
 2015a40:	d9000415 	stw	r4,16(sp)
 2015a44:	d8c00515 	stw	r3,20(sp)
 2015a48:	003ed406 	br	201559c <__umoddi3+0x11c>
 2015a4c:	01400604 	movi	r5,24
 2015a50:	2805883a 	mov	r2,r5
 2015a54:	003ea606 	br	20154f0 <__umoddi3+0x70>
 2015a58:	01400204 	movi	r5,8
 2015a5c:	2805883a 	mov	r2,r5
 2015a60:	003ea306 	br	20154f0 <__umoddi3+0x70>
 2015a64:	01400204 	movi	r5,8
 2015a68:	2805883a 	mov	r2,r5
 2015a6c:	003edf06 	br	20155ec <__umoddi3+0x16c>
 2015a70:	01400204 	movi	r5,8
 2015a74:	2805883a 	mov	r2,r5
 2015a78:	003ef206 	br	2015644 <__umoddi3+0x1c4>
 2015a7c:	01400604 	movi	r5,24
 2015a80:	2805883a 	mov	r2,r5
 2015a84:	003eef06 	br	2015644 <__umoddi3+0x1c4>
 2015a88:	01400604 	movi	r5,24
 2015a8c:	2805883a 	mov	r2,r5
 2015a90:	003ed606 	br	20155ec <__umoddi3+0x16c>
 2015a94:	153fa92e 	bgeu	r2,r20,201593c <__umoddi3+0x4bc>
 2015a98:	843fffc4 	addi	r16,r16,-1
 2015a9c:	1585883a 	add	r2,r2,r22
 2015aa0:	003fa606 	br	201593c <__umoddi3+0x4bc>
 2015aa4:	157f912e 	bgeu	r2,r21,20158ec <__umoddi3+0x46c>
 2015aa8:	e73fffc4 	addi	fp,fp,-1
 2015aac:	1585883a 	add	r2,r2,r22
 2015ab0:	003f8e06 	br	20158ec <__umoddi3+0x46c>
 2015ab4:	157f542e 	bgeu	r2,r21,2015808 <__umoddi3+0x388>
 2015ab8:	14c5883a 	add	r2,r2,r19
 2015abc:	003f5206 	br	2015808 <__umoddi3+0x388>
 2015ac0:	14c5883a 	add	r2,r2,r19
 2015ac4:	003efc06 	br	20156b8 <__umoddi3+0x238>
 2015ac8:	14c5883a 	add	r2,r2,r19
 2015acc:	003ea606 	br	2015568 <__umoddi3+0xe8>
 2015ad0:	d8800117 	ldw	r2,4(sp)
 2015ad4:	113fc836 	bltu	r2,r4,20159f8 <__umoddi3+0x578>
 2015ad8:	000d883a 	mov	r6,zero
 2015adc:	003fcd06 	br	2015a14 <__umoddi3+0x594>

02015ae0 <_fpadd_parts>:
 2015ae0:	defff804 	addi	sp,sp,-32
 2015ae4:	dcc00315 	stw	r19,12(sp)
 2015ae8:	2027883a 	mov	r19,r4
 2015aec:	21000017 	ldw	r4,0(r4)
 2015af0:	00c00044 	movi	r3,1
 2015af4:	dd400515 	stw	r21,20(sp)
 2015af8:	dd000415 	stw	r20,16(sp)
 2015afc:	ddc00715 	stw	r23,28(sp)
 2015b00:	dd800615 	stw	r22,24(sp)
 2015b04:	dc800215 	stw	r18,8(sp)
 2015b08:	dc400115 	stw	r17,4(sp)
 2015b0c:	dc000015 	stw	r16,0(sp)
 2015b10:	282b883a 	mov	r21,r5
 2015b14:	3029883a 	mov	r20,r6
 2015b18:	1900632e 	bgeu	r3,r4,2015ca8 <_fpadd_parts+0x1c8>
 2015b1c:	28800017 	ldw	r2,0(r5)
 2015b20:	1880812e 	bgeu	r3,r2,2015d28 <_fpadd_parts+0x248>
 2015b24:	00c00104 	movi	r3,4
 2015b28:	20c0dc26 	beq	r4,r3,2015e9c <_fpadd_parts+0x3bc>
 2015b2c:	10c07e26 	beq	r2,r3,2015d28 <_fpadd_parts+0x248>
 2015b30:	00c00084 	movi	r3,2
 2015b34:	10c06726 	beq	r2,r3,2015cd4 <_fpadd_parts+0x1f4>
 2015b38:	20c07b26 	beq	r4,r3,2015d28 <_fpadd_parts+0x248>
 2015b3c:	9dc00217 	ldw	r23,8(r19)
 2015b40:	28c00217 	ldw	r3,8(r5)
 2015b44:	9c400317 	ldw	r17,12(r19)
 2015b48:	2bc00317 	ldw	r15,12(r5)
 2015b4c:	b8cdc83a 	sub	r6,r23,r3
 2015b50:	9c800417 	ldw	r18,16(r19)
 2015b54:	2c000417 	ldw	r16,16(r5)
 2015b58:	3009883a 	mov	r4,r6
 2015b5c:	30009716 	blt	r6,zero,2015dbc <_fpadd_parts+0x2dc>
 2015b60:	00800fc4 	movi	r2,63
 2015b64:	11806b16 	blt	r2,r6,2015d14 <_fpadd_parts+0x234>
 2015b68:	0100a40e 	bge	zero,r4,2015dfc <_fpadd_parts+0x31c>
 2015b6c:	35bff804 	addi	r22,r6,-32
 2015b70:	b000bc16 	blt	r22,zero,2015e64 <_fpadd_parts+0x384>
 2015b74:	8596d83a 	srl	r11,r16,r22
 2015b78:	0019883a 	mov	r12,zero
 2015b7c:	0013883a 	mov	r9,zero
 2015b80:	01000044 	movi	r4,1
 2015b84:	0015883a 	mov	r10,zero
 2015b88:	b000be16 	blt	r22,zero,2015e84 <_fpadd_parts+0x3a4>
 2015b8c:	2590983a 	sll	r8,r4,r22
 2015b90:	000f883a 	mov	r7,zero
 2015b94:	00bfffc4 	movi	r2,-1
 2015b98:	3889883a 	add	r4,r7,r2
 2015b9c:	408b883a 	add	r5,r8,r2
 2015ba0:	21cd803a 	cmpltu	r6,r4,r7
 2015ba4:	314b883a 	add	r5,r6,r5
 2015ba8:	7904703a 	and	r2,r15,r4
 2015bac:	8146703a 	and	r3,r16,r5
 2015bb0:	10c4b03a 	or	r2,r2,r3
 2015bb4:	10000226 	beq	r2,zero,2015bc0 <_fpadd_parts+0xe0>
 2015bb8:	02400044 	movi	r9,1
 2015bbc:	0015883a 	mov	r10,zero
 2015bc0:	5a5eb03a 	or	r15,r11,r9
 2015bc4:	62a0b03a 	or	r16,r12,r10
 2015bc8:	99400117 	ldw	r5,4(r19)
 2015bcc:	a8800117 	ldw	r2,4(r21)
 2015bd0:	28806e26 	beq	r5,r2,2015d8c <_fpadd_parts+0x2ac>
 2015bd4:	28006626 	beq	r5,zero,2015d70 <_fpadd_parts+0x290>
 2015bd8:	7c45c83a 	sub	r2,r15,r17
 2015bdc:	7889803a 	cmpltu	r4,r15,r2
 2015be0:	8487c83a 	sub	r3,r16,r18
 2015be4:	1909c83a 	sub	r4,r3,r4
 2015be8:	100d883a 	mov	r6,r2
 2015bec:	200f883a 	mov	r7,r4
 2015bf0:	38007716 	blt	r7,zero,2015dd0 <_fpadd_parts+0x2f0>
 2015bf4:	a5c00215 	stw	r23,8(r20)
 2015bf8:	a1c00415 	stw	r7,16(r20)
 2015bfc:	a0000115 	stw	zero,4(r20)
 2015c00:	a1800315 	stw	r6,12(r20)
 2015c04:	a2000317 	ldw	r8,12(r20)
 2015c08:	a2400417 	ldw	r9,16(r20)
 2015c0c:	00bfffc4 	movi	r2,-1
 2015c10:	408b883a 	add	r5,r8,r2
 2015c14:	2a09803a 	cmpltu	r4,r5,r8
 2015c18:	488d883a 	add	r6,r9,r2
 2015c1c:	01c40034 	movhi	r7,4096
 2015c20:	39ffffc4 	addi	r7,r7,-1
 2015c24:	218d883a 	add	r6,r4,r6
 2015c28:	39801736 	bltu	r7,r6,2015c88 <_fpadd_parts+0x1a8>
 2015c2c:	31c06526 	beq	r6,r7,2015dc4 <_fpadd_parts+0x2e4>
 2015c30:	a3000217 	ldw	r12,8(r20)
 2015c34:	4209883a 	add	r4,r8,r8
 2015c38:	00bfffc4 	movi	r2,-1
 2015c3c:	220f803a 	cmpltu	r7,r4,r8
 2015c40:	4a4b883a 	add	r5,r9,r9
 2015c44:	394f883a 	add	r7,r7,r5
 2015c48:	2095883a 	add	r10,r4,r2
 2015c4c:	3897883a 	add	r11,r7,r2
 2015c50:	510d803a 	cmpltu	r6,r10,r4
 2015c54:	6099883a 	add	r12,r12,r2
 2015c58:	32d7883a 	add	r11,r6,r11
 2015c5c:	00840034 	movhi	r2,4096
 2015c60:	10bfffc4 	addi	r2,r2,-1
 2015c64:	2011883a 	mov	r8,r4
 2015c68:	3813883a 	mov	r9,r7
 2015c6c:	a1000315 	stw	r4,12(r20)
 2015c70:	a1c00415 	stw	r7,16(r20)
 2015c74:	a3000215 	stw	r12,8(r20)
 2015c78:	12c00336 	bltu	r2,r11,2015c88 <_fpadd_parts+0x1a8>
 2015c7c:	58bfed1e 	bne	r11,r2,2015c34 <_fpadd_parts+0x154>
 2015c80:	00bfff84 	movi	r2,-2
 2015c84:	12bfeb2e 	bgeu	r2,r10,2015c34 <_fpadd_parts+0x154>
 2015c88:	a2800417 	ldw	r10,16(r20)
 2015c8c:	008000c4 	movi	r2,3
 2015c90:	00c80034 	movhi	r3,8192
 2015c94:	18ffffc4 	addi	r3,r3,-1
 2015c98:	a2400317 	ldw	r9,12(r20)
 2015c9c:	a0800015 	stw	r2,0(r20)
 2015ca0:	1a802336 	bltu	r3,r10,2015d30 <_fpadd_parts+0x250>
 2015ca4:	a027883a 	mov	r19,r20
 2015ca8:	9805883a 	mov	r2,r19
 2015cac:	ddc00717 	ldw	r23,28(sp)
 2015cb0:	dd800617 	ldw	r22,24(sp)
 2015cb4:	dd400517 	ldw	r21,20(sp)
 2015cb8:	dd000417 	ldw	r20,16(sp)
 2015cbc:	dcc00317 	ldw	r19,12(sp)
 2015cc0:	dc800217 	ldw	r18,8(sp)
 2015cc4:	dc400117 	ldw	r17,4(sp)
 2015cc8:	dc000017 	ldw	r16,0(sp)
 2015ccc:	dec00804 	addi	sp,sp,32
 2015cd0:	f800283a 	ret
 2015cd4:	20fff41e 	bne	r4,r3,2015ca8 <_fpadd_parts+0x1c8>
 2015cd8:	31000015 	stw	r4,0(r6)
 2015cdc:	98800117 	ldw	r2,4(r19)
 2015ce0:	30800115 	stw	r2,4(r6)
 2015ce4:	98c00217 	ldw	r3,8(r19)
 2015ce8:	30c00215 	stw	r3,8(r6)
 2015cec:	98800317 	ldw	r2,12(r19)
 2015cf0:	30800315 	stw	r2,12(r6)
 2015cf4:	98c00417 	ldw	r3,16(r19)
 2015cf8:	30c00415 	stw	r3,16(r6)
 2015cfc:	98800117 	ldw	r2,4(r19)
 2015d00:	28c00117 	ldw	r3,4(r5)
 2015d04:	3027883a 	mov	r19,r6
 2015d08:	10c4703a 	and	r2,r2,r3
 2015d0c:	30800115 	stw	r2,4(r6)
 2015d10:	003fe506 	br	2015ca8 <_fpadd_parts+0x1c8>
 2015d14:	1dc02616 	blt	r3,r23,2015db0 <_fpadd_parts+0x2d0>
 2015d18:	0023883a 	mov	r17,zero
 2015d1c:	182f883a 	mov	r23,r3
 2015d20:	0025883a 	mov	r18,zero
 2015d24:	003fa806 	br	2015bc8 <_fpadd_parts+0xe8>
 2015d28:	a827883a 	mov	r19,r21
 2015d2c:	003fde06 	br	2015ca8 <_fpadd_parts+0x1c8>
 2015d30:	01800044 	movi	r6,1
 2015d34:	500497fa 	slli	r2,r10,31
 2015d38:	4808d07a 	srli	r4,r9,1
 2015d3c:	518ad83a 	srl	r5,r10,r6
 2015d40:	a2000217 	ldw	r8,8(r20)
 2015d44:	1108b03a 	or	r4,r2,r4
 2015d48:	0007883a 	mov	r3,zero
 2015d4c:	4984703a 	and	r2,r9,r6
 2015d50:	208cb03a 	or	r6,r4,r2
 2015d54:	28ceb03a 	or	r7,r5,r3
 2015d58:	42000044 	addi	r8,r8,1
 2015d5c:	a027883a 	mov	r19,r20
 2015d60:	a1c00415 	stw	r7,16(r20)
 2015d64:	a2000215 	stw	r8,8(r20)
 2015d68:	a1800315 	stw	r6,12(r20)
 2015d6c:	003fce06 	br	2015ca8 <_fpadd_parts+0x1c8>
 2015d70:	8bc5c83a 	sub	r2,r17,r15
 2015d74:	8889803a 	cmpltu	r4,r17,r2
 2015d78:	9407c83a 	sub	r3,r18,r16
 2015d7c:	1909c83a 	sub	r4,r3,r4
 2015d80:	100d883a 	mov	r6,r2
 2015d84:	200f883a 	mov	r7,r4
 2015d88:	003f9906 	br	2015bf0 <_fpadd_parts+0x110>
 2015d8c:	7c45883a 	add	r2,r15,r17
 2015d90:	13c9803a 	cmpltu	r4,r2,r15
 2015d94:	8487883a 	add	r3,r16,r18
 2015d98:	20c9883a 	add	r4,r4,r3
 2015d9c:	a1400115 	stw	r5,4(r20)
 2015da0:	a5c00215 	stw	r23,8(r20)
 2015da4:	a0800315 	stw	r2,12(r20)
 2015da8:	a1000415 	stw	r4,16(r20)
 2015dac:	003fb606 	br	2015c88 <_fpadd_parts+0x1a8>
 2015db0:	001f883a 	mov	r15,zero
 2015db4:	0021883a 	mov	r16,zero
 2015db8:	003f8306 	br	2015bc8 <_fpadd_parts+0xe8>
 2015dbc:	018dc83a 	sub	r6,zero,r6
 2015dc0:	003f6706 	br	2015b60 <_fpadd_parts+0x80>
 2015dc4:	00bfff84 	movi	r2,-2
 2015dc8:	117faf36 	bltu	r2,r5,2015c88 <_fpadd_parts+0x1a8>
 2015dcc:	003f9806 	br	2015c30 <_fpadd_parts+0x150>
 2015dd0:	0005883a 	mov	r2,zero
 2015dd4:	1189c83a 	sub	r4,r2,r6
 2015dd8:	1105803a 	cmpltu	r2,r2,r4
 2015ddc:	01cbc83a 	sub	r5,zero,r7
 2015de0:	2885c83a 	sub	r2,r5,r2
 2015de4:	01800044 	movi	r6,1
 2015de8:	a1800115 	stw	r6,4(r20)
 2015dec:	a5c00215 	stw	r23,8(r20)
 2015df0:	a1000315 	stw	r4,12(r20)
 2015df4:	a0800415 	stw	r2,16(r20)
 2015df8:	003f8206 	br	2015c04 <_fpadd_parts+0x124>
 2015dfc:	203f7226 	beq	r4,zero,2015bc8 <_fpadd_parts+0xe8>
 2015e00:	35bff804 	addi	r22,r6,-32
 2015e04:	b9af883a 	add	r23,r23,r6
 2015e08:	b0003116 	blt	r22,zero,2015ed0 <_fpadd_parts+0x3f0>
 2015e0c:	959ad83a 	srl	r13,r18,r22
 2015e10:	001d883a 	mov	r14,zero
 2015e14:	000f883a 	mov	r7,zero
 2015e18:	01000044 	movi	r4,1
 2015e1c:	0011883a 	mov	r8,zero
 2015e20:	b0002516 	blt	r22,zero,2015eb8 <_fpadd_parts+0x3d8>
 2015e24:	2594983a 	sll	r10,r4,r22
 2015e28:	0013883a 	mov	r9,zero
 2015e2c:	00bfffc4 	movi	r2,-1
 2015e30:	4889883a 	add	r4,r9,r2
 2015e34:	508b883a 	add	r5,r10,r2
 2015e38:	224d803a 	cmpltu	r6,r4,r9
 2015e3c:	314b883a 	add	r5,r6,r5
 2015e40:	8904703a 	and	r2,r17,r4
 2015e44:	9146703a 	and	r3,r18,r5
 2015e48:	10c4b03a 	or	r2,r2,r3
 2015e4c:	10000226 	beq	r2,zero,2015e58 <_fpadd_parts+0x378>
 2015e50:	01c00044 	movi	r7,1
 2015e54:	0011883a 	mov	r8,zero
 2015e58:	69e2b03a 	or	r17,r13,r7
 2015e5c:	7224b03a 	or	r18,r14,r8
 2015e60:	003f5906 	br	2015bc8 <_fpadd_parts+0xe8>
 2015e64:	8407883a 	add	r3,r16,r16
 2015e68:	008007c4 	movi	r2,31
 2015e6c:	1185c83a 	sub	r2,r2,r6
 2015e70:	1886983a 	sll	r3,r3,r2
 2015e74:	7996d83a 	srl	r11,r15,r6
 2015e78:	8198d83a 	srl	r12,r16,r6
 2015e7c:	1ad6b03a 	or	r11,r3,r11
 2015e80:	003f3e06 	br	2015b7c <_fpadd_parts+0x9c>
 2015e84:	2006d07a 	srli	r3,r4,1
 2015e88:	008007c4 	movi	r2,31
 2015e8c:	1185c83a 	sub	r2,r2,r6
 2015e90:	1890d83a 	srl	r8,r3,r2
 2015e94:	218e983a 	sll	r7,r4,r6
 2015e98:	003f3e06 	br	2015b94 <_fpadd_parts+0xb4>
 2015e9c:	113f821e 	bne	r2,r4,2015ca8 <_fpadd_parts+0x1c8>
 2015ea0:	28c00117 	ldw	r3,4(r5)
 2015ea4:	98800117 	ldw	r2,4(r19)
 2015ea8:	10ff7f26 	beq	r2,r3,2015ca8 <_fpadd_parts+0x1c8>
 2015eac:	04c080b4 	movhi	r19,514
 2015eb0:	9cf01204 	addi	r19,r19,-16312
 2015eb4:	003f7c06 	br	2015ca8 <_fpadd_parts+0x1c8>
 2015eb8:	2006d07a 	srli	r3,r4,1
 2015ebc:	008007c4 	movi	r2,31
 2015ec0:	1185c83a 	sub	r2,r2,r6
 2015ec4:	1894d83a 	srl	r10,r3,r2
 2015ec8:	2192983a 	sll	r9,r4,r6
 2015ecc:	003fd706 	br	2015e2c <_fpadd_parts+0x34c>
 2015ed0:	9487883a 	add	r3,r18,r18
 2015ed4:	008007c4 	movi	r2,31
 2015ed8:	1185c83a 	sub	r2,r2,r6
 2015edc:	1886983a 	sll	r3,r3,r2
 2015ee0:	899ad83a 	srl	r13,r17,r6
 2015ee4:	919cd83a 	srl	r14,r18,r6
 2015ee8:	1b5ab03a 	or	r13,r3,r13
 2015eec:	003fc906 	br	2015e14 <_fpadd_parts+0x334>

02015ef0 <__subdf3>:
 2015ef0:	deffea04 	addi	sp,sp,-88
 2015ef4:	dcc01415 	stw	r19,80(sp)
 2015ef8:	dcc00404 	addi	r19,sp,16
 2015efc:	2011883a 	mov	r8,r4
 2015f00:	2813883a 	mov	r9,r5
 2015f04:	dc401315 	stw	r17,76(sp)
 2015f08:	d809883a 	mov	r4,sp
 2015f0c:	980b883a 	mov	r5,r19
 2015f10:	dc400904 	addi	r17,sp,36
 2015f14:	dfc01515 	stw	ra,84(sp)
 2015f18:	da400115 	stw	r9,4(sp)
 2015f1c:	d9c00315 	stw	r7,12(sp)
 2015f20:	da000015 	stw	r8,0(sp)
 2015f24:	d9800215 	stw	r6,8(sp)
 2015f28:	20170c40 	call	20170c4 <__unpack_d>
 2015f2c:	d9000204 	addi	r4,sp,8
 2015f30:	880b883a 	mov	r5,r17
 2015f34:	20170c40 	call	20170c4 <__unpack_d>
 2015f38:	d8800a17 	ldw	r2,40(sp)
 2015f3c:	880b883a 	mov	r5,r17
 2015f40:	9809883a 	mov	r4,r19
 2015f44:	d9800e04 	addi	r6,sp,56
 2015f48:	1080005c 	xori	r2,r2,1
 2015f4c:	d8800a15 	stw	r2,40(sp)
 2015f50:	2015ae00 	call	2015ae0 <_fpadd_parts>
 2015f54:	1009883a 	mov	r4,r2
 2015f58:	2016db00 	call	2016db0 <__pack_d>
 2015f5c:	dfc01517 	ldw	ra,84(sp)
 2015f60:	dcc01417 	ldw	r19,80(sp)
 2015f64:	dc401317 	ldw	r17,76(sp)
 2015f68:	dec01604 	addi	sp,sp,88
 2015f6c:	f800283a 	ret

02015f70 <__adddf3>:
 2015f70:	deffea04 	addi	sp,sp,-88
 2015f74:	dcc01415 	stw	r19,80(sp)
 2015f78:	dcc00404 	addi	r19,sp,16
 2015f7c:	2011883a 	mov	r8,r4
 2015f80:	2813883a 	mov	r9,r5
 2015f84:	dc401315 	stw	r17,76(sp)
 2015f88:	d809883a 	mov	r4,sp
 2015f8c:	980b883a 	mov	r5,r19
 2015f90:	dc400904 	addi	r17,sp,36
 2015f94:	dfc01515 	stw	ra,84(sp)
 2015f98:	da400115 	stw	r9,4(sp)
 2015f9c:	d9c00315 	stw	r7,12(sp)
 2015fa0:	da000015 	stw	r8,0(sp)
 2015fa4:	d9800215 	stw	r6,8(sp)
 2015fa8:	20170c40 	call	20170c4 <__unpack_d>
 2015fac:	d9000204 	addi	r4,sp,8
 2015fb0:	880b883a 	mov	r5,r17
 2015fb4:	20170c40 	call	20170c4 <__unpack_d>
 2015fb8:	d9800e04 	addi	r6,sp,56
 2015fbc:	9809883a 	mov	r4,r19
 2015fc0:	880b883a 	mov	r5,r17
 2015fc4:	2015ae00 	call	2015ae0 <_fpadd_parts>
 2015fc8:	1009883a 	mov	r4,r2
 2015fcc:	2016db00 	call	2016db0 <__pack_d>
 2015fd0:	dfc01517 	ldw	ra,84(sp)
 2015fd4:	dcc01417 	ldw	r19,80(sp)
 2015fd8:	dc401317 	ldw	r17,76(sp)
 2015fdc:	dec01604 	addi	sp,sp,88
 2015fe0:	f800283a 	ret

02015fe4 <__muldf3>:
 2015fe4:	deffe004 	addi	sp,sp,-128
 2015fe8:	dc401815 	stw	r17,96(sp)
 2015fec:	dc400404 	addi	r17,sp,16
 2015ff0:	2011883a 	mov	r8,r4
 2015ff4:	2813883a 	mov	r9,r5
 2015ff8:	dc001715 	stw	r16,92(sp)
 2015ffc:	d809883a 	mov	r4,sp
 2016000:	880b883a 	mov	r5,r17
 2016004:	dc000904 	addi	r16,sp,36
 2016008:	dfc01f15 	stw	ra,124(sp)
 201600c:	da400115 	stw	r9,4(sp)
 2016010:	d9c00315 	stw	r7,12(sp)
 2016014:	da000015 	stw	r8,0(sp)
 2016018:	d9800215 	stw	r6,8(sp)
 201601c:	ddc01e15 	stw	r23,120(sp)
 2016020:	dd801d15 	stw	r22,116(sp)
 2016024:	dd401c15 	stw	r21,112(sp)
 2016028:	dd001b15 	stw	r20,108(sp)
 201602c:	dcc01a15 	stw	r19,104(sp)
 2016030:	dc801915 	stw	r18,100(sp)
 2016034:	20170c40 	call	20170c4 <__unpack_d>
 2016038:	d9000204 	addi	r4,sp,8
 201603c:	800b883a 	mov	r5,r16
 2016040:	20170c40 	call	20170c4 <__unpack_d>
 2016044:	d9000417 	ldw	r4,16(sp)
 2016048:	00800044 	movi	r2,1
 201604c:	1100102e 	bgeu	r2,r4,2016090 <__muldf3+0xac>
 2016050:	d8c00917 	ldw	r3,36(sp)
 2016054:	10c0062e 	bgeu	r2,r3,2016070 <__muldf3+0x8c>
 2016058:	00800104 	movi	r2,4
 201605c:	20800a26 	beq	r4,r2,2016088 <__muldf3+0xa4>
 2016060:	1880cc26 	beq	r3,r2,2016394 <__muldf3+0x3b0>
 2016064:	00800084 	movi	r2,2
 2016068:	20800926 	beq	r4,r2,2016090 <__muldf3+0xac>
 201606c:	1880191e 	bne	r3,r2,20160d4 <__muldf3+0xf0>
 2016070:	d8c00a17 	ldw	r3,40(sp)
 2016074:	d8800517 	ldw	r2,20(sp)
 2016078:	8009883a 	mov	r4,r16
 201607c:	10c4c03a 	cmpne	r2,r2,r3
 2016080:	d8800a15 	stw	r2,40(sp)
 2016084:	00000706 	br	20160a4 <__muldf3+0xc0>
 2016088:	00800084 	movi	r2,2
 201608c:	1880c326 	beq	r3,r2,201639c <__muldf3+0x3b8>
 2016090:	d8800517 	ldw	r2,20(sp)
 2016094:	d8c00a17 	ldw	r3,40(sp)
 2016098:	8809883a 	mov	r4,r17
 201609c:	10c4c03a 	cmpne	r2,r2,r3
 20160a0:	d8800515 	stw	r2,20(sp)
 20160a4:	2016db00 	call	2016db0 <__pack_d>
 20160a8:	dfc01f17 	ldw	ra,124(sp)
 20160ac:	ddc01e17 	ldw	r23,120(sp)
 20160b0:	dd801d17 	ldw	r22,116(sp)
 20160b4:	dd401c17 	ldw	r21,112(sp)
 20160b8:	dd001b17 	ldw	r20,108(sp)
 20160bc:	dcc01a17 	ldw	r19,104(sp)
 20160c0:	dc801917 	ldw	r18,100(sp)
 20160c4:	dc401817 	ldw	r17,96(sp)
 20160c8:	dc001717 	ldw	r16,92(sp)
 20160cc:	dec02004 	addi	sp,sp,128
 20160d0:	f800283a 	ret
 20160d4:	dd800717 	ldw	r22,28(sp)
 20160d8:	dc800c17 	ldw	r18,48(sp)
 20160dc:	002b883a 	mov	r21,zero
 20160e0:	0023883a 	mov	r17,zero
 20160e4:	a80b883a 	mov	r5,r21
 20160e8:	b00d883a 	mov	r6,r22
 20160ec:	880f883a 	mov	r7,r17
 20160f0:	ddc00817 	ldw	r23,32(sp)
 20160f4:	dcc00d17 	ldw	r19,52(sp)
 20160f8:	9009883a 	mov	r4,r18
 20160fc:	2016c0c0 	call	2016c0c <__muldi3>
 2016100:	001b883a 	mov	r13,zero
 2016104:	680f883a 	mov	r7,r13
 2016108:	b009883a 	mov	r4,r22
 201610c:	000b883a 	mov	r5,zero
 2016110:	980d883a 	mov	r6,r19
 2016114:	b82d883a 	mov	r22,r23
 2016118:	002f883a 	mov	r23,zero
 201611c:	db401615 	stw	r13,88(sp)
 2016120:	d8801315 	stw	r2,76(sp)
 2016124:	d8c01415 	stw	r3,80(sp)
 2016128:	dcc01515 	stw	r19,84(sp)
 201612c:	2016c0c0 	call	2016c0c <__muldi3>
 2016130:	b00d883a 	mov	r6,r22
 2016134:	000b883a 	mov	r5,zero
 2016138:	9009883a 	mov	r4,r18
 201613c:	b80f883a 	mov	r7,r23
 2016140:	1021883a 	mov	r16,r2
 2016144:	1823883a 	mov	r17,r3
 2016148:	2016c0c0 	call	2016c0c <__muldi3>
 201614c:	8085883a 	add	r2,r16,r2
 2016150:	140d803a 	cmpltu	r6,r2,r16
 2016154:	88c7883a 	add	r3,r17,r3
 2016158:	30cd883a 	add	r6,r6,r3
 201615c:	1029883a 	mov	r20,r2
 2016160:	302b883a 	mov	r21,r6
 2016164:	da801317 	ldw	r10,76(sp)
 2016168:	dac01417 	ldw	r11,80(sp)
 201616c:	db001517 	ldw	r12,84(sp)
 2016170:	db401617 	ldw	r13,88(sp)
 2016174:	3440612e 	bgeu	r6,r17,20162fc <__muldf3+0x318>
 2016178:	0009883a 	mov	r4,zero
 201617c:	5105883a 	add	r2,r10,r4
 2016180:	128d803a 	cmpltu	r6,r2,r10
 2016184:	5d07883a 	add	r3,r11,r20
 2016188:	30cd883a 	add	r6,r6,r3
 201618c:	0021883a 	mov	r16,zero
 2016190:	04400044 	movi	r17,1
 2016194:	1025883a 	mov	r18,r2
 2016198:	3027883a 	mov	r19,r6
 201619c:	32c06236 	bltu	r6,r11,2016328 <__muldf3+0x344>
 20161a0:	59807a26 	beq	r11,r6,201638c <__muldf3+0x3a8>
 20161a4:	680b883a 	mov	r5,r13
 20161a8:	b80f883a 	mov	r7,r23
 20161ac:	6009883a 	mov	r4,r12
 20161b0:	b00d883a 	mov	r6,r22
 20161b4:	2016c0c0 	call	2016c0c <__muldi3>
 20161b8:	1009883a 	mov	r4,r2
 20161bc:	000f883a 	mov	r7,zero
 20161c0:	1545883a 	add	r2,r2,r21
 20161c4:	1111803a 	cmpltu	r8,r2,r4
 20161c8:	19c7883a 	add	r3,r3,r7
 20161cc:	40c7883a 	add	r3,r8,r3
 20161d0:	88cb883a 	add	r5,r17,r3
 20161d4:	d8c00617 	ldw	r3,24(sp)
 20161d8:	8089883a 	add	r4,r16,r2
 20161dc:	d8800b17 	ldw	r2,44(sp)
 20161e0:	18c00104 	addi	r3,r3,4
 20161e4:	240d803a 	cmpltu	r6,r4,r16
 20161e8:	10c7883a 	add	r3,r2,r3
 20161ec:	2013883a 	mov	r9,r4
 20161f0:	d8800a17 	ldw	r2,40(sp)
 20161f4:	d9000517 	ldw	r4,20(sp)
 20161f8:	314d883a 	add	r6,r6,r5
 20161fc:	3015883a 	mov	r10,r6
 2016200:	2088c03a 	cmpne	r4,r4,r2
 2016204:	00880034 	movhi	r2,8192
 2016208:	10bfffc4 	addi	r2,r2,-1
 201620c:	d9000f15 	stw	r4,60(sp)
 2016210:	d8c01015 	stw	r3,64(sp)
 2016214:	1180162e 	bgeu	r2,r6,2016270 <__muldf3+0x28c>
 2016218:	1811883a 	mov	r8,r3
 201621c:	101f883a 	mov	r15,r2
 2016220:	980497fa 	slli	r2,r19,31
 2016224:	9016d07a 	srli	r11,r18,1
 2016228:	500697fa 	slli	r3,r10,31
 201622c:	480cd07a 	srli	r6,r9,1
 2016230:	500ed07a 	srli	r7,r10,1
 2016234:	12d6b03a 	or	r11,r2,r11
 2016238:	00800044 	movi	r2,1
 201623c:	198cb03a 	or	r6,r3,r6
 2016240:	4888703a 	and	r4,r9,r2
 2016244:	9818d07a 	srli	r12,r19,1
 2016248:	001b883a 	mov	r13,zero
 201624c:	03a00034 	movhi	r14,32768
 2016250:	3013883a 	mov	r9,r6
 2016254:	3815883a 	mov	r10,r7
 2016258:	4091883a 	add	r8,r8,r2
 201625c:	20000226 	beq	r4,zero,2016268 <__muldf3+0x284>
 2016260:	5b64b03a 	or	r18,r11,r13
 2016264:	63a6b03a 	or	r19,r12,r14
 2016268:	7abfed36 	bltu	r15,r10,2016220 <__muldf3+0x23c>
 201626c:	da001015 	stw	r8,64(sp)
 2016270:	00840034 	movhi	r2,4096
 2016274:	10bfffc4 	addi	r2,r2,-1
 2016278:	12801436 	bltu	r2,r10,20162cc <__muldf3+0x2e8>
 201627c:	da001017 	ldw	r8,64(sp)
 2016280:	101f883a 	mov	r15,r2
 2016284:	4a45883a 	add	r2,r9,r9
 2016288:	124d803a 	cmpltu	r6,r2,r9
 201628c:	5287883a 	add	r3,r10,r10
 2016290:	9497883a 	add	r11,r18,r18
 2016294:	5c8f803a 	cmpltu	r7,r11,r18
 2016298:	9cd9883a 	add	r12,r19,r19
 201629c:	01000044 	movi	r4,1
 20162a0:	30cd883a 	add	r6,r6,r3
 20162a4:	3b0f883a 	add	r7,r7,r12
 20162a8:	423fffc4 	addi	r8,r8,-1
 20162ac:	1013883a 	mov	r9,r2
 20162b0:	3015883a 	mov	r10,r6
 20162b4:	111ab03a 	or	r13,r2,r4
 20162b8:	98003016 	blt	r19,zero,201637c <__muldf3+0x398>
 20162bc:	5825883a 	mov	r18,r11
 20162c0:	3827883a 	mov	r19,r7
 20162c4:	7abfef2e 	bgeu	r15,r10,2016284 <__muldf3+0x2a0>
 20162c8:	da001015 	stw	r8,64(sp)
 20162cc:	00803fc4 	movi	r2,255
 20162d0:	488e703a 	and	r7,r9,r2
 20162d4:	00802004 	movi	r2,128
 20162d8:	0007883a 	mov	r3,zero
 20162dc:	0011883a 	mov	r8,zero
 20162e0:	38801826 	beq	r7,r2,2016344 <__muldf3+0x360>
 20162e4:	008000c4 	movi	r2,3
 20162e8:	d9000e04 	addi	r4,sp,56
 20162ec:	da801215 	stw	r10,72(sp)
 20162f0:	d8800e15 	stw	r2,56(sp)
 20162f4:	da401115 	stw	r9,68(sp)
 20162f8:	003f6a06 	br	20160a4 <__muldf3+0xc0>
 20162fc:	89802126 	beq	r17,r6,2016384 <__muldf3+0x3a0>
 2016300:	0009883a 	mov	r4,zero
 2016304:	5105883a 	add	r2,r10,r4
 2016308:	128d803a 	cmpltu	r6,r2,r10
 201630c:	5d07883a 	add	r3,r11,r20
 2016310:	30cd883a 	add	r6,r6,r3
 2016314:	0021883a 	mov	r16,zero
 2016318:	0023883a 	mov	r17,zero
 201631c:	1025883a 	mov	r18,r2
 2016320:	3027883a 	mov	r19,r6
 2016324:	32ff9e2e 	bgeu	r6,r11,20161a0 <__muldf3+0x1bc>
 2016328:	00800044 	movi	r2,1
 201632c:	8089883a 	add	r4,r16,r2
 2016330:	240d803a 	cmpltu	r6,r4,r16
 2016334:	344d883a 	add	r6,r6,r17
 2016338:	2021883a 	mov	r16,r4
 201633c:	3023883a 	mov	r17,r6
 2016340:	003f9806 	br	20161a4 <__muldf3+0x1c0>
 2016344:	403fe71e 	bne	r8,zero,20162e4 <__muldf3+0x300>
 2016348:	01004004 	movi	r4,256
 201634c:	4904703a 	and	r2,r9,r4
 2016350:	10c4b03a 	or	r2,r2,r3
 2016354:	103fe31e 	bne	r2,zero,20162e4 <__muldf3+0x300>
 2016358:	94c4b03a 	or	r2,r18,r19
 201635c:	103fe126 	beq	r2,zero,20162e4 <__muldf3+0x300>
 2016360:	49c5883a 	add	r2,r9,r7
 2016364:	1251803a 	cmpltu	r8,r2,r9
 2016368:	4291883a 	add	r8,r8,r10
 201636c:	013fc004 	movi	r4,-256
 2016370:	1112703a 	and	r9,r2,r4
 2016374:	4015883a 	mov	r10,r8
 2016378:	003fda06 	br	20162e4 <__muldf3+0x300>
 201637c:	6813883a 	mov	r9,r13
 2016380:	003fce06 	br	20162bc <__muldf3+0x2d8>
 2016384:	143f7c36 	bltu	r2,r16,2016178 <__muldf3+0x194>
 2016388:	003fdd06 	br	2016300 <__muldf3+0x31c>
 201638c:	12bf852e 	bgeu	r2,r10,20161a4 <__muldf3+0x1c0>
 2016390:	003fe506 	br	2016328 <__muldf3+0x344>
 2016394:	00800084 	movi	r2,2
 2016398:	20bf351e 	bne	r4,r2,2016070 <__muldf3+0x8c>
 201639c:	010080b4 	movhi	r4,514
 20163a0:	21301204 	addi	r4,r4,-16312
 20163a4:	003f3f06 	br	20160a4 <__muldf3+0xc0>

020163a8 <__divdf3>:
 20163a8:	deffed04 	addi	sp,sp,-76
 20163ac:	dcc01115 	stw	r19,68(sp)
 20163b0:	dcc00404 	addi	r19,sp,16
 20163b4:	2011883a 	mov	r8,r4
 20163b8:	2813883a 	mov	r9,r5
 20163bc:	dc000e15 	stw	r16,56(sp)
 20163c0:	d809883a 	mov	r4,sp
 20163c4:	980b883a 	mov	r5,r19
 20163c8:	dc000904 	addi	r16,sp,36
 20163cc:	dfc01215 	stw	ra,72(sp)
 20163d0:	da400115 	stw	r9,4(sp)
 20163d4:	d9c00315 	stw	r7,12(sp)
 20163d8:	da000015 	stw	r8,0(sp)
 20163dc:	d9800215 	stw	r6,8(sp)
 20163e0:	dc801015 	stw	r18,64(sp)
 20163e4:	dc400f15 	stw	r17,60(sp)
 20163e8:	20170c40 	call	20170c4 <__unpack_d>
 20163ec:	d9000204 	addi	r4,sp,8
 20163f0:	800b883a 	mov	r5,r16
 20163f4:	20170c40 	call	20170c4 <__unpack_d>
 20163f8:	d9000417 	ldw	r4,16(sp)
 20163fc:	00800044 	movi	r2,1
 2016400:	11000b2e 	bgeu	r2,r4,2016430 <__divdf3+0x88>
 2016404:	d9400917 	ldw	r5,36(sp)
 2016408:	1140762e 	bgeu	r2,r5,20165e4 <__divdf3+0x23c>
 201640c:	d8800517 	ldw	r2,20(sp)
 2016410:	d8c00a17 	ldw	r3,40(sp)
 2016414:	01800104 	movi	r6,4
 2016418:	10c4f03a 	xor	r2,r2,r3
 201641c:	d8800515 	stw	r2,20(sp)
 2016420:	21800226 	beq	r4,r6,201642c <__divdf3+0x84>
 2016424:	00800084 	movi	r2,2
 2016428:	2080141e 	bne	r4,r2,201647c <__divdf3+0xd4>
 201642c:	29000926 	beq	r5,r4,2016454 <__divdf3+0xac>
 2016430:	9809883a 	mov	r4,r19
 2016434:	2016db00 	call	2016db0 <__pack_d>
 2016438:	dfc01217 	ldw	ra,72(sp)
 201643c:	dcc01117 	ldw	r19,68(sp)
 2016440:	dc801017 	ldw	r18,64(sp)
 2016444:	dc400f17 	ldw	r17,60(sp)
 2016448:	dc000e17 	ldw	r16,56(sp)
 201644c:	dec01304 	addi	sp,sp,76
 2016450:	f800283a 	ret
 2016454:	010080b4 	movhi	r4,514
 2016458:	21301204 	addi	r4,r4,-16312
 201645c:	2016db00 	call	2016db0 <__pack_d>
 2016460:	dfc01217 	ldw	ra,72(sp)
 2016464:	dcc01117 	ldw	r19,68(sp)
 2016468:	dc801017 	ldw	r18,64(sp)
 201646c:	dc400f17 	ldw	r17,60(sp)
 2016470:	dc000e17 	ldw	r16,56(sp)
 2016474:	dec01304 	addi	sp,sp,76
 2016478:	f800283a 	ret
 201647c:	29805b26 	beq	r5,r6,20165ec <__divdf3+0x244>
 2016480:	28802d26 	beq	r5,r2,2016538 <__divdf3+0x190>
 2016484:	d8c00617 	ldw	r3,24(sp)
 2016488:	d8800b17 	ldw	r2,44(sp)
 201648c:	d9c00817 	ldw	r7,32(sp)
 2016490:	dc400d17 	ldw	r17,52(sp)
 2016494:	188bc83a 	sub	r5,r3,r2
 2016498:	d9800717 	ldw	r6,28(sp)
 201649c:	dc000c17 	ldw	r16,48(sp)
 20164a0:	d9400615 	stw	r5,24(sp)
 20164a4:	3c403836 	bltu	r7,r17,2016588 <__divdf3+0x1e0>
 20164a8:	89c03626 	beq	r17,r7,2016584 <__divdf3+0x1dc>
 20164ac:	0015883a 	mov	r10,zero
 20164b0:	001d883a 	mov	r14,zero
 20164b4:	02c40034 	movhi	r11,4096
 20164b8:	001f883a 	mov	r15,zero
 20164bc:	003f883a 	mov	ra,zero
 20164c0:	04800f44 	movi	r18,61
 20164c4:	00000f06 	br	2016504 <__divdf3+0x15c>
 20164c8:	601d883a 	mov	r14,r12
 20164cc:	681f883a 	mov	r15,r13
 20164d0:	400d883a 	mov	r6,r8
 20164d4:	100f883a 	mov	r7,r2
 20164d8:	3191883a 	add	r8,r6,r6
 20164dc:	5808d07a 	srli	r4,r11,1
 20164e0:	4185803a 	cmpltu	r2,r8,r6
 20164e4:	39d3883a 	add	r9,r7,r7
 20164e8:	28c6b03a 	or	r3,r5,r3
 20164ec:	1245883a 	add	r2,r2,r9
 20164f0:	1815883a 	mov	r10,r3
 20164f4:	2017883a 	mov	r11,r4
 20164f8:	400d883a 	mov	r6,r8
 20164fc:	100f883a 	mov	r7,r2
 2016500:	fc801726 	beq	ra,r18,2016560 <__divdf3+0x1b8>
 2016504:	580a97fa 	slli	r5,r11,31
 2016508:	5006d07a 	srli	r3,r10,1
 201650c:	ffc00044 	addi	ra,ra,1
 2016510:	3c7ff136 	bltu	r7,r17,20164d8 <__divdf3+0x130>
 2016514:	3411c83a 	sub	r8,r6,r16
 2016518:	3205803a 	cmpltu	r2,r6,r8
 201651c:	3c53c83a 	sub	r9,r7,r17
 2016520:	7298b03a 	or	r12,r14,r10
 2016524:	7adab03a 	or	r13,r15,r11
 2016528:	4885c83a 	sub	r2,r9,r2
 201652c:	89ffe61e 	bne	r17,r7,20164c8 <__divdf3+0x120>
 2016530:	343fe936 	bltu	r6,r16,20164d8 <__divdf3+0x130>
 2016534:	003fe406 	br	20164c8 <__divdf3+0x120>
 2016538:	9809883a 	mov	r4,r19
 201653c:	d9800415 	stw	r6,16(sp)
 2016540:	2016db00 	call	2016db0 <__pack_d>
 2016544:	dfc01217 	ldw	ra,72(sp)
 2016548:	dcc01117 	ldw	r19,68(sp)
 201654c:	dc801017 	ldw	r18,64(sp)
 2016550:	dc400f17 	ldw	r17,60(sp)
 2016554:	dc000e17 	ldw	r16,56(sp)
 2016558:	dec01304 	addi	sp,sp,76
 201655c:	f800283a 	ret
 2016560:	00803fc4 	movi	r2,255
 2016564:	7090703a 	and	r8,r14,r2
 2016568:	00802004 	movi	r2,128
 201656c:	0007883a 	mov	r3,zero
 2016570:	0013883a 	mov	r9,zero
 2016574:	40800d26 	beq	r8,r2,20165ac <__divdf3+0x204>
 2016578:	dbc00815 	stw	r15,32(sp)
 201657c:	db800715 	stw	r14,28(sp)
 2016580:	003fab06 	br	2016430 <__divdf3+0x88>
 2016584:	343fc92e 	bgeu	r6,r16,20164ac <__divdf3+0x104>
 2016588:	3185883a 	add	r2,r6,r6
 201658c:	1189803a 	cmpltu	r4,r2,r6
 2016590:	39c7883a 	add	r3,r7,r7
 2016594:	20c9883a 	add	r4,r4,r3
 2016598:	297fffc4 	addi	r5,r5,-1
 201659c:	100d883a 	mov	r6,r2
 20165a0:	200f883a 	mov	r7,r4
 20165a4:	d9400615 	stw	r5,24(sp)
 20165a8:	003fc006 	br	20164ac <__divdf3+0x104>
 20165ac:	483ff21e 	bne	r9,zero,2016578 <__divdf3+0x1d0>
 20165b0:	01004004 	movi	r4,256
 20165b4:	7104703a 	and	r2,r14,r4
 20165b8:	10c4b03a 	or	r2,r2,r3
 20165bc:	103fee1e 	bne	r2,zero,2016578 <__divdf3+0x1d0>
 20165c0:	31c4b03a 	or	r2,r6,r7
 20165c4:	103fec26 	beq	r2,zero,2016578 <__divdf3+0x1d0>
 20165c8:	7205883a 	add	r2,r14,r8
 20165cc:	1391803a 	cmpltu	r8,r2,r14
 20165d0:	43d1883a 	add	r8,r8,r15
 20165d4:	013fc004 	movi	r4,-256
 20165d8:	111c703a 	and	r14,r2,r4
 20165dc:	401f883a 	mov	r15,r8
 20165e0:	003fe506 	br	2016578 <__divdf3+0x1d0>
 20165e4:	8009883a 	mov	r4,r16
 20165e8:	003f9206 	br	2016434 <__divdf3+0x8c>
 20165ec:	9809883a 	mov	r4,r19
 20165f0:	d8000715 	stw	zero,28(sp)
 20165f4:	d8000815 	stw	zero,32(sp)
 20165f8:	d8000615 	stw	zero,24(sp)
 20165fc:	003f8d06 	br	2016434 <__divdf3+0x8c>

02016600 <__eqdf2>:
 2016600:	deffef04 	addi	sp,sp,-68
 2016604:	dc400f15 	stw	r17,60(sp)
 2016608:	dc400404 	addi	r17,sp,16
 201660c:	2005883a 	mov	r2,r4
 2016610:	2807883a 	mov	r3,r5
 2016614:	dc000e15 	stw	r16,56(sp)
 2016618:	d809883a 	mov	r4,sp
 201661c:	880b883a 	mov	r5,r17
 2016620:	dc000904 	addi	r16,sp,36
 2016624:	d8c00115 	stw	r3,4(sp)
 2016628:	d8800015 	stw	r2,0(sp)
 201662c:	d9800215 	stw	r6,8(sp)
 2016630:	dfc01015 	stw	ra,64(sp)
 2016634:	d9c00315 	stw	r7,12(sp)
 2016638:	20170c40 	call	20170c4 <__unpack_d>
 201663c:	d9000204 	addi	r4,sp,8
 2016640:	800b883a 	mov	r5,r16
 2016644:	20170c40 	call	20170c4 <__unpack_d>
 2016648:	d8800417 	ldw	r2,16(sp)
 201664c:	00c00044 	movi	r3,1
 2016650:	180d883a 	mov	r6,r3
 2016654:	1880062e 	bgeu	r3,r2,2016670 <__eqdf2+0x70>
 2016658:	d8800917 	ldw	r2,36(sp)
 201665c:	8809883a 	mov	r4,r17
 2016660:	800b883a 	mov	r5,r16
 2016664:	1880022e 	bgeu	r3,r2,2016670 <__eqdf2+0x70>
 2016668:	20171fc0 	call	20171fc <__fpcmp_parts_d>
 201666c:	100d883a 	mov	r6,r2
 2016670:	3005883a 	mov	r2,r6
 2016674:	dfc01017 	ldw	ra,64(sp)
 2016678:	dc400f17 	ldw	r17,60(sp)
 201667c:	dc000e17 	ldw	r16,56(sp)
 2016680:	dec01104 	addi	sp,sp,68
 2016684:	f800283a 	ret

02016688 <__nedf2>:
 2016688:	deffef04 	addi	sp,sp,-68
 201668c:	dc400f15 	stw	r17,60(sp)
 2016690:	dc400404 	addi	r17,sp,16
 2016694:	2005883a 	mov	r2,r4
 2016698:	2807883a 	mov	r3,r5
 201669c:	dc000e15 	stw	r16,56(sp)
 20166a0:	d809883a 	mov	r4,sp
 20166a4:	880b883a 	mov	r5,r17
 20166a8:	dc000904 	addi	r16,sp,36
 20166ac:	d8c00115 	stw	r3,4(sp)
 20166b0:	d8800015 	stw	r2,0(sp)
 20166b4:	d9800215 	stw	r6,8(sp)
 20166b8:	dfc01015 	stw	ra,64(sp)
 20166bc:	d9c00315 	stw	r7,12(sp)
 20166c0:	20170c40 	call	20170c4 <__unpack_d>
 20166c4:	d9000204 	addi	r4,sp,8
 20166c8:	800b883a 	mov	r5,r16
 20166cc:	20170c40 	call	20170c4 <__unpack_d>
 20166d0:	d8800417 	ldw	r2,16(sp)
 20166d4:	00c00044 	movi	r3,1
 20166d8:	180d883a 	mov	r6,r3
 20166dc:	1880062e 	bgeu	r3,r2,20166f8 <__nedf2+0x70>
 20166e0:	d8800917 	ldw	r2,36(sp)
 20166e4:	8809883a 	mov	r4,r17
 20166e8:	800b883a 	mov	r5,r16
 20166ec:	1880022e 	bgeu	r3,r2,20166f8 <__nedf2+0x70>
 20166f0:	20171fc0 	call	20171fc <__fpcmp_parts_d>
 20166f4:	100d883a 	mov	r6,r2
 20166f8:	3005883a 	mov	r2,r6
 20166fc:	dfc01017 	ldw	ra,64(sp)
 2016700:	dc400f17 	ldw	r17,60(sp)
 2016704:	dc000e17 	ldw	r16,56(sp)
 2016708:	dec01104 	addi	sp,sp,68
 201670c:	f800283a 	ret

02016710 <__gtdf2>:
 2016710:	deffef04 	addi	sp,sp,-68
 2016714:	dc400f15 	stw	r17,60(sp)
 2016718:	dc400404 	addi	r17,sp,16
 201671c:	2005883a 	mov	r2,r4
 2016720:	2807883a 	mov	r3,r5
 2016724:	dc000e15 	stw	r16,56(sp)
 2016728:	d809883a 	mov	r4,sp
 201672c:	880b883a 	mov	r5,r17
 2016730:	dc000904 	addi	r16,sp,36
 2016734:	d8c00115 	stw	r3,4(sp)
 2016738:	d8800015 	stw	r2,0(sp)
 201673c:	d9800215 	stw	r6,8(sp)
 2016740:	dfc01015 	stw	ra,64(sp)
 2016744:	d9c00315 	stw	r7,12(sp)
 2016748:	20170c40 	call	20170c4 <__unpack_d>
 201674c:	d9000204 	addi	r4,sp,8
 2016750:	800b883a 	mov	r5,r16
 2016754:	20170c40 	call	20170c4 <__unpack_d>
 2016758:	d8800417 	ldw	r2,16(sp)
 201675c:	00c00044 	movi	r3,1
 2016760:	01bfffc4 	movi	r6,-1
 2016764:	1880062e 	bgeu	r3,r2,2016780 <__gtdf2+0x70>
 2016768:	d8800917 	ldw	r2,36(sp)
 201676c:	8809883a 	mov	r4,r17
 2016770:	800b883a 	mov	r5,r16
 2016774:	1880022e 	bgeu	r3,r2,2016780 <__gtdf2+0x70>
 2016778:	20171fc0 	call	20171fc <__fpcmp_parts_d>
 201677c:	100d883a 	mov	r6,r2
 2016780:	3005883a 	mov	r2,r6
 2016784:	dfc01017 	ldw	ra,64(sp)
 2016788:	dc400f17 	ldw	r17,60(sp)
 201678c:	dc000e17 	ldw	r16,56(sp)
 2016790:	dec01104 	addi	sp,sp,68
 2016794:	f800283a 	ret

02016798 <__gedf2>:
 2016798:	deffef04 	addi	sp,sp,-68
 201679c:	dc400f15 	stw	r17,60(sp)
 20167a0:	dc400404 	addi	r17,sp,16
 20167a4:	2005883a 	mov	r2,r4
 20167a8:	2807883a 	mov	r3,r5
 20167ac:	dc000e15 	stw	r16,56(sp)
 20167b0:	d809883a 	mov	r4,sp
 20167b4:	880b883a 	mov	r5,r17
 20167b8:	dc000904 	addi	r16,sp,36
 20167bc:	d8c00115 	stw	r3,4(sp)
 20167c0:	d8800015 	stw	r2,0(sp)
 20167c4:	d9800215 	stw	r6,8(sp)
 20167c8:	dfc01015 	stw	ra,64(sp)
 20167cc:	d9c00315 	stw	r7,12(sp)
 20167d0:	20170c40 	call	20170c4 <__unpack_d>
 20167d4:	d9000204 	addi	r4,sp,8
 20167d8:	800b883a 	mov	r5,r16
 20167dc:	20170c40 	call	20170c4 <__unpack_d>
 20167e0:	d8800417 	ldw	r2,16(sp)
 20167e4:	00c00044 	movi	r3,1
 20167e8:	01bfffc4 	movi	r6,-1
 20167ec:	1880062e 	bgeu	r3,r2,2016808 <__gedf2+0x70>
 20167f0:	d8800917 	ldw	r2,36(sp)
 20167f4:	8809883a 	mov	r4,r17
 20167f8:	800b883a 	mov	r5,r16
 20167fc:	1880022e 	bgeu	r3,r2,2016808 <__gedf2+0x70>
 2016800:	20171fc0 	call	20171fc <__fpcmp_parts_d>
 2016804:	100d883a 	mov	r6,r2
 2016808:	3005883a 	mov	r2,r6
 201680c:	dfc01017 	ldw	ra,64(sp)
 2016810:	dc400f17 	ldw	r17,60(sp)
 2016814:	dc000e17 	ldw	r16,56(sp)
 2016818:	dec01104 	addi	sp,sp,68
 201681c:	f800283a 	ret

02016820 <__ltdf2>:
 2016820:	deffef04 	addi	sp,sp,-68
 2016824:	dc400f15 	stw	r17,60(sp)
 2016828:	dc400404 	addi	r17,sp,16
 201682c:	2005883a 	mov	r2,r4
 2016830:	2807883a 	mov	r3,r5
 2016834:	dc000e15 	stw	r16,56(sp)
 2016838:	d809883a 	mov	r4,sp
 201683c:	880b883a 	mov	r5,r17
 2016840:	dc000904 	addi	r16,sp,36
 2016844:	d8c00115 	stw	r3,4(sp)
 2016848:	d8800015 	stw	r2,0(sp)
 201684c:	d9800215 	stw	r6,8(sp)
 2016850:	dfc01015 	stw	ra,64(sp)
 2016854:	d9c00315 	stw	r7,12(sp)
 2016858:	20170c40 	call	20170c4 <__unpack_d>
 201685c:	d9000204 	addi	r4,sp,8
 2016860:	800b883a 	mov	r5,r16
 2016864:	20170c40 	call	20170c4 <__unpack_d>
 2016868:	d8800417 	ldw	r2,16(sp)
 201686c:	00c00044 	movi	r3,1
 2016870:	180d883a 	mov	r6,r3
 2016874:	1880062e 	bgeu	r3,r2,2016890 <__ltdf2+0x70>
 2016878:	d8800917 	ldw	r2,36(sp)
 201687c:	8809883a 	mov	r4,r17
 2016880:	800b883a 	mov	r5,r16
 2016884:	1880022e 	bgeu	r3,r2,2016890 <__ltdf2+0x70>
 2016888:	20171fc0 	call	20171fc <__fpcmp_parts_d>
 201688c:	100d883a 	mov	r6,r2
 2016890:	3005883a 	mov	r2,r6
 2016894:	dfc01017 	ldw	ra,64(sp)
 2016898:	dc400f17 	ldw	r17,60(sp)
 201689c:	dc000e17 	ldw	r16,56(sp)
 20168a0:	dec01104 	addi	sp,sp,68
 20168a4:	f800283a 	ret

020168a8 <__floatsidf>:
 20168a8:	2006d7fa 	srli	r3,r4,31
 20168ac:	defff604 	addi	sp,sp,-40
 20168b0:	008000c4 	movi	r2,3
 20168b4:	dfc00915 	stw	ra,36(sp)
 20168b8:	dcc00815 	stw	r19,32(sp)
 20168bc:	dc800715 	stw	r18,28(sp)
 20168c0:	dc400615 	stw	r17,24(sp)
 20168c4:	dc000515 	stw	r16,20(sp)
 20168c8:	d8800015 	stw	r2,0(sp)
 20168cc:	d8c00115 	stw	r3,4(sp)
 20168d0:	20000f1e 	bne	r4,zero,2016910 <__floatsidf+0x68>
 20168d4:	00800084 	movi	r2,2
 20168d8:	d8800015 	stw	r2,0(sp)
 20168dc:	d809883a 	mov	r4,sp
 20168e0:	2016db00 	call	2016db0 <__pack_d>
 20168e4:	1009883a 	mov	r4,r2
 20168e8:	180b883a 	mov	r5,r3
 20168ec:	2005883a 	mov	r2,r4
 20168f0:	2807883a 	mov	r3,r5
 20168f4:	dfc00917 	ldw	ra,36(sp)
 20168f8:	dcc00817 	ldw	r19,32(sp)
 20168fc:	dc800717 	ldw	r18,28(sp)
 2016900:	dc400617 	ldw	r17,24(sp)
 2016904:	dc000517 	ldw	r16,20(sp)
 2016908:	dec00a04 	addi	sp,sp,40
 201690c:	f800283a 	ret
 2016910:	00800f04 	movi	r2,60
 2016914:	1807003a 	cmpeq	r3,r3,zero
 2016918:	d8800215 	stw	r2,8(sp)
 201691c:	18001126 	beq	r3,zero,2016964 <__floatsidf+0xbc>
 2016920:	0027883a 	mov	r19,zero
 2016924:	2025883a 	mov	r18,r4
 2016928:	d9000315 	stw	r4,12(sp)
 201692c:	dcc00415 	stw	r19,16(sp)
 2016930:	2016d300 	call	2016d30 <__clzsi2>
 2016934:	11000744 	addi	r4,r2,29
 2016938:	013fe80e 	bge	zero,r4,20168dc <__floatsidf+0x34>
 201693c:	10bfff44 	addi	r2,r2,-3
 2016940:	10000c16 	blt	r2,zero,2016974 <__floatsidf+0xcc>
 2016944:	90a2983a 	sll	r17,r18,r2
 2016948:	0021883a 	mov	r16,zero
 201694c:	d8800217 	ldw	r2,8(sp)
 2016950:	dc400415 	stw	r17,16(sp)
 2016954:	dc000315 	stw	r16,12(sp)
 2016958:	1105c83a 	sub	r2,r2,r4
 201695c:	d8800215 	stw	r2,8(sp)
 2016960:	003fde06 	br	20168dc <__floatsidf+0x34>
 2016964:	00a00034 	movhi	r2,32768
 2016968:	20800a26 	beq	r4,r2,2016994 <__floatsidf+0xec>
 201696c:	0109c83a 	sub	r4,zero,r4
 2016970:	003feb06 	br	2016920 <__floatsidf+0x78>
 2016974:	9006d07a 	srli	r3,r18,1
 2016978:	008007c4 	movi	r2,31
 201697c:	1105c83a 	sub	r2,r2,r4
 2016980:	1886d83a 	srl	r3,r3,r2
 2016984:	9922983a 	sll	r17,r19,r4
 2016988:	9120983a 	sll	r16,r18,r4
 201698c:	1c62b03a 	or	r17,r3,r17
 2016990:	003fee06 	br	201694c <__floatsidf+0xa4>
 2016994:	0009883a 	mov	r4,zero
 2016998:	01707834 	movhi	r5,49632
 201699c:	003fd306 	br	20168ec <__floatsidf+0x44>

020169a0 <__fixdfsi>:
 20169a0:	defff804 	addi	sp,sp,-32
 20169a4:	2005883a 	mov	r2,r4
 20169a8:	2807883a 	mov	r3,r5
 20169ac:	d809883a 	mov	r4,sp
 20169b0:	d9400204 	addi	r5,sp,8
 20169b4:	d8c00115 	stw	r3,4(sp)
 20169b8:	d8800015 	stw	r2,0(sp)
 20169bc:	dfc00715 	stw	ra,28(sp)
 20169c0:	20170c40 	call	20170c4 <__unpack_d>
 20169c4:	d8c00217 	ldw	r3,8(sp)
 20169c8:	00800084 	movi	r2,2
 20169cc:	1880051e 	bne	r3,r2,20169e4 <__fixdfsi+0x44>
 20169d0:	0007883a 	mov	r3,zero
 20169d4:	1805883a 	mov	r2,r3
 20169d8:	dfc00717 	ldw	ra,28(sp)
 20169dc:	dec00804 	addi	sp,sp,32
 20169e0:	f800283a 	ret
 20169e4:	00800044 	movi	r2,1
 20169e8:	10fff92e 	bgeu	r2,r3,20169d0 <__fixdfsi+0x30>
 20169ec:	00800104 	movi	r2,4
 20169f0:	18800426 	beq	r3,r2,2016a04 <__fixdfsi+0x64>
 20169f4:	d8c00417 	ldw	r3,16(sp)
 20169f8:	183ff516 	blt	r3,zero,20169d0 <__fixdfsi+0x30>
 20169fc:	00800784 	movi	r2,30
 2016a00:	10c0080e 	bge	r2,r3,2016a24 <__fixdfsi+0x84>
 2016a04:	d8800317 	ldw	r2,12(sp)
 2016a08:	1000121e 	bne	r2,zero,2016a54 <__fixdfsi+0xb4>
 2016a0c:	00e00034 	movhi	r3,32768
 2016a10:	18ffffc4 	addi	r3,r3,-1
 2016a14:	1805883a 	mov	r2,r3
 2016a18:	dfc00717 	ldw	ra,28(sp)
 2016a1c:	dec00804 	addi	sp,sp,32
 2016a20:	f800283a 	ret
 2016a24:	00800f04 	movi	r2,60
 2016a28:	10d1c83a 	sub	r8,r2,r3
 2016a2c:	40bff804 	addi	r2,r8,-32
 2016a30:	d9800517 	ldw	r6,20(sp)
 2016a34:	d9c00617 	ldw	r7,24(sp)
 2016a38:	10000816 	blt	r2,zero,2016a5c <__fixdfsi+0xbc>
 2016a3c:	3888d83a 	srl	r4,r7,r2
 2016a40:	d8800317 	ldw	r2,12(sp)
 2016a44:	2007883a 	mov	r3,r4
 2016a48:	103fe226 	beq	r2,zero,20169d4 <__fixdfsi+0x34>
 2016a4c:	0107c83a 	sub	r3,zero,r4
 2016a50:	003fe006 	br	20169d4 <__fixdfsi+0x34>
 2016a54:	00e00034 	movhi	r3,32768
 2016a58:	003fde06 	br	20169d4 <__fixdfsi+0x34>
 2016a5c:	39c7883a 	add	r3,r7,r7
 2016a60:	008007c4 	movi	r2,31
 2016a64:	1205c83a 	sub	r2,r2,r8
 2016a68:	1886983a 	sll	r3,r3,r2
 2016a6c:	3208d83a 	srl	r4,r6,r8
 2016a70:	1908b03a 	or	r4,r3,r4
 2016a74:	003ff206 	br	2016a40 <__fixdfsi+0xa0>

02016a78 <__floatunsidf>:
 2016a78:	defff204 	addi	sp,sp,-56
 2016a7c:	dfc00d15 	stw	ra,52(sp)
 2016a80:	ddc00c15 	stw	r23,48(sp)
 2016a84:	dd800b15 	stw	r22,44(sp)
 2016a88:	dd400a15 	stw	r21,40(sp)
 2016a8c:	dd000915 	stw	r20,36(sp)
 2016a90:	dcc00815 	stw	r19,32(sp)
 2016a94:	dc800715 	stw	r18,28(sp)
 2016a98:	dc400615 	stw	r17,24(sp)
 2016a9c:	dc000515 	stw	r16,20(sp)
 2016aa0:	d8000115 	stw	zero,4(sp)
 2016aa4:	20000f1e 	bne	r4,zero,2016ae4 <__floatunsidf+0x6c>
 2016aa8:	00800084 	movi	r2,2
 2016aac:	d8800015 	stw	r2,0(sp)
 2016ab0:	d809883a 	mov	r4,sp
 2016ab4:	2016db00 	call	2016db0 <__pack_d>
 2016ab8:	dfc00d17 	ldw	ra,52(sp)
 2016abc:	ddc00c17 	ldw	r23,48(sp)
 2016ac0:	dd800b17 	ldw	r22,44(sp)
 2016ac4:	dd400a17 	ldw	r21,40(sp)
 2016ac8:	dd000917 	ldw	r20,36(sp)
 2016acc:	dcc00817 	ldw	r19,32(sp)
 2016ad0:	dc800717 	ldw	r18,28(sp)
 2016ad4:	dc400617 	ldw	r17,24(sp)
 2016ad8:	dc000517 	ldw	r16,20(sp)
 2016adc:	dec00e04 	addi	sp,sp,56
 2016ae0:	f800283a 	ret
 2016ae4:	008000c4 	movi	r2,3
 2016ae8:	00c00f04 	movi	r3,60
 2016aec:	002f883a 	mov	r23,zero
 2016af0:	202d883a 	mov	r22,r4
 2016af4:	d8800015 	stw	r2,0(sp)
 2016af8:	d8c00215 	stw	r3,8(sp)
 2016afc:	d9000315 	stw	r4,12(sp)
 2016b00:	ddc00415 	stw	r23,16(sp)
 2016b04:	2016d300 	call	2016d30 <__clzsi2>
 2016b08:	12400744 	addi	r9,r2,29
 2016b0c:	48000b16 	blt	r9,zero,2016b3c <__floatunsidf+0xc4>
 2016b10:	483fe726 	beq	r9,zero,2016ab0 <__floatunsidf+0x38>
 2016b14:	10bfff44 	addi	r2,r2,-3
 2016b18:	10002e16 	blt	r2,zero,2016bd4 <__floatunsidf+0x15c>
 2016b1c:	b0a2983a 	sll	r17,r22,r2
 2016b20:	0021883a 	mov	r16,zero
 2016b24:	d8800217 	ldw	r2,8(sp)
 2016b28:	dc400415 	stw	r17,16(sp)
 2016b2c:	dc000315 	stw	r16,12(sp)
 2016b30:	1245c83a 	sub	r2,r2,r9
 2016b34:	d8800215 	stw	r2,8(sp)
 2016b38:	003fdd06 	br	2016ab0 <__floatunsidf+0x38>
 2016b3c:	0255c83a 	sub	r10,zero,r9
 2016b40:	51bff804 	addi	r6,r10,-32
 2016b44:	30001b16 	blt	r6,zero,2016bb4 <__floatunsidf+0x13c>
 2016b48:	b9a8d83a 	srl	r20,r23,r6
 2016b4c:	002b883a 	mov	r21,zero
 2016b50:	000f883a 	mov	r7,zero
 2016b54:	01000044 	movi	r4,1
 2016b58:	0011883a 	mov	r8,zero
 2016b5c:	30002516 	blt	r6,zero,2016bf4 <__floatunsidf+0x17c>
 2016b60:	21a6983a 	sll	r19,r4,r6
 2016b64:	0025883a 	mov	r18,zero
 2016b68:	00bfffc4 	movi	r2,-1
 2016b6c:	9089883a 	add	r4,r18,r2
 2016b70:	988b883a 	add	r5,r19,r2
 2016b74:	248d803a 	cmpltu	r6,r4,r18
 2016b78:	314b883a 	add	r5,r6,r5
 2016b7c:	b104703a 	and	r2,r22,r4
 2016b80:	b946703a 	and	r3,r23,r5
 2016b84:	10c4b03a 	or	r2,r2,r3
 2016b88:	10000226 	beq	r2,zero,2016b94 <__floatunsidf+0x11c>
 2016b8c:	01c00044 	movi	r7,1
 2016b90:	0011883a 	mov	r8,zero
 2016b94:	d9000217 	ldw	r4,8(sp)
 2016b98:	a1c4b03a 	or	r2,r20,r7
 2016b9c:	aa06b03a 	or	r3,r21,r8
 2016ba0:	2249c83a 	sub	r4,r4,r9
 2016ba4:	d8c00415 	stw	r3,16(sp)
 2016ba8:	d9000215 	stw	r4,8(sp)
 2016bac:	d8800315 	stw	r2,12(sp)
 2016bb0:	003fbf06 	br	2016ab0 <__floatunsidf+0x38>
 2016bb4:	bdc7883a 	add	r3,r23,r23
 2016bb8:	008007c4 	movi	r2,31
 2016bbc:	1285c83a 	sub	r2,r2,r10
 2016bc0:	1886983a 	sll	r3,r3,r2
 2016bc4:	b2a8d83a 	srl	r20,r22,r10
 2016bc8:	baaad83a 	srl	r21,r23,r10
 2016bcc:	1d28b03a 	or	r20,r3,r20
 2016bd0:	003fdf06 	br	2016b50 <__floatunsidf+0xd8>
 2016bd4:	b006d07a 	srli	r3,r22,1
 2016bd8:	008007c4 	movi	r2,31
 2016bdc:	1245c83a 	sub	r2,r2,r9
 2016be0:	1886d83a 	srl	r3,r3,r2
 2016be4:	ba62983a 	sll	r17,r23,r9
 2016be8:	b260983a 	sll	r16,r22,r9
 2016bec:	1c62b03a 	or	r17,r3,r17
 2016bf0:	003fcc06 	br	2016b24 <__floatunsidf+0xac>
 2016bf4:	2006d07a 	srli	r3,r4,1
 2016bf8:	008007c4 	movi	r2,31
 2016bfc:	1285c83a 	sub	r2,r2,r10
 2016c00:	18a6d83a 	srl	r19,r3,r2
 2016c04:	22a4983a 	sll	r18,r4,r10
 2016c08:	003fd706 	br	2016b68 <__floatunsidf+0xf0>

02016c0c <__muldi3>:
 2016c0c:	defff204 	addi	sp,sp,-56
 2016c10:	df000c15 	stw	fp,48(sp)
 2016c14:	3038d43a 	srli	fp,r6,16
 2016c18:	dd000815 	stw	r20,32(sp)
 2016c1c:	dc400515 	stw	r17,20(sp)
 2016c20:	2028d43a 	srli	r20,r4,16
 2016c24:	247fffcc 	andi	r17,r4,65535
 2016c28:	dc000415 	stw	r16,16(sp)
 2016c2c:	343fffcc 	andi	r16,r6,65535
 2016c30:	dcc00715 	stw	r19,28(sp)
 2016c34:	d9000015 	stw	r4,0(sp)
 2016c38:	2827883a 	mov	r19,r5
 2016c3c:	8809883a 	mov	r4,r17
 2016c40:	d9400115 	stw	r5,4(sp)
 2016c44:	800b883a 	mov	r5,r16
 2016c48:	d9800215 	stw	r6,8(sp)
 2016c4c:	dfc00d15 	stw	ra,52(sp)
 2016c50:	d9c00315 	stw	r7,12(sp)
 2016c54:	dd800a15 	stw	r22,40(sp)
 2016c58:	dd400915 	stw	r21,36(sp)
 2016c5c:	302d883a 	mov	r22,r6
 2016c60:	ddc00b15 	stw	r23,44(sp)
 2016c64:	dc800615 	stw	r18,24(sp)
 2016c68:	200d0cc0 	call	200d0cc <__mulsi3>
 2016c6c:	8809883a 	mov	r4,r17
 2016c70:	e00b883a 	mov	r5,fp
 2016c74:	102b883a 	mov	r21,r2
 2016c78:	200d0cc0 	call	200d0cc <__mulsi3>
 2016c7c:	800b883a 	mov	r5,r16
 2016c80:	a009883a 	mov	r4,r20
 2016c84:	1023883a 	mov	r17,r2
 2016c88:	200d0cc0 	call	200d0cc <__mulsi3>
 2016c8c:	a009883a 	mov	r4,r20
 2016c90:	e00b883a 	mov	r5,fp
 2016c94:	1021883a 	mov	r16,r2
 2016c98:	200d0cc0 	call	200d0cc <__mulsi3>
 2016c9c:	a8ffffcc 	andi	r3,r21,65535
 2016ca0:	a82ad43a 	srli	r21,r21,16
 2016ca4:	8c23883a 	add	r17,r17,r16
 2016ca8:	1011883a 	mov	r8,r2
 2016cac:	ac6b883a 	add	r21,r21,r17
 2016cb0:	a804943a 	slli	r2,r21,16
 2016cb4:	b009883a 	mov	r4,r22
 2016cb8:	980b883a 	mov	r5,r19
 2016cbc:	10c7883a 	add	r3,r2,r3
 2016cc0:	a812d43a 	srli	r9,r21,16
 2016cc4:	180d883a 	mov	r6,r3
 2016cc8:	ac00022e 	bgeu	r21,r16,2016cd4 <__muldi3+0xc8>
 2016ccc:	00800074 	movhi	r2,1
 2016cd0:	4091883a 	add	r8,r8,r2
 2016cd4:	4267883a 	add	r19,r8,r9
 2016cd8:	302d883a 	mov	r22,r6
 2016cdc:	200d0cc0 	call	200d0cc <__mulsi3>
 2016ce0:	d9400317 	ldw	r5,12(sp)
 2016ce4:	d9000017 	ldw	r4,0(sp)
 2016ce8:	1023883a 	mov	r17,r2
 2016cec:	200d0cc0 	call	200d0cc <__mulsi3>
 2016cf0:	14cb883a 	add	r5,r2,r19
 2016cf4:	894b883a 	add	r5,r17,r5
 2016cf8:	b005883a 	mov	r2,r22
 2016cfc:	2807883a 	mov	r3,r5
 2016d00:	dfc00d17 	ldw	ra,52(sp)
 2016d04:	df000c17 	ldw	fp,48(sp)
 2016d08:	ddc00b17 	ldw	r23,44(sp)
 2016d0c:	dd800a17 	ldw	r22,40(sp)
 2016d10:	dd400917 	ldw	r21,36(sp)
 2016d14:	dd000817 	ldw	r20,32(sp)
 2016d18:	dcc00717 	ldw	r19,28(sp)
 2016d1c:	dc800617 	ldw	r18,24(sp)
 2016d20:	dc400517 	ldw	r17,20(sp)
 2016d24:	dc000417 	ldw	r16,16(sp)
 2016d28:	dec00e04 	addi	sp,sp,56
 2016d2c:	f800283a 	ret

02016d30 <__clzsi2>:
 2016d30:	00bfffd4 	movui	r2,65535
 2016d34:	11000e36 	bltu	r2,r4,2016d70 <__clzsi2+0x40>
 2016d38:	00803fc4 	movi	r2,255
 2016d3c:	01400204 	movi	r5,8
 2016d40:	0007883a 	mov	r3,zero
 2016d44:	11001036 	bltu	r2,r4,2016d88 <__clzsi2+0x58>
 2016d48:	000b883a 	mov	r5,zero
 2016d4c:	20c6d83a 	srl	r3,r4,r3
 2016d50:	008080b4 	movhi	r2,514
 2016d54:	10af5304 	addi	r2,r2,-17076
 2016d58:	1887883a 	add	r3,r3,r2
 2016d5c:	18800003 	ldbu	r2,0(r3)
 2016d60:	00c00804 	movi	r3,32
 2016d64:	2885883a 	add	r2,r5,r2
 2016d68:	1885c83a 	sub	r2,r3,r2
 2016d6c:	f800283a 	ret
 2016d70:	01400404 	movi	r5,16
 2016d74:	00804034 	movhi	r2,256
 2016d78:	10bfffc4 	addi	r2,r2,-1
 2016d7c:	2807883a 	mov	r3,r5
 2016d80:	113ff22e 	bgeu	r2,r4,2016d4c <__clzsi2+0x1c>
 2016d84:	01400604 	movi	r5,24
 2016d88:	2807883a 	mov	r3,r5
 2016d8c:	20c6d83a 	srl	r3,r4,r3
 2016d90:	008080b4 	movhi	r2,514
 2016d94:	10af5304 	addi	r2,r2,-17076
 2016d98:	1887883a 	add	r3,r3,r2
 2016d9c:	18800003 	ldbu	r2,0(r3)
 2016da0:	00c00804 	movi	r3,32
 2016da4:	2885883a 	add	r2,r5,r2
 2016da8:	1885c83a 	sub	r2,r3,r2
 2016dac:	f800283a 	ret

02016db0 <__pack_d>:
 2016db0:	20c00017 	ldw	r3,0(r4)
 2016db4:	defffd04 	addi	sp,sp,-12
 2016db8:	dc000015 	stw	r16,0(sp)
 2016dbc:	dc800215 	stw	r18,8(sp)
 2016dc0:	dc400115 	stw	r17,4(sp)
 2016dc4:	00800044 	movi	r2,1
 2016dc8:	22000317 	ldw	r8,12(r4)
 2016dcc:	001f883a 	mov	r15,zero
 2016dd0:	22400417 	ldw	r9,16(r4)
 2016dd4:	24000117 	ldw	r16,4(r4)
 2016dd8:	10c0552e 	bgeu	r2,r3,2016f30 <__pack_d+0x180>
 2016ddc:	00800104 	movi	r2,4
 2016de0:	18804f26 	beq	r3,r2,2016f20 <__pack_d+0x170>
 2016de4:	00800084 	movi	r2,2
 2016de8:	18800226 	beq	r3,r2,2016df4 <__pack_d+0x44>
 2016dec:	4244b03a 	or	r2,r8,r9
 2016df0:	10001a1e 	bne	r2,zero,2016e5c <__pack_d+0xac>
 2016df4:	000d883a 	mov	r6,zero
 2016df8:	000f883a 	mov	r7,zero
 2016dfc:	0011883a 	mov	r8,zero
 2016e00:	00800434 	movhi	r2,16
 2016e04:	10bfffc4 	addi	r2,r2,-1
 2016e08:	301d883a 	mov	r14,r6
 2016e0c:	3884703a 	and	r2,r7,r2
 2016e10:	400a953a 	slli	r5,r8,20
 2016e14:	79bffc2c 	andhi	r6,r15,65520
 2016e18:	308cb03a 	or	r6,r6,r2
 2016e1c:	00e00434 	movhi	r3,32784
 2016e20:	18ffffc4 	addi	r3,r3,-1
 2016e24:	800497fa 	slli	r2,r16,31
 2016e28:	30c6703a 	and	r3,r6,r3
 2016e2c:	1946b03a 	or	r3,r3,r5
 2016e30:	01600034 	movhi	r5,32768
 2016e34:	297fffc4 	addi	r5,r5,-1
 2016e38:	194a703a 	and	r5,r3,r5
 2016e3c:	288ab03a 	or	r5,r5,r2
 2016e40:	2807883a 	mov	r3,r5
 2016e44:	7005883a 	mov	r2,r14
 2016e48:	dc800217 	ldw	r18,8(sp)
 2016e4c:	dc400117 	ldw	r17,4(sp)
 2016e50:	dc000017 	ldw	r16,0(sp)
 2016e54:	dec00304 	addi	sp,sp,12
 2016e58:	f800283a 	ret
 2016e5c:	21000217 	ldw	r4,8(r4)
 2016e60:	00bf0084 	movi	r2,-1022
 2016e64:	20803f16 	blt	r4,r2,2016f64 <__pack_d+0x1b4>
 2016e68:	0080ffc4 	movi	r2,1023
 2016e6c:	11002c16 	blt	r2,r4,2016f20 <__pack_d+0x170>
 2016e70:	00803fc4 	movi	r2,255
 2016e74:	408c703a 	and	r6,r8,r2
 2016e78:	00802004 	movi	r2,128
 2016e7c:	0007883a 	mov	r3,zero
 2016e80:	000f883a 	mov	r7,zero
 2016e84:	2280ffc4 	addi	r10,r4,1023
 2016e88:	30801e26 	beq	r6,r2,2016f04 <__pack_d+0x154>
 2016e8c:	00801fc4 	movi	r2,127
 2016e90:	4089883a 	add	r4,r8,r2
 2016e94:	220d803a 	cmpltu	r6,r4,r8
 2016e98:	324d883a 	add	r6,r6,r9
 2016e9c:	2011883a 	mov	r8,r4
 2016ea0:	3013883a 	mov	r9,r6
 2016ea4:	00880034 	movhi	r2,8192
 2016ea8:	10bfffc4 	addi	r2,r2,-1
 2016eac:	12400d36 	bltu	r2,r9,2016ee4 <__pack_d+0x134>
 2016eb0:	4804963a 	slli	r2,r9,24
 2016eb4:	400cd23a 	srli	r6,r8,8
 2016eb8:	480ed23a 	srli	r7,r9,8
 2016ebc:	013fffc4 	movi	r4,-1
 2016ec0:	118cb03a 	or	r6,r2,r6
 2016ec4:	01400434 	movhi	r5,16
 2016ec8:	297fffc4 	addi	r5,r5,-1
 2016ecc:	3104703a 	and	r2,r6,r4
 2016ed0:	3946703a 	and	r3,r7,r5
 2016ed4:	5201ffcc 	andi	r8,r10,2047
 2016ed8:	100d883a 	mov	r6,r2
 2016edc:	180f883a 	mov	r7,r3
 2016ee0:	003fc706 	br	2016e00 <__pack_d+0x50>
 2016ee4:	480897fa 	slli	r4,r9,31
 2016ee8:	4004d07a 	srli	r2,r8,1
 2016eec:	4806d07a 	srli	r3,r9,1
 2016ef0:	52800044 	addi	r10,r10,1
 2016ef4:	2084b03a 	or	r2,r4,r2
 2016ef8:	1011883a 	mov	r8,r2
 2016efc:	1813883a 	mov	r9,r3
 2016f00:	003feb06 	br	2016eb0 <__pack_d+0x100>
 2016f04:	383fe11e 	bne	r7,zero,2016e8c <__pack_d+0xdc>
 2016f08:	01004004 	movi	r4,256
 2016f0c:	4104703a 	and	r2,r8,r4
 2016f10:	10c4b03a 	or	r2,r2,r3
 2016f14:	103fe326 	beq	r2,zero,2016ea4 <__pack_d+0xf4>
 2016f18:	3005883a 	mov	r2,r6
 2016f1c:	003fdc06 	br	2016e90 <__pack_d+0xe0>
 2016f20:	000d883a 	mov	r6,zero
 2016f24:	000f883a 	mov	r7,zero
 2016f28:	0201ffc4 	movi	r8,2047
 2016f2c:	003fb406 	br	2016e00 <__pack_d+0x50>
 2016f30:	0005883a 	mov	r2,zero
 2016f34:	00c00234 	movhi	r3,8
 2016f38:	408cb03a 	or	r6,r8,r2
 2016f3c:	48ceb03a 	or	r7,r9,r3
 2016f40:	013fffc4 	movi	r4,-1
 2016f44:	01400434 	movhi	r5,16
 2016f48:	297fffc4 	addi	r5,r5,-1
 2016f4c:	3104703a 	and	r2,r6,r4
 2016f50:	3946703a 	and	r3,r7,r5
 2016f54:	100d883a 	mov	r6,r2
 2016f58:	180f883a 	mov	r7,r3
 2016f5c:	0201ffc4 	movi	r8,2047
 2016f60:	003fa706 	br	2016e00 <__pack_d+0x50>
 2016f64:	1109c83a 	sub	r4,r2,r4
 2016f68:	00800e04 	movi	r2,56
 2016f6c:	11004316 	blt	r2,r4,201707c <__pack_d+0x2cc>
 2016f70:	21fff804 	addi	r7,r4,-32
 2016f74:	38004516 	blt	r7,zero,201708c <__pack_d+0x2dc>
 2016f78:	49d8d83a 	srl	r12,r9,r7
 2016f7c:	001b883a 	mov	r13,zero
 2016f80:	0023883a 	mov	r17,zero
 2016f84:	01400044 	movi	r5,1
 2016f88:	0025883a 	mov	r18,zero
 2016f8c:	38004716 	blt	r7,zero,20170ac <__pack_d+0x2fc>
 2016f90:	29d6983a 	sll	r11,r5,r7
 2016f94:	0015883a 	mov	r10,zero
 2016f98:	00bfffc4 	movi	r2,-1
 2016f9c:	5089883a 	add	r4,r10,r2
 2016fa0:	588b883a 	add	r5,r11,r2
 2016fa4:	228d803a 	cmpltu	r6,r4,r10
 2016fa8:	314b883a 	add	r5,r6,r5
 2016fac:	4104703a 	and	r2,r8,r4
 2016fb0:	4946703a 	and	r3,r9,r5
 2016fb4:	10c4b03a 	or	r2,r2,r3
 2016fb8:	10000226 	beq	r2,zero,2016fc4 <__pack_d+0x214>
 2016fbc:	04400044 	movi	r17,1
 2016fc0:	0025883a 	mov	r18,zero
 2016fc4:	00803fc4 	movi	r2,255
 2016fc8:	644eb03a 	or	r7,r12,r17
 2016fcc:	3892703a 	and	r9,r7,r2
 2016fd0:	00802004 	movi	r2,128
 2016fd4:	6c90b03a 	or	r8,r13,r18
 2016fd8:	0015883a 	mov	r10,zero
 2016fdc:	48801626 	beq	r9,r2,2017038 <__pack_d+0x288>
 2016fe0:	01001fc4 	movi	r4,127
 2016fe4:	3905883a 	add	r2,r7,r4
 2016fe8:	11cd803a 	cmpltu	r6,r2,r7
 2016fec:	320d883a 	add	r6,r6,r8
 2016ff0:	100f883a 	mov	r7,r2
 2016ff4:	00840034 	movhi	r2,4096
 2016ff8:	10bfffc4 	addi	r2,r2,-1
 2016ffc:	3011883a 	mov	r8,r6
 2017000:	0007883a 	mov	r3,zero
 2017004:	11801b36 	bltu	r2,r6,2017074 <__pack_d+0x2c4>
 2017008:	4004963a 	slli	r2,r8,24
 201700c:	3808d23a 	srli	r4,r7,8
 2017010:	400ad23a 	srli	r5,r8,8
 2017014:	1813883a 	mov	r9,r3
 2017018:	1108b03a 	or	r4,r2,r4
 201701c:	00bfffc4 	movi	r2,-1
 2017020:	00c00434 	movhi	r3,16
 2017024:	18ffffc4 	addi	r3,r3,-1
 2017028:	208c703a 	and	r6,r4,r2
 201702c:	28ce703a 	and	r7,r5,r3
 2017030:	4a01ffcc 	andi	r8,r9,2047
 2017034:	003f7206 	br	2016e00 <__pack_d+0x50>
 2017038:	503fe91e 	bne	r10,zero,2016fe0 <__pack_d+0x230>
 201703c:	01004004 	movi	r4,256
 2017040:	3904703a 	and	r2,r7,r4
 2017044:	0007883a 	mov	r3,zero
 2017048:	10c4b03a 	or	r2,r2,r3
 201704c:	10000626 	beq	r2,zero,2017068 <__pack_d+0x2b8>
 2017050:	3a45883a 	add	r2,r7,r9
 2017054:	11cd803a 	cmpltu	r6,r2,r7
 2017058:	320d883a 	add	r6,r6,r8
 201705c:	100f883a 	mov	r7,r2
 2017060:	3011883a 	mov	r8,r6
 2017064:	0007883a 	mov	r3,zero
 2017068:	00840034 	movhi	r2,4096
 201706c:	10bfffc4 	addi	r2,r2,-1
 2017070:	123fe52e 	bgeu	r2,r8,2017008 <__pack_d+0x258>
 2017074:	00c00044 	movi	r3,1
 2017078:	003fe306 	br	2017008 <__pack_d+0x258>
 201707c:	0009883a 	mov	r4,zero
 2017080:	0013883a 	mov	r9,zero
 2017084:	000b883a 	mov	r5,zero
 2017088:	003fe406 	br	201701c <__pack_d+0x26c>
 201708c:	4a47883a 	add	r3,r9,r9
 2017090:	008007c4 	movi	r2,31
 2017094:	1105c83a 	sub	r2,r2,r4
 2017098:	1886983a 	sll	r3,r3,r2
 201709c:	4118d83a 	srl	r12,r8,r4
 20170a0:	491ad83a 	srl	r13,r9,r4
 20170a4:	1b18b03a 	or	r12,r3,r12
 20170a8:	003fb506 	br	2016f80 <__pack_d+0x1d0>
 20170ac:	2806d07a 	srli	r3,r5,1
 20170b0:	008007c4 	movi	r2,31
 20170b4:	1105c83a 	sub	r2,r2,r4
 20170b8:	1896d83a 	srl	r11,r3,r2
 20170bc:	2914983a 	sll	r10,r5,r4
 20170c0:	003fb506 	br	2016f98 <__pack_d+0x1e8>

020170c4 <__unpack_d>:
 20170c4:	20c00117 	ldw	r3,4(r4)
 20170c8:	22400017 	ldw	r9,0(r4)
 20170cc:	00800434 	movhi	r2,16
 20170d0:	10bfffc4 	addi	r2,r2,-1
 20170d4:	1808d53a 	srli	r4,r3,20
 20170d8:	180cd7fa 	srli	r6,r3,31
 20170dc:	1894703a 	and	r10,r3,r2
 20170e0:	2201ffcc 	andi	r8,r4,2047
 20170e4:	281b883a 	mov	r13,r5
 20170e8:	4817883a 	mov	r11,r9
 20170ec:	29800115 	stw	r6,4(r5)
 20170f0:	5019883a 	mov	r12,r10
 20170f4:	40001e1e 	bne	r8,zero,2017170 <__unpack_d+0xac>
 20170f8:	4a84b03a 	or	r2,r9,r10
 20170fc:	10001926 	beq	r2,zero,2017164 <__unpack_d+0xa0>
 2017100:	4804d63a 	srli	r2,r9,24
 2017104:	500c923a 	slli	r6,r10,8
 2017108:	013f0084 	movi	r4,-1022
 201710c:	00c40034 	movhi	r3,4096
 2017110:	18ffffc4 	addi	r3,r3,-1
 2017114:	118cb03a 	or	r6,r2,r6
 2017118:	008000c4 	movi	r2,3
 201711c:	480a923a 	slli	r5,r9,8
 2017120:	68800015 	stw	r2,0(r13)
 2017124:	69000215 	stw	r4,8(r13)
 2017128:	19800b36 	bltu	r3,r6,2017158 <__unpack_d+0x94>
 201712c:	200f883a 	mov	r7,r4
 2017130:	1811883a 	mov	r8,r3
 2017134:	2945883a 	add	r2,r5,r5
 2017138:	1149803a 	cmpltu	r4,r2,r5
 201713c:	3187883a 	add	r3,r6,r6
 2017140:	20c9883a 	add	r4,r4,r3
 2017144:	100b883a 	mov	r5,r2
 2017148:	200d883a 	mov	r6,r4
 201714c:	39ffffc4 	addi	r7,r7,-1
 2017150:	413ff82e 	bgeu	r8,r4,2017134 <__unpack_d+0x70>
 2017154:	69c00215 	stw	r7,8(r13)
 2017158:	69800415 	stw	r6,16(r13)
 201715c:	69400315 	stw	r5,12(r13)
 2017160:	f800283a 	ret
 2017164:	00800084 	movi	r2,2
 2017168:	28800015 	stw	r2,0(r5)
 201716c:	f800283a 	ret
 2017170:	0081ffc4 	movi	r2,2047
 2017174:	40800f26 	beq	r8,r2,20171b4 <__unpack_d+0xf0>
 2017178:	480cd63a 	srli	r6,r9,24
 201717c:	5006923a 	slli	r3,r10,8
 2017180:	4804923a 	slli	r2,r9,8
 2017184:	0009883a 	mov	r4,zero
 2017188:	30c6b03a 	or	r3,r6,r3
 201718c:	01440034 	movhi	r5,4096
 2017190:	110cb03a 	or	r6,r2,r4
 2017194:	423f0044 	addi	r8,r8,-1023
 2017198:	194eb03a 	or	r7,r3,r5
 201719c:	008000c4 	movi	r2,3
 20171a0:	69c00415 	stw	r7,16(r13)
 20171a4:	6a000215 	stw	r8,8(r13)
 20171a8:	68800015 	stw	r2,0(r13)
 20171ac:	69800315 	stw	r6,12(r13)
 20171b0:	f800283a 	ret
 20171b4:	4a84b03a 	or	r2,r9,r10
 20171b8:	1000031e 	bne	r2,zero,20171c8 <__unpack_d+0x104>
 20171bc:	00800104 	movi	r2,4
 20171c0:	28800015 	stw	r2,0(r5)
 20171c4:	f800283a 	ret
 20171c8:	0009883a 	mov	r4,zero
 20171cc:	01400234 	movhi	r5,8
 20171d0:	4904703a 	and	r2,r9,r4
 20171d4:	5146703a 	and	r3,r10,r5
 20171d8:	10c4b03a 	or	r2,r2,r3
 20171dc:	10000526 	beq	r2,zero,20171f4 <__unpack_d+0x130>
 20171e0:	00800044 	movi	r2,1
 20171e4:	68800015 	stw	r2,0(r13)
 20171e8:	6b000415 	stw	r12,16(r13)
 20171ec:	6ac00315 	stw	r11,12(r13)
 20171f0:	f800283a 	ret
 20171f4:	68000015 	stw	zero,0(r13)
 20171f8:	003ffb06 	br	20171e8 <__unpack_d+0x124>

020171fc <__fpcmp_parts_d>:
 20171fc:	21800017 	ldw	r6,0(r4)
 2017200:	00c00044 	movi	r3,1
 2017204:	19800a2e 	bgeu	r3,r6,2017230 <__fpcmp_parts_d+0x34>
 2017208:	28800017 	ldw	r2,0(r5)
 201720c:	1880082e 	bgeu	r3,r2,2017230 <__fpcmp_parts_d+0x34>
 2017210:	00c00104 	movi	r3,4
 2017214:	30c02626 	beq	r6,r3,20172b0 <__fpcmp_parts_d+0xb4>
 2017218:	10c02226 	beq	r2,r3,20172a4 <__fpcmp_parts_d+0xa8>
 201721c:	00c00084 	movi	r3,2
 2017220:	30c00526 	beq	r6,r3,2017238 <__fpcmp_parts_d+0x3c>
 2017224:	10c0071e 	bne	r2,r3,2017244 <__fpcmp_parts_d+0x48>
 2017228:	20800117 	ldw	r2,4(r4)
 201722c:	1000091e 	bne	r2,zero,2017254 <__fpcmp_parts_d+0x58>
 2017230:	00800044 	movi	r2,1
 2017234:	f800283a 	ret
 2017238:	10c01a1e 	bne	r2,r3,20172a4 <__fpcmp_parts_d+0xa8>
 201723c:	0005883a 	mov	r2,zero
 2017240:	f800283a 	ret
 2017244:	22000117 	ldw	r8,4(r4)
 2017248:	28800117 	ldw	r2,4(r5)
 201724c:	40800326 	beq	r8,r2,201725c <__fpcmp_parts_d+0x60>
 2017250:	403ff726 	beq	r8,zero,2017230 <__fpcmp_parts_d+0x34>
 2017254:	00bfffc4 	movi	r2,-1
 2017258:	f800283a 	ret
 201725c:	20c00217 	ldw	r3,8(r4)
 2017260:	28800217 	ldw	r2,8(r5)
 2017264:	10fffa16 	blt	r2,r3,2017250 <__fpcmp_parts_d+0x54>
 2017268:	18800916 	blt	r3,r2,2017290 <__fpcmp_parts_d+0x94>
 201726c:	21c00417 	ldw	r7,16(r4)
 2017270:	28c00417 	ldw	r3,16(r5)
 2017274:	21800317 	ldw	r6,12(r4)
 2017278:	28800317 	ldw	r2,12(r5)
 201727c:	19fff436 	bltu	r3,r7,2017250 <__fpcmp_parts_d+0x54>
 2017280:	38c00526 	beq	r7,r3,2017298 <__fpcmp_parts_d+0x9c>
 2017284:	38c00236 	bltu	r7,r3,2017290 <__fpcmp_parts_d+0x94>
 2017288:	19ffec1e 	bne	r3,r7,201723c <__fpcmp_parts_d+0x40>
 201728c:	30bfeb2e 	bgeu	r6,r2,201723c <__fpcmp_parts_d+0x40>
 2017290:	403fe71e 	bne	r8,zero,2017230 <__fpcmp_parts_d+0x34>
 2017294:	003fef06 	br	2017254 <__fpcmp_parts_d+0x58>
 2017298:	11bffa2e 	bgeu	r2,r6,2017284 <__fpcmp_parts_d+0x88>
 201729c:	403fe426 	beq	r8,zero,2017230 <__fpcmp_parts_d+0x34>
 20172a0:	003fec06 	br	2017254 <__fpcmp_parts_d+0x58>
 20172a4:	28800117 	ldw	r2,4(r5)
 20172a8:	103fe11e 	bne	r2,zero,2017230 <__fpcmp_parts_d+0x34>
 20172ac:	003fe906 	br	2017254 <__fpcmp_parts_d+0x58>
 20172b0:	11bfdd1e 	bne	r2,r6,2017228 <__fpcmp_parts_d+0x2c>
 20172b4:	28c00117 	ldw	r3,4(r5)
 20172b8:	20800117 	ldw	r2,4(r4)
 20172bc:	1885c83a 	sub	r2,r3,r2
 20172c0:	f800283a 	ret

020172c4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 20172c4:	defff404 	addi	sp,sp,-48
 20172c8:	df000b15 	stw	fp,44(sp)
 20172cc:	df000b04 	addi	fp,sp,44
 20172d0:	e13ffb15 	stw	r4,-20(fp)
 20172d4:	e17ffc15 	stw	r5,-16(fp)
 20172d8:	e1bffd15 	stw	r6,-12(fp)
 20172dc:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 20172e0:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 20172e4:	008080b4 	movhi	r2,514
 20172e8:	10be0404 	addi	r2,r2,-2032
 20172ec:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 20172f0:	1005003a 	cmpeq	r2,r2,zero
 20172f4:	1000411e 	bne	r2,zero,20173fc <alt_alarm_start+0x138>
  {
    if (alarm)
 20172f8:	e0bffb17 	ldw	r2,-20(fp)
 20172fc:	1005003a 	cmpeq	r2,r2,zero
 2017300:	10003b1e 	bne	r2,zero,20173f0 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 2017304:	e0fffb17 	ldw	r3,-20(fp)
 2017308:	e0bffd17 	ldw	r2,-12(fp)
 201730c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 2017310:	e0fffb17 	ldw	r3,-20(fp)
 2017314:	e0bffe17 	ldw	r2,-8(fp)
 2017318:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201731c:	0005303a 	rdctl	r2,status
 2017320:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017324:	e0fff817 	ldw	r3,-32(fp)
 2017328:	00bfff84 	movi	r2,-2
 201732c:	1884703a 	and	r2,r3,r2
 2017330:	1001703a 	wrctl	status,r2
  
  return context;
 2017334:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 2017338:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 201733c:	008080b4 	movhi	r2,514
 2017340:	10be0504 	addi	r2,r2,-2028
 2017344:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 2017348:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 201734c:	e0fffc17 	ldw	r3,-16(fp)
 2017350:	e0bff917 	ldw	r2,-28(fp)
 2017354:	1885883a 	add	r2,r3,r2
 2017358:	10c00044 	addi	r3,r2,1
 201735c:	e0bffb17 	ldw	r2,-20(fp)
 2017360:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 2017364:	e0bffb17 	ldw	r2,-20(fp)
 2017368:	10c00217 	ldw	r3,8(r2)
 201736c:	e0bff917 	ldw	r2,-28(fp)
 2017370:	1880042e 	bgeu	r3,r2,2017384 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 2017374:	e0fffb17 	ldw	r3,-20(fp)
 2017378:	00800044 	movi	r2,1
 201737c:	18800405 	stb	r2,16(r3)
 2017380:	00000206 	br	201738c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 2017384:	e0bffb17 	ldw	r2,-20(fp)
 2017388:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 201738c:	e0fffb17 	ldw	r3,-20(fp)
 2017390:	008080b4 	movhi	r2,514
 2017394:	10b70504 	addi	r2,r2,-9196
 2017398:	e0bff615 	stw	r2,-40(fp)
 201739c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 20173a0:	e0fff717 	ldw	r3,-36(fp)
 20173a4:	e0bff617 	ldw	r2,-40(fp)
 20173a8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 20173ac:	e0bff617 	ldw	r2,-40(fp)
 20173b0:	10c00017 	ldw	r3,0(r2)
 20173b4:	e0bff717 	ldw	r2,-36(fp)
 20173b8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 20173bc:	e0bff617 	ldw	r2,-40(fp)
 20173c0:	10c00017 	ldw	r3,0(r2)
 20173c4:	e0bff717 	ldw	r2,-36(fp)
 20173c8:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 20173cc:	e0fff617 	ldw	r3,-40(fp)
 20173d0:	e0bff717 	ldw	r2,-36(fp)
 20173d4:	18800015 	stw	r2,0(r3)
 20173d8:	e0bffa17 	ldw	r2,-24(fp)
 20173dc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20173e0:	e0bff517 	ldw	r2,-44(fp)
 20173e4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 20173e8:	e03fff15 	stw	zero,-4(fp)
 20173ec:	00000506 	br	2017404 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 20173f0:	00bffa84 	movi	r2,-22
 20173f4:	e0bfff15 	stw	r2,-4(fp)
 20173f8:	00000206 	br	2017404 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 20173fc:	00bfde84 	movi	r2,-134
 2017400:	e0bfff15 	stw	r2,-4(fp)
 2017404:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 2017408:	e037883a 	mov	sp,fp
 201740c:	df000017 	ldw	fp,0(sp)
 2017410:	dec00104 	addi	sp,sp,4
 2017414:	f800283a 	ret

02017418 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 2017418:	defff804 	addi	sp,sp,-32
 201741c:	dfc00715 	stw	ra,28(sp)
 2017420:	df000615 	stw	fp,24(sp)
 2017424:	df000604 	addi	fp,sp,24
 2017428:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 201742c:	e0bffc17 	ldw	r2,-16(fp)
 2017430:	1004803a 	cmplt	r2,r2,zero
 2017434:	1000091e 	bne	r2,zero,201745c <close+0x44>
 2017438:	e13ffc17 	ldw	r4,-16(fp)
 201743c:	01400304 	movi	r5,12
 2017440:	200d0cc0 	call	200d0cc <__mulsi3>
 2017444:	1007883a 	mov	r3,r2
 2017448:	008080b4 	movhi	r2,514
 201744c:	10b23704 	addi	r2,r2,-14116
 2017450:	1887883a 	add	r3,r3,r2
 2017454:	e0ffff15 	stw	r3,-4(fp)
 2017458:	00000106 	br	2017460 <close+0x48>
 201745c:	e03fff15 	stw	zero,-4(fp)
 2017460:	e0bfff17 	ldw	r2,-4(fp)
 2017464:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 2017468:	e0bffb17 	ldw	r2,-20(fp)
 201746c:	1005003a 	cmpeq	r2,r2,zero
 2017470:	10001d1e 	bne	r2,zero,20174e8 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 2017474:	e0bffb17 	ldw	r2,-20(fp)
 2017478:	10800017 	ldw	r2,0(r2)
 201747c:	10800417 	ldw	r2,16(r2)
 2017480:	1005003a 	cmpeq	r2,r2,zero
 2017484:	1000071e 	bne	r2,zero,20174a4 <close+0x8c>
 2017488:	e0bffb17 	ldw	r2,-20(fp)
 201748c:	10800017 	ldw	r2,0(r2)
 2017490:	10800417 	ldw	r2,16(r2)
 2017494:	e13ffb17 	ldw	r4,-20(fp)
 2017498:	103ee83a 	callr	r2
 201749c:	e0bffe15 	stw	r2,-8(fp)
 20174a0:	00000106 	br	20174a8 <close+0x90>
 20174a4:	e03ffe15 	stw	zero,-8(fp)
 20174a8:	e0bffe17 	ldw	r2,-8(fp)
 20174ac:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 20174b0:	e13ffc17 	ldw	r4,-16(fp)
 20174b4:	2017e900 	call	2017e90 <alt_release_fd>
    if (rval < 0)
 20174b8:	e0bffa17 	ldw	r2,-24(fp)
 20174bc:	1004403a 	cmpge	r2,r2,zero
 20174c0:	1000071e 	bne	r2,zero,20174e0 <close+0xc8>
    {
      ALT_ERRNO = -rval;
 20174c4:	20175180 	call	2017518 <alt_get_errno>
 20174c8:	e0fffa17 	ldw	r3,-24(fp)
 20174cc:	00c7c83a 	sub	r3,zero,r3
 20174d0:	10c00015 	stw	r3,0(r2)
      return -1;
 20174d4:	00bfffc4 	movi	r2,-1
 20174d8:	e0bffd15 	stw	r2,-12(fp)
 20174dc:	00000806 	br	2017500 <close+0xe8>
    }
    return 0;
 20174e0:	e03ffd15 	stw	zero,-12(fp)
 20174e4:	00000606 	br	2017500 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 20174e8:	20175180 	call	2017518 <alt_get_errno>
 20174ec:	1007883a 	mov	r3,r2
 20174f0:	00801444 	movi	r2,81
 20174f4:	18800015 	stw	r2,0(r3)
    return -1;
 20174f8:	00bfffc4 	movi	r2,-1
 20174fc:	e0bffd15 	stw	r2,-12(fp)
 2017500:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 2017504:	e037883a 	mov	sp,fp
 2017508:	dfc00117 	ldw	ra,4(sp)
 201750c:	df000017 	ldw	fp,0(sp)
 2017510:	dec00204 	addi	sp,sp,8
 2017514:	f800283a 	ret

02017518 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2017518:	defffd04 	addi	sp,sp,-12
 201751c:	dfc00215 	stw	ra,8(sp)
 2017520:	df000115 	stw	fp,4(sp)
 2017524:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2017528:	008080b4 	movhi	r2,514
 201752c:	10b70304 	addi	r2,r2,-9204
 2017530:	10800017 	ldw	r2,0(r2)
 2017534:	1005003a 	cmpeq	r2,r2,zero
 2017538:	1000061e 	bne	r2,zero,2017554 <alt_get_errno+0x3c>
 201753c:	008080b4 	movhi	r2,514
 2017540:	10b70304 	addi	r2,r2,-9204
 2017544:	10800017 	ldw	r2,0(r2)
 2017548:	103ee83a 	callr	r2
 201754c:	e0bfff15 	stw	r2,-4(fp)
 2017550:	00000306 	br	2017560 <alt_get_errno+0x48>
 2017554:	008080b4 	movhi	r2,514
 2017558:	10bdfd04 	addi	r2,r2,-2060
 201755c:	e0bfff15 	stw	r2,-4(fp)
 2017560:	e0bfff17 	ldw	r2,-4(fp)
}
 2017564:	e037883a 	mov	sp,fp
 2017568:	dfc00117 	ldw	ra,4(sp)
 201756c:	df000017 	ldw	fp,0(sp)
 2017570:	dec00204 	addi	sp,sp,8
 2017574:	f800283a 	ret

02017578 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 2017578:	defffc04 	addi	sp,sp,-16
 201757c:	df000315 	stw	fp,12(sp)
 2017580:	df000304 	addi	fp,sp,12
 2017584:	e13ffd15 	stw	r4,-12(fp)
 2017588:	e17ffe15 	stw	r5,-8(fp)
 201758c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 2017590:	e0bfff17 	ldw	r2,-4(fp)
}
 2017594:	e037883a 	mov	sp,fp
 2017598:	df000017 	ldw	fp,0(sp)
 201759c:	dec00104 	addi	sp,sp,4
 20175a0:	f800283a 	ret

020175a4 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 20175a4:	defffd04 	addi	sp,sp,-12
 20175a8:	df000215 	stw	fp,8(sp)
 20175ac:	df000204 	addi	fp,sp,8
 20175b0:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 20175b4:	e0bfff17 	ldw	r2,-4(fp)
 20175b8:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 20175bc:	e0bffe17 	ldw	r2,-8(fp)
 20175c0:	1005003a 	cmpeq	r2,r2,zero
 20175c4:	1000021e 	bne	r2,zero,20175d0 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 20175c8:	002af070 	cmpltui	zero,zero,43969
 20175cc:	00000106 	br	20175d4 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 20175d0:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 20175d4:	e037883a 	mov	sp,fp
 20175d8:	df000017 	ldw	fp,0(sp)
 20175dc:	dec00104 	addi	sp,sp,4
 20175e0:	f800283a 	ret

020175e4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 20175e4:	defffd04 	addi	sp,sp,-12
 20175e8:	dfc00215 	stw	ra,8(sp)
 20175ec:	df000115 	stw	fp,4(sp)
 20175f0:	df000104 	addi	fp,sp,4
 20175f4:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 20175f8:	e13fff17 	ldw	r4,-4(fp)
 20175fc:	20175a40 	call	20175a4 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 2017600:	003fff06 	br	2017600 <_exit+0x1c>

02017604 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 2017604:	defff904 	addi	sp,sp,-28
 2017608:	dfc00615 	stw	ra,24(sp)
 201760c:	df000515 	stw	fp,20(sp)
 2017610:	df000504 	addi	fp,sp,20
 2017614:	e13ffc15 	stw	r4,-16(fp)
 2017618:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 201761c:	e0bffc17 	ldw	r2,-16(fp)
 2017620:	1004803a 	cmplt	r2,r2,zero
 2017624:	1000091e 	bne	r2,zero,201764c <fstat+0x48>
 2017628:	e13ffc17 	ldw	r4,-16(fp)
 201762c:	01400304 	movi	r5,12
 2017630:	200d0cc0 	call	200d0cc <__mulsi3>
 2017634:	1007883a 	mov	r3,r2
 2017638:	008080b4 	movhi	r2,514
 201763c:	10b23704 	addi	r2,r2,-14116
 2017640:	1887883a 	add	r3,r3,r2
 2017644:	e0ffff15 	stw	r3,-4(fp)
 2017648:	00000106 	br	2017650 <fstat+0x4c>
 201764c:	e03fff15 	stw	zero,-4(fp)
 2017650:	e0bfff17 	ldw	r2,-4(fp)
 2017654:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 2017658:	e0bffb17 	ldw	r2,-20(fp)
 201765c:	1005003a 	cmpeq	r2,r2,zero
 2017660:	1000121e 	bne	r2,zero,20176ac <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 2017664:	e0bffb17 	ldw	r2,-20(fp)
 2017668:	10800017 	ldw	r2,0(r2)
 201766c:	10800817 	ldw	r2,32(r2)
 2017670:	1005003a 	cmpeq	r2,r2,zero
 2017674:	1000081e 	bne	r2,zero,2017698 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
 2017678:	e0bffb17 	ldw	r2,-20(fp)
 201767c:	10800017 	ldw	r2,0(r2)
 2017680:	10800817 	ldw	r2,32(r2)
 2017684:	e13ffb17 	ldw	r4,-20(fp)
 2017688:	e17ffd17 	ldw	r5,-12(fp)
 201768c:	103ee83a 	callr	r2
 2017690:	e0bffe15 	stw	r2,-8(fp)
 2017694:	00000b06 	br	20176c4 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 2017698:	e0fffd17 	ldw	r3,-12(fp)
 201769c:	00880004 	movi	r2,8192
 20176a0:	18800115 	stw	r2,4(r3)
      return 0;
 20176a4:	e03ffe15 	stw	zero,-8(fp)
 20176a8:	00000606 	br	20176c4 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 20176ac:	20176dc0 	call	20176dc <alt_get_errno>
 20176b0:	1007883a 	mov	r3,r2
 20176b4:	00801444 	movi	r2,81
 20176b8:	18800015 	stw	r2,0(r3)
    return -1;
 20176bc:	00bfffc4 	movi	r2,-1
 20176c0:	e0bffe15 	stw	r2,-8(fp)
 20176c4:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 20176c8:	e037883a 	mov	sp,fp
 20176cc:	dfc00117 	ldw	ra,4(sp)
 20176d0:	df000017 	ldw	fp,0(sp)
 20176d4:	dec00204 	addi	sp,sp,8
 20176d8:	f800283a 	ret

020176dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20176dc:	defffd04 	addi	sp,sp,-12
 20176e0:	dfc00215 	stw	ra,8(sp)
 20176e4:	df000115 	stw	fp,4(sp)
 20176e8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 20176ec:	008080b4 	movhi	r2,514
 20176f0:	10b70304 	addi	r2,r2,-9204
 20176f4:	10800017 	ldw	r2,0(r2)
 20176f8:	1005003a 	cmpeq	r2,r2,zero
 20176fc:	1000061e 	bne	r2,zero,2017718 <alt_get_errno+0x3c>
 2017700:	008080b4 	movhi	r2,514
 2017704:	10b70304 	addi	r2,r2,-9204
 2017708:	10800017 	ldw	r2,0(r2)
 201770c:	103ee83a 	callr	r2
 2017710:	e0bfff15 	stw	r2,-4(fp)
 2017714:	00000306 	br	2017724 <alt_get_errno+0x48>
 2017718:	008080b4 	movhi	r2,514
 201771c:	10bdfd04 	addi	r2,r2,-2060
 2017720:	e0bfff15 	stw	r2,-4(fp)
 2017724:	e0bfff17 	ldw	r2,-4(fp)
}
 2017728:	e037883a 	mov	sp,fp
 201772c:	dfc00117 	ldw	ra,4(sp)
 2017730:	df000017 	ldw	fp,0(sp)
 2017734:	dec00204 	addi	sp,sp,8
 2017738:	f800283a 	ret

0201773c <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 201773c:	deffff04 	addi	sp,sp,-4
 2017740:	df000015 	stw	fp,0(sp)
 2017744:	d839883a 	mov	fp,sp
  return 0;
 2017748:	0005883a 	mov	r2,zero
}
 201774c:	e037883a 	mov	sp,fp
 2017750:	df000017 	ldw	fp,0(sp)
 2017754:	dec00104 	addi	sp,sp,4
 2017758:	f800283a 	ret

0201775c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 201775c:	deffeb04 	addi	sp,sp,-84
 2017760:	dfc01415 	stw	ra,80(sp)
 2017764:	df001315 	stw	fp,76(sp)
 2017768:	df001304 	addi	fp,sp,76
 201776c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2017770:	e0bffd17 	ldw	r2,-12(fp)
 2017774:	1004803a 	cmplt	r2,r2,zero
 2017778:	1000091e 	bne	r2,zero,20177a0 <isatty+0x44>
 201777c:	e13ffd17 	ldw	r4,-12(fp)
 2017780:	01400304 	movi	r5,12
 2017784:	200d0cc0 	call	200d0cc <__mulsi3>
 2017788:	1007883a 	mov	r3,r2
 201778c:	008080b4 	movhi	r2,514
 2017790:	10b23704 	addi	r2,r2,-14116
 2017794:	1887883a 	add	r3,r3,r2
 2017798:	e0ffff15 	stw	r3,-4(fp)
 201779c:	00000106 	br	20177a4 <isatty+0x48>
 20177a0:	e03fff15 	stw	zero,-4(fp)
 20177a4:	e0bfff17 	ldw	r2,-4(fp)
 20177a8:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 20177ac:	e0bfed17 	ldw	r2,-76(fp)
 20177b0:	1005003a 	cmpeq	r2,r2,zero
 20177b4:	10000f1e 	bne	r2,zero,20177f4 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 20177b8:	e0bfed17 	ldw	r2,-76(fp)
 20177bc:	10800017 	ldw	r2,0(r2)
 20177c0:	10800817 	ldw	r2,32(r2)
 20177c4:	1004c03a 	cmpne	r2,r2,zero
 20177c8:	1000031e 	bne	r2,zero,20177d8 <isatty+0x7c>
    {
      return 1;
 20177cc:	00800044 	movi	r2,1
 20177d0:	e0bffe15 	stw	r2,-8(fp)
 20177d4:	00000c06 	br	2017808 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 20177d8:	e17fee04 	addi	r5,fp,-72
 20177dc:	e13ffd17 	ldw	r4,-12(fp)
 20177e0:	20176040 	call	2017604 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 20177e4:	e0bfef17 	ldw	r2,-68(fp)
 20177e8:	10880020 	cmpeqi	r2,r2,8192
 20177ec:	e0bffe15 	stw	r2,-8(fp)
 20177f0:	00000506 	br	2017808 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 20177f4:	20178200 	call	2017820 <alt_get_errno>
 20177f8:	1007883a 	mov	r3,r2
 20177fc:	00801444 	movi	r2,81
 2017800:	18800015 	stw	r2,0(r3)
    return 0;
 2017804:	e03ffe15 	stw	zero,-8(fp)
 2017808:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 201780c:	e037883a 	mov	sp,fp
 2017810:	dfc00117 	ldw	ra,4(sp)
 2017814:	df000017 	ldw	fp,0(sp)
 2017818:	dec00204 	addi	sp,sp,8
 201781c:	f800283a 	ret

02017820 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2017820:	defffd04 	addi	sp,sp,-12
 2017824:	dfc00215 	stw	ra,8(sp)
 2017828:	df000115 	stw	fp,4(sp)
 201782c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2017830:	008080b4 	movhi	r2,514
 2017834:	10b70304 	addi	r2,r2,-9204
 2017838:	10800017 	ldw	r2,0(r2)
 201783c:	1005003a 	cmpeq	r2,r2,zero
 2017840:	1000061e 	bne	r2,zero,201785c <alt_get_errno+0x3c>
 2017844:	008080b4 	movhi	r2,514
 2017848:	10b70304 	addi	r2,r2,-9204
 201784c:	10800017 	ldw	r2,0(r2)
 2017850:	103ee83a 	callr	r2
 2017854:	e0bfff15 	stw	r2,-4(fp)
 2017858:	00000306 	br	2017868 <alt_get_errno+0x48>
 201785c:	008080b4 	movhi	r2,514
 2017860:	10bdfd04 	addi	r2,r2,-2060
 2017864:	e0bfff15 	stw	r2,-4(fp)
 2017868:	e0bfff17 	ldw	r2,-4(fp)
}
 201786c:	e037883a 	mov	sp,fp
 2017870:	dfc00117 	ldw	ra,4(sp)
 2017874:	df000017 	ldw	fp,0(sp)
 2017878:	dec00204 	addi	sp,sp,8
 201787c:	f800283a 	ret

02017880 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 2017880:	defffa04 	addi	sp,sp,-24
 2017884:	dfc00515 	stw	ra,20(sp)
 2017888:	df000415 	stw	fp,16(sp)
 201788c:	df000404 	addi	fp,sp,16
 2017890:	e13ffd15 	stw	r4,-12(fp)
 2017894:	e17ffe15 	stw	r5,-8(fp)
  int status = 0;
 2017898:	e03ffc15 	stw	zero,-16(fp)

  if (pid <= 0)
 201789c:	e0bffd17 	ldw	r2,-12(fp)
 20178a0:	10800048 	cmpgei	r2,r2,1
 20178a4:	1000301e 	bne	r2,zero,2017968 <kill+0xe8>
  {
    switch (sig)
 20178a8:	e0bffe17 	ldw	r2,-8(fp)
 20178ac:	10800828 	cmpgeui	r2,r2,32
 20178b0:	10002a1e 	bne	r2,zero,201795c <kill+0xdc>
 20178b4:	e0bffe17 	ldw	r2,-8(fp)
 20178b8:	1085883a 	add	r2,r2,r2
 20178bc:	1087883a 	add	r3,r2,r2
 20178c0:	00808074 	movhi	r2,513
 20178c4:	109e3504 	addi	r2,r2,30932
 20178c8:	1885883a 	add	r2,r3,r2
 20178cc:	10800017 	ldw	r2,0(r2)
 20178d0:	1000683a 	jmp	r2
 20178d4:	0201797c 	xorhi	r8,zero,1509
 20178d8:	0201795c 	xori	r8,zero,1509
 20178dc:	0201795c 	xori	r8,zero,1509
 20178e0:	02017954 	movui	r8,1509
 20178e4:	02017954 	movui	r8,1509
 20178e8:	02017954 	movui	r8,1509
 20178ec:	02017954 	movui	r8,1509
 20178f0:	0201795c 	xori	r8,zero,1509
 20178f4:	02017954 	movui	r8,1509
 20178f8:	02017954 	movui	r8,1509
 20178fc:	02017954 	movui	r8,1509
 2017900:	02017954 	movui	r8,1509
 2017904:	02017954 	movui	r8,1509
 2017908:	02017954 	movui	r8,1509
 201790c:	02017954 	movui	r8,1509
 2017910:	02017954 	movui	r8,1509
 2017914:	0201797c 	xorhi	r8,zero,1509
 2017918:	0201795c 	xori	r8,zero,1509
 201791c:	0201795c 	xori	r8,zero,1509
 2017920:	0201795c 	xori	r8,zero,1509
 2017924:	0201797c 	xorhi	r8,zero,1509
 2017928:	0201795c 	xori	r8,zero,1509
 201792c:	0201795c 	xori	r8,zero,1509
 2017930:	02017954 	movui	r8,1509
 2017934:	02017954 	movui	r8,1509
 2017938:	02017954 	movui	r8,1509
 201793c:	02017954 	movui	r8,1509
 2017940:	02017954 	movui	r8,1509
 2017944:	0201795c 	xori	r8,zero,1509
 2017948:	0201795c 	xori	r8,zero,1509
 201794c:	02017954 	movui	r8,1509
 2017950:	02017954 	movui	r8,1509
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 2017954:	0009883a 	mov	r4,zero
 2017958:	20175e40 	call	20175e4 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 201795c:	00800584 	movi	r2,22
 2017960:	e0bffc15 	stw	r2,-16(fp)
 2017964:	00000506 	br	201797c <kill+0xfc>
    }
  }

  else if (pid > 0)
 2017968:	e0bffd17 	ldw	r2,-12(fp)
 201796c:	10800050 	cmplti	r2,r2,1
 2017970:	1000021e 	bne	r2,zero,201797c <kill+0xfc>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 2017974:	008000c4 	movi	r2,3
 2017978:	e0bffc15 	stw	r2,-16(fp)
  }

  if (status)
 201797c:	e0bffc17 	ldw	r2,-16(fp)
 2017980:	1005003a 	cmpeq	r2,r2,zero
 2017984:	1000071e 	bne	r2,zero,20179a4 <kill+0x124>
  {
    ALT_ERRNO = status;
 2017988:	20179c00 	call	20179c0 <alt_get_errno>
 201798c:	1007883a 	mov	r3,r2
 2017990:	e0bffc17 	ldw	r2,-16(fp)
 2017994:	18800015 	stw	r2,0(r3)
    return -1;
 2017998:	00bfffc4 	movi	r2,-1
 201799c:	e0bfff15 	stw	r2,-4(fp)
 20179a0:	00000106 	br	20179a8 <kill+0x128>
  }

  return 0;
 20179a4:	e03fff15 	stw	zero,-4(fp)
 20179a8:	e0bfff17 	ldw	r2,-4(fp)
}
 20179ac:	e037883a 	mov	sp,fp
 20179b0:	dfc00117 	ldw	ra,4(sp)
 20179b4:	df000017 	ldw	fp,0(sp)
 20179b8:	dec00204 	addi	sp,sp,8
 20179bc:	f800283a 	ret

020179c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20179c0:	defffd04 	addi	sp,sp,-12
 20179c4:	dfc00215 	stw	ra,8(sp)
 20179c8:	df000115 	stw	fp,4(sp)
 20179cc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 20179d0:	008080b4 	movhi	r2,514
 20179d4:	10b70304 	addi	r2,r2,-9204
 20179d8:	10800017 	ldw	r2,0(r2)
 20179dc:	1005003a 	cmpeq	r2,r2,zero
 20179e0:	1000061e 	bne	r2,zero,20179fc <alt_get_errno+0x3c>
 20179e4:	008080b4 	movhi	r2,514
 20179e8:	10b70304 	addi	r2,r2,-9204
 20179ec:	10800017 	ldw	r2,0(r2)
 20179f0:	103ee83a 	callr	r2
 20179f4:	e0bfff15 	stw	r2,-4(fp)
 20179f8:	00000306 	br	2017a08 <alt_get_errno+0x48>
 20179fc:	008080b4 	movhi	r2,514
 2017a00:	10bdfd04 	addi	r2,r2,-2060
 2017a04:	e0bfff15 	stw	r2,-4(fp)
 2017a08:	e0bfff17 	ldw	r2,-4(fp)
}
 2017a0c:	e037883a 	mov	sp,fp
 2017a10:	dfc00117 	ldw	ra,4(sp)
 2017a14:	df000017 	ldw	fp,0(sp)
 2017a18:	dec00204 	addi	sp,sp,8
 2017a1c:	f800283a 	ret

02017a20 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 2017a20:	defffe04 	addi	sp,sp,-8
 2017a24:	dfc00115 	stw	ra,4(sp)
 2017a28:	df000015 	stw	fp,0(sp)
 2017a2c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 2017a30:	010080b4 	movhi	r4,514
 2017a34:	21370a04 	addi	r4,r4,-9176
 2017a38:	014080b4 	movhi	r5,514
 2017a3c:	29702804 	addi	r5,r5,-16224
 2017a40:	018080b4 	movhi	r6,514
 2017a44:	31b70a04 	addi	r6,r6,-9176
 2017a48:	2017aa00 	call	2017aa0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 2017a4c:	01008034 	movhi	r4,512
 2017a50:	21000804 	addi	r4,r4,32
 2017a54:	01408034 	movhi	r5,512
 2017a58:	29400804 	addi	r5,r5,32
 2017a5c:	01808034 	movhi	r6,512
 2017a60:	31806e04 	addi	r6,r6,440
 2017a64:	2017aa00 	call	2017aa0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 2017a68:	010080b4 	movhi	r4,514
 2017a6c:	212e0b04 	addi	r4,r4,-18388
 2017a70:	014080b4 	movhi	r5,514
 2017a74:	296e0b04 	addi	r5,r5,-18388
 2017a78:	018080b4 	movhi	r6,514
 2017a7c:	31b02804 	addi	r6,r6,-16224
 2017a80:	2017aa00 	call	2017aa0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 2017a84:	201a5480 	call	201a548 <alt_dcache_flush_all>
  alt_icache_flush_all();
 2017a88:	201a8a40 	call	201a8a4 <alt_icache_flush_all>
}
 2017a8c:	e037883a 	mov	sp,fp
 2017a90:	dfc00117 	ldw	ra,4(sp)
 2017a94:	df000017 	ldw	fp,0(sp)
 2017a98:	dec00204 	addi	sp,sp,8
 2017a9c:	f800283a 	ret

02017aa0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 2017aa0:	defffc04 	addi	sp,sp,-16
 2017aa4:	df000315 	stw	fp,12(sp)
 2017aa8:	df000304 	addi	fp,sp,12
 2017aac:	e13ffd15 	stw	r4,-12(fp)
 2017ab0:	e17ffe15 	stw	r5,-8(fp)
 2017ab4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 2017ab8:	e0fffe17 	ldw	r3,-8(fp)
 2017abc:	e0bffd17 	ldw	r2,-12(fp)
 2017ac0:	18800e26 	beq	r3,r2,2017afc <alt_load_section+0x5c>
  {
    while( to != end )
 2017ac4:	00000a06 	br	2017af0 <alt_load_section+0x50>
    {
      *to++ = *from++;
 2017ac8:	e0bffd17 	ldw	r2,-12(fp)
 2017acc:	10c00017 	ldw	r3,0(r2)
 2017ad0:	e0bffe17 	ldw	r2,-8(fp)
 2017ad4:	10c00015 	stw	r3,0(r2)
 2017ad8:	e0bffe17 	ldw	r2,-8(fp)
 2017adc:	10800104 	addi	r2,r2,4
 2017ae0:	e0bffe15 	stw	r2,-8(fp)
 2017ae4:	e0bffd17 	ldw	r2,-12(fp)
 2017ae8:	10800104 	addi	r2,r2,4
 2017aec:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 2017af0:	e0fffe17 	ldw	r3,-8(fp)
 2017af4:	e0bfff17 	ldw	r2,-4(fp)
 2017af8:	18bff31e 	bne	r3,r2,2017ac8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 2017afc:	e037883a 	mov	sp,fp
 2017b00:	df000017 	ldw	fp,0(sp)
 2017b04:	dec00104 	addi	sp,sp,4
 2017b08:	f800283a 	ret

02017b0c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 2017b0c:	defff804 	addi	sp,sp,-32
 2017b10:	dfc00715 	stw	ra,28(sp)
 2017b14:	df000615 	stw	fp,24(sp)
 2017b18:	df000604 	addi	fp,sp,24
 2017b1c:	e13ffc15 	stw	r4,-16(fp)
 2017b20:	e17ffd15 	stw	r5,-12(fp)
 2017b24:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 2017b28:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2017b2c:	e0bffc17 	ldw	r2,-16(fp)
 2017b30:	1004803a 	cmplt	r2,r2,zero
 2017b34:	1000091e 	bne	r2,zero,2017b5c <lseek+0x50>
 2017b38:	e13ffc17 	ldw	r4,-16(fp)
 2017b3c:	01400304 	movi	r5,12
 2017b40:	200d0cc0 	call	200d0cc <__mulsi3>
 2017b44:	1007883a 	mov	r3,r2
 2017b48:	008080b4 	movhi	r2,514
 2017b4c:	10b23704 	addi	r2,r2,-14116
 2017b50:	1887883a 	add	r3,r3,r2
 2017b54:	e0ffff15 	stw	r3,-4(fp)
 2017b58:	00000106 	br	2017b60 <lseek+0x54>
 2017b5c:	e03fff15 	stw	zero,-4(fp)
 2017b60:	e0bfff17 	ldw	r2,-4(fp)
 2017b64:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 2017b68:	e0bffb17 	ldw	r2,-20(fp)
 2017b6c:	1005003a 	cmpeq	r2,r2,zero
 2017b70:	1000111e 	bne	r2,zero,2017bb8 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 2017b74:	e0bffb17 	ldw	r2,-20(fp)
 2017b78:	10800017 	ldw	r2,0(r2)
 2017b7c:	10800717 	ldw	r2,28(r2)
 2017b80:	1005003a 	cmpeq	r2,r2,zero
 2017b84:	1000091e 	bne	r2,zero,2017bac <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 2017b88:	e0bffb17 	ldw	r2,-20(fp)
 2017b8c:	10800017 	ldw	r2,0(r2)
 2017b90:	10800717 	ldw	r2,28(r2)
 2017b94:	e13ffb17 	ldw	r4,-20(fp)
 2017b98:	e17ffd17 	ldw	r5,-12(fp)
 2017b9c:	e1bffe17 	ldw	r6,-8(fp)
 2017ba0:	103ee83a 	callr	r2
 2017ba4:	e0bffa15 	stw	r2,-24(fp)
 2017ba8:	00000506 	br	2017bc0 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 2017bac:	00bfde84 	movi	r2,-134
 2017bb0:	e0bffa15 	stw	r2,-24(fp)
 2017bb4:	00000206 	br	2017bc0 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
 2017bb8:	00bfebc4 	movi	r2,-81
 2017bbc:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 2017bc0:	e0bffa17 	ldw	r2,-24(fp)
 2017bc4:	1004403a 	cmpge	r2,r2,zero
 2017bc8:	1000071e 	bne	r2,zero,2017be8 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
 2017bcc:	2017c000 	call	2017c00 <alt_get_errno>
 2017bd0:	1007883a 	mov	r3,r2
 2017bd4:	e0bffa17 	ldw	r2,-24(fp)
 2017bd8:	0085c83a 	sub	r2,zero,r2
 2017bdc:	18800015 	stw	r2,0(r3)
    rc = -1;
 2017be0:	00bfffc4 	movi	r2,-1
 2017be4:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 2017be8:	e0bffa17 	ldw	r2,-24(fp)
}
 2017bec:	e037883a 	mov	sp,fp
 2017bf0:	dfc00117 	ldw	ra,4(sp)
 2017bf4:	df000017 	ldw	fp,0(sp)
 2017bf8:	dec00204 	addi	sp,sp,8
 2017bfc:	f800283a 	ret

02017c00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2017c00:	defffd04 	addi	sp,sp,-12
 2017c04:	dfc00215 	stw	ra,8(sp)
 2017c08:	df000115 	stw	fp,4(sp)
 2017c0c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2017c10:	008080b4 	movhi	r2,514
 2017c14:	10b70304 	addi	r2,r2,-9204
 2017c18:	10800017 	ldw	r2,0(r2)
 2017c1c:	1005003a 	cmpeq	r2,r2,zero
 2017c20:	1000061e 	bne	r2,zero,2017c3c <alt_get_errno+0x3c>
 2017c24:	008080b4 	movhi	r2,514
 2017c28:	10b70304 	addi	r2,r2,-9204
 2017c2c:	10800017 	ldw	r2,0(r2)
 2017c30:	103ee83a 	callr	r2
 2017c34:	e0bfff15 	stw	r2,-4(fp)
 2017c38:	00000306 	br	2017c48 <alt_get_errno+0x48>
 2017c3c:	008080b4 	movhi	r2,514
 2017c40:	10bdfd04 	addi	r2,r2,-2060
 2017c44:	e0bfff15 	stw	r2,-4(fp)
 2017c48:	e0bfff17 	ldw	r2,-4(fp)
}
 2017c4c:	e037883a 	mov	sp,fp
 2017c50:	dfc00117 	ldw	ra,4(sp)
 2017c54:	df000017 	ldw	fp,0(sp)
 2017c58:	dec00204 	addi	sp,sp,8
 2017c5c:	f800283a 	ret

02017c60 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 2017c60:	defffd04 	addi	sp,sp,-12
 2017c64:	dfc00215 	stw	ra,8(sp)
 2017c68:	df000115 	stw	fp,4(sp)
 2017c6c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 2017c70:	0009883a 	mov	r4,zero
 2017c74:	201831c0 	call	201831c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 2017c78:	20183500 	call	2018350 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 2017c7c:	010080b4 	movhi	r4,514
 2017c80:	21301a04 	addi	r4,r4,-16280
 2017c84:	014080b4 	movhi	r5,514
 2017c88:	29701a04 	addi	r5,r5,-16280
 2017c8c:	018080b4 	movhi	r6,514
 2017c90:	31b01a04 	addi	r6,r6,-16280
 2017c94:	201a9980 	call	201a998 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 2017c98:	201a6780 	call	201a678 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 2017c9c:	010080b4 	movhi	r4,514
 2017ca0:	2129b704 	addi	r4,r4,-22820
 2017ca4:	201b2fc0 	call	201b2fc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 2017ca8:	d1271517 	ldw	r4,-25516(gp)
 2017cac:	d1671617 	ldw	r5,-25512(gp)
 2017cb0:	d1a71717 	ldw	r6,-25508(gp)
 2017cb4:	2001e140 	call	2001e14 <main>
 2017cb8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 2017cbc:	01000044 	movi	r4,1
 2017cc0:	20174180 	call	2017418 <close>
  exit (result);
 2017cc4:	e13fff17 	ldw	r4,-4(fp)
 2017cc8:	201b3100 	call	201b310 <exit>

02017ccc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 2017ccc:	defffe04 	addi	sp,sp,-8
 2017cd0:	df000115 	stw	fp,4(sp)
 2017cd4:	df000104 	addi	fp,sp,4
 2017cd8:	e13fff15 	stw	r4,-4(fp)
}
 2017cdc:	e037883a 	mov	sp,fp
 2017ce0:	df000017 	ldw	fp,0(sp)
 2017ce4:	dec00104 	addi	sp,sp,4
 2017ce8:	f800283a 	ret

02017cec <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 2017cec:	defffe04 	addi	sp,sp,-8
 2017cf0:	df000115 	stw	fp,4(sp)
 2017cf4:	df000104 	addi	fp,sp,4
 2017cf8:	e13fff15 	stw	r4,-4(fp)
}
 2017cfc:	e037883a 	mov	sp,fp
 2017d00:	df000017 	ldw	fp,0(sp)
 2017d04:	dec00104 	addi	sp,sp,4
 2017d08:	f800283a 	ret

02017d0c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 2017d0c:	defff704 	addi	sp,sp,-36
 2017d10:	dfc00815 	stw	ra,32(sp)
 2017d14:	df000715 	stw	fp,28(sp)
 2017d18:	df000704 	addi	fp,sp,28
 2017d1c:	e13ffb15 	stw	r4,-20(fp)
 2017d20:	e17ffc15 	stw	r5,-16(fp)
 2017d24:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2017d28:	e0bffb17 	ldw	r2,-20(fp)
 2017d2c:	1004803a 	cmplt	r2,r2,zero
 2017d30:	1000091e 	bne	r2,zero,2017d58 <read+0x4c>
 2017d34:	e13ffb17 	ldw	r4,-20(fp)
 2017d38:	01400304 	movi	r5,12
 2017d3c:	200d0cc0 	call	200d0cc <__mulsi3>
 2017d40:	1007883a 	mov	r3,r2
 2017d44:	008080b4 	movhi	r2,514
 2017d48:	10b23704 	addi	r2,r2,-14116
 2017d4c:	1887883a 	add	r3,r3,r2
 2017d50:	e0ffff15 	stw	r3,-4(fp)
 2017d54:	00000106 	br	2017d5c <read+0x50>
 2017d58:	e03fff15 	stw	zero,-4(fp)
 2017d5c:	e0bfff17 	ldw	r2,-4(fp)
 2017d60:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 2017d64:	e0bffa17 	ldw	r2,-24(fp)
 2017d68:	1005003a 	cmpeq	r2,r2,zero
 2017d6c:	1000241e 	bne	r2,zero,2017e00 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 2017d70:	e0bffa17 	ldw	r2,-24(fp)
 2017d74:	10800217 	ldw	r2,8(r2)
 2017d78:	108000cc 	andi	r2,r2,3
 2017d7c:	10800060 	cmpeqi	r2,r2,1
 2017d80:	10001a1e 	bne	r2,zero,2017dec <read+0xe0>
 2017d84:	e0bffa17 	ldw	r2,-24(fp)
 2017d88:	10800017 	ldw	r2,0(r2)
 2017d8c:	10800517 	ldw	r2,20(r2)
 2017d90:	1005003a 	cmpeq	r2,r2,zero
 2017d94:	1000151e 	bne	r2,zero,2017dec <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 2017d98:	e0bffa17 	ldw	r2,-24(fp)
 2017d9c:	10800017 	ldw	r2,0(r2)
 2017da0:	10800517 	ldw	r2,20(r2)
 2017da4:	e17ffc17 	ldw	r5,-16(fp)
 2017da8:	e1bffd17 	ldw	r6,-12(fp)
 2017dac:	e13ffa17 	ldw	r4,-24(fp)
 2017db0:	103ee83a 	callr	r2
 2017db4:	e0bff915 	stw	r2,-28(fp)
 2017db8:	e0bff917 	ldw	r2,-28(fp)
 2017dbc:	1004403a 	cmpge	r2,r2,zero
 2017dc0:	1000071e 	bne	r2,zero,2017de0 <read+0xd4>
        {
          ALT_ERRNO = -rval;
 2017dc4:	2017e300 	call	2017e30 <alt_get_errno>
 2017dc8:	e0fff917 	ldw	r3,-28(fp)
 2017dcc:	00c7c83a 	sub	r3,zero,r3
 2017dd0:	10c00015 	stw	r3,0(r2)
          return -1;
 2017dd4:	00bfffc4 	movi	r2,-1
 2017dd8:	e0bffe15 	stw	r2,-8(fp)
 2017ddc:	00000e06 	br	2017e18 <read+0x10c>
        }
        return rval;
 2017de0:	e0bff917 	ldw	r2,-28(fp)
 2017de4:	e0bffe15 	stw	r2,-8(fp)
 2017de8:	00000b06 	br	2017e18 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
 2017dec:	2017e300 	call	2017e30 <alt_get_errno>
 2017df0:	1007883a 	mov	r3,r2
 2017df4:	00800344 	movi	r2,13
 2017df8:	18800015 	stw	r2,0(r3)
 2017dfc:	00000406 	br	2017e10 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 2017e00:	2017e300 	call	2017e30 <alt_get_errno>
 2017e04:	1007883a 	mov	r3,r2
 2017e08:	00801444 	movi	r2,81
 2017e0c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 2017e10:	00bfffc4 	movi	r2,-1
 2017e14:	e0bffe15 	stw	r2,-8(fp)
 2017e18:	e0bffe17 	ldw	r2,-8(fp)
}
 2017e1c:	e037883a 	mov	sp,fp
 2017e20:	dfc00117 	ldw	ra,4(sp)
 2017e24:	df000017 	ldw	fp,0(sp)
 2017e28:	dec00204 	addi	sp,sp,8
 2017e2c:	f800283a 	ret

02017e30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2017e30:	defffd04 	addi	sp,sp,-12
 2017e34:	dfc00215 	stw	ra,8(sp)
 2017e38:	df000115 	stw	fp,4(sp)
 2017e3c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2017e40:	008080b4 	movhi	r2,514
 2017e44:	10b70304 	addi	r2,r2,-9204
 2017e48:	10800017 	ldw	r2,0(r2)
 2017e4c:	1005003a 	cmpeq	r2,r2,zero
 2017e50:	1000061e 	bne	r2,zero,2017e6c <alt_get_errno+0x3c>
 2017e54:	008080b4 	movhi	r2,514
 2017e58:	10b70304 	addi	r2,r2,-9204
 2017e5c:	10800017 	ldw	r2,0(r2)
 2017e60:	103ee83a 	callr	r2
 2017e64:	e0bfff15 	stw	r2,-4(fp)
 2017e68:	00000306 	br	2017e78 <alt_get_errno+0x48>
 2017e6c:	008080b4 	movhi	r2,514
 2017e70:	10bdfd04 	addi	r2,r2,-2060
 2017e74:	e0bfff15 	stw	r2,-4(fp)
 2017e78:	e0bfff17 	ldw	r2,-4(fp)
}
 2017e7c:	e037883a 	mov	sp,fp
 2017e80:	dfc00117 	ldw	ra,4(sp)
 2017e84:	df000017 	ldw	fp,0(sp)
 2017e88:	dec00204 	addi	sp,sp,8
 2017e8c:	f800283a 	ret

02017e90 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 2017e90:	defffc04 	addi	sp,sp,-16
 2017e94:	dfc00315 	stw	ra,12(sp)
 2017e98:	df000215 	stw	fp,8(sp)
 2017e9c:	dc000115 	stw	r16,4(sp)
 2017ea0:	df000104 	addi	fp,sp,4
 2017ea4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 2017ea8:	e0bfff17 	ldw	r2,-4(fp)
 2017eac:	108000d0 	cmplti	r2,r2,3
 2017eb0:	10000f1e 	bne	r2,zero,2017ef0 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
 2017eb4:	e13fff17 	ldw	r4,-4(fp)
 2017eb8:	040080b4 	movhi	r16,514
 2017ebc:	84323704 	addi	r16,r16,-14116
 2017ec0:	01400304 	movi	r5,12
 2017ec4:	200d0cc0 	call	200d0cc <__mulsi3>
 2017ec8:	1405883a 	add	r2,r2,r16
 2017ecc:	10800204 	addi	r2,r2,8
 2017ed0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 2017ed4:	e13fff17 	ldw	r4,-4(fp)
 2017ed8:	040080b4 	movhi	r16,514
 2017edc:	84323704 	addi	r16,r16,-14116
 2017ee0:	01400304 	movi	r5,12
 2017ee4:	200d0cc0 	call	200d0cc <__mulsi3>
 2017ee8:	1405883a 	add	r2,r2,r16
 2017eec:	10000015 	stw	zero,0(r2)
  }
}
 2017ef0:	e037883a 	mov	sp,fp
 2017ef4:	dfc00217 	ldw	ra,8(sp)
 2017ef8:	df000117 	ldw	fp,4(sp)
 2017efc:	dc000017 	ldw	r16,0(sp)
 2017f00:	dec00304 	addi	sp,sp,12
 2017f04:	f800283a 	ret

02017f08 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 2017f08:	defff804 	addi	sp,sp,-32
 2017f0c:	df000715 	stw	fp,28(sp)
 2017f10:	df000704 	addi	fp,sp,28
 2017f14:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017f18:	0005303a 	rdctl	r2,status
 2017f1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017f20:	e0fffb17 	ldw	r3,-20(fp)
 2017f24:	00bfff84 	movi	r2,-2
 2017f28:	1884703a 	and	r2,r3,r2
 2017f2c:	1001703a 	wrctl	status,r2
  
  return context;
 2017f30:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 2017f34:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 2017f38:	d0a01817 	ldw	r2,-32672(gp)
 2017f3c:	10c000c4 	addi	r3,r2,3
 2017f40:	00bfff04 	movi	r2,-4
 2017f44:	1884703a 	and	r2,r3,r2
 2017f48:	d0a01815 	stw	r2,-32672(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 2017f4c:	d0e01817 	ldw	r3,-32672(gp)
 2017f50:	e0bffe17 	ldw	r2,-8(fp)
 2017f54:	1887883a 	add	r3,r3,r2
 2017f58:	00810034 	movhi	r2,1024
 2017f5c:	10800004 	addi	r2,r2,0
 2017f60:	10c0072e 	bgeu	r2,r3,2017f80 <sbrk+0x78>
 2017f64:	e0bffd17 	ldw	r2,-12(fp)
 2017f68:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017f6c:	e0bffa17 	ldw	r2,-24(fp)
 2017f70:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 2017f74:	00bfffc4 	movi	r2,-1
 2017f78:	e0bfff15 	stw	r2,-4(fp)
 2017f7c:	00000c06 	br	2017fb0 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 2017f80:	d0a01817 	ldw	r2,-32672(gp)
 2017f84:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 2017f88:	d0e01817 	ldw	r3,-32672(gp)
 2017f8c:	e0bffe17 	ldw	r2,-8(fp)
 2017f90:	1885883a 	add	r2,r3,r2
 2017f94:	d0a01815 	stw	r2,-32672(gp)
 2017f98:	e0bffd17 	ldw	r2,-12(fp)
 2017f9c:	e0bff915 	stw	r2,-28(fp)
 2017fa0:	e0bff917 	ldw	r2,-28(fp)
 2017fa4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 2017fa8:	e0bffc17 	ldw	r2,-16(fp)
 2017fac:	e0bfff15 	stw	r2,-4(fp)
 2017fb0:	e0bfff17 	ldw	r2,-4(fp)
} 
 2017fb4:	e037883a 	mov	sp,fp
 2017fb8:	df000017 	ldw	fp,0(sp)
 2017fbc:	dec00104 	addi	sp,sp,4
 2017fc0:	f800283a 	ret

02017fc4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 2017fc4:	defffa04 	addi	sp,sp,-24
 2017fc8:	df000515 	stw	fp,20(sp)
 2017fcc:	df000504 	addi	fp,sp,20
 2017fd0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017fd4:	0005303a 	rdctl	r2,status
 2017fd8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017fdc:	e0fffd17 	ldw	r3,-12(fp)
 2017fe0:	00bfff84 	movi	r2,-2
 2017fe4:	1884703a 	and	r2,r3,r2
 2017fe8:	1001703a 	wrctl	status,r2
  
  return context;
 2017fec:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 2017ff0:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 2017ff4:	e0bfff17 	ldw	r2,-4(fp)
 2017ff8:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 2017ffc:	e0bffc17 	ldw	r2,-16(fp)
 2018000:	10c00017 	ldw	r3,0(r2)
 2018004:	e0bffc17 	ldw	r2,-16(fp)
 2018008:	10800117 	ldw	r2,4(r2)
 201800c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 2018010:	e0bffc17 	ldw	r2,-16(fp)
 2018014:	10c00117 	ldw	r3,4(r2)
 2018018:	e0bffc17 	ldw	r2,-16(fp)
 201801c:	10800017 	ldw	r2,0(r2)
 2018020:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 2018024:	e0fffc17 	ldw	r3,-16(fp)
 2018028:	e0bffc17 	ldw	r2,-16(fp)
 201802c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 2018030:	e0fffc17 	ldw	r3,-16(fp)
 2018034:	e0bffc17 	ldw	r2,-16(fp)
 2018038:	18800015 	stw	r2,0(r3)
 201803c:	e0bffe17 	ldw	r2,-8(fp)
 2018040:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018044:	e0bffb17 	ldw	r2,-20(fp)
 2018048:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 201804c:	e037883a 	mov	sp,fp
 2018050:	df000017 	ldw	fp,0(sp)
 2018054:	dec00104 	addi	sp,sp,4
 2018058:	f800283a 	ret

0201805c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 201805c:	defffb04 	addi	sp,sp,-20
 2018060:	dfc00415 	stw	ra,16(sp)
 2018064:	df000315 	stw	fp,12(sp)
 2018068:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 201806c:	d0a01917 	ldw	r2,-32668(gp)
 2018070:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 2018074:	d0a71917 	ldw	r2,-25500(gp)
 2018078:	10800044 	addi	r2,r2,1
 201807c:	d0a71915 	stw	r2,-25500(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2018080:	00003106 	br	2018148 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 2018084:	e0bffe17 	ldw	r2,-8(fp)
 2018088:	10800017 	ldw	r2,0(r2)
 201808c:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 2018090:	e0bffe17 	ldw	r2,-8(fp)
 2018094:	10800403 	ldbu	r2,16(r2)
 2018098:	10803fcc 	andi	r2,r2,255
 201809c:	1005003a 	cmpeq	r2,r2,zero
 20180a0:	1000051e 	bne	r2,zero,20180b8 <alt_tick+0x5c>
 20180a4:	d0a71917 	ldw	r2,-25500(gp)
 20180a8:	1004c03a 	cmpne	r2,r2,zero
 20180ac:	1000021e 	bne	r2,zero,20180b8 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 20180b0:	e0bffe17 	ldw	r2,-8(fp)
 20180b4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 20180b8:	e0bffe17 	ldw	r2,-8(fp)
 20180bc:	10c00217 	ldw	r3,8(r2)
 20180c0:	d0a71917 	ldw	r2,-25500(gp)
 20180c4:	10c01e36 	bltu	r2,r3,2018140 <alt_tick+0xe4>
 20180c8:	e0bffe17 	ldw	r2,-8(fp)
 20180cc:	10800403 	ldbu	r2,16(r2)
 20180d0:	10803fcc 	andi	r2,r2,255
 20180d4:	1004c03a 	cmpne	r2,r2,zero
 20180d8:	1000191e 	bne	r2,zero,2018140 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 20180dc:	e0bffe17 	ldw	r2,-8(fp)
 20180e0:	10c00317 	ldw	r3,12(r2)
 20180e4:	e0bffe17 	ldw	r2,-8(fp)
 20180e8:	11000517 	ldw	r4,20(r2)
 20180ec:	183ee83a 	callr	r3
 20180f0:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 20180f4:	e0bffd17 	ldw	r2,-12(fp)
 20180f8:	1004c03a 	cmpne	r2,r2,zero
 20180fc:	1000031e 	bne	r2,zero,201810c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 2018100:	e13ffe17 	ldw	r4,-8(fp)
 2018104:	2017fc40 	call	2017fc4 <alt_alarm_stop>
 2018108:	00000d06 	br	2018140 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 201810c:	e0bffe17 	ldw	r2,-8(fp)
 2018110:	10c00217 	ldw	r3,8(r2)
 2018114:	e0bffd17 	ldw	r2,-12(fp)
 2018118:	1887883a 	add	r3,r3,r2
 201811c:	e0bffe17 	ldw	r2,-8(fp)
 2018120:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 2018124:	e0bffe17 	ldw	r2,-8(fp)
 2018128:	10c00217 	ldw	r3,8(r2)
 201812c:	d0a71917 	ldw	r2,-25500(gp)
 2018130:	1880032e 	bgeu	r3,r2,2018140 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 2018134:	e0fffe17 	ldw	r3,-8(fp)
 2018138:	00800044 	movi	r2,1
 201813c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 2018140:	e0bfff17 	ldw	r2,-4(fp)
 2018144:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2018148:	d0e01904 	addi	r3,gp,-32668
 201814c:	e0bffe17 	ldw	r2,-8(fp)
 2018150:	10ffcc1e 	bne	r2,r3,2018084 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 2018154:	e037883a 	mov	sp,fp
 2018158:	dfc00117 	ldw	ra,4(sp)
 201815c:	df000017 	ldw	fp,0(sp)
 2018160:	dec00204 	addi	sp,sp,8
 2018164:	f800283a 	ret

02018168 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 2018168:	defffd04 	addi	sp,sp,-12
 201816c:	dfc00215 	stw	ra,8(sp)
 2018170:	df000115 	stw	fp,4(sp)
 2018174:	df000104 	addi	fp,sp,4
 2018178:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 201817c:	e13fff17 	ldw	r4,-4(fp)
 2018180:	201a3ec0 	call	201a3ec <alt_busy_sleep>
}
 2018184:	e037883a 	mov	sp,fp
 2018188:	dfc00117 	ldw	ra,4(sp)
 201818c:	df000017 	ldw	fp,0(sp)
 2018190:	dec00204 	addi	sp,sp,8
 2018194:	f800283a 	ret

02018198 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 2018198:	defff704 	addi	sp,sp,-36
 201819c:	dfc00815 	stw	ra,32(sp)
 20181a0:	df000715 	stw	fp,28(sp)
 20181a4:	df000704 	addi	fp,sp,28
 20181a8:	e13ffb15 	stw	r4,-20(fp)
 20181ac:	e17ffc15 	stw	r5,-16(fp)
 20181b0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 20181b4:	e0bffb17 	ldw	r2,-20(fp)
 20181b8:	1004803a 	cmplt	r2,r2,zero
 20181bc:	1000091e 	bne	r2,zero,20181e4 <write+0x4c>
 20181c0:	e13ffb17 	ldw	r4,-20(fp)
 20181c4:	01400304 	movi	r5,12
 20181c8:	200d0cc0 	call	200d0cc <__mulsi3>
 20181cc:	1007883a 	mov	r3,r2
 20181d0:	008080b4 	movhi	r2,514
 20181d4:	10b23704 	addi	r2,r2,-14116
 20181d8:	1887883a 	add	r3,r3,r2
 20181dc:	e0ffff15 	stw	r3,-4(fp)
 20181e0:	00000106 	br	20181e8 <write+0x50>
 20181e4:	e03fff15 	stw	zero,-4(fp)
 20181e8:	e0bfff17 	ldw	r2,-4(fp)
 20181ec:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 20181f0:	e0bffa17 	ldw	r2,-24(fp)
 20181f4:	1005003a 	cmpeq	r2,r2,zero
 20181f8:	1000241e 	bne	r2,zero,201828c <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 20181fc:	e0bffa17 	ldw	r2,-24(fp)
 2018200:	10800217 	ldw	r2,8(r2)
 2018204:	108000cc 	andi	r2,r2,3
 2018208:	1005003a 	cmpeq	r2,r2,zero
 201820c:	10001a1e 	bne	r2,zero,2018278 <write+0xe0>
 2018210:	e0bffa17 	ldw	r2,-24(fp)
 2018214:	10800017 	ldw	r2,0(r2)
 2018218:	10800617 	ldw	r2,24(r2)
 201821c:	1005003a 	cmpeq	r2,r2,zero
 2018220:	1000151e 	bne	r2,zero,2018278 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 2018224:	e0bffa17 	ldw	r2,-24(fp)
 2018228:	10800017 	ldw	r2,0(r2)
 201822c:	10800617 	ldw	r2,24(r2)
 2018230:	e17ffc17 	ldw	r5,-16(fp)
 2018234:	e1bffd17 	ldw	r6,-12(fp)
 2018238:	e13ffa17 	ldw	r4,-24(fp)
 201823c:	103ee83a 	callr	r2
 2018240:	e0bff915 	stw	r2,-28(fp)
 2018244:	e0bff917 	ldw	r2,-28(fp)
 2018248:	1004403a 	cmpge	r2,r2,zero
 201824c:	1000071e 	bne	r2,zero,201826c <write+0xd4>
      {
        ALT_ERRNO = -rval;
 2018250:	20182bc0 	call	20182bc <alt_get_errno>
 2018254:	e0fff917 	ldw	r3,-28(fp)
 2018258:	00c7c83a 	sub	r3,zero,r3
 201825c:	10c00015 	stw	r3,0(r2)
        return -1;
 2018260:	00bfffc4 	movi	r2,-1
 2018264:	e0bffe15 	stw	r2,-8(fp)
 2018268:	00000e06 	br	20182a4 <write+0x10c>
      }
      return rval;
 201826c:	e0bff917 	ldw	r2,-28(fp)
 2018270:	e0bffe15 	stw	r2,-8(fp)
 2018274:	00000b06 	br	20182a4 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
 2018278:	20182bc0 	call	20182bc <alt_get_errno>
 201827c:	1007883a 	mov	r3,r2
 2018280:	00800344 	movi	r2,13
 2018284:	18800015 	stw	r2,0(r3)
 2018288:	00000406 	br	201829c <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 201828c:	20182bc0 	call	20182bc <alt_get_errno>
 2018290:	1007883a 	mov	r3,r2
 2018294:	00801444 	movi	r2,81
 2018298:	18800015 	stw	r2,0(r3)
  }
  return -1;
 201829c:	00bfffc4 	movi	r2,-1
 20182a0:	e0bffe15 	stw	r2,-8(fp)
 20182a4:	e0bffe17 	ldw	r2,-8(fp)
}
 20182a8:	e037883a 	mov	sp,fp
 20182ac:	dfc00117 	ldw	ra,4(sp)
 20182b0:	df000017 	ldw	fp,0(sp)
 20182b4:	dec00204 	addi	sp,sp,8
 20182b8:	f800283a 	ret

020182bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20182bc:	defffd04 	addi	sp,sp,-12
 20182c0:	dfc00215 	stw	ra,8(sp)
 20182c4:	df000115 	stw	fp,4(sp)
 20182c8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 20182cc:	008080b4 	movhi	r2,514
 20182d0:	10b70304 	addi	r2,r2,-9204
 20182d4:	10800017 	ldw	r2,0(r2)
 20182d8:	1005003a 	cmpeq	r2,r2,zero
 20182dc:	1000061e 	bne	r2,zero,20182f8 <alt_get_errno+0x3c>
 20182e0:	008080b4 	movhi	r2,514
 20182e4:	10b70304 	addi	r2,r2,-9204
 20182e8:	10800017 	ldw	r2,0(r2)
 20182ec:	103ee83a 	callr	r2
 20182f0:	e0bfff15 	stw	r2,-4(fp)
 20182f4:	00000306 	br	2018304 <alt_get_errno+0x48>
 20182f8:	008080b4 	movhi	r2,514
 20182fc:	10bdfd04 	addi	r2,r2,-2060
 2018300:	e0bfff15 	stw	r2,-4(fp)
 2018304:	e0bfff17 	ldw	r2,-4(fp)
}
 2018308:	e037883a 	mov	sp,fp
 201830c:	dfc00117 	ldw	ra,4(sp)
 2018310:	df000017 	ldw	fp,0(sp)
 2018314:	dec00204 	addi	sp,sp,8
 2018318:	f800283a 	ret

0201831c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 201831c:	defffd04 	addi	sp,sp,-12
 2018320:	dfc00215 	stw	ra,8(sp)
 2018324:	df000115 	stw	fp,4(sp)
 2018328:	df000104 	addi	fp,sp,4
 201832c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_IRQ_INIT ( CPU, cpu);
 2018330:	201aeb40 	call	201aeb4 <altera_nios2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 2018334:	00800044 	movi	r2,1
 2018338:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 201833c:	e037883a 	mov	sp,fp
 2018340:	dfc00117 	ldw	ra,4(sp)
 2018344:	df000017 	ldw	fp,0(sp)
 2018348:	dec00204 	addi	sp,sp,8
 201834c:	f800283a 	ret

02018350 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 2018350:	defffe04 	addi	sp,sp,-8
 2018354:	dfc00115 	stw	ra,4(sp)
 2018358:	df000015 	stw	fp,0(sp)
 201835c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 2018360:	01014034 	movhi	r4,1280
 2018364:	000b883a 	mov	r5,zero
 2018368:	000d883a 	mov	r6,zero
 201836c:	01c0fa04 	movi	r7,1000
 2018370:	20198f80 	call	20198f8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_EPCS_FLASH_CONTROLLER_INIT ( EPCS, epcs);
 2018374:	010080b4 	movhi	r4,514
 2018378:	21329704 	addi	r4,r4,-13732
 201837c:	20183f80 	call	20183f8 <alt_epcs_flash_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 2018380:	010080b4 	movhi	r4,514
 2018384:	2132d304 	addi	r4,r4,-13492
 2018388:	000b883a 	mov	r5,zero
 201838c:	01800144 	movi	r6,5
 2018390:	2018f240 	call	2018f24 <altera_avalon_jtag_uart_init>
 2018394:	010080b4 	movhi	r4,514
 2018398:	2132c904 	addi	r4,r4,-13532
 201839c:	20183c00 	call	20183c0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_RS232_INIT ( UART_0, uart_0);
 20183a0:	010080b4 	movhi	r4,514
 20183a4:	2136e104 	addi	r4,r4,-9340
 20183a8:	20183c00 	call	20183c0 <alt_dev_reg>
}
 20183ac:	e037883a 	mov	sp,fp
 20183b0:	dfc00117 	ldw	ra,4(sp)
 20183b4:	df000017 	ldw	fp,0(sp)
 20183b8:	dec00204 	addi	sp,sp,8
 20183bc:	f800283a 	ret

020183c0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 20183c0:	defffd04 	addi	sp,sp,-12
 20183c4:	dfc00215 	stw	ra,8(sp)
 20183c8:	df000115 	stw	fp,4(sp)
 20183cc:	df000104 	addi	fp,sp,4
 20183d0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 20183d4:	e13fff17 	ldw	r4,-4(fp)
 20183d8:	014080b4 	movhi	r5,514
 20183dc:	29770004 	addi	r5,r5,-9216
 20183e0:	201a5640 	call	201a564 <alt_dev_llist_insert>
}
 20183e4:	e037883a 	mov	sp,fp
 20183e8:	dfc00117 	ldw	ra,4(sp)
 20183ec:	df000017 	ldw	fp,0(sp)
 20183f0:	dec00204 	addi	sp,sp,8
 20183f4:	f800283a 	ret

020183f8 <alt_epcs_flash_init>:
/*
 * alt_epcs_flash_init
 *
 */
int alt_epcs_flash_init(alt_flash_epcs_dev* flash)
{
 20183f8:	defffc04 	addi	sp,sp,-16
 20183fc:	dfc00315 	stw	ra,12(sp)
 2018400:	df000215 	stw	fp,8(sp)
 2018404:	df000204 	addi	fp,sp,8
 2018408:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 201840c:	e03ffe15 	stw	zero,-8(fp)

  /* Set up function pointers and/or data structures as needed. */
  ret_code = alt_epcs_flash_query(flash);
 2018410:	e13fff17 	ldw	r4,-4(fp)
 2018414:	20184840 	call	2018484 <alt_epcs_flash_query>
 2018418:	e0bffe15 	stw	r2,-8(fp)
  */

  /*
  *  Register this device as a valid flash device type
  */
  if (!ret_code)
 201841c:	e0bffe17 	ldw	r2,-8(fp)
 2018420:	1004c03a 	cmpne	r2,r2,zero
 2018424:	1000031e 	bne	r2,zero,2018434 <alt_epcs_flash_init+0x3c>
    ret_code = alt_flash_device_register(&(flash->dev));
 2018428:	e13fff17 	ldw	r4,-4(fp)
 201842c:	201844c0 	call	201844c <alt_flash_device_register>
 2018430:	e0bffe15 	stw	r2,-8(fp)

  return ret_code;
 2018434:	e0bffe17 	ldw	r2,-8(fp)
}
 2018438:	e037883a 	mov	sp,fp
 201843c:	dfc00117 	ldw	ra,4(sp)
 2018440:	df000017 	ldw	fp,0(sp)
 2018444:	dec00204 	addi	sp,sp,8
 2018448:	f800283a 	ret

0201844c <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 201844c:	defffd04 	addi	sp,sp,-12
 2018450:	dfc00215 	stw	ra,8(sp)
 2018454:	df000115 	stw	fp,4(sp)
 2018458:	df000104 	addi	fp,sp,4
 201845c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 2018460:	e13fff17 	ldw	r4,-4(fp)
 2018464:	014080b4 	movhi	r5,514
 2018468:	29770704 	addi	r5,r5,-9188
 201846c:	201a5640 	call	201a564 <alt_dev_llist_insert>
}
 2018470:	e037883a 	mov	sp,fp
 2018474:	dfc00117 	ldw	ra,4(sp)
 2018478:	df000017 	ldw	fp,0(sp)
 201847c:	dec00204 	addi	sp,sp,8
 2018480:	f800283a 	ret

02018484 <alt_epcs_flash_query>:


static int alt_epcs_flash_query(alt_flash_epcs_dev* flash)
{
 2018484:	defffc04 	addi	sp,sp,-16
 2018488:	dfc00315 	stw	ra,12(sp)
 201848c:	df000215 	stw	fp,8(sp)
 2018490:	df000204 	addi	fp,sp,8
 2018494:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
 2018498:	e03ffe15 	stw	zero,-8(fp)
   * reset the device, or whatever, to ensure that
   * it's in a known working state.
  */
  
  /* Disable 4-bytes address mode. */
  flash->four_bytes_mode = 0;
 201849c:	e0bfff17 	ldw	r2,-4(fp)
 20184a0:	10003115 	stw	zero,196(r2)
  
  /* Send the RES command sequence */
  flash->silicon_id =
 20184a4:	e0bfff17 	ldw	r2,-4(fp)
 20184a8:	11002d17 	ldw	r4,180(r2)
 20184ac:	201a2500 	call	201a250 <epcs_read_electronic_signature>
 20184b0:	10c03fcc 	andi	r3,r2,255
 20184b4:	e0bfff17 	ldw	r2,-4(fp)
 20184b8:	10c02f15 	stw	r3,188(r2)
    epcs_read_electronic_signature(flash->register_base);

  /* Fill in all device-specific parameters. */
  if (flash->silicon_id == 0x16) /* EPCS64 */
 20184bc:	e0bfff17 	ldw	r2,-4(fp)
 20184c0:	10802f17 	ldw	r2,188(r2)
 20184c4:	10800598 	cmpnei	r2,r2,22
 20184c8:	10000a1e 	bne	r2,zero,20184f4 <alt_epcs_flash_query+0x70>
  {
    flash->dev.region_info[0].region_size = 64 * 1024 * 1024 / 8;
 20184cc:	e0ffff17 	ldw	r3,-4(fp)
 20184d0:	00802034 	movhi	r2,128
 20184d4:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 128;
 20184d8:	e0ffff17 	ldw	r3,-4(fp)
 20184dc:	00802004 	movi	r2,128
 20184e0:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 20184e4:	e0ffff17 	ldw	r3,-4(fp)
 20184e8:	00800074 	movhi	r2,1
 20184ec:	18801015 	stw	r2,64(r3)
 20184f0:	00007306 	br	20186c0 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x14) /* EPCS16 */
 20184f4:	e0bfff17 	ldw	r2,-4(fp)
 20184f8:	10802f17 	ldw	r2,188(r2)
 20184fc:	10800518 	cmpnei	r2,r2,20
 2018500:	10000a1e 	bne	r2,zero,201852c <alt_epcs_flash_query+0xa8>
  {
    flash->dev.region_info[0].region_size = 16 * 1024 * 1024 / 8;
 2018504:	e0ffff17 	ldw	r3,-4(fp)
 2018508:	00800834 	movhi	r2,32
 201850c:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 32;
 2018510:	e0ffff17 	ldw	r3,-4(fp)
 2018514:	00800804 	movi	r2,32
 2018518:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 201851c:	e0ffff17 	ldw	r3,-4(fp)
 2018520:	00800074 	movhi	r2,1
 2018524:	18801015 	stw	r2,64(r3)
 2018528:	00006506 	br	20186c0 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x13) /* EPCS8 */
 201852c:	e0bfff17 	ldw	r2,-4(fp)
 2018530:	10802f17 	ldw	r2,188(r2)
 2018534:	108004d8 	cmpnei	r2,r2,19
 2018538:	10000a1e 	bne	r2,zero,2018564 <alt_epcs_flash_query+0xe0>
  {
    flash->dev.region_info[0].region_size = 8 * 1024 * 1024 / 8;
 201853c:	e0ffff17 	ldw	r3,-4(fp)
 2018540:	00800434 	movhi	r2,16
 2018544:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 16;
 2018548:	e0ffff17 	ldw	r3,-4(fp)
 201854c:	00800404 	movi	r2,16
 2018550:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 2018554:	e0ffff17 	ldw	r3,-4(fp)
 2018558:	00800074 	movhi	r2,1
 201855c:	18801015 	stw	r2,64(r3)
 2018560:	00005706 	br	20186c0 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x12) /* EPCS4 */
 2018564:	e0bfff17 	ldw	r2,-4(fp)
 2018568:	10802f17 	ldw	r2,188(r2)
 201856c:	10800498 	cmpnei	r2,r2,18
 2018570:	10000a1e 	bne	r2,zero,201859c <alt_epcs_flash_query+0x118>
  {
    flash->dev.region_info[0].region_size = 4 * 1024 * 1024 / 8;
 2018574:	e0ffff17 	ldw	r3,-4(fp)
 2018578:	00800234 	movhi	r2,8
 201857c:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 8;
 2018580:	e0ffff17 	ldw	r3,-4(fp)
 2018584:	00800204 	movi	r2,8
 2018588:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 65536;
 201858c:	e0ffff17 	ldw	r3,-4(fp)
 2018590:	00800074 	movhi	r2,1
 2018594:	18801015 	stw	r2,64(r3)
 2018598:	00004906 	br	20186c0 <alt_epcs_flash_query+0x23c>
  }
  else if (flash->silicon_id == 0x10) /* EPCS1 */
 201859c:	e0bfff17 	ldw	r2,-4(fp)
 20185a0:	10802f17 	ldw	r2,188(r2)
 20185a4:	10800418 	cmpnei	r2,r2,16
 20185a8:	10000a1e 	bne	r2,zero,20185d4 <alt_epcs_flash_query+0x150>
  {
    flash->dev.region_info[0].region_size = 1 * 1024 * 1024 / 8;
 20185ac:	e0ffff17 	ldw	r3,-4(fp)
 20185b0:	008000b4 	movhi	r2,2
 20185b4:	18800e15 	stw	r2,56(r3)
    flash->dev.region_info[0].number_of_blocks = 4;
 20185b8:	e0ffff17 	ldw	r3,-4(fp)
 20185bc:	00800104 	movi	r2,4
 20185c0:	18800f15 	stw	r2,60(r3)
    flash->dev.region_info[0].block_size = 32768;
 20185c4:	e0ffff17 	ldw	r3,-4(fp)
 20185c8:	00a00014 	movui	r2,32768
 20185cc:	18801015 	stw	r2,64(r3)
 20185d0:	00003b06 	br	20186c0 <alt_epcs_flash_query+0x23c>
  {
    /* 
     * Read electronic signature doesn't work for the EPCS128; try 
     * the "Read Device ID" command" before giving up.
     */
    flash->silicon_id = epcs_read_device_id(flash->register_base);
 20185d4:	e0bfff17 	ldw	r2,-4(fp)
 20185d8:	11002d17 	ldw	r4,180(r2)
 20185dc:	201a2bc0 	call	201a2bc <epcs_read_device_id>
 20185e0:	1007883a 	mov	r3,r2
 20185e4:	e0bfff17 	ldw	r2,-4(fp)
 20185e8:	10c02f15 	stw	r3,188(r2)
    /*
     * Last byte is the density ID. Note the difference between
     * EPCS128 and EPCQ128 -- arranged differently, though the 
     * least significant byte of each is '0x18'.
     */
    if((flash->silicon_id & 0xFFFFFF) == 0x20BA18) /* EPCQ128 */
 20185ec:	e0bfff17 	ldw	r2,-4(fp)
 20185f0:	10c02f17 	ldw	r3,188(r2)
 20185f4:	00804034 	movhi	r2,256
 20185f8:	10bfffc4 	addi	r2,r2,-1
 20185fc:	1886703a 	and	r3,r3,r2
 2018600:	00800874 	movhi	r2,33
 2018604:	10ae8604 	addi	r2,r2,-17896
 2018608:	18800a1e 	bne	r3,r2,2018634 <alt_epcs_flash_query+0x1b0>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 201860c:	e0ffff17 	ldw	r3,-4(fp)
 2018610:	00804034 	movhi	r2,256
 2018614:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 256; /* number of sectors */
 2018618:	e0ffff17 	ldw	r3,-4(fp)
 201861c:	00804004 	movi	r2,256
 2018620:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 2018624:	e0ffff17 	ldw	r3,-4(fp)
 2018628:	00800074 	movhi	r2,1
 201862c:	18801015 	stw	r2,64(r3)
 2018630:	00002306 	br	20186c0 <alt_epcs_flash_query+0x23c>
    }
    else if((flash->silicon_id & 0xFF) == 0x18) /* EPCS128 */
 2018634:	e0bfff17 	ldw	r2,-4(fp)
 2018638:	10802f17 	ldw	r2,188(r2)
 201863c:	10803fcc 	andi	r2,r2,255
 2018640:	10800618 	cmpnei	r2,r2,24
 2018644:	10000a1e 	bne	r2,zero,2018670 <alt_epcs_flash_query+0x1ec>
    {
      flash->dev.region_info[0].region_size = 128 * 1024 * 1024 / 8;
 2018648:	e0ffff17 	ldw	r3,-4(fp)
 201864c:	00804034 	movhi	r2,256
 2018650:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 64;
 2018654:	e0ffff17 	ldw	r3,-4(fp)
 2018658:	00801004 	movi	r2,64
 201865c:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 262144;
 2018660:	e0ffff17 	ldw	r3,-4(fp)
 2018664:	00800134 	movhi	r2,4
 2018668:	18801015 	stw	r2,64(r3)
 201866c:	00001406 	br	20186c0 <alt_epcs_flash_query+0x23c>
    }
    else if((flash->silicon_id & 0xFF ) == 0x19) /* EPCQ256 */
 2018670:	e0bfff17 	ldw	r2,-4(fp)
 2018674:	10802f17 	ldw	r2,188(r2)
 2018678:	10803fcc 	andi	r2,r2,255
 201867c:	10800658 	cmpnei	r2,r2,25
 2018680:	10000d1e 	bne	r2,zero,20186b8 <alt_epcs_flash_query+0x234>
    {
      flash->dev.region_info[0].region_size = 256 * 1024 * 1024 / 8;
 2018684:	e0ffff17 	ldw	r3,-4(fp)
 2018688:	00808034 	movhi	r2,512
 201868c:	18800e15 	stw	r2,56(r3)
      flash->dev.region_info[0].number_of_blocks = 512; /* number of sectors */
 2018690:	e0ffff17 	ldw	r3,-4(fp)
 2018694:	00808004 	movi	r2,512
 2018698:	18800f15 	stw	r2,60(r3)
      flash->dev.region_info[0].block_size = 65536;  /* sector size */
 201869c:	e0ffff17 	ldw	r3,-4(fp)
 20186a0:	00800074 	movhi	r2,1
 20186a4:	18801015 	stw	r2,64(r3)
       * must first be programmed into the device, though. To complicate things, 
       * other Altera IP expects the chip to be in 3 byte address mode when they 
       * start using it. To be nice, we'll place the device into 4-byte address mode
       * when we need to, and take it back out when we're done.
       */
      flash->four_bytes_mode = 1;
 20186a8:	e0ffff17 	ldw	r3,-4(fp)
 20186ac:	00800044 	movi	r2,1
 20186b0:	18803115 	stw	r2,196(r3)
 20186b4:	00000206 	br	20186c0 <alt_epcs_flash_query+0x23c>
    }
    else 
    {
      ret_code = -ENODEV; /* No known device found! */
 20186b8:	00bffb44 	movi	r2,-19
 20186bc:	e0bffe15 	stw	r2,-8(fp)
    }
  }
  
  flash->size_in_bytes = flash->dev.region_info[0].region_size;
 20186c0:	e0bfff17 	ldw	r2,-4(fp)
 20186c4:	10800e17 	ldw	r2,56(r2)
 20186c8:	1007883a 	mov	r3,r2
 20186cc:	e0bfff17 	ldw	r2,-4(fp)
 20186d0:	10c02e15 	stw	r3,184(r2)
  flash->dev.number_of_regions = 1;
 20186d4:	e0ffff17 	ldw	r3,-4(fp)
 20186d8:	00800044 	movi	r2,1
 20186dc:	18800c15 	stw	r2,48(r3)
  flash->dev.region_info[0].offset = 0;
 20186e0:	e0bfff17 	ldw	r2,-4(fp)
 20186e4:	10000d15 	stw	zero,52(r2)
  flash->page_size = 256;
 20186e8:	e0ffff17 	ldw	r3,-4(fp)
 20186ec:	00804004 	movi	r2,256
 20186f0:	18803015 	stw	r2,192(r3)

  /* Consider clearing all BP bits here. */
  return ret_code;
 20186f4:	e0bffe17 	ldw	r2,-8(fp)
}
 20186f8:	e037883a 	mov	sp,fp
 20186fc:	dfc00117 	ldw	ra,4(sp)
 2018700:	df000017 	ldw	fp,0(sp)
 2018704:	dec00204 	addi	sp,sp,8
 2018708:	f800283a 	ret

0201870c <alt_epcs_flash_memcmp>:
  alt_flash_dev* flash_info,
  const void* src_buffer,
  int offset,
  size_t n
)
{
 201870c:	deffeb04 	addi	sp,sp,-84
 2018710:	dfc01415 	stw	ra,80(sp)
 2018714:	df001315 	stw	fp,76(sp)
 2018718:	df001304 	addi	fp,sp,76
 201871c:	e13ff915 	stw	r4,-28(fp)
 2018720:	e17ffa15 	stw	r5,-24(fp)
 2018724:	e1bffb15 	stw	r6,-20(fp)
 2018728:	e1fffc15 	stw	r7,-16(fp)
  /*
   * Compare chunks of memory at a time, for better serial-flash
   * read efficiency.
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
 201872c:	00800804 	movi	r2,32
 2018730:	e0bff015 	stw	r2,-64(fp)
  int current_offset = 0;
 2018734:	e03fef15 	stw	zero,-68(fp)

  while (n > 0)
 2018738:	00002c06 	br	20187ec <alt_epcs_flash_memcmp+0xe0>
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
 201873c:	e0bff017 	ldw	r2,-64(fp)
 2018740:	e0bfff15 	stw	r2,-4(fp)
 2018744:	e0fffc17 	ldw	r3,-16(fp)
 2018748:	e0fffe15 	stw	r3,-8(fp)
 201874c:	e0bfff17 	ldw	r2,-4(fp)
 2018750:	e0fffe17 	ldw	r3,-8(fp)
 2018754:	10c0022e 	bgeu	r2,r3,2018760 <alt_epcs_flash_memcmp+0x54>
 2018758:	e0bfff17 	ldw	r2,-4(fp)
 201875c:	e0bffe15 	stw	r2,-8(fp)
 2018760:	e0fffe17 	ldw	r3,-8(fp)
 2018764:	e0ffee15 	stw	r3,-72(fp)
    int this_chunk_cmp;

    if (
      alt_epcs_flash_read(
 2018768:	e0fffb17 	ldw	r3,-20(fp)
 201876c:	e0bfef17 	ldw	r2,-68(fp)
 2018770:	188b883a 	add	r5,r3,r2
 2018774:	e1bff104 	addi	r6,fp,-60
 2018778:	e13ff917 	ldw	r4,-28(fp)
 201877c:	e1ffee17 	ldw	r7,-72(fp)
 2018780:	2018d440 	call	2018d44 <alt_epcs_flash_read>
  while (n > 0)
  {
    int this_chunk_size = n > chunk_size ? chunk_size : n;
    int this_chunk_cmp;

    if (
 2018784:	1004403a 	cmpge	r2,r2,zero
 2018788:	1000031e 	bne	r2,zero,2018798 <alt_epcs_flash_memcmp+0x8c>
    {
      /*
      * If the read fails, I'm not sure what the appropriate action is.
      * Compare success seems wrong, so make it compare fail.
      */
      return -1;
 201878c:	00bfffc4 	movi	r2,-1
 2018790:	e0bffd15 	stw	r2,-12(fp)
 2018794:	00001906 	br	20187fc <alt_epcs_flash_memcmp+0xf0>
    }

    /* Compare this chunk against the source memory buffer. */
    this_chunk_cmp = memcmp(&((unsigned char*)(src_buffer))[current_offset], chunk_buffer, this_chunk_size);
 2018798:	e0fffa17 	ldw	r3,-24(fp)
 201879c:	e0bfef17 	ldw	r2,-68(fp)
 20187a0:	1889883a 	add	r4,r3,r2
 20187a4:	e1bfee17 	ldw	r6,-72(fp)
 20187a8:	e17ff104 	addi	r5,fp,-60
 20187ac:	201b3480 	call	201b348 <memcmp>
 20187b0:	e0bfed15 	stw	r2,-76(fp)
    if (this_chunk_cmp)
 20187b4:	e0bfed17 	ldw	r2,-76(fp)
 20187b8:	1005003a 	cmpeq	r2,r2,zero
 20187bc:	1000031e 	bne	r2,zero,20187cc <alt_epcs_flash_memcmp+0xc0>
    {
      return this_chunk_cmp;
 20187c0:	e0ffed17 	ldw	r3,-76(fp)
 20187c4:	e0fffd15 	stw	r3,-12(fp)
 20187c8:	00000c06 	br	20187fc <alt_epcs_flash_memcmp+0xf0>
    }

    n -= this_chunk_size;
 20187cc:	e0ffee17 	ldw	r3,-72(fp)
 20187d0:	e0bffc17 	ldw	r2,-16(fp)
 20187d4:	10c5c83a 	sub	r2,r2,r3
 20187d8:	e0bffc15 	stw	r2,-16(fp)
    current_offset += this_chunk_size;
 20187dc:	e0ffef17 	ldw	r3,-68(fp)
 20187e0:	e0bfee17 	ldw	r2,-72(fp)
 20187e4:	1885883a 	add	r2,r3,r2
 20187e8:	e0bfef15 	stw	r2,-68(fp)
   */
  alt_u8 chunk_buffer[32];
  const int chunk_size = sizeof(chunk_buffer) / sizeof(*chunk_buffer);
  int current_offset = 0;

  while (n > 0)
 20187ec:	e0bffc17 	ldw	r2,-16(fp)
 20187f0:	1004c03a 	cmpne	r2,r2,zero
 20187f4:	103fd11e 	bne	r2,zero,201873c <alt_epcs_flash_memcmp+0x30>
  }

  /*
   * If execution made it to this point, compare is successful.
   */
  return 0;
 20187f8:	e03ffd15 	stw	zero,-12(fp)
 20187fc:	e0bffd17 	ldw	r2,-12(fp)
}
 2018800:	e037883a 	mov	sp,fp
 2018804:	dfc00117 	ldw	ra,4(sp)
 2018808:	df000017 	ldw	fp,0(sp)
 201880c:	dec00204 	addi	sp,sp,8
 2018810:	f800283a 	ret

02018814 <alt_epcs_flash_write>:
 * large buffer to tie up in our programming library, when not all users will
 * want that functionality.
 */
int alt_epcs_flash_write(alt_flash_dev* flash_info, int offset,
                          const void* src_addr, int length)
{
 2018814:	defff204 	addi	sp,sp,-56
 2018818:	dfc00d15 	stw	ra,52(sp)
 201881c:	df000c15 	stw	fp,48(sp)
 2018820:	df000c04 	addi	fp,sp,48
 2018824:	e13ffa15 	stw	r4,-24(fp)
 2018828:	e17ffb15 	stw	r5,-20(fp)
 201882c:	e1bffc15 	stw	r6,-16(fp)
 2018830:	e1fffd15 	stw	r7,-12(fp)
  int         ret_code = 0;
 2018834:	e03ff915 	stw	zero,-28(fp)
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 2018838:	e03ff815 	stw	zero,-32(fp)
 201883c:	00008b06 	br	2018a6c <alt_epcs_flash_write+0x258>
  {
    /* Is it in this erase block region?*/
    if((offset >= flash_info->region_info[i].offset) &&
 2018840:	e0bff817 	ldw	r2,-32(fp)
 2018844:	e0fffa17 	ldw	r3,-24(fp)
 2018848:	1004913a 	slli	r2,r2,4
 201884c:	10c5883a 	add	r2,r2,r3
 2018850:	10800d04 	addi	r2,r2,52
 2018854:	10c00017 	ldw	r3,0(r2)
 2018858:	e0bffb17 	ldw	r2,-20(fp)
 201885c:	10c08016 	blt	r2,r3,2018a60 <alt_epcs_flash_write+0x24c>
 2018860:	e0bff817 	ldw	r2,-32(fp)
 2018864:	e0fffa17 	ldw	r3,-24(fp)
 2018868:	1004913a 	slli	r2,r2,4
 201886c:	10c5883a 	add	r2,r2,r3
 2018870:	10800d04 	addi	r2,r2,52
 2018874:	11000017 	ldw	r4,0(r2)
 2018878:	e0bff817 	ldw	r2,-32(fp)
 201887c:	e0fffa17 	ldw	r3,-24(fp)
 2018880:	1004913a 	slli	r2,r2,4
 2018884:	10c5883a 	add	r2,r2,r3
 2018888:	10800e04 	addi	r2,r2,56
 201888c:	10800017 	ldw	r2,0(r2)
 2018890:	2087883a 	add	r3,r4,r2
 2018894:	e0bffb17 	ldw	r2,-20(fp)
 2018898:	10c0710e 	bge	r2,r3,2018a60 <alt_epcs_flash_write+0x24c>
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;
 201889c:	e0bff817 	ldw	r2,-32(fp)
 20188a0:	e0fffa17 	ldw	r3,-24(fp)
 20188a4:	1004913a 	slli	r2,r2,4
 20188a8:	10c5883a 	add	r2,r2,r3
 20188ac:	10800d04 	addi	r2,r2,52
 20188b0:	10800017 	ldw	r2,0(r2)
 20188b4:	e0bff515 	stw	r2,-44(fp)

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 20188b8:	e03ff715 	stw	zero,-36(fp)
 20188bc:	00006006 	br	2018a40 <alt_epcs_flash_write+0x22c>
      {
        if ((offset >= current_offset ) &&
 20188c0:	e0fffb17 	ldw	r3,-20(fp)
 20188c4:	e0bff517 	ldw	r2,-44(fp)
 20188c8:	18805116 	blt	r3,r2,2018a10 <alt_epcs_flash_write+0x1fc>
 20188cc:	e0bff817 	ldw	r2,-32(fp)
 20188d0:	e0fffa17 	ldw	r3,-24(fp)
 20188d4:	1004913a 	slli	r2,r2,4
 20188d8:	10c5883a 	add	r2,r2,r3
 20188dc:	10801004 	addi	r2,r2,64
 20188e0:	10c00017 	ldw	r3,0(r2)
 20188e4:	e0bff517 	ldw	r2,-44(fp)
 20188e8:	1887883a 	add	r3,r3,r2
 20188ec:	e0bffb17 	ldw	r2,-20(fp)
 20188f0:	10c0470e 	bge	r2,r3,2018a10 <alt_epcs_flash_write+0x1fc>
        {
          /*
           * Check if the contents of the block are different
           * from the data we wish to put there
           */
          data_to_write = ( current_offset + flash_info->region_info[i].block_size
 20188f4:	e0bff817 	ldw	r2,-32(fp)
 20188f8:	e0fffa17 	ldw	r3,-24(fp)
 20188fc:	1004913a 	slli	r2,r2,4
 2018900:	10c5883a 	add	r2,r2,r3
 2018904:	10801004 	addi	r2,r2,64
 2018908:	10c00017 	ldw	r3,0(r2)
 201890c:	e0bff517 	ldw	r2,-44(fp)
 2018910:	1887883a 	add	r3,r3,r2
 2018914:	e0bffb17 	ldw	r2,-20(fp)
 2018918:	1885c83a 	sub	r2,r3,r2
 201891c:	e0bff615 	stw	r2,-40(fp)
                            - offset);
          data_to_write = MIN(data_to_write, length);
 2018920:	e0bff617 	ldw	r2,-40(fp)
 2018924:	e0bfff15 	stw	r2,-4(fp)
 2018928:	e0fffd17 	ldw	r3,-12(fp)
 201892c:	e0fffe15 	stw	r3,-8(fp)
 2018930:	e0bfff17 	ldw	r2,-4(fp)
 2018934:	e0fffe17 	ldw	r3,-8(fp)
 2018938:	10c0020e 	bge	r2,r3,2018944 <alt_epcs_flash_write+0x130>
 201893c:	e0bfff17 	ldw	r2,-4(fp)
 2018940:	e0bffe15 	stw	r2,-8(fp)
 2018944:	e0fffe17 	ldw	r3,-8(fp)
 2018948:	e0fff615 	stw	r3,-40(fp)

          if(alt_epcs_flash_memcmp(flash_info, src_addr, offset, data_to_write))
 201894c:	e1fff617 	ldw	r7,-40(fp)
 2018950:	e13ffa17 	ldw	r4,-24(fp)
 2018954:	e17ffc17 	ldw	r5,-16(fp)
 2018958:	e1bffb17 	ldw	r6,-20(fp)
 201895c:	201870c0 	call	201870c <alt_epcs_flash_memcmp>
 2018960:	1005003a 	cmpeq	r2,r2,zero
 2018964:	1000131e 	bne	r2,zero,20189b4 <alt_epcs_flash_write+0x1a0>
          {
            ret_code = (*flash_info->erase_block)(flash_info, current_offset);
 2018968:	e0bffa17 	ldw	r2,-24(fp)
 201896c:	10800817 	ldw	r2,32(r2)
 2018970:	e13ffa17 	ldw	r4,-24(fp)
 2018974:	e17ff517 	ldw	r5,-44(fp)
 2018978:	103ee83a 	callr	r2
 201897c:	e0bff915 	stw	r2,-28(fp)

            if (!ret_code)
 2018980:	e0bff917 	ldw	r2,-28(fp)
 2018984:	1004c03a 	cmpne	r2,r2,zero
 2018988:	10000a1e 	bne	r2,zero,20189b4 <alt_epcs_flash_write+0x1a0>
            {
              ret_code = (*flash_info->write_block)(
 201898c:	e0bffa17 	ldw	r2,-24(fp)
 2018990:	10c00917 	ldw	r3,36(r2)
 2018994:	e0bff617 	ldw	r2,-40(fp)
 2018998:	d8800015 	stw	r2,0(sp)
 201899c:	e13ffa17 	ldw	r4,-24(fp)
 20189a0:	e17ff517 	ldw	r5,-44(fp)
 20189a4:	e1bffb17 	ldw	r6,-20(fp)
 20189a8:	e1fffc17 	ldw	r7,-16(fp)
 20189ac:	183ee83a 	callr	r3
 20189b0:	e0bff915 	stw	r2,-28(fp)
                                                  data_to_write);
            }
          }

          /* Was this the last block? */
          if ((length == data_to_write) || ret_code)
 20189b4:	e0fffd17 	ldw	r3,-12(fp)
 20189b8:	e0bff617 	ldw	r2,-40(fp)
 20189bc:	18802f26 	beq	r3,r2,2018a7c <alt_epcs_flash_write+0x268>
 20189c0:	e0bff917 	ldw	r2,-28(fp)
 20189c4:	1004c03a 	cmpne	r2,r2,zero
 20189c8:	10002c1e 	bne	r2,zero,2018a7c <alt_epcs_flash_write+0x268>
          {
            goto finished;
          }

          length -= data_to_write;
 20189cc:	e0fffd17 	ldw	r3,-12(fp)
 20189d0:	e0bff617 	ldw	r2,-40(fp)
 20189d4:	1885c83a 	sub	r2,r3,r2
 20189d8:	e0bffd15 	stw	r2,-12(fp)
          offset = current_offset + flash_info->region_info[i].block_size;
 20189dc:	e0bff817 	ldw	r2,-32(fp)
 20189e0:	e0fffa17 	ldw	r3,-24(fp)
 20189e4:	1004913a 	slli	r2,r2,4
 20189e8:	10c5883a 	add	r2,r2,r3
 20189ec:	10801004 	addi	r2,r2,64
 20189f0:	10c00017 	ldw	r3,0(r2)
 20189f4:	e0bff517 	ldw	r2,-44(fp)
 20189f8:	1885883a 	add	r2,r3,r2
 20189fc:	e0bffb15 	stw	r2,-20(fp)
          src_addr = (alt_u8*)src_addr + data_to_write;
 2018a00:	e0fffc17 	ldw	r3,-16(fp)
 2018a04:	e0bff617 	ldw	r2,-40(fp)
 2018a08:	1885883a 	add	r2,r3,r2
 2018a0c:	e0bffc15 	stw	r2,-16(fp)
        }
        current_offset += flash_info->region_info[i].block_size;
 2018a10:	e0bff817 	ldw	r2,-32(fp)
 2018a14:	e0fffa17 	ldw	r3,-24(fp)
 2018a18:	1004913a 	slli	r2,r2,4
 2018a1c:	10c5883a 	add	r2,r2,r3
 2018a20:	10801004 	addi	r2,r2,64
 2018a24:	10c00017 	ldw	r3,0(r2)
 2018a28:	e0bff517 	ldw	r2,-44(fp)
 2018a2c:	10c5883a 	add	r2,r2,r3
 2018a30:	e0bff515 	stw	r2,-44(fp)
      (offset < (flash_info->region_info[i].offset +
      flash_info->region_info[i].region_size)))
    {
      current_offset = flash_info->region_info[i].offset;

      for(j=0;j<flash_info->region_info[i].number_of_blocks;j++)
 2018a34:	e0bff717 	ldw	r2,-36(fp)
 2018a38:	10800044 	addi	r2,r2,1
 2018a3c:	e0bff715 	stw	r2,-36(fp)
 2018a40:	e0bff817 	ldw	r2,-32(fp)
 2018a44:	e0fffa17 	ldw	r3,-24(fp)
 2018a48:	1004913a 	slli	r2,r2,4
 2018a4c:	10c5883a 	add	r2,r2,r3
 2018a50:	10800f04 	addi	r2,r2,60
 2018a54:	10c00017 	ldw	r3,0(r2)
 2018a58:	e0bff717 	ldw	r2,-36(fp)
 2018a5c:	10ff9816 	blt	r2,r3,20188c0 <alt_epcs_flash_write+0xac>
  int         current_offset;

  /*
   * First and foremost which sectors are affected?
   */
  for(i = 0; i < flash_info->number_of_regions; i++)
 2018a60:	e0bff817 	ldw	r2,-32(fp)
 2018a64:	10800044 	addi	r2,r2,1
 2018a68:	e0bff815 	stw	r2,-32(fp)
 2018a6c:	e0bffa17 	ldw	r2,-24(fp)
 2018a70:	10c00c17 	ldw	r3,48(r2)
 2018a74:	e0bff817 	ldw	r2,-32(fp)
 2018a78:	10ff7116 	blt	r2,r3,2018840 <alt_epcs_flash_write+0x2c>
      }
    }
  }

finished:
  return ret_code;
 2018a7c:	e0bff917 	ldw	r2,-28(fp)
}
 2018a80:	e037883a 	mov	sp,fp
 2018a84:	dfc00117 	ldw	ra,4(sp)
 2018a88:	df000017 	ldw	fp,0(sp)
 2018a8c:	dec00204 	addi	sp,sp,8
 2018a90:	f800283a 	ret

02018a94 <alt_epcs_flash_get_info>:
 *
 *  Pass the table of erase blocks to the user
 */
int alt_epcs_flash_get_info(alt_flash_fd* fd, flash_region** info,
                            int* number_of_regions)
{
 2018a94:	defffa04 	addi	sp,sp,-24
 2018a98:	df000515 	stw	fp,20(sp)
 2018a9c:	df000504 	addi	fp,sp,20
 2018aa0:	e13ffd15 	stw	r4,-12(fp)
 2018aa4:	e17ffe15 	stw	r5,-8(fp)
 2018aa8:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = 0;
 2018aac:	e03ffc15 	stw	zero,-16(fp)

  alt_flash_dev* flash = (alt_flash_dev*)fd;
 2018ab0:	e0bffd17 	ldw	r2,-12(fp)
 2018ab4:	e0bffb15 	stw	r2,-20(fp)

  *number_of_regions = flash->number_of_regions;
 2018ab8:	e0bffb17 	ldw	r2,-20(fp)
 2018abc:	10c00c17 	ldw	r3,48(r2)
 2018ac0:	e0bfff17 	ldw	r2,-4(fp)
 2018ac4:	10c00015 	stw	r3,0(r2)

  if (!flash->number_of_regions)
 2018ac8:	e0bffb17 	ldw	r2,-20(fp)
 2018acc:	10800c17 	ldw	r2,48(r2)
 2018ad0:	1004c03a 	cmpne	r2,r2,zero
 2018ad4:	1000031e 	bne	r2,zero,2018ae4 <alt_epcs_flash_get_info+0x50>
  {
    ret_code = -EIO;
 2018ad8:	00bffec4 	movi	r2,-5
 2018adc:	e0bffc15 	stw	r2,-16(fp)
 2018ae0:	00000b06 	br	2018b10 <alt_epcs_flash_get_info+0x7c>
  }
  else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 2018ae4:	e0bffb17 	ldw	r2,-20(fp)
 2018ae8:	10800c17 	ldw	r2,48(r2)
 2018aec:	10800250 	cmplti	r2,r2,9
 2018af0:	1000031e 	bne	r2,zero,2018b00 <alt_epcs_flash_get_info+0x6c>
  {
    ret_code = -ENOMEM;
 2018af4:	00bffd04 	movi	r2,-12
 2018af8:	e0bffc15 	stw	r2,-16(fp)
 2018afc:	00000406 	br	2018b10 <alt_epcs_flash_get_info+0x7c>
  }
  else
  {
    *info = &flash->region_info[0];
 2018b00:	e0bffb17 	ldw	r2,-20(fp)
 2018b04:	10c00d04 	addi	r3,r2,52
 2018b08:	e0bffe17 	ldw	r2,-8(fp)
 2018b0c:	10c00015 	stw	r3,0(r2)
  }

  return ret_code;
 2018b10:	e0bffc17 	ldw	r2,-16(fp)
}
 2018b14:	e037883a 	mov	sp,fp
 2018b18:	df000017 	ldw	fp,0(sp)
 2018b1c:	dec00104 	addi	sp,sp,4
 2018b20:	f800283a 	ret

02018b24 <alt_epcs_flash_erase_block>:
 *
 * Erase the selected erase block ("sector erase", from the POV
 * of the EPCS data sheet).
 */
int alt_epcs_flash_erase_block(alt_flash_dev* flash_info, int block_offset)
{
 2018b24:	defffa04 	addi	sp,sp,-24
 2018b28:	dfc00515 	stw	ra,20(sp)
 2018b2c:	df000415 	stw	fp,16(sp)
 2018b30:	df000404 	addi	fp,sp,16
 2018b34:	e13ffe15 	stw	r4,-8(fp)
 2018b38:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 2018b3c:	e03ffd15 	stw	zero,-12(fp)
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2018b40:	e0bffe17 	ldw	r2,-8(fp)
 2018b44:	e0bffc15 	stw	r2,-16(fp)

  ret_code = alt_epcs_test_address(flash_info, block_offset);
 2018b48:	e13ffe17 	ldw	r4,-8(fp)
 2018b4c:	e17fff17 	ldw	r5,-4(fp)
 2018b50:	2018b940 	call	2018b94 <alt_epcs_test_address>
 2018b54:	e0bffd15 	stw	r2,-12(fp)

  if (ret_code >= 0)
 2018b58:	e0bffd17 	ldw	r2,-12(fp)
 2018b5c:	1004803a 	cmplt	r2,r2,zero
 2018b60:	1000061e 	bne	r2,zero,2018b7c <alt_epcs_flash_erase_block+0x58>
  {
    /* Send the Sector Erase command, whose 3 address bytes are anywhere
     * within the chosen sector.
     */
    epcs_sector_erase(f->register_base, block_offset, f->four_bytes_mode);
 2018b64:	e0bffc17 	ldw	r2,-16(fp)
 2018b68:	11002d17 	ldw	r4,180(r2)
 2018b6c:	e17fff17 	ldw	r5,-4(fp)
 2018b70:	e0bffc17 	ldw	r2,-16(fp)
 2018b74:	11803117 	ldw	r6,196(r2)
 2018b78:	2019d780 	call	2019d78 <epcs_sector_erase>
  }
  return ret_code;
 2018b7c:	e0bffd17 	ldw	r2,-12(fp)
}
 2018b80:	e037883a 	mov	sp,fp
 2018b84:	dfc00117 	ldw	ra,4(sp)
 2018b88:	df000017 	ldw	fp,0(sp)
 2018b8c:	dec00204 	addi	sp,sp,8
 2018b90:	f800283a 	ret

02018b94 <alt_epcs_test_address>:
}


/* This might be a candidate for optimization.  Precompute the last-address? */
static ALT_INLINE int alt_epcs_test_address(alt_flash_dev* flash_info, int offset)
{
 2018b94:	defff904 	addi	sp,sp,-28
 2018b98:	df000615 	stw	fp,24(sp)
 2018b9c:	df000604 	addi	fp,sp,24
 2018ba0:	e13ffe15 	stw	r4,-8(fp)
 2018ba4:	e17fff15 	stw	r5,-4(fp)
  int ret_code = 0;
 2018ba8:	e03ffd15 	stw	zero,-12(fp)
  /* Error checking:
   * if the block offset is outside of the memory, return -EIO.
   */
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2018bac:	e0bffe17 	ldw	r2,-8(fp)
 2018bb0:	e0bffc15 	stw	r2,-16(fp)

  const alt_u32 last_region_index = f->dev.number_of_regions - 1;
 2018bb4:	e0bffc17 	ldw	r2,-16(fp)
 2018bb8:	10800c17 	ldw	r2,48(r2)
 2018bbc:	10bfffc4 	addi	r2,r2,-1
 2018bc0:	e0bffb15 	stw	r2,-20(fp)
  alt_u32 last_device_address =
    -1 +
    f->dev.region_info[last_region_index].offset +
    f->dev.region_info[last_region_index].region_size;
 2018bc4:	e0bffb17 	ldw	r2,-20(fp)
 2018bc8:	e0fffc17 	ldw	r3,-16(fp)
 2018bcc:	1004913a 	slli	r2,r2,4
 2018bd0:	10c5883a 	add	r2,r2,r3
 2018bd4:	10800d04 	addi	r2,r2,52
 2018bd8:	11000017 	ldw	r4,0(r2)
 2018bdc:	e0bffb17 	ldw	r2,-20(fp)
 2018be0:	e0fffc17 	ldw	r3,-16(fp)
 2018be4:	1004913a 	slli	r2,r2,4
 2018be8:	10c5883a 	add	r2,r2,r3
 2018bec:	10800e04 	addi	r2,r2,56
 2018bf0:	10800017 	ldw	r2,0(r2)
 2018bf4:	2085883a 	add	r2,r4,r2
 2018bf8:	10bfffc4 	addi	r2,r2,-1
 2018bfc:	e0bffa15 	stw	r2,-24(fp)

  if (offset > last_device_address)
 2018c00:	e0ffff17 	ldw	r3,-4(fp)
 2018c04:	e0bffa17 	ldw	r2,-24(fp)
 2018c08:	10c0022e 	bgeu	r2,r3,2018c14 <alt_epcs_test_address+0x80>
  {
    /* Someone tried to erase a block outside of this device's range. */
    ret_code = -EIO;
 2018c0c:	00bffec4 	movi	r2,-5
 2018c10:	e0bffd15 	stw	r2,-12(fp)
  }
  return ret_code;
 2018c14:	e0bffd17 	ldw	r2,-12(fp)
}
 2018c18:	e037883a 	mov	sp,fp
 2018c1c:	df000017 	ldw	fp,0(sp)
 2018c20:	dec00104 	addi	sp,sp,4
 2018c24:	f800283a 	ret

02018c28 <alt_epcs_flash_write_block>:
 * function type compatibility.
 */
int alt_epcs_flash_write_block(alt_flash_dev* flash_info, int block_offset,
                                      int data_offset, const void* data,
                                      int length)
{
 2018c28:	defff204 	addi	sp,sp,-56
 2018c2c:	dfc00d15 	stw	ra,52(sp)
 2018c30:	df000c15 	stw	fp,48(sp)
 2018c34:	df000c04 	addi	fp,sp,48
 2018c38:	e13ffa15 	stw	r4,-24(fp)
 2018c3c:	e17ffb15 	stw	r5,-20(fp)
 2018c40:	e1bffc15 	stw	r6,-16(fp)
 2018c44:	e1fffd15 	stw	r7,-12(fp)
  int ret_code;
  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2018c48:	e0bffa17 	ldw	r2,-24(fp)
 2018c4c:	e0bff815 	stw	r2,-32(fp)

  int buffer_offset = 0;
 2018c50:	e03ff715 	stw	zero,-36(fp)
  int length_of_current_write;
  ret_code = alt_epcs_test_address(flash_info, data_offset);
 2018c54:	e13ffa17 	ldw	r4,-24(fp)
 2018c58:	e17ffc17 	ldw	r5,-16(fp)
 2018c5c:	2018b940 	call	2018b94 <alt_epcs_test_address>
 2018c60:	e0bff915 	stw	r2,-28(fp)

  if (ret_code >= 0)
 2018c64:	e0bff917 	ldw	r2,-28(fp)
 2018c68:	1004803a 	cmplt	r2,r2,zero
 2018c6c:	10002f1e 	bne	r2,zero,2018d2c <alt_epcs_flash_write_block+0x104>
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 2018c70:	00002b06 	br	2018d20 <alt_epcs_flash_write_block+0xf8>
    {
      int next_page_start = (data_offset + f->page_size) & ~(f->page_size - 1);
 2018c74:	e0bff817 	ldw	r2,-32(fp)
 2018c78:	10c03017 	ldw	r3,192(r2)
 2018c7c:	e0bffc17 	ldw	r2,-16(fp)
 2018c80:	1887883a 	add	r3,r3,r2
 2018c84:	e0bff817 	ldw	r2,-32(fp)
 2018c88:	10803017 	ldw	r2,192(r2)
 2018c8c:	0085c83a 	sub	r2,zero,r2
 2018c90:	1884703a 	and	r2,r3,r2
 2018c94:	e0bff515 	stw	r2,-44(fp)
      length_of_current_write = MIN(length, next_page_start - data_offset);
 2018c98:	e0fff517 	ldw	r3,-44(fp)
 2018c9c:	e0bffc17 	ldw	r2,-16(fp)
 2018ca0:	1885c83a 	sub	r2,r3,r2
 2018ca4:	e0c00217 	ldw	r3,8(fp)
 2018ca8:	e0ffff15 	stw	r3,-4(fp)
 2018cac:	e0bffe15 	stw	r2,-8(fp)
 2018cb0:	e0bfff17 	ldw	r2,-4(fp)
 2018cb4:	e0fffe17 	ldw	r3,-8(fp)
 2018cb8:	10c0020e 	bge	r2,r3,2018cc4 <alt_epcs_flash_write_block+0x9c>
 2018cbc:	e0bfff17 	ldw	r2,-4(fp)
 2018cc0:	e0bffe15 	stw	r2,-8(fp)
 2018cc4:	e0fffe17 	ldw	r3,-8(fp)
 2018cc8:	e0fff615 	stw	r3,-40(fp)

      epcs_write_buffer(f->register_base, data_offset, &((const alt_u8*)data)[buffer_offset], length_of_current_write,
 2018ccc:	e0bff817 	ldw	r2,-32(fp)
 2018cd0:	11002d17 	ldw	r4,180(r2)
 2018cd4:	e0fffd17 	ldw	r3,-12(fp)
 2018cd8:	e0bff717 	ldw	r2,-36(fp)
 2018cdc:	188d883a 	add	r6,r3,r2
 2018ce0:	e0bff817 	ldw	r2,-32(fp)
 2018ce4:	10803117 	ldw	r2,196(r2)
 2018ce8:	d8800015 	stw	r2,0(sp)
 2018cec:	e17ffc17 	ldw	r5,-16(fp)
 2018cf0:	e1fff617 	ldw	r7,-40(fp)
 2018cf4:	201a0e00 	call	201a0e0 <epcs_write_buffer>
          f->four_bytes_mode);

      length -= length_of_current_write;
 2018cf8:	e0c00217 	ldw	r3,8(fp)
 2018cfc:	e0bff617 	ldw	r2,-40(fp)
 2018d00:	1885c83a 	sub	r2,r3,r2
 2018d04:	e0800215 	stw	r2,8(fp)
      buffer_offset += length_of_current_write;
 2018d08:	e0fff717 	ldw	r3,-36(fp)
 2018d0c:	e0bff617 	ldw	r2,-40(fp)
 2018d10:	1885883a 	add	r2,r3,r2
 2018d14:	e0bff715 	stw	r2,-36(fp)
      data_offset = next_page_start;
 2018d18:	e0bff517 	ldw	r2,-44(fp)
 2018d1c:	e0bffc15 	stw	r2,-16(fp)
  {

    /* "Block" writes must be broken up into the page writes that
     * the device understands.  Partial page writes are allowed.
     */
    while (length)
 2018d20:	e0800217 	ldw	r2,8(fp)
 2018d24:	1004c03a 	cmpne	r2,r2,zero
 2018d28:	103fd21e 	bne	r2,zero,2018c74 <alt_epcs_flash_write_block+0x4c>
      length -= length_of_current_write;
      buffer_offset += length_of_current_write;
      data_offset = next_page_start;
    }
  }
  return ret_code;
 2018d2c:	e0bff917 	ldw	r2,-28(fp)
}
 2018d30:	e037883a 	mov	sp,fp
 2018d34:	dfc00117 	ldw	ra,4(sp)
 2018d38:	df000017 	ldw	fp,0(sp)
 2018d3c:	dec00204 	addi	sp,sp,8
 2018d40:	f800283a 	ret

02018d44 <alt_epcs_flash_read>:
 *  to the beginning.  Reads that start beyond the end of the memory are
 *  flagged as errors with EIO (is there a better error code?).
 */
int alt_epcs_flash_read(alt_flash_dev* flash_info, int offset,
                        void* dest_addr, int length)
{
 2018d44:	defff704 	addi	sp,sp,-36
 2018d48:	dfc00815 	stw	ra,32(sp)
 2018d4c:	df000715 	stw	fp,28(sp)
 2018d50:	df000704 	addi	fp,sp,28
 2018d54:	e13ffc15 	stw	r4,-16(fp)
 2018d58:	e17ffd15 	stw	r5,-12(fp)
 2018d5c:	e1bffe15 	stw	r6,-8(fp)
 2018d60:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = 0;
 2018d64:	e03ffb15 	stw	zero,-20(fp)

  alt_flash_epcs_dev *f = (alt_flash_epcs_dev*)flash_info;
 2018d68:	e0bffc17 	ldw	r2,-16(fp)
 2018d6c:	e0bffa15 	stw	r2,-24(fp)

  ret_code = alt_epcs_test_address(flash_info, offset);
 2018d70:	e13ffc17 	ldw	r4,-16(fp)
 2018d74:	e17ffd17 	ldw	r5,-12(fp)
 2018d78:	2018b940 	call	2018b94 <alt_epcs_test_address>
 2018d7c:	e0bffb15 	stw	r2,-20(fp)

  if (ret_code >= 0)
 2018d80:	e0bffb17 	ldw	r2,-20(fp)
 2018d84:	1004803a 	cmplt	r2,r2,zero
 2018d88:	10000e1e 	bne	r2,zero,2018dc4 <alt_epcs_flash_read+0x80>
  {
    ret_code = epcs_read_buffer(f->register_base, offset, dest_addr, length,
 2018d8c:	e0bffa17 	ldw	r2,-24(fp)
 2018d90:	11002d17 	ldw	r4,180(r2)
 2018d94:	e1bffe17 	ldw	r6,-8(fp)
 2018d98:	e0bffa17 	ldw	r2,-24(fp)
 2018d9c:	10803117 	ldw	r2,196(r2)
 2018da0:	d8800015 	stw	r2,0(sp)
 2018da4:	e17ffd17 	ldw	r5,-12(fp)
 2018da8:	e1ffff17 	ldw	r7,-4(fp)
 2018dac:	2019ee00 	call	2019ee0 <epcs_read_buffer>
 2018db0:	e0bffb15 	stw	r2,-20(fp)
                                f->four_bytes_mode);

    /* epcs_read_buffer returns the number of buffers read, but
     * alt_epcs_flash_read returns 0 on success, <0 on failure.
     */
    if (ret_code == length)
 2018db4:	e0fffb17 	ldw	r3,-20(fp)
 2018db8:	e0bfff17 	ldw	r2,-4(fp)
 2018dbc:	1880011e 	bne	r3,r2,2018dc4 <alt_epcs_flash_read+0x80>
    {
      ret_code = 0;
 2018dc0:	e03ffb15 	stw	zero,-20(fp)
    }
  }
  return ret_code;
 2018dc4:	e0bffb17 	ldw	r2,-20(fp)
}
 2018dc8:	e037883a 	mov	sp,fp
 2018dcc:	dfc00117 	ldw	ra,4(sp)
 2018dd0:	df000017 	ldw	fp,0(sp)
 2018dd4:	dec00204 	addi	sp,sp,8
 2018dd8:	f800283a 	ret

02018ddc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 2018ddc:	defffa04 	addi	sp,sp,-24
 2018de0:	dfc00515 	stw	ra,20(sp)
 2018de4:	df000415 	stw	fp,16(sp)
 2018de8:	df000404 	addi	fp,sp,16
 2018dec:	e13ffd15 	stw	r4,-12(fp)
 2018df0:	e17ffe15 	stw	r5,-8(fp)
 2018df4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2018df8:	e0bffd17 	ldw	r2,-12(fp)
 2018dfc:	10800017 	ldw	r2,0(r2)
 2018e00:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 2018e04:	e0bffc17 	ldw	r2,-16(fp)
 2018e08:	11000a04 	addi	r4,r2,40
 2018e0c:	e0bffd17 	ldw	r2,-12(fp)
 2018e10:	11c00217 	ldw	r7,8(r2)
 2018e14:	e17ffe17 	ldw	r5,-8(fp)
 2018e18:	e1bfff17 	ldw	r6,-4(fp)
 2018e1c:	20194200 	call	2019420 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 2018e20:	e037883a 	mov	sp,fp
 2018e24:	dfc00117 	ldw	ra,4(sp)
 2018e28:	df000017 	ldw	fp,0(sp)
 2018e2c:	dec00204 	addi	sp,sp,8
 2018e30:	f800283a 	ret

02018e34 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 2018e34:	defffa04 	addi	sp,sp,-24
 2018e38:	dfc00515 	stw	ra,20(sp)
 2018e3c:	df000415 	stw	fp,16(sp)
 2018e40:	df000404 	addi	fp,sp,16
 2018e44:	e13ffd15 	stw	r4,-12(fp)
 2018e48:	e17ffe15 	stw	r5,-8(fp)
 2018e4c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2018e50:	e0bffd17 	ldw	r2,-12(fp)
 2018e54:	10800017 	ldw	r2,0(r2)
 2018e58:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 2018e5c:	e0bffc17 	ldw	r2,-16(fp)
 2018e60:	11000a04 	addi	r4,r2,40
 2018e64:	e0bffd17 	ldw	r2,-12(fp)
 2018e68:	11c00217 	ldw	r7,8(r2)
 2018e6c:	e17ffe17 	ldw	r5,-8(fp)
 2018e70:	e1bfff17 	ldw	r6,-4(fp)
 2018e74:	20196440 	call	2019644 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 2018e78:	e037883a 	mov	sp,fp
 2018e7c:	dfc00117 	ldw	ra,4(sp)
 2018e80:	df000017 	ldw	fp,0(sp)
 2018e84:	dec00204 	addi	sp,sp,8
 2018e88:	f800283a 	ret

02018e8c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 2018e8c:	defffc04 	addi	sp,sp,-16
 2018e90:	dfc00315 	stw	ra,12(sp)
 2018e94:	df000215 	stw	fp,8(sp)
 2018e98:	df000204 	addi	fp,sp,8
 2018e9c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2018ea0:	e0bfff17 	ldw	r2,-4(fp)
 2018ea4:	10800017 	ldw	r2,0(r2)
 2018ea8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 2018eac:	e0bffe17 	ldw	r2,-8(fp)
 2018eb0:	11000a04 	addi	r4,r2,40
 2018eb4:	e0bfff17 	ldw	r2,-4(fp)
 2018eb8:	11400217 	ldw	r5,8(r2)
 2018ebc:	20192b80 	call	20192b8 <altera_avalon_jtag_uart_close>
}
 2018ec0:	e037883a 	mov	sp,fp
 2018ec4:	dfc00117 	ldw	ra,4(sp)
 2018ec8:	df000017 	ldw	fp,0(sp)
 2018ecc:	dec00204 	addi	sp,sp,8
 2018ed0:	f800283a 	ret

02018ed4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 2018ed4:	defffa04 	addi	sp,sp,-24
 2018ed8:	dfc00515 	stw	ra,20(sp)
 2018edc:	df000415 	stw	fp,16(sp)
 2018ee0:	df000404 	addi	fp,sp,16
 2018ee4:	e13ffd15 	stw	r4,-12(fp)
 2018ee8:	e17ffe15 	stw	r5,-8(fp)
 2018eec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 2018ef0:	e0bffd17 	ldw	r2,-12(fp)
 2018ef4:	10800017 	ldw	r2,0(r2)
 2018ef8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 2018efc:	e0bffc17 	ldw	r2,-16(fp)
 2018f00:	11000a04 	addi	r4,r2,40
 2018f04:	e17ffe17 	ldw	r5,-8(fp)
 2018f08:	e1bfff17 	ldw	r6,-4(fp)
 2018f0c:	201932c0 	call	201932c <altera_avalon_jtag_uart_ioctl>
}
 2018f10:	e037883a 	mov	sp,fp
 2018f14:	dfc00117 	ldw	ra,4(sp)
 2018f18:	df000017 	ldw	fp,0(sp)
 2018f1c:	dec00204 	addi	sp,sp,8
 2018f20:	f800283a 	ret

02018f24 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 2018f24:	defffb04 	addi	sp,sp,-20
 2018f28:	dfc00415 	stw	ra,16(sp)
 2018f2c:	df000315 	stw	fp,12(sp)
 2018f30:	df000304 	addi	fp,sp,12
 2018f34:	e13ffd15 	stw	r4,-12(fp)
 2018f38:	e17ffe15 	stw	r5,-8(fp)
 2018f3c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2018f40:	e0fffd17 	ldw	r3,-12(fp)
 2018f44:	00800044 	movi	r2,1
 2018f48:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 2018f4c:	e0bffd17 	ldw	r2,-12(fp)
 2018f50:	10800017 	ldw	r2,0(r2)
 2018f54:	11000104 	addi	r4,r2,4
 2018f58:	e0bffd17 	ldw	r2,-12(fp)
 2018f5c:	10800817 	ldw	r2,32(r2)
 2018f60:	1007883a 	mov	r3,r2
 2018f64:	2005883a 	mov	r2,r4
 2018f68:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 2018f6c:	e13fff17 	ldw	r4,-4(fp)
 2018f70:	e17ffd17 	ldw	r5,-12(fp)
 2018f74:	018080b4 	movhi	r6,514
 2018f78:	31a3f704 	addi	r6,r6,-28708
 2018f7c:	201aa100 	call	201aa10 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 2018f80:	e0bffd17 	ldw	r2,-12(fp)
 2018f84:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 2018f88:	e0bffd17 	ldw	r2,-12(fp)
 2018f8c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 2018f90:	008080b4 	movhi	r2,514
 2018f94:	10be0404 	addi	r2,r2,-2032
 2018f98:	10800017 	ldw	r2,0(r2)
 2018f9c:	100b883a 	mov	r5,r2
 2018fa0:	018080b4 	movhi	r6,514
 2018fa4:	31a48204 	addi	r6,r6,-28152
 2018fa8:	e1fffd17 	ldw	r7,-12(fp)
 2018fac:	20172c40 	call	20172c4 <alt_alarm_start>
 2018fb0:	1004403a 	cmpge	r2,r2,zero
 2018fb4:	1000041e 	bne	r2,zero,2018fc8 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 2018fb8:	e0fffd17 	ldw	r3,-12(fp)
 2018fbc:	00a00034 	movhi	r2,32768
 2018fc0:	10bfffc4 	addi	r2,r2,-1
 2018fc4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 2018fc8:	e037883a 	mov	sp,fp
 2018fcc:	dfc00117 	ldw	ra,4(sp)
 2018fd0:	df000017 	ldw	fp,0(sp)
 2018fd4:	dec00204 	addi	sp,sp,8
 2018fd8:	f800283a 	ret

02018fdc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 2018fdc:	defff704 	addi	sp,sp,-36
 2018fe0:	df000815 	stw	fp,32(sp)
 2018fe4:	df000804 	addi	fp,sp,32
 2018fe8:	e13ffe15 	stw	r4,-8(fp)
 2018fec:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 2018ff0:	e0bffe17 	ldw	r2,-8(fp)
 2018ff4:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 2018ff8:	e0bffd17 	ldw	r2,-12(fp)
 2018ffc:	10800017 	ldw	r2,0(r2)
 2019000:	e0bffc15 	stw	r2,-16(fp)
 2019004:	00000006 	br	2019008 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2019008:	e0bffc17 	ldw	r2,-16(fp)
 201900c:	10800104 	addi	r2,r2,4
 2019010:	10800037 	ldwio	r2,0(r2)
 2019014:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 2019018:	e0bffb17 	ldw	r2,-20(fp)
 201901c:	1080c00c 	andi	r2,r2,768
 2019020:	1005003a 	cmpeq	r2,r2,zero
 2019024:	1000741e 	bne	r2,zero,20191f8 <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 2019028:	e0bffb17 	ldw	r2,-20(fp)
 201902c:	1080400c 	andi	r2,r2,256
 2019030:	1005003a 	cmpeq	r2,r2,zero
 2019034:	1000351e 	bne	r2,zero,201910c <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 2019038:	00800074 	movhi	r2,1
 201903c:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2019040:	e0bffd17 	ldw	r2,-12(fp)
 2019044:	10800a17 	ldw	r2,40(r2)
 2019048:	10800044 	addi	r2,r2,1
 201904c:	1081ffcc 	andi	r2,r2,2047
 2019050:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 2019054:	e0bffd17 	ldw	r2,-12(fp)
 2019058:	10c00b17 	ldw	r3,44(r2)
 201905c:	e0bff917 	ldw	r2,-28(fp)
 2019060:	18801626 	beq	r3,r2,20190bc <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 2019064:	e0bffc17 	ldw	r2,-16(fp)
 2019068:	10800037 	ldwio	r2,0(r2)
 201906c:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 2019070:	e0bffa17 	ldw	r2,-24(fp)
 2019074:	10a0000c 	andi	r2,r2,32768
 2019078:	1005003a 	cmpeq	r2,r2,zero
 201907c:	10000f1e 	bne	r2,zero,20190bc <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 2019080:	e0bffd17 	ldw	r2,-12(fp)
 2019084:	10c00a17 	ldw	r3,40(r2)
 2019088:	e0bffa17 	ldw	r2,-24(fp)
 201908c:	1009883a 	mov	r4,r2
 2019090:	e0bffd17 	ldw	r2,-12(fp)
 2019094:	1885883a 	add	r2,r3,r2
 2019098:	10800e04 	addi	r2,r2,56
 201909c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 20190a0:	e0bffd17 	ldw	r2,-12(fp)
 20190a4:	10800a17 	ldw	r2,40(r2)
 20190a8:	10800044 	addi	r2,r2,1
 20190ac:	10c1ffcc 	andi	r3,r2,2047
 20190b0:	e0bffd17 	ldw	r2,-12(fp)
 20190b4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 20190b8:	003fe106 	br	2019040 <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 20190bc:	e0bffa17 	ldw	r2,-24(fp)
 20190c0:	10bfffec 	andhi	r2,r2,65535
 20190c4:	1005003a 	cmpeq	r2,r2,zero
 20190c8:	1000101e 	bne	r2,zero,201910c <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 20190cc:	e0bffd17 	ldw	r2,-12(fp)
 20190d0:	10c00817 	ldw	r3,32(r2)
 20190d4:	00bfff84 	movi	r2,-2
 20190d8:	1886703a 	and	r3,r3,r2
 20190dc:	e0bffd17 	ldw	r2,-12(fp)
 20190e0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 20190e4:	e0bffc17 	ldw	r2,-16(fp)
 20190e8:	11000104 	addi	r4,r2,4
 20190ec:	e0bffd17 	ldw	r2,-12(fp)
 20190f0:	10800817 	ldw	r2,32(r2)
 20190f4:	1007883a 	mov	r3,r2
 20190f8:	2005883a 	mov	r2,r4
 20190fc:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2019100:	e0bffc17 	ldw	r2,-16(fp)
 2019104:	10800104 	addi	r2,r2,4
 2019108:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 201910c:	e0bffb17 	ldw	r2,-20(fp)
 2019110:	1080800c 	andi	r2,r2,512
 2019114:	1005003a 	cmpeq	r2,r2,zero
 2019118:	103fbb1e 	bne	r2,zero,2019008 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 201911c:	e0bffb17 	ldw	r2,-20(fp)
 2019120:	10bfffec 	andhi	r2,r2,65535
 2019124:	1004d43a 	srli	r2,r2,16
 2019128:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 201912c:	00001506 	br	2019184 <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 2019130:	e13ffc17 	ldw	r4,-16(fp)
 2019134:	e0bffd17 	ldw	r2,-12(fp)
 2019138:	10c00d17 	ldw	r3,52(r2)
 201913c:	e0bffd17 	ldw	r2,-12(fp)
 2019140:	1885883a 	add	r2,r3,r2
 2019144:	10820e04 	addi	r2,r2,2104
 2019148:	10800003 	ldbu	r2,0(r2)
 201914c:	10c03fcc 	andi	r3,r2,255
 2019150:	18c0201c 	xori	r3,r3,128
 2019154:	18ffe004 	addi	r3,r3,-128
 2019158:	2005883a 	mov	r2,r4
 201915c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2019160:	e0bffd17 	ldw	r2,-12(fp)
 2019164:	10800d17 	ldw	r2,52(r2)
 2019168:	10800044 	addi	r2,r2,1
 201916c:	10c1ffcc 	andi	r3,r2,2047
 2019170:	e0bffd17 	ldw	r2,-12(fp)
 2019174:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 2019178:	e0bff817 	ldw	r2,-32(fp)
 201917c:	10bfffc4 	addi	r2,r2,-1
 2019180:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 2019184:	e0bff817 	ldw	r2,-32(fp)
 2019188:	1005003a 	cmpeq	r2,r2,zero
 201918c:	1000051e 	bne	r2,zero,20191a4 <altera_avalon_jtag_uart_irq+0x1c8>
 2019190:	e0bffd17 	ldw	r2,-12(fp)
 2019194:	10c00d17 	ldw	r3,52(r2)
 2019198:	e0bffd17 	ldw	r2,-12(fp)
 201919c:	10800c17 	ldw	r2,48(r2)
 20191a0:	18bfe31e 	bne	r3,r2,2019130 <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 20191a4:	e0bff817 	ldw	r2,-32(fp)
 20191a8:	1005003a 	cmpeq	r2,r2,zero
 20191ac:	103f961e 	bne	r2,zero,2019008 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 20191b0:	e0bffd17 	ldw	r2,-12(fp)
 20191b4:	10c00817 	ldw	r3,32(r2)
 20191b8:	00bfff44 	movi	r2,-3
 20191bc:	1886703a 	and	r3,r3,r2
 20191c0:	e0bffd17 	ldw	r2,-12(fp)
 20191c4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 20191c8:	e0bffd17 	ldw	r2,-12(fp)
 20191cc:	10800017 	ldw	r2,0(r2)
 20191d0:	11000104 	addi	r4,r2,4
 20191d4:	e0bffd17 	ldw	r2,-12(fp)
 20191d8:	10800817 	ldw	r2,32(r2)
 20191dc:	1007883a 	mov	r3,r2
 20191e0:	2005883a 	mov	r2,r4
 20191e4:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 20191e8:	e0bffc17 	ldw	r2,-16(fp)
 20191ec:	10800104 	addi	r2,r2,4
 20191f0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 20191f4:	003f8406 	br	2019008 <altera_avalon_jtag_uart_irq+0x2c>
}
 20191f8:	e037883a 	mov	sp,fp
 20191fc:	df000017 	ldw	fp,0(sp)
 2019200:	dec00104 	addi	sp,sp,4
 2019204:	f800283a 	ret

02019208 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 2019208:	defffc04 	addi	sp,sp,-16
 201920c:	df000315 	stw	fp,12(sp)
 2019210:	df000304 	addi	fp,sp,12
 2019214:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 2019218:	e0bfff17 	ldw	r2,-4(fp)
 201921c:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 2019220:	e0bffe17 	ldw	r2,-8(fp)
 2019224:	10800017 	ldw	r2,0(r2)
 2019228:	10800104 	addi	r2,r2,4
 201922c:	10800037 	ldwio	r2,0(r2)
 2019230:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 2019234:	e0bffd17 	ldw	r2,-12(fp)
 2019238:	1081000c 	andi	r2,r2,1024
 201923c:	1005003a 	cmpeq	r2,r2,zero
 2019240:	10000c1e 	bne	r2,zero,2019274 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 2019244:	e0bffe17 	ldw	r2,-8(fp)
 2019248:	10800017 	ldw	r2,0(r2)
 201924c:	11000104 	addi	r4,r2,4
 2019250:	e0bffe17 	ldw	r2,-8(fp)
 2019254:	10800817 	ldw	r2,32(r2)
 2019258:	10810014 	ori	r2,r2,1024
 201925c:	1007883a 	mov	r3,r2
 2019260:	2005883a 	mov	r2,r4
 2019264:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 2019268:	e0bffe17 	ldw	r2,-8(fp)
 201926c:	10000915 	stw	zero,36(r2)
 2019270:	00000a06 	br	201929c <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 2019274:	e0bffe17 	ldw	r2,-8(fp)
 2019278:	10c00917 	ldw	r3,36(r2)
 201927c:	00a00034 	movhi	r2,32768
 2019280:	10bfff04 	addi	r2,r2,-4
 2019284:	10c00536 	bltu	r2,r3,201929c <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 2019288:	e0bffe17 	ldw	r2,-8(fp)
 201928c:	10800917 	ldw	r2,36(r2)
 2019290:	10c00044 	addi	r3,r2,1
 2019294:	e0bffe17 	ldw	r2,-8(fp)
 2019298:	10c00915 	stw	r3,36(r2)
 201929c:	008080b4 	movhi	r2,514
 20192a0:	10be0404 	addi	r2,r2,-2032
 20192a4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 20192a8:	e037883a 	mov	sp,fp
 20192ac:	df000017 	ldw	fp,0(sp)
 20192b0:	dec00104 	addi	sp,sp,4
 20192b4:	f800283a 	ret

020192b8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 20192b8:	defffc04 	addi	sp,sp,-16
 20192bc:	df000315 	stw	fp,12(sp)
 20192c0:	df000304 	addi	fp,sp,12
 20192c4:	e13ffd15 	stw	r4,-12(fp)
 20192c8:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 20192cc:	00000706 	br	20192ec <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 20192d0:	e0bffe17 	ldw	r2,-8(fp)
 20192d4:	1090000c 	andi	r2,r2,16384
 20192d8:	1005003a 	cmpeq	r2,r2,zero
 20192dc:	1000031e 	bne	r2,zero,20192ec <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 20192e0:	00bffd44 	movi	r2,-11
 20192e4:	e0bfff15 	stw	r2,-4(fp)
 20192e8:	00000b06 	br	2019318 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 20192ec:	e0bffd17 	ldw	r2,-12(fp)
 20192f0:	10c00d17 	ldw	r3,52(r2)
 20192f4:	e0bffd17 	ldw	r2,-12(fp)
 20192f8:	10800c17 	ldw	r2,48(r2)
 20192fc:	18800526 	beq	r3,r2,2019314 <altera_avalon_jtag_uart_close+0x5c>
 2019300:	e0bffd17 	ldw	r2,-12(fp)
 2019304:	10c00917 	ldw	r3,36(r2)
 2019308:	e0bffd17 	ldw	r2,-12(fp)
 201930c:	10800117 	ldw	r2,4(r2)
 2019310:	18bfef36 	bltu	r3,r2,20192d0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 2019314:	e03fff15 	stw	zero,-4(fp)
 2019318:	e0bfff17 	ldw	r2,-4(fp)
}
 201931c:	e037883a 	mov	sp,fp
 2019320:	df000017 	ldw	fp,0(sp)
 2019324:	dec00104 	addi	sp,sp,4
 2019328:	f800283a 	ret

0201932c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 201932c:	defff804 	addi	sp,sp,-32
 2019330:	df000715 	stw	fp,28(sp)
 2019334:	df000704 	addi	fp,sp,28
 2019338:	e13ffb15 	stw	r4,-20(fp)
 201933c:	e17ffc15 	stw	r5,-16(fp)
 2019340:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 2019344:	00bff9c4 	movi	r2,-25
 2019348:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 201934c:	e0bffc17 	ldw	r2,-16(fp)
 2019350:	e0bfff15 	stw	r2,-4(fp)
 2019354:	e0ffff17 	ldw	r3,-4(fp)
 2019358:	189a8060 	cmpeqi	r2,r3,27137
 201935c:	1000041e 	bne	r2,zero,2019370 <altera_avalon_jtag_uart_ioctl+0x44>
 2019360:	e0ffff17 	ldw	r3,-4(fp)
 2019364:	189a80a0 	cmpeqi	r2,r3,27138
 2019368:	10001b1e 	bne	r2,zero,20193d8 <altera_avalon_jtag_uart_ioctl+0xac>
 201936c:	00002706 	br	201940c <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 2019370:	e0bffb17 	ldw	r2,-20(fp)
 2019374:	10c00117 	ldw	r3,4(r2)
 2019378:	00a00034 	movhi	r2,32768
 201937c:	10bfffc4 	addi	r2,r2,-1
 2019380:	18802226 	beq	r3,r2,201940c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 2019384:	e0bffd17 	ldw	r2,-12(fp)
 2019388:	10800017 	ldw	r2,0(r2)
 201938c:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 2019390:	e0bff917 	ldw	r2,-28(fp)
 2019394:	10800090 	cmplti	r2,r2,2
 2019398:	1000071e 	bne	r2,zero,20193b8 <altera_avalon_jtag_uart_ioctl+0x8c>
 201939c:	e0fff917 	ldw	r3,-28(fp)
 20193a0:	00a00034 	movhi	r2,32768
 20193a4:	10bfffc4 	addi	r2,r2,-1
 20193a8:	18800326 	beq	r3,r2,20193b8 <altera_avalon_jtag_uart_ioctl+0x8c>
 20193ac:	e0bff917 	ldw	r2,-28(fp)
 20193b0:	e0bffe15 	stw	r2,-8(fp)
 20193b4:	00000306 	br	20193c4 <altera_avalon_jtag_uart_ioctl+0x98>
 20193b8:	00e00034 	movhi	r3,32768
 20193bc:	18ffff84 	addi	r3,r3,-2
 20193c0:	e0fffe15 	stw	r3,-8(fp)
 20193c4:	e0bffb17 	ldw	r2,-20(fp)
 20193c8:	e0fffe17 	ldw	r3,-8(fp)
 20193cc:	10c00115 	stw	r3,4(r2)
      rc = 0;
 20193d0:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 20193d4:	00000d06 	br	201940c <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 20193d8:	e0bffb17 	ldw	r2,-20(fp)
 20193dc:	10c00117 	ldw	r3,4(r2)
 20193e0:	00a00034 	movhi	r2,32768
 20193e4:	10bfffc4 	addi	r2,r2,-1
 20193e8:	18800826 	beq	r3,r2,201940c <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 20193ec:	e13ffd17 	ldw	r4,-12(fp)
 20193f0:	e0bffb17 	ldw	r2,-20(fp)
 20193f4:	10c00917 	ldw	r3,36(r2)
 20193f8:	e0bffb17 	ldw	r2,-20(fp)
 20193fc:	10800117 	ldw	r2,4(r2)
 2019400:	1885803a 	cmpltu	r2,r3,r2
 2019404:	20800015 	stw	r2,0(r4)
      rc = 0;
 2019408:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 201940c:	e0bffa17 	ldw	r2,-24(fp)
}
 2019410:	e037883a 	mov	sp,fp
 2019414:	df000017 	ldw	fp,0(sp)
 2019418:	dec00104 	addi	sp,sp,4
 201941c:	f800283a 	ret

02019420 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 2019420:	defff204 	addi	sp,sp,-56
 2019424:	dfc00d15 	stw	ra,52(sp)
 2019428:	df000c15 	stw	fp,48(sp)
 201942c:	df000c04 	addi	fp,sp,48
 2019430:	e13ffb15 	stw	r4,-20(fp)
 2019434:	e17ffc15 	stw	r5,-16(fp)
 2019438:	e1bffd15 	stw	r6,-12(fp)
 201943c:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 2019440:	e0bffc17 	ldw	r2,-16(fp)
 2019444:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 2019448:	00004806 	br	201956c <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 201944c:	e0bffb17 	ldw	r2,-20(fp)
 2019450:	10800a17 	ldw	r2,40(r2)
 2019454:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 2019458:	e0bffb17 	ldw	r2,-20(fp)
 201945c:	10800b17 	ldw	r2,44(r2)
 2019460:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 2019464:	e0fff717 	ldw	r3,-36(fp)
 2019468:	e0bff617 	ldw	r2,-40(fp)
 201946c:	18800536 	bltu	r3,r2,2019484 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 2019470:	e0bff717 	ldw	r2,-36(fp)
 2019474:	e0fff617 	ldw	r3,-40(fp)
 2019478:	10c5c83a 	sub	r2,r2,r3
 201947c:	e0bff815 	stw	r2,-32(fp)
 2019480:	00000406 	br	2019494 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 2019484:	00820004 	movi	r2,2048
 2019488:	e0fff617 	ldw	r3,-40(fp)
 201948c:	10c5c83a 	sub	r2,r2,r3
 2019490:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 2019494:	e0bff817 	ldw	r2,-32(fp)
 2019498:	1005003a 	cmpeq	r2,r2,zero
 201949c:	10001f1e 	bne	r2,zero,201951c <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 20194a0:	e0fffd17 	ldw	r3,-12(fp)
 20194a4:	e0bff817 	ldw	r2,-32(fp)
 20194a8:	1880022e 	bgeu	r3,r2,20194b4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 20194ac:	e0bffd17 	ldw	r2,-12(fp)
 20194b0:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 20194b4:	e0bffb17 	ldw	r2,-20(fp)
 20194b8:	10c00e04 	addi	r3,r2,56
 20194bc:	e0bff617 	ldw	r2,-40(fp)
 20194c0:	1887883a 	add	r3,r3,r2
 20194c4:	e0bffa17 	ldw	r2,-24(fp)
 20194c8:	1009883a 	mov	r4,r2
 20194cc:	180b883a 	mov	r5,r3
 20194d0:	e1bff817 	ldw	r6,-32(fp)
 20194d4:	2012ef40 	call	2012ef4 <memcpy>
      ptr   += n;
 20194d8:	e0fff817 	ldw	r3,-32(fp)
 20194dc:	e0bffa17 	ldw	r2,-24(fp)
 20194e0:	10c5883a 	add	r2,r2,r3
 20194e4:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 20194e8:	e0fffd17 	ldw	r3,-12(fp)
 20194ec:	e0bff817 	ldw	r2,-32(fp)
 20194f0:	1885c83a 	sub	r2,r3,r2
 20194f4:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 20194f8:	e0fff617 	ldw	r3,-40(fp)
 20194fc:	e0bff817 	ldw	r2,-32(fp)
 2019500:	1885883a 	add	r2,r3,r2
 2019504:	10c1ffcc 	andi	r3,r2,2047
 2019508:	e0bffb17 	ldw	r2,-20(fp)
 201950c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 2019510:	e0bffd17 	ldw	r2,-12(fp)
 2019514:	10800048 	cmpgei	r2,r2,1
 2019518:	103fcc1e 	bne	r2,zero,201944c <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 201951c:	e0fffa17 	ldw	r3,-24(fp)
 2019520:	e0bffc17 	ldw	r2,-16(fp)
 2019524:	1880141e 	bne	r3,r2,2019578 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 2019528:	e0bffe17 	ldw	r2,-8(fp)
 201952c:	1090000c 	andi	r2,r2,16384
 2019530:	1004c03a 	cmpne	r2,r2,zero
 2019534:	1000101e 	bne	r2,zero,2019578 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 2019538:	e0bffb17 	ldw	r2,-20(fp)
 201953c:	10c00a17 	ldw	r3,40(r2)
 2019540:	e0bff717 	ldw	r2,-36(fp)
 2019544:	1880051e 	bne	r3,r2,201955c <altera_avalon_jtag_uart_read+0x13c>
 2019548:	e0bffb17 	ldw	r2,-20(fp)
 201954c:	10c00917 	ldw	r3,36(r2)
 2019550:	e0bffb17 	ldw	r2,-20(fp)
 2019554:	10800117 	ldw	r2,4(r2)
 2019558:	18bff736 	bltu	r3,r2,2019538 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 201955c:	e0bffb17 	ldw	r2,-20(fp)
 2019560:	10c00a17 	ldw	r3,40(r2)
 2019564:	e0bff717 	ldw	r2,-36(fp)
 2019568:	18800326 	beq	r3,r2,2019578 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 201956c:	e0bffd17 	ldw	r2,-12(fp)
 2019570:	10800048 	cmpgei	r2,r2,1
 2019574:	103fb51e 	bne	r2,zero,201944c <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 2019578:	e0fffa17 	ldw	r3,-24(fp)
 201957c:	e0bffc17 	ldw	r2,-16(fp)
 2019580:	18801926 	beq	r3,r2,20195e8 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019584:	0005303a 	rdctl	r2,status
 2019588:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201958c:	e0fff517 	ldw	r3,-44(fp)
 2019590:	00bfff84 	movi	r2,-2
 2019594:	1884703a 	and	r2,r3,r2
 2019598:	1001703a 	wrctl	status,r2
  
  return context;
 201959c:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 20195a0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 20195a4:	e0bffb17 	ldw	r2,-20(fp)
 20195a8:	10800817 	ldw	r2,32(r2)
 20195ac:	10c00054 	ori	r3,r2,1
 20195b0:	e0bffb17 	ldw	r2,-20(fp)
 20195b4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 20195b8:	e0bffb17 	ldw	r2,-20(fp)
 20195bc:	10800017 	ldw	r2,0(r2)
 20195c0:	11000104 	addi	r4,r2,4
 20195c4:	e0bffb17 	ldw	r2,-20(fp)
 20195c8:	10800817 	ldw	r2,32(r2)
 20195cc:	1007883a 	mov	r3,r2
 20195d0:	2005883a 	mov	r2,r4
 20195d4:	10c00035 	stwio	r3,0(r2)
 20195d8:	e0bff917 	ldw	r2,-28(fp)
 20195dc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20195e0:	e0bff417 	ldw	r2,-48(fp)
 20195e4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 20195e8:	e0fffa17 	ldw	r3,-24(fp)
 20195ec:	e0bffc17 	ldw	r2,-16(fp)
 20195f0:	18800526 	beq	r3,r2,2019608 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 20195f4:	e0fffa17 	ldw	r3,-24(fp)
 20195f8:	e0bffc17 	ldw	r2,-16(fp)
 20195fc:	1887c83a 	sub	r3,r3,r2
 2019600:	e0ffff15 	stw	r3,-4(fp)
 2019604:	00000906 	br	201962c <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 2019608:	e0bffe17 	ldw	r2,-8(fp)
 201960c:	1090000c 	andi	r2,r2,16384
 2019610:	1005003a 	cmpeq	r2,r2,zero
 2019614:	1000031e 	bne	r2,zero,2019624 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 2019618:	00bffd44 	movi	r2,-11
 201961c:	e0bfff15 	stw	r2,-4(fp)
 2019620:	00000206 	br	201962c <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 2019624:	00bffec4 	movi	r2,-5
 2019628:	e0bfff15 	stw	r2,-4(fp)
 201962c:	e0bfff17 	ldw	r2,-4(fp)
}
 2019630:	e037883a 	mov	sp,fp
 2019634:	dfc00117 	ldw	ra,4(sp)
 2019638:	df000017 	ldw	fp,0(sp)
 201963c:	dec00204 	addi	sp,sp,8
 2019640:	f800283a 	ret

02019644 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 2019644:	defff204 	addi	sp,sp,-56
 2019648:	dfc00d15 	stw	ra,52(sp)
 201964c:	df000c15 	stw	fp,48(sp)
 2019650:	df000c04 	addi	fp,sp,48
 2019654:	e13ffb15 	stw	r4,-20(fp)
 2019658:	e17ffc15 	stw	r5,-16(fp)
 201965c:	e1bffd15 	stw	r6,-12(fp)
 2019660:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 2019664:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 2019668:	e0bffc17 	ldw	r2,-16(fp)
 201966c:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2019670:	00003a06 	br	201975c <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 2019674:	e0bffb17 	ldw	r2,-20(fp)
 2019678:	10800c17 	ldw	r2,48(r2)
 201967c:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 2019680:	e0bffb17 	ldw	r2,-20(fp)
 2019684:	10800d17 	ldw	r2,52(r2)
 2019688:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 201968c:	e0fffa17 	ldw	r3,-24(fp)
 2019690:	e0bff917 	ldw	r2,-28(fp)
 2019694:	1880062e 	bgeu	r3,r2,20196b0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 2019698:	e0fff917 	ldw	r3,-28(fp)
 201969c:	e0bffa17 	ldw	r2,-24(fp)
 20196a0:	1885c83a 	sub	r2,r3,r2
 20196a4:	10bfffc4 	addi	r2,r2,-1
 20196a8:	e0bff815 	stw	r2,-32(fp)
 20196ac:	00000c06 	br	20196e0 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 20196b0:	e0bff917 	ldw	r2,-28(fp)
 20196b4:	1005003a 	cmpeq	r2,r2,zero
 20196b8:	1000051e 	bne	r2,zero,20196d0 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 20196bc:	00820004 	movi	r2,2048
 20196c0:	e0fffa17 	ldw	r3,-24(fp)
 20196c4:	10c5c83a 	sub	r2,r2,r3
 20196c8:	e0bff815 	stw	r2,-32(fp)
 20196cc:	00000406 	br	20196e0 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 20196d0:	0081ffc4 	movi	r2,2047
 20196d4:	e0fffa17 	ldw	r3,-24(fp)
 20196d8:	10c5c83a 	sub	r2,r2,r3
 20196dc:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 20196e0:	e0bff817 	ldw	r2,-32(fp)
 20196e4:	1005003a 	cmpeq	r2,r2,zero
 20196e8:	10001f1e 	bne	r2,zero,2019768 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 20196ec:	e0fffd17 	ldw	r3,-12(fp)
 20196f0:	e0bff817 	ldw	r2,-32(fp)
 20196f4:	1880022e 	bgeu	r3,r2,2019700 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 20196f8:	e0bffd17 	ldw	r2,-12(fp)
 20196fc:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 2019700:	e0bffb17 	ldw	r2,-20(fp)
 2019704:	10c20e04 	addi	r3,r2,2104
 2019708:	e0bffa17 	ldw	r2,-24(fp)
 201970c:	1885883a 	add	r2,r3,r2
 2019710:	e0fffc17 	ldw	r3,-16(fp)
 2019714:	1009883a 	mov	r4,r2
 2019718:	180b883a 	mov	r5,r3
 201971c:	e1bff817 	ldw	r6,-32(fp)
 2019720:	2012ef40 	call	2012ef4 <memcpy>
      ptr   += n;
 2019724:	e0fff817 	ldw	r3,-32(fp)
 2019728:	e0bffc17 	ldw	r2,-16(fp)
 201972c:	10c5883a 	add	r2,r2,r3
 2019730:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 2019734:	e0fffd17 	ldw	r3,-12(fp)
 2019738:	e0bff817 	ldw	r2,-32(fp)
 201973c:	1885c83a 	sub	r2,r3,r2
 2019740:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2019744:	e0fffa17 	ldw	r3,-24(fp)
 2019748:	e0bff817 	ldw	r2,-32(fp)
 201974c:	1885883a 	add	r2,r3,r2
 2019750:	10c1ffcc 	andi	r3,r2,2047
 2019754:	e0bffb17 	ldw	r2,-20(fp)
 2019758:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 201975c:	e0bffd17 	ldw	r2,-12(fp)
 2019760:	10800048 	cmpgei	r2,r2,1
 2019764:	103fc31e 	bne	r2,zero,2019674 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2019768:	0005303a 	rdctl	r2,status
 201976c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2019770:	e0fff517 	ldw	r3,-44(fp)
 2019774:	00bfff84 	movi	r2,-2
 2019778:	1884703a 	and	r2,r3,r2
 201977c:	1001703a 	wrctl	status,r2
  
  return context;
 2019780:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 2019784:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2019788:	e0bffb17 	ldw	r2,-20(fp)
 201978c:	10800817 	ldw	r2,32(r2)
 2019790:	10c00094 	ori	r3,r2,2
 2019794:	e0bffb17 	ldw	r2,-20(fp)
 2019798:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 201979c:	e0bffb17 	ldw	r2,-20(fp)
 20197a0:	10800017 	ldw	r2,0(r2)
 20197a4:	11000104 	addi	r4,r2,4
 20197a8:	e0bffb17 	ldw	r2,-20(fp)
 20197ac:	10800817 	ldw	r2,32(r2)
 20197b0:	1007883a 	mov	r3,r2
 20197b4:	2005883a 	mov	r2,r4
 20197b8:	10c00035 	stwio	r3,0(r2)
 20197bc:	e0bff717 	ldw	r2,-36(fp)
 20197c0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20197c4:	e0bff417 	ldw	r2,-48(fp)
 20197c8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 20197cc:	e0bffd17 	ldw	r2,-12(fp)
 20197d0:	10800050 	cmplti	r2,r2,1
 20197d4:	1000111e 	bne	r2,zero,201981c <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 20197d8:	e0bffe17 	ldw	r2,-8(fp)
 20197dc:	1090000c 	andi	r2,r2,16384
 20197e0:	1004c03a 	cmpne	r2,r2,zero
 20197e4:	1000101e 	bne	r2,zero,2019828 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 20197e8:	e0bffb17 	ldw	r2,-20(fp)
 20197ec:	10c00d17 	ldw	r3,52(r2)
 20197f0:	e0bff917 	ldw	r2,-28(fp)
 20197f4:	1880051e 	bne	r3,r2,201980c <altera_avalon_jtag_uart_write+0x1c8>
 20197f8:	e0bffb17 	ldw	r2,-20(fp)
 20197fc:	10c00917 	ldw	r3,36(r2)
 2019800:	e0bffb17 	ldw	r2,-20(fp)
 2019804:	10800117 	ldw	r2,4(r2)
 2019808:	18bff736 	bltu	r3,r2,20197e8 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 201980c:	e0bffb17 	ldw	r2,-20(fp)
 2019810:	10c00d17 	ldw	r3,52(r2)
 2019814:	e0bff917 	ldw	r2,-28(fp)
 2019818:	18800326 	beq	r3,r2,2019828 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
 201981c:	e0bffd17 	ldw	r2,-12(fp)
 2019820:	10800048 	cmpgei	r2,r2,1
 2019824:	103fcd1e 	bne	r2,zero,201975c <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 2019828:	e0fffc17 	ldw	r3,-16(fp)
 201982c:	e0bff617 	ldw	r2,-40(fp)
 2019830:	18800526 	beq	r3,r2,2019848 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 2019834:	e0fffc17 	ldw	r3,-16(fp)
 2019838:	e0bff617 	ldw	r2,-40(fp)
 201983c:	1887c83a 	sub	r3,r3,r2
 2019840:	e0ffff15 	stw	r3,-4(fp)
 2019844:	00000906 	br	201986c <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 2019848:	e0bffe17 	ldw	r2,-8(fp)
 201984c:	1090000c 	andi	r2,r2,16384
 2019850:	1005003a 	cmpeq	r2,r2,zero
 2019854:	1000031e 	bne	r2,zero,2019864 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 2019858:	00bffd44 	movi	r2,-11
 201985c:	e0bfff15 	stw	r2,-4(fp)
 2019860:	00000206 	br	201986c <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
 2019864:	00bffec4 	movi	r2,-5
 2019868:	e0bfff15 	stw	r2,-4(fp)
 201986c:	e0bfff17 	ldw	r2,-4(fp)
}
 2019870:	e037883a 	mov	sp,fp
 2019874:	dfc00117 	ldw	ra,4(sp)
 2019878:	df000017 	ldw	fp,0(sp)
 201987c:	dec00204 	addi	sp,sp,8
 2019880:	f800283a 	ret

02019884 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 2019884:	defff904 	addi	sp,sp,-28
 2019888:	dfc00615 	stw	ra,24(sp)
 201988c:	df000515 	stw	fp,20(sp)
 2019890:	df000504 	addi	fp,sp,20
 2019894:	e13ffe15 	stw	r4,-8(fp)
 2019898:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 201989c:	e0bffe17 	ldw	r2,-8(fp)
 20198a0:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 20198a4:	e0bffe17 	ldw	r2,-8(fp)
 20198a8:	10800104 	addi	r2,r2,4
 20198ac:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20198b0:	0005303a 	rdctl	r2,status
 20198b4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20198b8:	e0fffc17 	ldw	r3,-16(fp)
 20198bc:	00bfff84 	movi	r2,-2
 20198c0:	1884703a 	and	r2,r3,r2
 20198c4:	1001703a 	wrctl	status,r2
  
  return context;
 20198c8:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 20198cc:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
 20198d0:	201805c0 	call	201805c <alt_tick>
 20198d4:	e0bffd17 	ldw	r2,-12(fp)
 20198d8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20198dc:	e0bffb17 	ldw	r2,-20(fp)
 20198e0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 20198e4:	e037883a 	mov	sp,fp
 20198e8:	dfc00117 	ldw	ra,4(sp)
 20198ec:	df000017 	ldw	fp,0(sp)
 20198f0:	dec00204 	addi	sp,sp,8
 20198f4:	f800283a 	ret

020198f8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 20198f8:	defff904 	addi	sp,sp,-28
 20198fc:	dfc00615 	stw	ra,24(sp)
 2019900:	df000515 	stw	fp,20(sp)
 2019904:	df000504 	addi	fp,sp,20
 2019908:	e13ffc15 	stw	r4,-16(fp)
 201990c:	e17ffd15 	stw	r5,-12(fp)
 2019910:	e1bffe15 	stw	r6,-8(fp)
 2019914:	e1ffff15 	stw	r7,-4(fp)
 2019918:	e0bfff17 	ldw	r2,-4(fp)
 201991c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 2019920:	008080b4 	movhi	r2,514
 2019924:	10be0404 	addi	r2,r2,-2032
 2019928:	10800017 	ldw	r2,0(r2)
 201992c:	1004c03a 	cmpne	r2,r2,zero
 2019930:	1000041e 	bne	r2,zero,2019944 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 2019934:	00c080b4 	movhi	r3,514
 2019938:	18fe0404 	addi	r3,r3,-2032
 201993c:	e0bffb17 	ldw	r2,-20(fp)
 2019940:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 2019944:	e0bffc17 	ldw	r2,-16(fp)
 2019948:	10800104 	addi	r2,r2,4
 201994c:	1007883a 	mov	r3,r2
 2019950:	008001c4 	movi	r2,7
 2019954:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 2019958:	e13ffe17 	ldw	r4,-8(fp)
 201995c:	e17ffc17 	ldw	r5,-16(fp)
 2019960:	018080b4 	movhi	r6,514
 2019964:	31a62104 	addi	r6,r6,-26492
 2019968:	201aa100 	call	201aa10 <alt_irq_register>
#endif  
}
 201996c:	e037883a 	mov	sp,fp
 2019970:	dfc00117 	ldw	ra,4(sp)
 2019974:	df000017 	ldw	fp,0(sp)
 2019978:	dec00204 	addi	sp,sp,8
 201997c:	f800283a 	ret

02019980 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
 2019980:	defffd04 	addi	sp,sp,-12
 2019984:	df000215 	stw	fp,8(sp)
 2019988:	df000204 	addi	fp,sp,8
 201998c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 2019990:	e0bfff17 	ldw	r2,-4(fp)
 2019994:	10800a17 	ldw	r2,40(r2)
 2019998:	10800104 	addi	r2,r2,4
 201999c:	10800037 	ldwio	r2,0(r2)
 20199a0:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
 20199a4:	e0bffe17 	ldw	r2,-8(fp)
 20199a8:	10800054 	ori	r2,r2,1
 20199ac:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 20199b0:	e0bfff17 	ldw	r2,-4(fp)
 20199b4:	10800a17 	ldw	r2,40(r2)
 20199b8:	10800104 	addi	r2,r2,4
 20199bc:	e0fffe17 	ldw	r3,-8(fp)
 20199c0:	10c00035 	stwio	r3,0(r2)
}
 20199c4:	e037883a 	mov	sp,fp
 20199c8:	df000017 	ldw	fp,0(sp)
 20199cc:	dec00104 	addi	sp,sp,4
 20199d0:	f800283a 	ret

020199d4 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
 20199d4:	defffd04 	addi	sp,sp,-12
 20199d8:	df000215 	stw	fp,8(sp)
 20199dc:	df000204 	addi	fp,sp,8
 20199e0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 20199e4:	e0bfff17 	ldw	r2,-4(fp)
 20199e8:	10800a17 	ldw	r2,40(r2)
 20199ec:	10800104 	addi	r2,r2,4
 20199f0:	10800037 	ldwio	r2,0(r2)
 20199f4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
 20199f8:	e0fffe17 	ldw	r3,-8(fp)
 20199fc:	00bfff84 	movi	r2,-2
 2019a00:	1884703a 	and	r2,r3,r2
 2019a04:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 2019a08:	e0bfff17 	ldw	r2,-4(fp)
 2019a0c:	10800a17 	ldw	r2,40(r2)
 2019a10:	10800104 	addi	r2,r2,4
 2019a14:	e0fffe17 	ldw	r3,-8(fp)
 2019a18:	10c00035 	stwio	r3,0(r2)
}
 2019a1c:	e037883a 	mov	sp,fp
 2019a20:	df000017 	ldw	fp,0(sp)
 2019a24:	dec00104 	addi	sp,sp,4
 2019a28:	f800283a 	ret

02019a2c <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
 2019a2c:	defffd04 	addi	sp,sp,-12
 2019a30:	df000215 	stw	fp,8(sp)
 2019a34:	df000204 	addi	fp,sp,8
 2019a38:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
 2019a3c:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
 2019a40:	e0bfff17 	ldw	r2,-4(fp)
 2019a44:	10800a17 	ldw	r2,40(r2)
 2019a48:	10800084 	addi	r2,r2,2
 2019a4c:	1080002b 	ldhuio	r2,0(r2)
 2019a50:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
 2019a54:	e0bffe0b 	ldhu	r2,-8(fp)
}
 2019a58:	e037883a 	mov	sp,fp
 2019a5c:	df000017 	ldw	fp,0(sp)
 2019a60:	dec00104 	addi	sp,sp,4
 2019a64:	f800283a 	ret

02019a68 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
 2019a68:	defffd04 	addi	sp,sp,-12
 2019a6c:	df000215 	stw	fp,8(sp)
 2019a70:	df000204 	addi	fp,sp,8
 2019a74:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 2019a78:	e0bfff17 	ldw	r2,-4(fp)
 2019a7c:	10800a17 	ldw	r2,40(r2)
 2019a80:	10800104 	addi	r2,r2,4
 2019a84:	10800037 	ldwio	r2,0(r2)
 2019a88:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
 2019a8c:	e0bffe17 	ldw	r2,-8(fp)
 2019a90:	10bfffec 	andhi	r2,r2,65535
 2019a94:	1004d43a 	srli	r2,r2,16
}
 2019a98:	e037883a 	mov	sp,fp
 2019a9c:	df000017 	ldw	fp,0(sp)
 2019aa0:	dec00104 	addi	sp,sp,4
 2019aa4:	f800283a 	ret

02019aa8 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
 2019aa8:	defffc04 	addi	sp,sp,-16
 2019aac:	df000315 	stw	fp,12(sp)
 2019ab0:	df000304 	addi	fp,sp,12
 2019ab4:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
 2019ab8:	e0bffe17 	ldw	r2,-8(fp)
 2019abc:	1080800c 	andi	r2,r2,512
 2019ac0:	1004d27a 	srli	r2,r2,9
 2019ac4:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
 2019ac8:	e0bffd17 	ldw	r2,-12(fp)
 2019acc:	1005003a 	cmpeq	r2,r2,zero
 2019ad0:	1000031e 	bne	r2,zero,2019ae0 <alt_up_rs232_check_parity+0x38>
 2019ad4:	00bfffc4 	movi	r2,-1
 2019ad8:	e0bfff15 	stw	r2,-4(fp)
 2019adc:	00000106 	br	2019ae4 <alt_up_rs232_check_parity+0x3c>
 2019ae0:	e03fff15 	stw	zero,-4(fp)
 2019ae4:	e0bfff17 	ldw	r2,-4(fp)
}
 2019ae8:	e037883a 	mov	sp,fp
 2019aec:	df000017 	ldw	fp,0(sp)
 2019af0:	dec00104 	addi	sp,sp,4
 2019af4:	f800283a 	ret

02019af8 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
 2019af8:	defffc04 	addi	sp,sp,-16
 2019afc:	df000315 	stw	fp,12(sp)
 2019b00:	df000304 	addi	fp,sp,12
 2019b04:	e13ffe15 	stw	r4,-8(fp)
 2019b08:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 2019b0c:	e0bffe17 	ldw	r2,-8(fp)
 2019b10:	10800a17 	ldw	r2,40(r2)
 2019b14:	10800037 	ldwio	r2,0(r2)
 2019b18:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
 2019b1c:	e0bffe17 	ldw	r2,-8(fp)
 2019b20:	10800a17 	ldw	r2,40(r2)
 2019b24:	e0ffff03 	ldbu	r3,-4(fp)
 2019b28:	10c00035 	stwio	r3,0(r2)
	return 0;
 2019b2c:	0005883a 	mov	r2,zero
}
 2019b30:	e037883a 	mov	sp,fp
 2019b34:	df000017 	ldw	fp,0(sp)
 2019b38:	dec00104 	addi	sp,sp,4
 2019b3c:	f800283a 	ret

02019b40 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
 2019b40:	defffa04 	addi	sp,sp,-24
 2019b44:	dfc00515 	stw	ra,20(sp)
 2019b48:	df000415 	stw	fp,16(sp)
 2019b4c:	df000404 	addi	fp,sp,16
 2019b50:	e13ffd15 	stw	r4,-12(fp)
 2019b54:	e17ffe15 	stw	r5,-8(fp)
 2019b58:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 2019b5c:	e0bffd17 	ldw	r2,-12(fp)
 2019b60:	10800a17 	ldw	r2,40(r2)
 2019b64:	10800037 	ldwio	r2,0(r2)
 2019b68:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
 2019b6c:	e0bffc17 	ldw	r2,-16(fp)
 2019b70:	1007883a 	mov	r3,r2
 2019b74:	e0bffe17 	ldw	r2,-8(fp)
 2019b78:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
 2019b7c:	e13ffc17 	ldw	r4,-16(fp)
 2019b80:	2019aa80 	call	2019aa8 <alt_up_rs232_check_parity>
 2019b84:	1007883a 	mov	r3,r2
 2019b88:	e0bfff17 	ldw	r2,-4(fp)
 2019b8c:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
 2019b90:	e0bffc17 	ldw	r2,-16(fp)
 2019b94:	10a0000c 	andi	r2,r2,32768
 2019b98:	1004d3fa 	srli	r2,r2,15
 2019b9c:	10bfffc4 	addi	r2,r2,-1
}
 2019ba0:	e037883a 	mov	sp,fp
 2019ba4:	dfc00117 	ldw	ra,4(sp)
 2019ba8:	df000017 	ldw	fp,0(sp)
 2019bac:	dec00204 	addi	sp,sp,8
 2019bb0:	f800283a 	ret

02019bb4 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
 2019bb4:	defff804 	addi	sp,sp,-32
 2019bb8:	dfc00715 	stw	ra,28(sp)
 2019bbc:	df000615 	stw	fp,24(sp)
 2019bc0:	df000604 	addi	fp,sp,24
 2019bc4:	e13ffd15 	stw	r4,-12(fp)
 2019bc8:	e17ffe15 	stw	r5,-8(fp)
 2019bcc:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 2019bd0:	e0bffd17 	ldw	r2,-12(fp)
 2019bd4:	10800017 	ldw	r2,0(r2)
 2019bd8:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
 2019bdc:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
 2019be0:	00000c06 	br	2019c14 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
 2019be4:	e17ffe17 	ldw	r5,-8(fp)
 2019be8:	e0bffe17 	ldw	r2,-8(fp)
 2019bec:	10800044 	addi	r2,r2,1
 2019bf0:	e0bffe15 	stw	r2,-8(fp)
 2019bf4:	e1bffc04 	addi	r6,fp,-16
 2019bf8:	e13ffb17 	ldw	r4,-20(fp)
 2019bfc:	2019b400 	call	2019b40 <alt_up_rs232_read_data>
 2019c00:	1004c03a 	cmpne	r2,r2,zero
 2019c04:	1000091e 	bne	r2,zero,2019c2c <alt_up_rs232_read_fd+0x78>
			count++;
 2019c08:	e0bffa17 	ldw	r2,-24(fp)
 2019c0c:	10800044 	addi	r2,r2,1
 2019c10:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
 2019c14:	e0bfff17 	ldw	r2,-4(fp)
 2019c18:	10bfffc4 	addi	r2,r2,-1
 2019c1c:	e0bfff15 	stw	r2,-4(fp)
 2019c20:	e0bfff17 	ldw	r2,-4(fp)
 2019c24:	10bfffd8 	cmpnei	r2,r2,-1
 2019c28:	103fee1e 	bne	r2,zero,2019be4 <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
 2019c2c:	e0bffa17 	ldw	r2,-24(fp)
}
 2019c30:	e037883a 	mov	sp,fp
 2019c34:	dfc00117 	ldw	ra,4(sp)
 2019c38:	df000017 	ldw	fp,0(sp)
 2019c3c:	dec00204 	addi	sp,sp,8
 2019c40:	f800283a 	ret

02019c44 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
 2019c44:	defff904 	addi	sp,sp,-28
 2019c48:	dfc00615 	stw	ra,24(sp)
 2019c4c:	df000515 	stw	fp,20(sp)
 2019c50:	df000504 	addi	fp,sp,20
 2019c54:	e13ffd15 	stw	r4,-12(fp)
 2019c58:	e17ffe15 	stw	r5,-8(fp)
 2019c5c:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 2019c60:	e0bffd17 	ldw	r2,-12(fp)
 2019c64:	10800017 	ldw	r2,0(r2)
 2019c68:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
 2019c6c:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
 2019c70:	00000d06 	br	2019ca8 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
 2019c74:	e0bffe17 	ldw	r2,-8(fp)
 2019c78:	10800003 	ldbu	r2,0(r2)
 2019c7c:	11403fcc 	andi	r5,r2,255
 2019c80:	e13ffc17 	ldw	r4,-16(fp)
 2019c84:	2019af80 	call	2019af8 <alt_up_rs232_write_data>
 2019c88:	1004c03a 	cmpne	r2,r2,zero
 2019c8c:	10000c1e 	bne	r2,zero,2019cc0 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
 2019c90:	e0bffb17 	ldw	r2,-20(fp)
 2019c94:	10800044 	addi	r2,r2,1
 2019c98:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
 2019c9c:	e0bffe17 	ldw	r2,-8(fp)
 2019ca0:	10800044 	addi	r2,r2,1
 2019ca4:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
 2019ca8:	e0bfff17 	ldw	r2,-4(fp)
 2019cac:	10bfffc4 	addi	r2,r2,-1
 2019cb0:	e0bfff15 	stw	r2,-4(fp)
 2019cb4:	e0bfff17 	ldw	r2,-4(fp)
 2019cb8:	10bfffd8 	cmpnei	r2,r2,-1
 2019cbc:	103fed1e 	bne	r2,zero,2019c74 <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
 2019cc0:	e0bffb17 	ldw	r2,-20(fp)
}
 2019cc4:	e037883a 	mov	sp,fp
 2019cc8:	dfc00117 	ldw	ra,4(sp)
 2019ccc:	df000017 	ldw	fp,0(sp)
 2019cd0:	dec00204 	addi	sp,sp,8
 2019cd4:	f800283a 	ret

02019cd8 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
 2019cd8:	defffc04 	addi	sp,sp,-16
 2019cdc:	dfc00315 	stw	ra,12(sp)
 2019ce0:	df000215 	stw	fp,8(sp)
 2019ce4:	df000204 	addi	fp,sp,8
 2019ce8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
 2019cec:	e13fff17 	ldw	r4,-4(fp)
 2019cf0:	014080b4 	movhi	r5,514
 2019cf4:	29770004 	addi	r5,r5,-9216
 2019cf8:	201a7400 	call	201a740 <alt_find_dev>
 2019cfc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 2019d00:	e0bffe17 	ldw	r2,-8(fp)
}
 2019d04:	e037883a 	mov	sp,fp
 2019d08:	dfc00117 	ldw	ra,4(sp)
 2019d0c:	df000017 	ldw	fp,0(sp)
 2019d10:	dec00204 	addi	sp,sp,8
 2019d14:	f800283a 	ret

02019d18 <epcs_read_status_register>:
#include "alt_types.h"
#include "epcs_commands.h"
#include "altera_avalon_spi.h"

alt_u8 epcs_read_status_register(alt_u32 base)
{
 2019d18:	defff904 	addi	sp,sp,-28
 2019d1c:	dfc00615 	stw	ra,24(sp)
 2019d20:	df000515 	stw	fp,20(sp)
 2019d24:	df000504 	addi	fp,sp,20
 2019d28:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rdsr = epcs_rdsr;
 2019d2c:	00800144 	movi	r2,5
 2019d30:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 status;
  alt_avalon_spi_command(
 2019d34:	00800044 	movi	r2,1
 2019d38:	d8800015 	stw	r2,0(sp)
 2019d3c:	e0bffe44 	addi	r2,fp,-7
 2019d40:	d8800115 	stw	r2,4(sp)
 2019d44:	d8000215 	stw	zero,8(sp)
 2019d48:	e13fff17 	ldw	r4,-4(fp)
 2019d4c:	000b883a 	mov	r5,zero
 2019d50:	01800044 	movi	r6,1
 2019d54:	e1fffe04 	addi	r7,fp,-8
 2019d58:	201aed40 	call	201aed4 <alt_avalon_spi_command>
    1,
    &status,
    0
  );

  return status;
 2019d5c:	e0bffe43 	ldbu	r2,-7(fp)
 2019d60:	10803fcc 	andi	r2,r2,255
}
 2019d64:	e037883a 	mov	sp,fp
 2019d68:	dfc00117 	ldw	ra,4(sp)
 2019d6c:	df000017 	ldw	fp,0(sp)
 2019d70:	dec00204 	addi	sp,sp,8
 2019d74:	f800283a 	ret

02019d78 <epcs_sector_erase>:
  {
  }
}

void epcs_sector_erase(alt_u32 base, alt_u32 offset, alt_u32 four_bytes_mode)
{
 2019d78:	defff604 	addi	sp,sp,-40
 2019d7c:	dfc00915 	stw	ra,36(sp)
 2019d80:	df000815 	stw	fp,32(sp)
 2019d84:	df000804 	addi	fp,sp,32
 2019d88:	e13ffd15 	stw	r4,-12(fp)
 2019d8c:	e17ffe15 	stw	r5,-8(fp)
 2019d90:	e1bfff15 	stw	r6,-4(fp)
  alt_u8 se[5];
  alt_u8 len;
  
  if(four_bytes_mode)
 2019d94:	e0bfff17 	ldw	r2,-4(fp)
 2019d98:	1005003a 	cmpeq	r2,r2,zero
 2019d9c:	1000121e 	bne	r2,zero,2019de8 <epcs_sector_erase+0x70>
  {
      se[0] = epcs_se;  /* Note: Use epcs_se for Micron EPCS256 */
 2019da0:	00bff604 	movi	r2,-40
 2019da4:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 24) & 0xFF;
 2019da8:	e0bffe17 	ldw	r2,-8(fp)
 2019dac:	1004d63a 	srli	r2,r2,24
 2019db0:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 16) & 0xFF;
 2019db4:	e0bffe17 	ldw	r2,-8(fp)
 2019db8:	1004d43a 	srli	r2,r2,16
 2019dbc:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = (offset >> 8) & 0xFF;
 2019dc0:	e0bffe17 	ldw	r2,-8(fp)
 2019dc4:	1004d23a 	srli	r2,r2,8
 2019dc8:	e0bffc05 	stb	r2,-16(fp)
      se[4] = offset & 0xFF;
 2019dcc:	e0bffe17 	ldw	r2,-8(fp)
 2019dd0:	e0bffc45 	stb	r2,-15(fp)
      len   = 5;
 2019dd4:	00800144 	movi	r2,5
 2019dd8:	e0bffb05 	stb	r2,-20(fp)
      epcs_enter_4_bytes_mode(base);
 2019ddc:	e13ffd17 	ldw	r4,-12(fp)
 2019de0:	201a33c0 	call	201a33c <epcs_enter_4_bytes_mode>
 2019de4:	00000c06 	br	2019e18 <epcs_sector_erase+0xa0>
  }
  else
  {
      se[0] = epcs_se;
 2019de8:	00bff604 	movi	r2,-40
 2019dec:	e0bffb45 	stb	r2,-19(fp)
      se[1] = (offset >> 16) & 0xFF;
 2019df0:	e0bffe17 	ldw	r2,-8(fp)
 2019df4:	1004d43a 	srli	r2,r2,16
 2019df8:	e0bffb85 	stb	r2,-18(fp)
      se[2] = (offset >> 8) & 0xFF;
 2019dfc:	e0bffe17 	ldw	r2,-8(fp)
 2019e00:	1004d23a 	srli	r2,r2,8
 2019e04:	e0bffbc5 	stb	r2,-17(fp)
      se[3] = offset & 0xFF;
 2019e08:	e0bffe17 	ldw	r2,-8(fp)
 2019e0c:	e0bffc05 	stb	r2,-16(fp)
      len   = 4;
 2019e10:	00800104 	movi	r2,4
 2019e14:	e0bffb05 	stb	r2,-20(fp)
  }

  /* Execute a WREN instruction */
  epcs_write_enable(base);
 2019e18:	e13ffd17 	ldw	r4,-12(fp)
 2019e1c:	201a02c0 	call	201a02c <epcs_write_enable>

  alt_avalon_spi_command(
 2019e20:	e1bffb03 	ldbu	r6,-20(fp)
 2019e24:	e1fffb44 	addi	r7,fp,-19
 2019e28:	d8000015 	stw	zero,0(sp)
 2019e2c:	d8000115 	stw	zero,4(sp)
 2019e30:	d8000215 	stw	zero,8(sp)
 2019e34:	e13ffd17 	ldw	r4,-12(fp)
 2019e38:	000b883a 	mov	r5,zero
 2019e3c:	201aed40 	call	201aed4 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 2019e40:	e13ffd17 	ldw	r4,-12(fp)
 2019e44:	2019e700 	call	2019e70 <epcs_await_wip_released>

  if(four_bytes_mode)
 2019e48:	e0bfff17 	ldw	r2,-4(fp)
 2019e4c:	1005003a 	cmpeq	r2,r2,zero
 2019e50:	1000021e 	bne	r2,zero,2019e5c <epcs_sector_erase+0xe4>
  {
    epcs_exit_4_bytes_mode(base);
 2019e54:	e13ffd17 	ldw	r4,-12(fp)
 2019e58:	201a3940 	call	201a394 <epcs_exit_4_bytes_mode>
  }
}
 2019e5c:	e037883a 	mov	sp,fp
 2019e60:	dfc00117 	ldw	ra,4(sp)
 2019e64:	df000017 	ldw	fp,0(sp)
 2019e68:	dec00204 	addi	sp,sp,8
 2019e6c:	f800283a 	ret

02019e70 <epcs_await_wip_released>:
{
  return epcs_read_status_register(base) & 1;
}

static ALT_INLINE void epcs_await_wip_released(alt_u32 base)
{
 2019e70:	defffd04 	addi	sp,sp,-12
 2019e74:	dfc00215 	stw	ra,8(sp)
 2019e78:	df000115 	stw	fp,4(sp)
 2019e7c:	df000104 	addi	fp,sp,4
 2019e80:	e13fff15 	stw	r4,-4(fp)
  /* Wait until the WIP bit goes low. */
  while (epcs_test_wip(base))
 2019e84:	e13fff17 	ldw	r4,-4(fp)
 2019e88:	2019ea80 	call	2019ea8 <epcs_test_wip>
 2019e8c:	1004c03a 	cmpne	r2,r2,zero
 2019e90:	103ffc1e 	bne	r2,zero,2019e84 <epcs_await_wip_released+0x14>
  {
  }
}
 2019e94:	e037883a 	mov	sp,fp
 2019e98:	dfc00117 	ldw	ra,4(sp)
 2019e9c:	df000017 	ldw	fp,0(sp)
 2019ea0:	dec00204 	addi	sp,sp,8
 2019ea4:	f800283a 	ret

02019ea8 <epcs_test_wip>:

  return status;
}

static ALT_INLINE int epcs_test_wip(alt_u32 base)
{
 2019ea8:	defffd04 	addi	sp,sp,-12
 2019eac:	dfc00215 	stw	ra,8(sp)
 2019eb0:	df000115 	stw	fp,4(sp)
 2019eb4:	df000104 	addi	fp,sp,4
 2019eb8:	e13fff15 	stw	r4,-4(fp)
  return epcs_read_status_register(base) & 1;
 2019ebc:	e13fff17 	ldw	r4,-4(fp)
 2019ec0:	2019d180 	call	2019d18 <epcs_read_status_register>
 2019ec4:	10803fcc 	andi	r2,r2,255
 2019ec8:	1080004c 	andi	r2,r2,1
}
 2019ecc:	e037883a 	mov	sp,fp
 2019ed0:	dfc00117 	ldw	ra,4(sp)
 2019ed4:	df000017 	ldw	fp,0(sp)
 2019ed8:	dec00204 	addi	sp,sp,8
 2019edc:	f800283a 	ret

02019ee0 <epcs_read_buffer>:
  }
}

alt_32 epcs_read_buffer(alt_u32 base, int offset, alt_u8 *dest_addr, int length,
                        alt_u32 four_bytes_mode)
{
 2019ee0:	defff404 	addi	sp,sp,-48
 2019ee4:	dfc00b15 	stw	ra,44(sp)
 2019ee8:	df000a15 	stw	fp,40(sp)
 2019eec:	df000a04 	addi	fp,sp,40
 2019ef0:	e13ffc15 	stw	r4,-16(fp)
 2019ef4:	e17ffd15 	stw	r5,-12(fp)
 2019ef8:	e1bffe15 	stw	r6,-8(fp)
 2019efc:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 read_command[5];
  alt_u32 cmd_len;

  read_command[0] = epcs_read;
 2019f00:	008000c4 	movi	r2,3
 2019f04:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 2019f08:	e0800217 	ldw	r2,8(fp)
 2019f0c:	1005003a 	cmpeq	r2,r2,zero
 2019f10:	10001c1e 	bne	r2,zero,2019f84 <epcs_read_buffer+0xa4>
  {
        read_command[1] = (offset >> 24) & 0xFF;
 2019f14:	e0bffd17 	ldw	r2,-12(fp)
 2019f18:	1005d63a 	srai	r2,r2,24
 2019f1c:	1007883a 	mov	r3,r2
 2019f20:	00bfffc4 	movi	r2,-1
 2019f24:	1884703a 	and	r2,r3,r2
 2019f28:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 16) & 0xFF;
 2019f2c:	e0bffd17 	ldw	r2,-12(fp)
 2019f30:	1005d43a 	srai	r2,r2,16
 2019f34:	1007883a 	mov	r3,r2
 2019f38:	00bfffc4 	movi	r2,-1
 2019f3c:	1884703a 	and	r2,r3,r2
 2019f40:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = (offset >> 8) & 0xFF;
 2019f44:	e0bffd17 	ldw	r2,-12(fp)
 2019f48:	1005d23a 	srai	r2,r2,8
 2019f4c:	1007883a 	mov	r3,r2
 2019f50:	00bfffc4 	movi	r2,-1
 2019f54:	1884703a 	and	r2,r3,r2
 2019f58:	e0bffac5 	stb	r2,-21(fp)
        read_command[4] = offset & 0xFF;
 2019f5c:	e0bffd17 	ldw	r2,-12(fp)
 2019f60:	1007883a 	mov	r3,r2
 2019f64:	00bfffc4 	movi	r2,-1
 2019f68:	1884703a 	and	r2,r3,r2
 2019f6c:	e0bffb05 	stb	r2,-20(fp)
        cmd_len = 5;
 2019f70:	00800144 	movi	r2,5
 2019f74:	e0bff915 	stw	r2,-28(fp)
        epcs_enter_4_bytes_mode(base);
 2019f78:	e13ffc17 	ldw	r4,-16(fp)
 2019f7c:	201a33c0 	call	201a33c <epcs_enter_4_bytes_mode>
 2019f80:	00001306 	br	2019fd0 <epcs_read_buffer+0xf0>
  }
  else
  {
        read_command[1] = (offset >> 16) & 0xFF;
 2019f84:	e0bffd17 	ldw	r2,-12(fp)
 2019f88:	1005d43a 	srai	r2,r2,16
 2019f8c:	1007883a 	mov	r3,r2
 2019f90:	00bfffc4 	movi	r2,-1
 2019f94:	1884703a 	and	r2,r3,r2
 2019f98:	e0bffa45 	stb	r2,-23(fp)
        read_command[2] = (offset >> 8) & 0xFF;
 2019f9c:	e0bffd17 	ldw	r2,-12(fp)
 2019fa0:	1005d23a 	srai	r2,r2,8
 2019fa4:	1007883a 	mov	r3,r2
 2019fa8:	00bfffc4 	movi	r2,-1
 2019fac:	1884703a 	and	r2,r3,r2
 2019fb0:	e0bffa85 	stb	r2,-22(fp)
        read_command[3] = offset & 0xFF;
 2019fb4:	e0bffd17 	ldw	r2,-12(fp)
 2019fb8:	1007883a 	mov	r3,r2
 2019fbc:	00bfffc4 	movi	r2,-1
 2019fc0:	1884703a 	and	r2,r3,r2
 2019fc4:	e0bffac5 	stb	r2,-21(fp)
        cmd_len = 4;
 2019fc8:	00800104 	movi	r2,4
 2019fcc:	e0bff915 	stw	r2,-28(fp)
  }

  epcs_await_wip_released(base);
 2019fd0:	e13ffc17 	ldw	r4,-16(fp)
 2019fd4:	2019e700 	call	2019e70 <epcs_await_wip_released>

  alt_avalon_spi_command(
 2019fd8:	e0bfff17 	ldw	r2,-4(fp)
 2019fdc:	e1fffa04 	addi	r7,fp,-24
 2019fe0:	d8800015 	stw	r2,0(sp)
 2019fe4:	e0bffe17 	ldw	r2,-8(fp)
 2019fe8:	d8800115 	stw	r2,4(sp)
 2019fec:	d8000215 	stw	zero,8(sp)
 2019ff0:	e13ffc17 	ldw	r4,-16(fp)
 2019ff4:	000b883a 	mov	r5,zero
 2019ff8:	e1bff917 	ldw	r6,-28(fp)
 2019ffc:	201aed40 	call	201aed4 <alt_avalon_spi_command>
    length,
    (alt_u8*)dest_addr,
    0
  );

  if(four_bytes_mode)
 201a000:	e0800217 	ldw	r2,8(fp)
 201a004:	1005003a 	cmpeq	r2,r2,zero
 201a008:	1000021e 	bne	r2,zero,201a014 <epcs_read_buffer+0x134>
  {
    epcs_exit_4_bytes_mode(base);
 201a00c:	e13ffc17 	ldw	r4,-16(fp)
 201a010:	201a3940 	call	201a394 <epcs_exit_4_bytes_mode>
  }

  return length;
 201a014:	e0bfff17 	ldw	r2,-4(fp)
}
 201a018:	e037883a 	mov	sp,fp
 201a01c:	dfc00117 	ldw	ra,4(sp)
 201a020:	df000017 	ldw	fp,0(sp)
 201a024:	dec00204 	addi	sp,sp,8
 201a028:	f800283a 	ret

0201a02c <epcs_write_enable>:

void epcs_write_enable(alt_u32 base)
{
 201a02c:	defff904 	addi	sp,sp,-28
 201a030:	dfc00615 	stw	ra,24(sp)
 201a034:	df000515 	stw	fp,20(sp)
 201a038:	df000504 	addi	fp,sp,20
 201a03c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 wren = epcs_wren;
 201a040:	00800184 	movi	r2,6
 201a044:	e0bffe05 	stb	r2,-8(fp)
  alt_avalon_spi_command(
 201a048:	d8000015 	stw	zero,0(sp)
 201a04c:	d8000115 	stw	zero,4(sp)
 201a050:	d8000215 	stw	zero,8(sp)
 201a054:	e13fff17 	ldw	r4,-4(fp)
 201a058:	000b883a 	mov	r5,zero
 201a05c:	01800044 	movi	r6,1
 201a060:	e1fffe04 	addi	r7,fp,-8
 201a064:	201aed40 	call	201aed4 <alt_avalon_spi_command>
    &wren,
    0,
    (alt_u8*)0,
    0
  );
}
 201a068:	e037883a 	mov	sp,fp
 201a06c:	dfc00117 	ldw	ra,4(sp)
 201a070:	df000017 	ldw	fp,0(sp)
 201a074:	dec00204 	addi	sp,sp,8
 201a078:	f800283a 	ret

0201a07c <epcs_write_status_register>:

void epcs_write_status_register(alt_u32 base, alt_u8 value)
{
 201a07c:	defff804 	addi	sp,sp,-32
 201a080:	dfc00715 	stw	ra,28(sp)
 201a084:	df000615 	stw	fp,24(sp)
 201a088:	df000604 	addi	fp,sp,24
 201a08c:	e13ffe15 	stw	r4,-8(fp)
 201a090:	e17fff05 	stb	r5,-4(fp)
  alt_u8 wrsr[2];
  
  wrsr[0] = epcs_wrsr;
 201a094:	00800044 	movi	r2,1
 201a098:	e0bffd05 	stb	r2,-12(fp)
  wrsr[1] = value;
 201a09c:	e0bfff03 	ldbu	r2,-4(fp)
 201a0a0:	e0bffd45 	stb	r2,-11(fp)

  alt_avalon_spi_command(
 201a0a4:	d8000015 	stw	zero,0(sp)
 201a0a8:	d8000115 	stw	zero,4(sp)
 201a0ac:	d8000215 	stw	zero,8(sp)
 201a0b0:	e13ffe17 	ldw	r4,-8(fp)
 201a0b4:	000b883a 	mov	r5,zero
 201a0b8:	01800084 	movi	r6,2
 201a0bc:	e1fffd04 	addi	r7,fp,-12
 201a0c0:	201aed40 	call	201aed4 <alt_avalon_spi_command>
    0,
    (alt_u8*)0,
    0
  );

  epcs_await_wip_released(base);
 201a0c4:	e13ffe17 	ldw	r4,-8(fp)
 201a0c8:	2019e700 	call	2019e70 <epcs_await_wip_released>
}
 201a0cc:	e037883a 	mov	sp,fp
 201a0d0:	dfc00117 	ldw	ra,4(sp)
 201a0d4:	df000017 	ldw	fp,0(sp)
 201a0d8:	dec00204 	addi	sp,sp,8
 201a0dc:	f800283a 	ret

0201a0e0 <epcs_write_buffer>:

/* Write a partial or full page, assuming that page has been erased */
alt_32 epcs_write_buffer(alt_u32 base, int offset, const alt_u8* src_addr, 
                         int length, alt_u32 four_bytes_mode)
{
 201a0e0:	defff404 	addi	sp,sp,-48
 201a0e4:	dfc00b15 	stw	ra,44(sp)
 201a0e8:	df000a15 	stw	fp,40(sp)
 201a0ec:	df000a04 	addi	fp,sp,40
 201a0f0:	e13ffc15 	stw	r4,-16(fp)
 201a0f4:	e17ffd15 	stw	r5,-12(fp)
 201a0f8:	e1bffe15 	stw	r6,-8(fp)
 201a0fc:	e1ffff15 	stw	r7,-4(fp)
  alt_u8 pp[5];
  alt_u32 cmd_len;
  
  pp[0] = epcs_pp;
 201a100:	00800084 	movi	r2,2
 201a104:	e0bffa05 	stb	r2,-24(fp)
  
  if(four_bytes_mode)
 201a108:	e0800217 	ldw	r2,8(fp)
 201a10c:	1005003a 	cmpeq	r2,r2,zero
 201a110:	10001c1e 	bne	r2,zero,201a184 <epcs_write_buffer+0xa4>
  {
      pp[1] = (offset >> 24) & 0xFF;
 201a114:	e0bffd17 	ldw	r2,-12(fp)
 201a118:	1005d63a 	srai	r2,r2,24
 201a11c:	1007883a 	mov	r3,r2
 201a120:	00bfffc4 	movi	r2,-1
 201a124:	1884703a 	and	r2,r3,r2
 201a128:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 16) & 0xFF;
 201a12c:	e0bffd17 	ldw	r2,-12(fp)
 201a130:	1005d43a 	srai	r2,r2,16
 201a134:	1007883a 	mov	r3,r2
 201a138:	00bfffc4 	movi	r2,-1
 201a13c:	1884703a 	and	r2,r3,r2
 201a140:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = (offset >> 8) & 0xFF;
 201a144:	e0bffd17 	ldw	r2,-12(fp)
 201a148:	1005d23a 	srai	r2,r2,8
 201a14c:	1007883a 	mov	r3,r2
 201a150:	00bfffc4 	movi	r2,-1
 201a154:	1884703a 	and	r2,r3,r2
 201a158:	e0bffac5 	stb	r2,-21(fp)
      pp[4] = offset & 0xFF;
 201a15c:	e0bffd17 	ldw	r2,-12(fp)
 201a160:	1007883a 	mov	r3,r2
 201a164:	00bfffc4 	movi	r2,-1
 201a168:	1884703a 	and	r2,r3,r2
 201a16c:	e0bffb05 	stb	r2,-20(fp)
      cmd_len = 5;
 201a170:	00800144 	movi	r2,5
 201a174:	e0bff915 	stw	r2,-28(fp)
      epcs_enter_4_bytes_mode(base);
 201a178:	e13ffc17 	ldw	r4,-16(fp)
 201a17c:	201a33c0 	call	201a33c <epcs_enter_4_bytes_mode>
 201a180:	00001306 	br	201a1d0 <epcs_write_buffer+0xf0>
  }
  else
  {
      pp[1] = (offset >> 16) & 0xFF;
 201a184:	e0bffd17 	ldw	r2,-12(fp)
 201a188:	1005d43a 	srai	r2,r2,16
 201a18c:	1007883a 	mov	r3,r2
 201a190:	00bfffc4 	movi	r2,-1
 201a194:	1884703a 	and	r2,r3,r2
 201a198:	e0bffa45 	stb	r2,-23(fp)
      pp[2] = (offset >> 8) & 0xFF;
 201a19c:	e0bffd17 	ldw	r2,-12(fp)
 201a1a0:	1005d23a 	srai	r2,r2,8
 201a1a4:	1007883a 	mov	r3,r2
 201a1a8:	00bfffc4 	movi	r2,-1
 201a1ac:	1884703a 	and	r2,r3,r2
 201a1b0:	e0bffa85 	stb	r2,-22(fp)
      pp[3] = offset & 0xFF;
 201a1b4:	e0bffd17 	ldw	r2,-12(fp)
 201a1b8:	1007883a 	mov	r3,r2
 201a1bc:	00bfffc4 	movi	r2,-1
 201a1c0:	1884703a 	and	r2,r3,r2
 201a1c4:	e0bffac5 	stb	r2,-21(fp)
      cmd_len = 4;
 201a1c8:	00800104 	movi	r2,4
 201a1cc:	e0bff915 	stw	r2,-28(fp)
  }

  /* First, WREN */
  epcs_write_enable(base);
 201a1d0:	e13ffc17 	ldw	r4,-16(fp)
 201a1d4:	201a02c0 	call	201a02c <epcs_write_enable>

  /* Send the PP command */
  alt_avalon_spi_command(
 201a1d8:	e1fffa04 	addi	r7,fp,-24
 201a1dc:	d8000015 	stw	zero,0(sp)
 201a1e0:	d8000115 	stw	zero,4(sp)
 201a1e4:	00800044 	movi	r2,1
 201a1e8:	d8800215 	stw	r2,8(sp)
 201a1ec:	e13ffc17 	ldw	r4,-16(fp)
 201a1f0:	000b883a 	mov	r5,zero
 201a1f4:	e1bff917 	ldw	r6,-28(fp)
 201a1f8:	201aed40 	call	201aed4 <alt_avalon_spi_command>
    (alt_u8*)0,
    ALT_AVALON_SPI_COMMAND_MERGE
  );

  /* Send the user's buffer */
  alt_avalon_spi_command(
 201a1fc:	e1bfff17 	ldw	r6,-4(fp)
 201a200:	d8000015 	stw	zero,0(sp)
 201a204:	d8000115 	stw	zero,4(sp)
 201a208:	d8000215 	stw	zero,8(sp)
 201a20c:	e13ffc17 	ldw	r4,-16(fp)
 201a210:	000b883a 	mov	r5,zero
 201a214:	e1fffe17 	ldw	r7,-8(fp)
 201a218:	201aed40 	call	201aed4 <alt_avalon_spi_command>
   * if the user's going to go off and ignore the flash for
   * a while, its writes could occur in parallel with user code
   * execution.  Unfortunately, I have to guard all reads/writes
   * with wip-tests, to make that happen.
   */
  epcs_await_wip_released(base);
 201a21c:	e13ffc17 	ldw	r4,-16(fp)
 201a220:	2019e700 	call	2019e70 <epcs_await_wip_released>

  if(four_bytes_mode)
 201a224:	e0800217 	ldw	r2,8(fp)
 201a228:	1005003a 	cmpeq	r2,r2,zero
 201a22c:	1000021e 	bne	r2,zero,201a238 <epcs_write_buffer+0x158>
  {
    epcs_exit_4_bytes_mode(base);
 201a230:	e13ffc17 	ldw	r4,-16(fp)
 201a234:	201a3940 	call	201a394 <epcs_exit_4_bytes_mode>
  }

  return length;
 201a238:	e0bfff17 	ldw	r2,-4(fp)
}
 201a23c:	e037883a 	mov	sp,fp
 201a240:	dfc00117 	ldw	ra,4(sp)
 201a244:	df000017 	ldw	fp,0(sp)
 201a248:	dec00204 	addi	sp,sp,8
 201a24c:	f800283a 	ret

0201a250 <epcs_read_electronic_signature>:


alt_u8 epcs_read_electronic_signature(alt_u32 base)
{
 201a250:	defff804 	addi	sp,sp,-32
 201a254:	dfc00715 	stw	ra,28(sp)
 201a258:	df000615 	stw	fp,24(sp)
 201a25c:	df000604 	addi	fp,sp,24
 201a260:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 res_cmd[] = {epcs_res, 0, 0, 0};
 201a264:	00bfeac4 	movi	r2,-85
 201a268:	e0bffd05 	stb	r2,-12(fp)
 201a26c:	e03ffd45 	stb	zero,-11(fp)
 201a270:	e03ffd85 	stb	zero,-10(fp)
 201a274:	e03ffdc5 	stb	zero,-9(fp)
  alt_u8 res;

  alt_avalon_spi_command(
 201a278:	00800044 	movi	r2,1
 201a27c:	d8800015 	stw	r2,0(sp)
 201a280:	e0bffe04 	addi	r2,fp,-8
 201a284:	d8800115 	stw	r2,4(sp)
 201a288:	d8000215 	stw	zero,8(sp)
 201a28c:	e13fff17 	ldw	r4,-4(fp)
 201a290:	000b883a 	mov	r5,zero
 201a294:	01800104 	movi	r6,4
 201a298:	e1fffd04 	addi	r7,fp,-12
 201a29c:	201aed40 	call	201aed4 <alt_avalon_spi_command>
    1,
    &res,
    0
  );

  return res;
 201a2a0:	e0bffe03 	ldbu	r2,-8(fp)
 201a2a4:	10803fcc 	andi	r2,r2,255
}
 201a2a8:	e037883a 	mov	sp,fp
 201a2ac:	dfc00117 	ldw	ra,4(sp)
 201a2b0:	df000017 	ldw	fp,0(sp)
 201a2b4:	dec00204 	addi	sp,sp,8
 201a2b8:	f800283a 	ret

0201a2bc <epcs_read_device_id>:

alt_u32 epcs_read_device_id(alt_u32 base)
{
 201a2bc:	defff904 	addi	sp,sp,-28
 201a2c0:	dfc00615 	stw	ra,24(sp)
 201a2c4:	df000515 	stw	fp,20(sp)
 201a2c8:	df000504 	addi	fp,sp,20
 201a2cc:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 rd_id_cmd[] = {epcs_rdid};
 201a2d0:	00bfe7c4 	movi	r2,-97
 201a2d4:	e0bffe05 	stb	r2,-8(fp)
  alt_u8 id[3];

  alt_avalon_spi_command(
 201a2d8:	008000c4 	movi	r2,3
 201a2dc:	d8800015 	stw	r2,0(sp)
 201a2e0:	e0bffe44 	addi	r2,fp,-7
 201a2e4:	d8800115 	stw	r2,4(sp)
 201a2e8:	d8000215 	stw	zero,8(sp)
 201a2ec:	e13fff17 	ldw	r4,-4(fp)
 201a2f0:	000b883a 	mov	r5,zero
 201a2f4:	01800044 	movi	r6,1
 201a2f8:	e1fffe04 	addi	r7,fp,-8
 201a2fc:	201aed40 	call	201aed4 <alt_avalon_spi_command>
    3,
    id,
    0
  );

  return (alt_u32) ((id[0] << 16) | (id[1] << 8) | id[2]);
 201a300:	e0bffe43 	ldbu	r2,-7(fp)
 201a304:	10803fcc 	andi	r2,r2,255
 201a308:	1006943a 	slli	r3,r2,16
 201a30c:	e0bffe83 	ldbu	r2,-6(fp)
 201a310:	10803fcc 	andi	r2,r2,255
 201a314:	1004923a 	slli	r2,r2,8
 201a318:	1886b03a 	or	r3,r3,r2
 201a31c:	e0bffec3 	ldbu	r2,-5(fp)
 201a320:	10803fcc 	andi	r2,r2,255
 201a324:	1884b03a 	or	r2,r3,r2
}
 201a328:	e037883a 	mov	sp,fp
 201a32c:	dfc00117 	ldw	ra,4(sp)
 201a330:	df000017 	ldw	fp,0(sp)
 201a334:	dec00204 	addi	sp,sp,8
 201a338:	f800283a 	ret

0201a33c <epcs_enter_4_bytes_mode>:

void epcs_enter_4_bytes_mode(alt_u32 base)
{
 201a33c:	defff904 	addi	sp,sp,-28
 201a340:	dfc00615 	stw	ra,24(sp)
 201a344:	df000515 	stw	fp,20(sp)
 201a348:	df000504 	addi	fp,sp,20
 201a34c:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 en4b_cmd = epcs_en4b;
 201a350:	00bfedc4 	movi	r2,-73
 201a354:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 201a358:	e13fff17 	ldw	r4,-4(fp)
 201a35c:	201a02c0 	call	201a02c <epcs_write_enable>

  alt_avalon_spi_command(
 201a360:	d8000015 	stw	zero,0(sp)
 201a364:	d8000115 	stw	zero,4(sp)
 201a368:	d8000215 	stw	zero,8(sp)
 201a36c:	e13fff17 	ldw	r4,-4(fp)
 201a370:	000b883a 	mov	r5,zero
 201a374:	01800044 	movi	r6,1
 201a378:	e1fffe04 	addi	r7,fp,-8
 201a37c:	201aed40 	call	201aed4 <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
 201a380:	e037883a 	mov	sp,fp
 201a384:	dfc00117 	ldw	ra,4(sp)
 201a388:	df000017 	ldw	fp,0(sp)
 201a38c:	dec00204 	addi	sp,sp,8
 201a390:	f800283a 	ret

0201a394 <epcs_exit_4_bytes_mode>:

void epcs_exit_4_bytes_mode(alt_u32 base)
{
 201a394:	defff904 	addi	sp,sp,-28
 201a398:	dfc00615 	stw	ra,24(sp)
 201a39c:	df000515 	stw	fp,20(sp)
 201a3a0:	df000504 	addi	fp,sp,20
 201a3a4:	e13fff15 	stw	r4,-4(fp)
  const alt_u8 exit4b_cmd = epcs_dis4b;
 201a3a8:	00bffa44 	movi	r2,-23
 201a3ac:	e0bffe05 	stb	r2,-8(fp)

  /* First, WREN */
  epcs_write_enable(base);
 201a3b0:	e13fff17 	ldw	r4,-4(fp)
 201a3b4:	201a02c0 	call	201a02c <epcs_write_enable>

  alt_avalon_spi_command(
 201a3b8:	d8000015 	stw	zero,0(sp)
 201a3bc:	d8000115 	stw	zero,4(sp)
 201a3c0:	d8000215 	stw	zero,8(sp)
 201a3c4:	e13fff17 	ldw	r4,-4(fp)
 201a3c8:	000b883a 	mov	r5,zero
 201a3cc:	01800044 	movi	r6,1
 201a3d0:	e1fffe04 	addi	r7,fp,-8
 201a3d4:	201aed40 	call	201aed4 <alt_avalon_spi_command>
    (alt_u8*)0,
    0
  );

  return;
}
 201a3d8:	e037883a 	mov	sp,fp
 201a3dc:	dfc00117 	ldw	ra,4(sp)
 201a3e0:	df000017 	ldw	fp,0(sp)
 201a3e4:	dec00204 	addi	sp,sp,8
 201a3e8:	f800283a 	ret

0201a3ec <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 201a3ec:	defffa04 	addi	sp,sp,-24
 201a3f0:	dfc00515 	stw	ra,20(sp)
 201a3f4:	df000415 	stw	fp,16(sp)
 201a3f8:	df000404 	addi	fp,sp,16
 201a3fc:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 201a400:	00800244 	movi	r2,9
 201a404:	e0bffc15 	stw	r2,-16(fp)
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 201a408:	e13ffc17 	ldw	r4,-16(fp)
 201a40c:	014003f4 	movhi	r5,15
 201a410:	29509004 	addi	r5,r5,16960
 201a414:	200d0cc0 	call	200d0cc <__mulsi3>
 201a418:	100b883a 	mov	r5,r2
 201a41c:	01017db4 	movhi	r4,1526
 201a420:	21384004 	addi	r4,r4,-7936
 201a424:	200d0bc0 	call	200d0bc <__udivsi3>
 201a428:	100b883a 	mov	r5,r2
 201a42c:	01200034 	movhi	r4,32768
 201a430:	213fffc4 	addi	r4,r4,-1
 201a434:	200d0bc0 	call	200d0bc <__udivsi3>
 201a438:	100b883a 	mov	r5,r2
 201a43c:	e13fff17 	ldw	r4,-4(fp)
 201a440:	200d0bc0 	call	200d0bc <__udivsi3>
 201a444:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 201a448:	e0bffd17 	ldw	r2,-12(fp)
 201a44c:	1005003a 	cmpeq	r2,r2,zero
 201a450:	10002a1e 	bne	r2,zero,201a4fc <alt_busy_sleep+0x110>
  {
    for(i=0;i<big_loops;i++)
 201a454:	e03ffe15 	stw	zero,-8(fp)
 201a458:	00001706 	br	201a4b8 <alt_busy_sleep+0xcc>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 201a45c:	00a00034 	movhi	r2,32768
 201a460:	10bfffc4 	addi	r2,r2,-1
 201a464:	10bfffc4 	addi	r2,r2,-1
 201a468:	103ffe1e 	bne	r2,zero,201a464 <alt_busy_sleep+0x78>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 201a46c:	e13ffc17 	ldw	r4,-16(fp)
 201a470:	014003f4 	movhi	r5,15
 201a474:	29509004 	addi	r5,r5,16960
 201a478:	200d0cc0 	call	200d0cc <__mulsi3>
 201a47c:	100b883a 	mov	r5,r2
 201a480:	01017db4 	movhi	r4,1526
 201a484:	21384004 	addi	r4,r4,-7936
 201a488:	200d0bc0 	call	200d0bc <__udivsi3>
 201a48c:	100b883a 	mov	r5,r2
 201a490:	01200034 	movhi	r4,32768
 201a494:	213fffc4 	addi	r4,r4,-1
 201a498:	200d0bc0 	call	200d0bc <__udivsi3>
 201a49c:	1007883a 	mov	r3,r2
 201a4a0:	e0bfff17 	ldw	r2,-4(fp)
 201a4a4:	10c5c83a 	sub	r2,r2,r3
 201a4a8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 201a4ac:	e0bffe17 	ldw	r2,-8(fp)
 201a4b0:	10800044 	addi	r2,r2,1
 201a4b4:	e0bffe15 	stw	r2,-8(fp)
 201a4b8:	e0fffe17 	ldw	r3,-8(fp)
 201a4bc:	e0bffd17 	ldw	r2,-12(fp)
 201a4c0:	18bfe616 	blt	r3,r2,201a45c <alt_busy_sleep+0x70>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 201a4c4:	e13ffc17 	ldw	r4,-16(fp)
 201a4c8:	014003f4 	movhi	r5,15
 201a4cc:	29509004 	addi	r5,r5,16960
 201a4d0:	200d0cc0 	call	200d0cc <__mulsi3>
 201a4d4:	100b883a 	mov	r5,r2
 201a4d8:	01017db4 	movhi	r4,1526
 201a4dc:	21384004 	addi	r4,r4,-7936
 201a4e0:	200d0bc0 	call	200d0bc <__udivsi3>
 201a4e4:	1009883a 	mov	r4,r2
 201a4e8:	e17fff17 	ldw	r5,-4(fp)
 201a4ec:	200d0cc0 	call	200d0cc <__mulsi3>
 201a4f0:	10bfffc4 	addi	r2,r2,-1
 201a4f4:	103ffe1e 	bne	r2,zero,201a4f0 <alt_busy_sleep+0x104>
 201a4f8:	00000d06 	br	201a530 <alt_busy_sleep+0x144>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 201a4fc:	e13ffc17 	ldw	r4,-16(fp)
 201a500:	014003f4 	movhi	r5,15
 201a504:	29509004 	addi	r5,r5,16960
 201a508:	200d0cc0 	call	200d0cc <__mulsi3>
 201a50c:	100b883a 	mov	r5,r2
 201a510:	01017db4 	movhi	r4,1526
 201a514:	21384004 	addi	r4,r4,-7936
 201a518:	200d0bc0 	call	200d0bc <__udivsi3>
 201a51c:	1009883a 	mov	r4,r2
 201a520:	e17fff17 	ldw	r5,-4(fp)
 201a524:	200d0cc0 	call	200d0cc <__mulsi3>
 201a528:	10bfffc4 	addi	r2,r2,-1
 201a52c:	00bffe16 	blt	zero,r2,201a528 <alt_busy_sleep+0x13c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 201a530:	0005883a 	mov	r2,zero
}
 201a534:	e037883a 	mov	sp,fp
 201a538:	dfc00117 	ldw	ra,4(sp)
 201a53c:	df000017 	ldw	fp,0(sp)
 201a540:	dec00204 	addi	sp,sp,8
 201a544:	f800283a 	ret

0201a548 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 201a548:	deffff04 	addi	sp,sp,-4
 201a54c:	df000015 	stw	fp,0(sp)
 201a550:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 201a554:	e037883a 	mov	sp,fp
 201a558:	df000017 	ldw	fp,0(sp)
 201a55c:	dec00104 	addi	sp,sp,4
 201a560:	f800283a 	ret

0201a564 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 201a564:	defff904 	addi	sp,sp,-28
 201a568:	dfc00615 	stw	ra,24(sp)
 201a56c:	df000515 	stw	fp,20(sp)
 201a570:	df000504 	addi	fp,sp,20
 201a574:	e13ffd15 	stw	r4,-12(fp)
 201a578:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 201a57c:	e0bffd17 	ldw	r2,-12(fp)
 201a580:	1005003a 	cmpeq	r2,r2,zero
 201a584:	1000041e 	bne	r2,zero,201a598 <alt_dev_llist_insert+0x34>
 201a588:	e0bffd17 	ldw	r2,-12(fp)
 201a58c:	10800217 	ldw	r2,8(r2)
 201a590:	1004c03a 	cmpne	r2,r2,zero
 201a594:	1000071e 	bne	r2,zero,201a5b4 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 201a598:	201a6180 	call	201a618 <alt_get_errno>
 201a59c:	1007883a 	mov	r3,r2
 201a5a0:	00800584 	movi	r2,22
 201a5a4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 201a5a8:	00bffa84 	movi	r2,-22
 201a5ac:	e0bfff15 	stw	r2,-4(fp)
 201a5b0:	00001306 	br	201a600 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 201a5b4:	e0fffd17 	ldw	r3,-12(fp)
 201a5b8:	e0bffe17 	ldw	r2,-8(fp)
 201a5bc:	e0bffb15 	stw	r2,-20(fp)
 201a5c0:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 201a5c4:	e0fffc17 	ldw	r3,-16(fp)
 201a5c8:	e0bffb17 	ldw	r2,-20(fp)
 201a5cc:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 201a5d0:	e0bffb17 	ldw	r2,-20(fp)
 201a5d4:	10c00017 	ldw	r3,0(r2)
 201a5d8:	e0bffc17 	ldw	r2,-16(fp)
 201a5dc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 201a5e0:	e0bffb17 	ldw	r2,-20(fp)
 201a5e4:	10c00017 	ldw	r3,0(r2)
 201a5e8:	e0bffc17 	ldw	r2,-16(fp)
 201a5ec:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 201a5f0:	e0fffb17 	ldw	r3,-20(fp)
 201a5f4:	e0bffc17 	ldw	r2,-16(fp)
 201a5f8:	18800015 	stw	r2,0(r3)

  return 0;  
 201a5fc:	e03fff15 	stw	zero,-4(fp)
 201a600:	e0bfff17 	ldw	r2,-4(fp)
}
 201a604:	e037883a 	mov	sp,fp
 201a608:	dfc00117 	ldw	ra,4(sp)
 201a60c:	df000017 	ldw	fp,0(sp)
 201a610:	dec00204 	addi	sp,sp,8
 201a614:	f800283a 	ret

0201a618 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 201a618:	defffd04 	addi	sp,sp,-12
 201a61c:	dfc00215 	stw	ra,8(sp)
 201a620:	df000115 	stw	fp,4(sp)
 201a624:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 201a628:	008080b4 	movhi	r2,514
 201a62c:	10b70304 	addi	r2,r2,-9204
 201a630:	10800017 	ldw	r2,0(r2)
 201a634:	1005003a 	cmpeq	r2,r2,zero
 201a638:	1000061e 	bne	r2,zero,201a654 <alt_get_errno+0x3c>
 201a63c:	008080b4 	movhi	r2,514
 201a640:	10b70304 	addi	r2,r2,-9204
 201a644:	10800017 	ldw	r2,0(r2)
 201a648:	103ee83a 	callr	r2
 201a64c:	e0bfff15 	stw	r2,-4(fp)
 201a650:	00000306 	br	201a660 <alt_get_errno+0x48>
 201a654:	008080b4 	movhi	r2,514
 201a658:	10bdfd04 	addi	r2,r2,-2060
 201a65c:	e0bfff15 	stw	r2,-4(fp)
 201a660:	e0bfff17 	ldw	r2,-4(fp)
}
 201a664:	e037883a 	mov	sp,fp
 201a668:	dfc00117 	ldw	ra,4(sp)
 201a66c:	df000017 	ldw	fp,0(sp)
 201a670:	dec00204 	addi	sp,sp,8
 201a674:	f800283a 	ret

0201a678 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 201a678:	defffd04 	addi	sp,sp,-12
 201a67c:	dfc00215 	stw	ra,8(sp)
 201a680:	df000115 	stw	fp,4(sp)
 201a684:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 201a688:	00bfff04 	movi	r2,-4
 201a68c:	00c080b4 	movhi	r3,514
 201a690:	18ee0b04 	addi	r3,r3,-18388
 201a694:	1885883a 	add	r2,r3,r2
 201a698:	e0bfff15 	stw	r2,-4(fp)
 201a69c:	00000606 	br	201a6b8 <_do_ctors+0x40>
        (*ctor) (); 
 201a6a0:	e0bfff17 	ldw	r2,-4(fp)
 201a6a4:	10800017 	ldw	r2,0(r2)
 201a6a8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 201a6ac:	e0bfff17 	ldw	r2,-4(fp)
 201a6b0:	10bfff04 	addi	r2,r2,-4
 201a6b4:	e0bfff15 	stw	r2,-4(fp)
 201a6b8:	e0ffff17 	ldw	r3,-4(fp)
 201a6bc:	008080b4 	movhi	r2,514
 201a6c0:	10ae0a04 	addi	r2,r2,-18392
 201a6c4:	18bff62e 	bgeu	r3,r2,201a6a0 <_do_ctors+0x28>
        (*ctor) (); 
}
 201a6c8:	e037883a 	mov	sp,fp
 201a6cc:	dfc00117 	ldw	ra,4(sp)
 201a6d0:	df000017 	ldw	fp,0(sp)
 201a6d4:	dec00204 	addi	sp,sp,8
 201a6d8:	f800283a 	ret

0201a6dc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 201a6dc:	defffd04 	addi	sp,sp,-12
 201a6e0:	dfc00215 	stw	ra,8(sp)
 201a6e4:	df000115 	stw	fp,4(sp)
 201a6e8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 201a6ec:	00bfff04 	movi	r2,-4
 201a6f0:	00c080b4 	movhi	r3,514
 201a6f4:	18ee0b04 	addi	r3,r3,-18388
 201a6f8:	1885883a 	add	r2,r3,r2
 201a6fc:	e0bfff15 	stw	r2,-4(fp)
 201a700:	00000606 	br	201a71c <_do_dtors+0x40>
        (*dtor) (); 
 201a704:	e0bfff17 	ldw	r2,-4(fp)
 201a708:	10800017 	ldw	r2,0(r2)
 201a70c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 201a710:	e0bfff17 	ldw	r2,-4(fp)
 201a714:	10bfff04 	addi	r2,r2,-4
 201a718:	e0bfff15 	stw	r2,-4(fp)
 201a71c:	e0ffff17 	ldw	r3,-4(fp)
 201a720:	008080b4 	movhi	r2,514
 201a724:	10ae0b04 	addi	r2,r2,-18388
 201a728:	18bff62e 	bgeu	r3,r2,201a704 <_do_dtors+0x28>
        (*dtor) (); 
}
 201a72c:	e037883a 	mov	sp,fp
 201a730:	dfc00117 	ldw	ra,4(sp)
 201a734:	df000017 	ldw	fp,0(sp)
 201a738:	dec00204 	addi	sp,sp,8
 201a73c:	f800283a 	ret

0201a740 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 201a740:	defff904 	addi	sp,sp,-28
 201a744:	dfc00615 	stw	ra,24(sp)
 201a748:	df000515 	stw	fp,20(sp)
 201a74c:	df000504 	addi	fp,sp,20
 201a750:	e13ffd15 	stw	r4,-12(fp)
 201a754:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 201a758:	e0bffe17 	ldw	r2,-8(fp)
 201a75c:	10800017 	ldw	r2,0(r2)
 201a760:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 201a764:	e13ffd17 	ldw	r4,-12(fp)
 201a768:	200e3500 	call	200e350 <strlen>
 201a76c:	10800044 	addi	r2,r2,1
 201a770:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 201a774:	00000d06 	br	201a7ac <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 201a778:	e0bffc17 	ldw	r2,-16(fp)
 201a77c:	11000217 	ldw	r4,8(r2)
 201a780:	e1bffb17 	ldw	r6,-20(fp)
 201a784:	e17ffd17 	ldw	r5,-12(fp)
 201a788:	201b3480 	call	201b348 <memcmp>
 201a78c:	1004c03a 	cmpne	r2,r2,zero
 201a790:	1000031e 	bne	r2,zero,201a7a0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 201a794:	e0bffc17 	ldw	r2,-16(fp)
 201a798:	e0bfff15 	stw	r2,-4(fp)
 201a79c:	00000706 	br	201a7bc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 201a7a0:	e0bffc17 	ldw	r2,-16(fp)
 201a7a4:	10800017 	ldw	r2,0(r2)
 201a7a8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 201a7ac:	e0fffe17 	ldw	r3,-8(fp)
 201a7b0:	e0bffc17 	ldw	r2,-16(fp)
 201a7b4:	10fff01e 	bne	r2,r3,201a778 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 201a7b8:	e03fff15 	stw	zero,-4(fp)
 201a7bc:	e0bfff17 	ldw	r2,-4(fp)
}
 201a7c0:	e037883a 	mov	sp,fp
 201a7c4:	dfc00117 	ldw	ra,4(sp)
 201a7c8:	df000017 	ldw	fp,0(sp)
 201a7cc:	dec00204 	addi	sp,sp,8
 201a7d0:	f800283a 	ret

0201a7d4 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 201a7d4:	defffb04 	addi	sp,sp,-20
 201a7d8:	dfc00415 	stw	ra,16(sp)
 201a7dc:	df000315 	stw	fp,12(sp)
 201a7e0:	df000304 	addi	fp,sp,12
 201a7e4:	e13ffe15 	stw	r4,-8(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 201a7e8:	e13ffe17 	ldw	r4,-8(fp)
 201a7ec:	d1601b04 	addi	r5,gp,-32660
 201a7f0:	201a7400 	call	201a740 <alt_find_dev>
 201a7f4:	e0bffd15 	stw	r2,-12(fp)

  if ((dev) && dev->open)
 201a7f8:	e0bffd17 	ldw	r2,-12(fp)
 201a7fc:	1005003a 	cmpeq	r2,r2,zero
 201a800:	10000b1e 	bne	r2,zero,201a830 <alt_flash_open_dev+0x5c>
 201a804:	e0bffd17 	ldw	r2,-12(fp)
 201a808:	10800317 	ldw	r2,12(r2)
 201a80c:	1005003a 	cmpeq	r2,r2,zero
 201a810:	1000071e 	bne	r2,zero,201a830 <alt_flash_open_dev+0x5c>
  {
    return dev->open(dev, name);
 201a814:	e0bffd17 	ldw	r2,-12(fp)
 201a818:	10800317 	ldw	r2,12(r2)
 201a81c:	e13ffd17 	ldw	r4,-12(fp)
 201a820:	e17ffe17 	ldw	r5,-8(fp)
 201a824:	103ee83a 	callr	r2
 201a828:	e0bfff15 	stw	r2,-4(fp)
 201a82c:	00000206 	br	201a838 <alt_flash_open_dev+0x64>
  }

  return dev;
 201a830:	e0bffd17 	ldw	r2,-12(fp)
 201a834:	e0bfff15 	stw	r2,-4(fp)
 201a838:	e0bfff17 	ldw	r2,-4(fp)
}
 201a83c:	e037883a 	mov	sp,fp
 201a840:	dfc00117 	ldw	ra,4(sp)
 201a844:	df000017 	ldw	fp,0(sp)
 201a848:	dec00204 	addi	sp,sp,8
 201a84c:	f800283a 	ret

0201a850 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 201a850:	defffd04 	addi	sp,sp,-12
 201a854:	dfc00215 	stw	ra,8(sp)
 201a858:	df000115 	stw	fp,4(sp)
 201a85c:	df000104 	addi	fp,sp,4
 201a860:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 201a864:	e0bfff17 	ldw	r2,-4(fp)
 201a868:	1005003a 	cmpeq	r2,r2,zero
 201a86c:	1000081e 	bne	r2,zero,201a890 <alt_flash_close_dev+0x40>
 201a870:	e0bfff17 	ldw	r2,-4(fp)
 201a874:	10800417 	ldw	r2,16(r2)
 201a878:	1005003a 	cmpeq	r2,r2,zero
 201a87c:	1000041e 	bne	r2,zero,201a890 <alt_flash_close_dev+0x40>
  {
    fd->close(fd);
 201a880:	e0bfff17 	ldw	r2,-4(fp)
 201a884:	10800417 	ldw	r2,16(r2)
 201a888:	e13fff17 	ldw	r4,-4(fp)
 201a88c:	103ee83a 	callr	r2
  }
  return;
}
 201a890:	e037883a 	mov	sp,fp
 201a894:	dfc00117 	ldw	ra,4(sp)
 201a898:	df000017 	ldw	fp,0(sp)
 201a89c:	dec00204 	addi	sp,sp,8
 201a8a0:	f800283a 	ret

0201a8a4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 201a8a4:	deffff04 	addi	sp,sp,-4
 201a8a8:	df000015 	stw	fp,0(sp)
 201a8ac:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 201a8b0:	e037883a 	mov	sp,fp
 201a8b4:	df000017 	ldw	fp,0(sp)
 201a8b8:	dec00104 	addi	sp,sp,4
 201a8bc:	f800283a 	ret

0201a8c0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 201a8c0:	defff804 	addi	sp,sp,-32
 201a8c4:	dfc00715 	stw	ra,28(sp)
 201a8c8:	df000615 	stw	fp,24(sp)
 201a8cc:	dc000515 	stw	r16,20(sp)
 201a8d0:	df000504 	addi	fp,sp,20
 201a8d4:	e13ffc15 	stw	r4,-16(fp)
 201a8d8:	e17ffd15 	stw	r5,-12(fp)
 201a8dc:	e1bffe15 	stw	r6,-8(fp)
 201a8e0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 201a8e4:	e13ffd17 	ldw	r4,-12(fp)
 201a8e8:	e17ffe17 	ldw	r5,-8(fp)
 201a8ec:	e1bfff17 	ldw	r6,-4(fp)
 201a8f0:	201acc80 	call	201acc8 <open>
 201a8f4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 201a8f8:	e0bffb17 	ldw	r2,-20(fp)
 201a8fc:	1004803a 	cmplt	r2,r2,zero
 201a900:	10001f1e 	bne	r2,zero,201a980 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
 201a904:	e13ffb17 	ldw	r4,-20(fp)
 201a908:	040080b4 	movhi	r16,514
 201a90c:	84323704 	addi	r16,r16,-14116
 201a910:	01400304 	movi	r5,12
 201a914:	200d0cc0 	call	200d0cc <__mulsi3>
 201a918:	1405883a 	add	r2,r2,r16
 201a91c:	10c00017 	ldw	r3,0(r2)
 201a920:	e0bffc17 	ldw	r2,-16(fp)
 201a924:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 201a928:	e13ffb17 	ldw	r4,-20(fp)
 201a92c:	040080b4 	movhi	r16,514
 201a930:	84323704 	addi	r16,r16,-14116
 201a934:	01400304 	movi	r5,12
 201a938:	200d0cc0 	call	200d0cc <__mulsi3>
 201a93c:	1405883a 	add	r2,r2,r16
 201a940:	10800104 	addi	r2,r2,4
 201a944:	10c00017 	ldw	r3,0(r2)
 201a948:	e0bffc17 	ldw	r2,-16(fp)
 201a94c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 201a950:	e13ffb17 	ldw	r4,-20(fp)
 201a954:	040080b4 	movhi	r16,514
 201a958:	84323704 	addi	r16,r16,-14116
 201a95c:	01400304 	movi	r5,12
 201a960:	200d0cc0 	call	200d0cc <__mulsi3>
 201a964:	1405883a 	add	r2,r2,r16
 201a968:	10800204 	addi	r2,r2,8
 201a96c:	10c00017 	ldw	r3,0(r2)
 201a970:	e0bffc17 	ldw	r2,-16(fp)
 201a974:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 201a978:	e13ffb17 	ldw	r4,-20(fp)
 201a97c:	2017e900 	call	2017e90 <alt_release_fd>
  }
} 
 201a980:	e037883a 	mov	sp,fp
 201a984:	dfc00217 	ldw	ra,8(sp)
 201a988:	df000117 	ldw	fp,4(sp)
 201a98c:	dc000017 	ldw	r16,0(sp)
 201a990:	dec00304 	addi	sp,sp,12
 201a994:	f800283a 	ret

0201a998 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 201a998:	defffb04 	addi	sp,sp,-20
 201a99c:	dfc00415 	stw	ra,16(sp)
 201a9a0:	df000315 	stw	fp,12(sp)
 201a9a4:	df000304 	addi	fp,sp,12
 201a9a8:	e13ffd15 	stw	r4,-12(fp)
 201a9ac:	e17ffe15 	stw	r5,-8(fp)
 201a9b0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 201a9b4:	010080b4 	movhi	r4,514
 201a9b8:	21323a04 	addi	r4,r4,-14104
 201a9bc:	e17ffd17 	ldw	r5,-12(fp)
 201a9c0:	01800044 	movi	r6,1
 201a9c4:	01c07fc4 	movi	r7,511
 201a9c8:	201a8c00 	call	201a8c0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 201a9cc:	010080b4 	movhi	r4,514
 201a9d0:	21323704 	addi	r4,r4,-14116
 201a9d4:	e17ffe17 	ldw	r5,-8(fp)
 201a9d8:	000d883a 	mov	r6,zero
 201a9dc:	01c07fc4 	movi	r7,511
 201a9e0:	201a8c00 	call	201a8c0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 201a9e4:	010080b4 	movhi	r4,514
 201a9e8:	21323d04 	addi	r4,r4,-14092
 201a9ec:	e17fff17 	ldw	r5,-4(fp)
 201a9f0:	01800044 	movi	r6,1
 201a9f4:	01c07fc4 	movi	r7,511
 201a9f8:	201a8c00 	call	201a8c0 <alt_open_fd>
}  
 201a9fc:	e037883a 	mov	sp,fp
 201aa00:	dfc00117 	ldw	ra,4(sp)
 201aa04:	df000017 	ldw	fp,0(sp)
 201aa08:	dec00204 	addi	sp,sp,8
 201aa0c:	f800283a 	ret

0201aa10 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 201aa10:	deffef04 	addi	sp,sp,-68
 201aa14:	df001015 	stw	fp,64(sp)
 201aa18:	df001004 	addi	fp,sp,64
 201aa1c:	e13ffc15 	stw	r4,-16(fp)
 201aa20:	e17ffd15 	stw	r5,-12(fp)
 201aa24:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
 201aa28:	00bffa84 	movi	r2,-22
 201aa2c:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 201aa30:	e0bffc17 	ldw	r2,-16(fp)
 201aa34:	10800828 	cmpgeui	r2,r2,32
 201aa38:	1000601e 	bne	r2,zero,201abbc <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201aa3c:	0005303a 	rdctl	r2,status
 201aa40:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201aa44:	e0fff917 	ldw	r3,-28(fp)
 201aa48:	00bfff84 	movi	r2,-2
 201aa4c:	1884703a 	and	r2,r3,r2
 201aa50:	1001703a 	wrctl	status,r2
  
  return context;
 201aa54:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 201aa58:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
 201aa5c:	e0bffc17 	ldw	r2,-16(fp)
 201aa60:	00c080b4 	movhi	r3,514
 201aa64:	18c01704 	addi	r3,r3,92
 201aa68:	100490fa 	slli	r2,r2,3
 201aa6c:	10c7883a 	add	r3,r2,r3
 201aa70:	e0bffe17 	ldw	r2,-8(fp)
 201aa74:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
 201aa78:	e0bffc17 	ldw	r2,-16(fp)
 201aa7c:	00c080b4 	movhi	r3,514
 201aa80:	18c01704 	addi	r3,r3,92
 201aa84:	100490fa 	slli	r2,r2,3
 201aa88:	10c5883a 	add	r2,r2,r3
 201aa8c:	10c00104 	addi	r3,r2,4
 201aa90:	e0bffd17 	ldw	r2,-12(fp)
 201aa94:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 201aa98:	e0bffe17 	ldw	r2,-8(fp)
 201aa9c:	1005003a 	cmpeq	r2,r2,zero
 201aaa0:	1000201e 	bne	r2,zero,201ab24 <alt_irq_register+0x114>
 201aaa4:	e0bffc17 	ldw	r2,-16(fp)
 201aaa8:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201aaac:	0005303a 	rdctl	r2,status
 201aab0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201aab4:	e0fff617 	ldw	r3,-40(fp)
 201aab8:	00bfff84 	movi	r2,-2
 201aabc:	1884703a 	and	r2,r3,r2
 201aac0:	1001703a 	wrctl	status,r2
  
  return context;
 201aac4:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 201aac8:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 201aacc:	e0fff717 	ldw	r3,-36(fp)
 201aad0:	00800044 	movi	r2,1
 201aad4:	10c4983a 	sll	r2,r2,r3
 201aad8:	1007883a 	mov	r3,r2
 201aadc:	008080b4 	movhi	r2,514
 201aae0:	10be0604 	addi	r2,r2,-2024
 201aae4:	10800017 	ldw	r2,0(r2)
 201aae8:	1886b03a 	or	r3,r3,r2
 201aaec:	008080b4 	movhi	r2,514
 201aaf0:	10be0604 	addi	r2,r2,-2024
 201aaf4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 201aaf8:	008080b4 	movhi	r2,514
 201aafc:	10be0604 	addi	r2,r2,-2024
 201ab00:	10800017 	ldw	r2,0(r2)
 201ab04:	100170fa 	wrctl	ienable,r2
 201ab08:	e0bff817 	ldw	r2,-32(fp)
 201ab0c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ab10:	e0bff517 	ldw	r2,-44(fp)
 201ab14:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 201ab18:	0005883a 	mov	r2,zero
 201ab1c:	e0bfff15 	stw	r2,-4(fp)
 201ab20:	00002006 	br	201aba4 <alt_irq_register+0x194>
 201ab24:	e0bffc17 	ldw	r2,-16(fp)
 201ab28:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201ab2c:	0005303a 	rdctl	r2,status
 201ab30:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201ab34:	e0fff217 	ldw	r3,-56(fp)
 201ab38:	00bfff84 	movi	r2,-2
 201ab3c:	1884703a 	and	r2,r3,r2
 201ab40:	1001703a 	wrctl	status,r2
  
  return context;
 201ab44:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 201ab48:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
 201ab4c:	e0fff317 	ldw	r3,-52(fp)
 201ab50:	00800044 	movi	r2,1
 201ab54:	10c4983a 	sll	r2,r2,r3
 201ab58:	0084303a 	nor	r2,zero,r2
 201ab5c:	1007883a 	mov	r3,r2
 201ab60:	008080b4 	movhi	r2,514
 201ab64:	10be0604 	addi	r2,r2,-2024
 201ab68:	10800017 	ldw	r2,0(r2)
 201ab6c:	1886703a 	and	r3,r3,r2
 201ab70:	008080b4 	movhi	r2,514
 201ab74:	10be0604 	addi	r2,r2,-2024
 201ab78:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 201ab7c:	008080b4 	movhi	r2,514
 201ab80:	10be0604 	addi	r2,r2,-2024
 201ab84:	10800017 	ldw	r2,0(r2)
 201ab88:	100170fa 	wrctl	ienable,r2
 201ab8c:	e0bff417 	ldw	r2,-48(fp)
 201ab90:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201ab94:	e0bff117 	ldw	r2,-60(fp)
 201ab98:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 201ab9c:	0005883a 	mov	r2,zero
 201aba0:	e0bfff15 	stw	r2,-4(fp)
 201aba4:	e0bfff17 	ldw	r2,-4(fp)
 201aba8:	e0bffb15 	stw	r2,-20(fp)
 201abac:	e0bffa17 	ldw	r2,-24(fp)
 201abb0:	e0bff015 	stw	r2,-64(fp)
 201abb4:	e0bff017 	ldw	r2,-64(fp)
 201abb8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 201abbc:	e0bffb17 	ldw	r2,-20(fp)
}
 201abc0:	e037883a 	mov	sp,fp
 201abc4:	df000017 	ldw	fp,0(sp)
 201abc8:	dec00104 	addi	sp,sp,4
 201abcc:	f800283a 	ret

0201abd0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 201abd0:	defffa04 	addi	sp,sp,-24
 201abd4:	dfc00515 	stw	ra,20(sp)
 201abd8:	df000415 	stw	fp,16(sp)
 201abdc:	dc000315 	stw	r16,12(sp)
 201abe0:	df000304 	addi	fp,sp,12
 201abe4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 201abe8:	e0bffe17 	ldw	r2,-8(fp)
 201abec:	10800217 	ldw	r2,8(r2)
 201abf0:	10d00034 	orhi	r3,r2,16384
 201abf4:	e0bffe17 	ldw	r2,-8(fp)
 201abf8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 201abfc:	e03ffd15 	stw	zero,-12(fp)
 201ac00:	00002306 	br	201ac90 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 201ac04:	e13ffd17 	ldw	r4,-12(fp)
 201ac08:	040080b4 	movhi	r16,514
 201ac0c:	84323704 	addi	r16,r16,-14116
 201ac10:	01400304 	movi	r5,12
 201ac14:	200d0cc0 	call	200d0cc <__mulsi3>
 201ac18:	1405883a 	add	r2,r2,r16
 201ac1c:	10c00017 	ldw	r3,0(r2)
 201ac20:	e0bffe17 	ldw	r2,-8(fp)
 201ac24:	10800017 	ldw	r2,0(r2)
 201ac28:	1880161e 	bne	r3,r2,201ac84 <alt_file_locked+0xb4>
 201ac2c:	e13ffd17 	ldw	r4,-12(fp)
 201ac30:	040080b4 	movhi	r16,514
 201ac34:	84323704 	addi	r16,r16,-14116
 201ac38:	01400304 	movi	r5,12
 201ac3c:	200d0cc0 	call	200d0cc <__mulsi3>
 201ac40:	1405883a 	add	r2,r2,r16
 201ac44:	10800204 	addi	r2,r2,8
 201ac48:	10800017 	ldw	r2,0(r2)
 201ac4c:	1004403a 	cmpge	r2,r2,zero
 201ac50:	10000c1e 	bne	r2,zero,201ac84 <alt_file_locked+0xb4>
 201ac54:	e13ffd17 	ldw	r4,-12(fp)
 201ac58:	01400304 	movi	r5,12
 201ac5c:	200d0cc0 	call	200d0cc <__mulsi3>
 201ac60:	1007883a 	mov	r3,r2
 201ac64:	008080b4 	movhi	r2,514
 201ac68:	10b23704 	addi	r2,r2,-14116
 201ac6c:	1887883a 	add	r3,r3,r2
 201ac70:	e0bffe17 	ldw	r2,-8(fp)
 201ac74:	18800326 	beq	r3,r2,201ac84 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 201ac78:	00bffcc4 	movi	r2,-13
 201ac7c:	e0bfff15 	stw	r2,-4(fp)
 201ac80:	00000a06 	br	201acac <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 201ac84:	e0bffd17 	ldw	r2,-12(fp)
 201ac88:	10800044 	addi	r2,r2,1
 201ac8c:	e0bffd15 	stw	r2,-12(fp)
 201ac90:	008080b4 	movhi	r2,514
 201ac94:	10b70204 	addi	r2,r2,-9208
 201ac98:	10800017 	ldw	r2,0(r2)
 201ac9c:	1007883a 	mov	r3,r2
 201aca0:	e0bffd17 	ldw	r2,-12(fp)
 201aca4:	18bfd72e 	bgeu	r3,r2,201ac04 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 201aca8:	e03fff15 	stw	zero,-4(fp)
 201acac:	e0bfff17 	ldw	r2,-4(fp)
}
 201acb0:	e037883a 	mov	sp,fp
 201acb4:	dfc00217 	ldw	ra,8(sp)
 201acb8:	df000117 	ldw	fp,4(sp)
 201acbc:	dc000017 	ldw	r16,0(sp)
 201acc0:	dec00304 	addi	sp,sp,12
 201acc4:	f800283a 	ret

0201acc8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 201acc8:	defff404 	addi	sp,sp,-48
 201accc:	dfc00b15 	stw	ra,44(sp)
 201acd0:	df000a15 	stw	fp,40(sp)
 201acd4:	df000a04 	addi	fp,sp,40
 201acd8:	e13ffb15 	stw	r4,-20(fp)
 201acdc:	e17ffc15 	stw	r5,-16(fp)
 201ace0:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 201ace4:	00bfffc4 	movi	r2,-1
 201ace8:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 201acec:	00bffb44 	movi	r2,-19
 201acf0:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 201acf4:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 201acf8:	e13ffb17 	ldw	r4,-20(fp)
 201acfc:	014080b4 	movhi	r5,514
 201ad00:	29770004 	addi	r5,r5,-9216
 201ad04:	201a7400 	call	201a740 <alt_find_dev>
 201ad08:	e0bffa15 	stw	r2,-24(fp)
 201ad0c:	e0bffa17 	ldw	r2,-24(fp)
 201ad10:	1004c03a 	cmpne	r2,r2,zero
 201ad14:	1000051e 	bne	r2,zero,201ad2c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 201ad18:	e13ffb17 	ldw	r4,-20(fp)
 201ad1c:	201b10c0 	call	201b10c <alt_find_file>
 201ad20:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 201ad24:	00800044 	movi	r2,1
 201ad28:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 201ad2c:	e0bffa17 	ldw	r2,-24(fp)
 201ad30:	1005003a 	cmpeq	r2,r2,zero
 201ad34:	1000311e 	bne	r2,zero,201adfc <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
 201ad38:	e13ffa17 	ldw	r4,-24(fp)
 201ad3c:	201b22c0 	call	201b22c <alt_get_fd>
 201ad40:	e0bff815 	stw	r2,-32(fp)
 201ad44:	e0bff817 	ldw	r2,-32(fp)
 201ad48:	1004403a 	cmpge	r2,r2,zero
 201ad4c:	1000031e 	bne	r2,zero,201ad5c <open+0x94>
    {
      status = index;
 201ad50:	e0bff817 	ldw	r2,-32(fp)
 201ad54:	e0bff715 	stw	r2,-36(fp)
 201ad58:	00002a06 	br	201ae04 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
 201ad5c:	e13ff817 	ldw	r4,-32(fp)
 201ad60:	01400304 	movi	r5,12
 201ad64:	200d0cc0 	call	200d0cc <__mulsi3>
 201ad68:	1007883a 	mov	r3,r2
 201ad6c:	008080b4 	movhi	r2,514
 201ad70:	10b23704 	addi	r2,r2,-14116
 201ad74:	1885883a 	add	r2,r3,r2
 201ad78:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 201ad7c:	e0fffc17 	ldw	r3,-16(fp)
 201ad80:	00900034 	movhi	r2,16384
 201ad84:	10bfffc4 	addi	r2,r2,-1
 201ad88:	1886703a 	and	r3,r3,r2
 201ad8c:	e0bff917 	ldw	r2,-28(fp)
 201ad90:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 201ad94:	e0bff617 	ldw	r2,-40(fp)
 201ad98:	1004c03a 	cmpne	r2,r2,zero
 201ad9c:	1000061e 	bne	r2,zero,201adb8 <open+0xf0>
 201ada0:	e13ff917 	ldw	r4,-28(fp)
 201ada4:	201abd00 	call	201abd0 <alt_file_locked>
 201ada8:	e0bff715 	stw	r2,-36(fp)
 201adac:	e0bff717 	ldw	r2,-36(fp)
 201adb0:	1004803a 	cmplt	r2,r2,zero
 201adb4:	1000131e 	bne	r2,zero,201ae04 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 201adb8:	e0bffa17 	ldw	r2,-24(fp)
 201adbc:	10800317 	ldw	r2,12(r2)
 201adc0:	1005003a 	cmpeq	r2,r2,zero
 201adc4:	1000091e 	bne	r2,zero,201adec <open+0x124>
 201adc8:	e0bffa17 	ldw	r2,-24(fp)
 201adcc:	10800317 	ldw	r2,12(r2)
 201add0:	e13ff917 	ldw	r4,-28(fp)
 201add4:	e17ffb17 	ldw	r5,-20(fp)
 201add8:	e1bffc17 	ldw	r6,-16(fp)
 201addc:	e1fffd17 	ldw	r7,-12(fp)
 201ade0:	103ee83a 	callr	r2
 201ade4:	e0bfff15 	stw	r2,-4(fp)
 201ade8:	00000106 	br	201adf0 <open+0x128>
 201adec:	e03fff15 	stw	zero,-4(fp)
 201adf0:	e0bfff17 	ldw	r2,-4(fp)
 201adf4:	e0bff715 	stw	r2,-36(fp)
 201adf8:	00000206 	br	201ae04 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 201adfc:	00bffb44 	movi	r2,-19
 201ae00:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 201ae04:	e0bff717 	ldw	r2,-36(fp)
 201ae08:	1004403a 	cmpge	r2,r2,zero
 201ae0c:	1000091e 	bne	r2,zero,201ae34 <open+0x16c>
  {
    alt_release_fd (index);  
 201ae10:	e13ff817 	ldw	r4,-32(fp)
 201ae14:	2017e900 	call	2017e90 <alt_release_fd>
    ALT_ERRNO = -status;
 201ae18:	201ae540 	call	201ae54 <alt_get_errno>
 201ae1c:	e0fff717 	ldw	r3,-36(fp)
 201ae20:	00c7c83a 	sub	r3,zero,r3
 201ae24:	10c00015 	stw	r3,0(r2)
    return -1;
 201ae28:	00bfffc4 	movi	r2,-1
 201ae2c:	e0bffe15 	stw	r2,-8(fp)
 201ae30:	00000206 	br	201ae3c <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
 201ae34:	e0bff817 	ldw	r2,-32(fp)
 201ae38:	e0bffe15 	stw	r2,-8(fp)
 201ae3c:	e0bffe17 	ldw	r2,-8(fp)
}
 201ae40:	e037883a 	mov	sp,fp
 201ae44:	dfc00117 	ldw	ra,4(sp)
 201ae48:	df000017 	ldw	fp,0(sp)
 201ae4c:	dec00204 	addi	sp,sp,8
 201ae50:	f800283a 	ret

0201ae54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 201ae54:	defffd04 	addi	sp,sp,-12
 201ae58:	dfc00215 	stw	ra,8(sp)
 201ae5c:	df000115 	stw	fp,4(sp)
 201ae60:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 201ae64:	008080b4 	movhi	r2,514
 201ae68:	10b70304 	addi	r2,r2,-9204
 201ae6c:	10800017 	ldw	r2,0(r2)
 201ae70:	1005003a 	cmpeq	r2,r2,zero
 201ae74:	1000061e 	bne	r2,zero,201ae90 <alt_get_errno+0x3c>
 201ae78:	008080b4 	movhi	r2,514
 201ae7c:	10b70304 	addi	r2,r2,-9204
 201ae80:	10800017 	ldw	r2,0(r2)
 201ae84:	103ee83a 	callr	r2
 201ae88:	e0bfff15 	stw	r2,-4(fp)
 201ae8c:	00000306 	br	201ae9c <alt_get_errno+0x48>
 201ae90:	008080b4 	movhi	r2,514
 201ae94:	10bdfd04 	addi	r2,r2,-2060
 201ae98:	e0bfff15 	stw	r2,-4(fp)
 201ae9c:	e0bfff17 	ldw	r2,-4(fp)
}
 201aea0:	e037883a 	mov	sp,fp
 201aea4:	dfc00117 	ldw	ra,4(sp)
 201aea8:	df000017 	ldw	fp,0(sp)
 201aeac:	dec00204 	addi	sp,sp,8
 201aeb0:	f800283a 	ret

0201aeb4 <altera_nios2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_irq_init(void) 
{
 201aeb4:	deffff04 	addi	sp,sp,-4
 201aeb8:	df000015 	stw	fp,0(sp)
 201aebc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 201aec0:	000170fa 	wrctl	ienable,zero
}
 201aec4:	e037883a 	mov	sp,fp
 201aec8:	df000017 	ldw	fp,0(sp)
 201aecc:	dec00104 	addi	sp,sp,4
 201aed0:	f800283a 	ret

0201aed4 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 201aed4:	defff404 	addi	sp,sp,-48
 201aed8:	df000b15 	stw	fp,44(sp)
 201aedc:	df000b04 	addi	fp,sp,44
 201aee0:	e13ffc15 	stw	r4,-16(fp)
 201aee4:	e17ffd15 	stw	r5,-12(fp)
 201aee8:	e1bffe15 	stw	r6,-8(fp)
 201aeec:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 201aef0:	e0fffe17 	ldw	r3,-8(fp)
 201aef4:	e0bfff17 	ldw	r2,-4(fp)
 201aef8:	10c5883a 	add	r2,r2,r3
 201aefc:	e0bffb15 	stw	r2,-20(fp)
  alt_u8 * read_end = read_data + read_length;
 201af00:	e0c00117 	ldw	r3,4(fp)
 201af04:	e0800217 	ldw	r2,8(fp)
 201af08:	10c5883a 	add	r2,r2,r3
 201af0c:	e0bffa15 	stw	r2,-24(fp)

  alt_u32 write_zeros = read_length;
 201af10:	e0800117 	ldw	r2,4(fp)
 201af14:	e0bff915 	stw	r2,-28(fp)
  alt_u32 read_ignore = write_length;
 201af18:	e0bffe17 	ldw	r2,-8(fp)
 201af1c:	e0bff815 	stw	r2,-32(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 201af20:	00800044 	movi	r2,1
 201af24:	e0bff615 	stw	r2,-40(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 201af28:	e0bffc17 	ldw	r2,-16(fp)
 201af2c:	11000504 	addi	r4,r2,20
 201af30:	e0fffd17 	ldw	r3,-12(fp)
 201af34:	00800044 	movi	r2,1
 201af38:	10c6983a 	sll	r3,r2,r3
 201af3c:	2005883a 	mov	r2,r4
 201af40:	10c00035 	stwio	r3,0(r2)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 201af44:	e0800317 	ldw	r2,12(fp)
 201af48:	1080008c 	andi	r2,r2,2
 201af4c:	1004c03a 	cmpne	r2,r2,zero
 201af50:	1000051e 	bne	r2,zero,201af68 <alt_avalon_spi_command+0x94>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 201af54:	e0bffc17 	ldw	r2,-16(fp)
 201af58:	10800304 	addi	r2,r2,12
 201af5c:	1007883a 	mov	r3,r2
 201af60:	00810004 	movi	r2,1024
 201af64:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 201af68:	e0bffc17 	ldw	r2,-16(fp)
 201af6c:	10800037 	ldwio	r2,0(r2)
 201af70:	00000006 	br	201af74 <alt_avalon_spi_command+0xa0>
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 201af74:	e0bffc17 	ldw	r2,-16(fp)
 201af78:	10800204 	addi	r2,r2,8
 201af7c:	10800037 	ldwio	r2,0(r2)
 201af80:	e0bff715 	stw	r2,-36(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 201af84:	e0bff717 	ldw	r2,-36(fp)
 201af88:	1080100c 	andi	r2,r2,64
 201af8c:	1005003a 	cmpeq	r2,r2,zero
 201af90:	1000031e 	bne	r2,zero,201afa0 <alt_avalon_spi_command+0xcc>
 201af94:	e0bff617 	ldw	r2,-40(fp)
 201af98:	1004c03a 	cmpne	r2,r2,zero
 201af9c:	1000041e 	bne	r2,zero,201afb0 <alt_avalon_spi_command+0xdc>
 201afa0:	e0bff717 	ldw	r2,-36(fp)
 201afa4:	1080200c 	andi	r2,r2,128
 201afa8:	1005003a 	cmpeq	r2,r2,zero
 201afac:	103ff11e 	bne	r2,zero,201af74 <alt_avalon_spi_command+0xa0>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 201afb0:	e0bff717 	ldw	r2,-36(fp)
 201afb4:	1080100c 	andi	r2,r2,64
 201afb8:	1005003a 	cmpeq	r2,r2,zero
 201afbc:	1000201e 	bne	r2,zero,201b040 <alt_avalon_spi_command+0x16c>
 201afc0:	e0bff617 	ldw	r2,-40(fp)
 201afc4:	10800050 	cmplti	r2,r2,1
 201afc8:	10001d1e 	bne	r2,zero,201b040 <alt_avalon_spi_command+0x16c>
    {
      credits--;
 201afcc:	e0bff617 	ldw	r2,-40(fp)
 201afd0:	10bfffc4 	addi	r2,r2,-1
 201afd4:	e0bff615 	stw	r2,-40(fp)

      if (write_data < write_end)
 201afd8:	e0ffff17 	ldw	r3,-4(fp)
 201afdc:	e0bffb17 	ldw	r2,-20(fp)
 201afe0:	18800b2e 	bgeu	r3,r2,201b010 <alt_avalon_spi_command+0x13c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 201afe4:	e0bffc17 	ldw	r2,-16(fp)
 201afe8:	11000104 	addi	r4,r2,4
 201afec:	e0bfff17 	ldw	r2,-4(fp)
 201aff0:	10800003 	ldbu	r2,0(r2)
 201aff4:	10c03fcc 	andi	r3,r2,255
 201aff8:	e0bfff17 	ldw	r2,-4(fp)
 201affc:	10800044 	addi	r2,r2,1
 201b000:	e0bfff15 	stw	r2,-4(fp)
 201b004:	2005883a 	mov	r2,r4
 201b008:	10c00035 	stwio	r3,0(r2)
 201b00c:	00000c06 	br	201b040 <alt_avalon_spi_command+0x16c>
      else if (write_zeros > 0)
 201b010:	e0bff917 	ldw	r2,-28(fp)
 201b014:	1005003a 	cmpeq	r2,r2,zero
 201b018:	1000071e 	bne	r2,zero,201b038 <alt_avalon_spi_command+0x164>
      {
        write_zeros--;
 201b01c:	e0bff917 	ldw	r2,-28(fp)
 201b020:	10bfffc4 	addi	r2,r2,-1
 201b024:	e0bff915 	stw	r2,-28(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 201b028:	e0bffc17 	ldw	r2,-16(fp)
 201b02c:	10800104 	addi	r2,r2,4
 201b030:	10000035 	stwio	zero,0(r2)
 201b034:	00000206 	br	201b040 <alt_avalon_spi_command+0x16c>
      }
      else
        credits = -1024;
 201b038:	00bf0004 	movi	r2,-1024
 201b03c:	e0bff615 	stw	r2,-40(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 201b040:	e0bff717 	ldw	r2,-36(fp)
 201b044:	1080200c 	andi	r2,r2,128
 201b048:	1005003a 	cmpeq	r2,r2,zero
 201b04c:	103fc91e 	bne	r2,zero,201af74 <alt_avalon_spi_command+0xa0>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 201b050:	e0bffc17 	ldw	r2,-16(fp)
 201b054:	10800037 	ldwio	r2,0(r2)
 201b058:	e0bff515 	stw	r2,-44(fp)

      if (read_ignore > 0)
 201b05c:	e0bff817 	ldw	r2,-32(fp)
 201b060:	1005003a 	cmpeq	r2,r2,zero
 201b064:	1000041e 	bne	r2,zero,201b078 <alt_avalon_spi_command+0x1a4>
        read_ignore--;
 201b068:	e0bff817 	ldw	r2,-32(fp)
 201b06c:	10bfffc4 	addi	r2,r2,-1
 201b070:	e0bff815 	stw	r2,-32(fp)
 201b074:	00000706 	br	201b094 <alt_avalon_spi_command+0x1c0>
      else
        *read_data++ = (alt_u8)rxdata;
 201b078:	e0bff517 	ldw	r2,-44(fp)
 201b07c:	1007883a 	mov	r3,r2
 201b080:	e0800217 	ldw	r2,8(fp)
 201b084:	10c00005 	stb	r3,0(r2)
 201b088:	e0800217 	ldw	r2,8(fp)
 201b08c:	10800044 	addi	r2,r2,1
 201b090:	e0800215 	stw	r2,8(fp)
      credits++;
 201b094:	e0bff617 	ldw	r2,-40(fp)
 201b098:	10800044 	addi	r2,r2,1
 201b09c:	e0bff615 	stw	r2,-40(fp)

      if (read_ignore == 0 && read_data == read_end)
 201b0a0:	e0bff817 	ldw	r2,-32(fp)
 201b0a4:	1004c03a 	cmpne	r2,r2,zero
 201b0a8:	103fb21e 	bne	r2,zero,201af74 <alt_avalon_spi_command+0xa0>
 201b0ac:	e0c00217 	ldw	r3,8(fp)
 201b0b0:	e0bffa17 	ldw	r2,-24(fp)
 201b0b4:	18800126 	beq	r3,r2,201b0bc <alt_avalon_spi_command+0x1e8>
        break;
    }
    
  }
 201b0b8:	003fae06 	br	201af74 <alt_avalon_spi_command+0xa0>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 201b0bc:	e0bffc17 	ldw	r2,-16(fp)
 201b0c0:	10800204 	addi	r2,r2,8
 201b0c4:	10800037 	ldwio	r2,0(r2)
 201b0c8:	e0bff715 	stw	r2,-36(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 201b0cc:	e0bff717 	ldw	r2,-36(fp)
 201b0d0:	1080080c 	andi	r2,r2,32
 201b0d4:	1005003a 	cmpeq	r2,r2,zero
 201b0d8:	103ff81e 	bne	r2,zero,201b0bc <alt_avalon_spi_command+0x1e8>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 201b0dc:	e0800317 	ldw	r2,12(fp)
 201b0e0:	1080004c 	andi	r2,r2,1
 201b0e4:	1004c03a 	cmpne	r2,r2,zero
 201b0e8:	1000031e 	bne	r2,zero,201b0f8 <alt_avalon_spi_command+0x224>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 201b0ec:	e0bffc17 	ldw	r2,-16(fp)
 201b0f0:	10800304 	addi	r2,r2,12
 201b0f4:	10000035 	stwio	zero,0(r2)

  return read_length;
 201b0f8:	e0800117 	ldw	r2,4(fp)
}
 201b0fc:	e037883a 	mov	sp,fp
 201b100:	df000017 	ldw	fp,0(sp)
 201b104:	dec00104 	addi	sp,sp,4
 201b108:	f800283a 	ret

0201b10c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 201b10c:	defffa04 	addi	sp,sp,-24
 201b110:	dfc00515 	stw	ra,20(sp)
 201b114:	df000415 	stw	fp,16(sp)
 201b118:	df000404 	addi	fp,sp,16
 201b11c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 201b120:	008080b4 	movhi	r2,514
 201b124:	10b6fe04 	addi	r2,r2,-9224
 201b128:	10800017 	ldw	r2,0(r2)
 201b12c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 201b130:	00003306 	br	201b200 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 201b134:	e0bffd17 	ldw	r2,-12(fp)
 201b138:	11000217 	ldw	r4,8(r2)
 201b13c:	200e3500 	call	200e350 <strlen>
 201b140:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 201b144:	e0bffd17 	ldw	r2,-12(fp)
 201b148:	10c00217 	ldw	r3,8(r2)
 201b14c:	e0bffc17 	ldw	r2,-16(fp)
 201b150:	1885883a 	add	r2,r3,r2
 201b154:	10bfffc4 	addi	r2,r2,-1
 201b158:	10800003 	ldbu	r2,0(r2)
 201b15c:	10803fcc 	andi	r2,r2,255
 201b160:	1080201c 	xori	r2,r2,128
 201b164:	10bfe004 	addi	r2,r2,-128
 201b168:	10800bd8 	cmpnei	r2,r2,47
 201b16c:	1000031e 	bne	r2,zero,201b17c <alt_find_file+0x70>
    {
      len -= 1;
 201b170:	e0bffc17 	ldw	r2,-16(fp)
 201b174:	10bfffc4 	addi	r2,r2,-1
 201b178:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 201b17c:	e0bffc17 	ldw	r2,-16(fp)
 201b180:	1007883a 	mov	r3,r2
 201b184:	e0bffe17 	ldw	r2,-8(fp)
 201b188:	1885883a 	add	r2,r3,r2
 201b18c:	10800003 	ldbu	r2,0(r2)
 201b190:	10803fcc 	andi	r2,r2,255
 201b194:	1080201c 	xori	r2,r2,128
 201b198:	10bfe004 	addi	r2,r2,-128
 201b19c:	10800be0 	cmpeqi	r2,r2,47
 201b1a0:	10000a1e 	bne	r2,zero,201b1cc <alt_find_file+0xc0>
 201b1a4:	e0bffc17 	ldw	r2,-16(fp)
 201b1a8:	1007883a 	mov	r3,r2
 201b1ac:	e0bffe17 	ldw	r2,-8(fp)
 201b1b0:	1885883a 	add	r2,r3,r2
 201b1b4:	10800003 	ldbu	r2,0(r2)
 201b1b8:	10803fcc 	andi	r2,r2,255
 201b1bc:	1080201c 	xori	r2,r2,128
 201b1c0:	10bfe004 	addi	r2,r2,-128
 201b1c4:	1004c03a 	cmpne	r2,r2,zero
 201b1c8:	10000a1e 	bne	r2,zero,201b1f4 <alt_find_file+0xe8>
 201b1cc:	e0bffd17 	ldw	r2,-12(fp)
 201b1d0:	11000217 	ldw	r4,8(r2)
 201b1d4:	e1bffc17 	ldw	r6,-16(fp)
 201b1d8:	e17ffe17 	ldw	r5,-8(fp)
 201b1dc:	201b3480 	call	201b348 <memcmp>
 201b1e0:	1004c03a 	cmpne	r2,r2,zero
 201b1e4:	1000031e 	bne	r2,zero,201b1f4 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 201b1e8:	e0bffd17 	ldw	r2,-12(fp)
 201b1ec:	e0bfff15 	stw	r2,-4(fp)
 201b1f0:	00000806 	br	201b214 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 201b1f4:	e0bffd17 	ldw	r2,-12(fp)
 201b1f8:	10800017 	ldw	r2,0(r2)
 201b1fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 201b200:	00c080b4 	movhi	r3,514
 201b204:	18f6fe04 	addi	r3,r3,-9224
 201b208:	e0bffd17 	ldw	r2,-12(fp)
 201b20c:	10ffc91e 	bne	r2,r3,201b134 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 201b210:	e03fff15 	stw	zero,-4(fp)
 201b214:	e0bfff17 	ldw	r2,-4(fp)
}
 201b218:	e037883a 	mov	sp,fp
 201b21c:	dfc00117 	ldw	ra,4(sp)
 201b220:	df000017 	ldw	fp,0(sp)
 201b224:	dec00204 	addi	sp,sp,8
 201b228:	f800283a 	ret

0201b22c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 201b22c:	defffa04 	addi	sp,sp,-24
 201b230:	dfc00515 	stw	ra,20(sp)
 201b234:	df000415 	stw	fp,16(sp)
 201b238:	dc000315 	stw	r16,12(sp)
 201b23c:	df000304 	addi	fp,sp,12
 201b240:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 201b244:	00bffa04 	movi	r2,-24
 201b248:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 201b24c:	e03ffe15 	stw	zero,-8(fp)
 201b250:	00002006 	br	201b2d4 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
 201b254:	e13ffe17 	ldw	r4,-8(fp)
 201b258:	040080b4 	movhi	r16,514
 201b25c:	84323704 	addi	r16,r16,-14116
 201b260:	01400304 	movi	r5,12
 201b264:	200d0cc0 	call	200d0cc <__mulsi3>
 201b268:	1405883a 	add	r2,r2,r16
 201b26c:	10800017 	ldw	r2,0(r2)
 201b270:	1004c03a 	cmpne	r2,r2,zero
 201b274:	1000141e 	bne	r2,zero,201b2c8 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
 201b278:	e13ffe17 	ldw	r4,-8(fp)
 201b27c:	040080b4 	movhi	r16,514
 201b280:	84323704 	addi	r16,r16,-14116
 201b284:	01400304 	movi	r5,12
 201b288:	200d0cc0 	call	200d0cc <__mulsi3>
 201b28c:	1407883a 	add	r3,r2,r16
 201b290:	e0bfff17 	ldw	r2,-4(fp)
 201b294:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 201b298:	008080b4 	movhi	r2,514
 201b29c:	10b70204 	addi	r2,r2,-9208
 201b2a0:	10c00017 	ldw	r3,0(r2)
 201b2a4:	e0bffe17 	ldw	r2,-8(fp)
 201b2a8:	1880040e 	bge	r3,r2,201b2bc <alt_get_fd+0x90>
      {
        alt_max_fd = i;
 201b2ac:	00c080b4 	movhi	r3,514
 201b2b0:	18f70204 	addi	r3,r3,-9208
 201b2b4:	e0bffe17 	ldw	r2,-8(fp)
 201b2b8:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 201b2bc:	e0bffe17 	ldw	r2,-8(fp)
 201b2c0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 201b2c4:	00000606 	br	201b2e0 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 201b2c8:	e0bffe17 	ldw	r2,-8(fp)
 201b2cc:	10800044 	addi	r2,r2,1
 201b2d0:	e0bffe15 	stw	r2,-8(fp)
 201b2d4:	e0bffe17 	ldw	r2,-8(fp)
 201b2d8:	10800810 	cmplti	r2,r2,32
 201b2dc:	103fdd1e 	bne	r2,zero,201b254 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 201b2e0:	e0bffd17 	ldw	r2,-12(fp)
}
 201b2e4:	e037883a 	mov	sp,fp
 201b2e8:	dfc00217 	ldw	ra,8(sp)
 201b2ec:	df000117 	ldw	fp,4(sp)
 201b2f0:	dc000017 	ldw	r16,0(sp)
 201b2f4:	dec00304 	addi	sp,sp,12
 201b2f8:	f800283a 	ret

0201b2fc <atexit>:
 201b2fc:	200b883a 	mov	r5,r4
 201b300:	000d883a 	mov	r6,zero
 201b304:	0009883a 	mov	r4,zero
 201b308:	000f883a 	mov	r7,zero
 201b30c:	201b3bc1 	jmpi	201b3bc <__register_exitproc>

0201b310 <exit>:
 201b310:	defffe04 	addi	sp,sp,-8
 201b314:	000b883a 	mov	r5,zero
 201b318:	dc000015 	stw	r16,0(sp)
 201b31c:	dfc00115 	stw	ra,4(sp)
 201b320:	2021883a 	mov	r16,r4
 201b324:	201b4f40 	call	201b4f4 <__call_exitprocs>
 201b328:	008080b4 	movhi	r2,514
 201b32c:	10b6fb04 	addi	r2,r2,-9236
 201b330:	11000017 	ldw	r4,0(r2)
 201b334:	20800f17 	ldw	r2,60(r4)
 201b338:	10000126 	beq	r2,zero,201b340 <exit+0x30>
 201b33c:	103ee83a 	callr	r2
 201b340:	8009883a 	mov	r4,r16
 201b344:	20175e40 	call	20175e4 <_exit>

0201b348 <memcmp>:
 201b348:	00c000c4 	movi	r3,3
 201b34c:	1980032e 	bgeu	r3,r6,201b35c <memcmp+0x14>
 201b350:	2144b03a 	or	r2,r4,r5
 201b354:	10c4703a 	and	r2,r2,r3
 201b358:	10000f26 	beq	r2,zero,201b398 <memcmp+0x50>
 201b35c:	31ffffc4 	addi	r7,r6,-1
 201b360:	3000061e 	bne	r6,zero,201b37c <memcmp+0x34>
 201b364:	00000a06 	br	201b390 <memcmp+0x48>
 201b368:	39ffffc4 	addi	r7,r7,-1
 201b36c:	00bfffc4 	movi	r2,-1
 201b370:	21000044 	addi	r4,r4,1
 201b374:	29400044 	addi	r5,r5,1
 201b378:	38800526 	beq	r7,r2,201b390 <memcmp+0x48>
 201b37c:	20c00003 	ldbu	r3,0(r4)
 201b380:	28800003 	ldbu	r2,0(r5)
 201b384:	18bff826 	beq	r3,r2,201b368 <memcmp+0x20>
 201b388:	1885c83a 	sub	r2,r3,r2
 201b38c:	f800283a 	ret
 201b390:	0005883a 	mov	r2,zero
 201b394:	f800283a 	ret
 201b398:	180f883a 	mov	r7,r3
 201b39c:	20c00017 	ldw	r3,0(r4)
 201b3a0:	28800017 	ldw	r2,0(r5)
 201b3a4:	18bfed1e 	bne	r3,r2,201b35c <memcmp+0x14>
 201b3a8:	31bfff04 	addi	r6,r6,-4
 201b3ac:	21000104 	addi	r4,r4,4
 201b3b0:	29400104 	addi	r5,r5,4
 201b3b4:	39bff936 	bltu	r7,r6,201b39c <memcmp+0x54>
 201b3b8:	003fe806 	br	201b35c <memcmp+0x14>

0201b3bc <__register_exitproc>:
 201b3bc:	defffa04 	addi	sp,sp,-24
 201b3c0:	008080b4 	movhi	r2,514
 201b3c4:	10b6fb04 	addi	r2,r2,-9236
 201b3c8:	dc000015 	stw	r16,0(sp)
 201b3cc:	14000017 	ldw	r16,0(r2)
 201b3d0:	dd000415 	stw	r20,16(sp)
 201b3d4:	2829883a 	mov	r20,r5
 201b3d8:	81405217 	ldw	r5,328(r16)
 201b3dc:	dcc00315 	stw	r19,12(sp)
 201b3e0:	dc800215 	stw	r18,8(sp)
 201b3e4:	dc400115 	stw	r17,4(sp)
 201b3e8:	dfc00515 	stw	ra,20(sp)
 201b3ec:	2023883a 	mov	r17,r4
 201b3f0:	3027883a 	mov	r19,r6
 201b3f4:	3825883a 	mov	r18,r7
 201b3f8:	28002526 	beq	r5,zero,201b490 <__register_exitproc+0xd4>
 201b3fc:	29000117 	ldw	r4,4(r5)
 201b400:	008007c4 	movi	r2,31
 201b404:	11002716 	blt	r2,r4,201b4a4 <__register_exitproc+0xe8>
 201b408:	8800101e 	bne	r17,zero,201b44c <__register_exitproc+0x90>
 201b40c:	2105883a 	add	r2,r4,r4
 201b410:	1085883a 	add	r2,r2,r2
 201b414:	20c00044 	addi	r3,r4,1
 201b418:	1145883a 	add	r2,r2,r5
 201b41c:	0009883a 	mov	r4,zero
 201b420:	15000215 	stw	r20,8(r2)
 201b424:	28c00115 	stw	r3,4(r5)
 201b428:	2005883a 	mov	r2,r4
 201b42c:	dfc00517 	ldw	ra,20(sp)
 201b430:	dd000417 	ldw	r20,16(sp)
 201b434:	dcc00317 	ldw	r19,12(sp)
 201b438:	dc800217 	ldw	r18,8(sp)
 201b43c:	dc400117 	ldw	r17,4(sp)
 201b440:	dc000017 	ldw	r16,0(sp)
 201b444:	dec00604 	addi	sp,sp,24
 201b448:	f800283a 	ret
 201b44c:	29802204 	addi	r6,r5,136
 201b450:	00800044 	movi	r2,1
 201b454:	110e983a 	sll	r7,r2,r4
 201b458:	30c04017 	ldw	r3,256(r6)
 201b45c:	2105883a 	add	r2,r4,r4
 201b460:	1085883a 	add	r2,r2,r2
 201b464:	1185883a 	add	r2,r2,r6
 201b468:	19c6b03a 	or	r3,r3,r7
 201b46c:	14802015 	stw	r18,128(r2)
 201b470:	14c00015 	stw	r19,0(r2)
 201b474:	00800084 	movi	r2,2
 201b478:	30c04015 	stw	r3,256(r6)
 201b47c:	88bfe31e 	bne	r17,r2,201b40c <__register_exitproc+0x50>
 201b480:	30804117 	ldw	r2,260(r6)
 201b484:	11c4b03a 	or	r2,r2,r7
 201b488:	30804115 	stw	r2,260(r6)
 201b48c:	003fdf06 	br	201b40c <__register_exitproc+0x50>
 201b490:	008080b4 	movhi	r2,514
 201b494:	10805704 	addi	r2,r2,348
 201b498:	100b883a 	mov	r5,r2
 201b49c:	80805215 	stw	r2,328(r16)
 201b4a0:	003fd606 	br	201b3fc <__register_exitproc+0x40>
 201b4a4:	00808074 	movhi	r2,513
 201b4a8:	10b59e04 	addi	r2,r2,-10632
 201b4ac:	1000021e 	bne	r2,zero,201b4b8 <__register_exitproc+0xfc>
 201b4b0:	013fffc4 	movi	r4,-1
 201b4b4:	003fdc06 	br	201b428 <__register_exitproc+0x6c>
 201b4b8:	01006404 	movi	r4,400
 201b4bc:	103ee83a 	callr	r2
 201b4c0:	1007883a 	mov	r3,r2
 201b4c4:	103ffa26 	beq	r2,zero,201b4b0 <__register_exitproc+0xf4>
 201b4c8:	80805217 	ldw	r2,328(r16)
 201b4cc:	180b883a 	mov	r5,r3
 201b4d0:	18000115 	stw	zero,4(r3)
 201b4d4:	18800015 	stw	r2,0(r3)
 201b4d8:	80c05215 	stw	r3,328(r16)
 201b4dc:	18006215 	stw	zero,392(r3)
 201b4e0:	18006315 	stw	zero,396(r3)
 201b4e4:	0009883a 	mov	r4,zero
 201b4e8:	883fc826 	beq	r17,zero,201b40c <__register_exitproc+0x50>
 201b4ec:	003fd706 	br	201b44c <__register_exitproc+0x90>

0201b4f0 <register_fini>:
 201b4f0:	f800283a 	ret

0201b4f4 <__call_exitprocs>:
 201b4f4:	008080b4 	movhi	r2,514
 201b4f8:	10b6fb04 	addi	r2,r2,-9236
 201b4fc:	10800017 	ldw	r2,0(r2)
 201b500:	defff304 	addi	sp,sp,-52
 201b504:	df000b15 	stw	fp,44(sp)
 201b508:	d8800115 	stw	r2,4(sp)
 201b50c:	00808074 	movhi	r2,513
 201b510:	10b59904 	addi	r2,r2,-10652
 201b514:	1005003a 	cmpeq	r2,r2,zero
 201b518:	d8800215 	stw	r2,8(sp)
 201b51c:	d8800117 	ldw	r2,4(sp)
 201b520:	dd400815 	stw	r21,32(sp)
 201b524:	dd000715 	stw	r20,28(sp)
 201b528:	10805204 	addi	r2,r2,328
 201b52c:	dfc00c15 	stw	ra,48(sp)
 201b530:	ddc00a15 	stw	r23,40(sp)
 201b534:	dd800915 	stw	r22,36(sp)
 201b538:	dcc00615 	stw	r19,24(sp)
 201b53c:	dc800515 	stw	r18,20(sp)
 201b540:	dc400415 	stw	r17,16(sp)
 201b544:	dc000315 	stw	r16,12(sp)
 201b548:	282b883a 	mov	r21,r5
 201b54c:	2039883a 	mov	fp,r4
 201b550:	d8800015 	stw	r2,0(sp)
 201b554:	2829003a 	cmpeq	r20,r5,zero
 201b558:	d8800117 	ldw	r2,4(sp)
 201b55c:	14405217 	ldw	r17,328(r2)
 201b560:	88001026 	beq	r17,zero,201b5a4 <__call_exitprocs+0xb0>
 201b564:	ddc00017 	ldw	r23,0(sp)
 201b568:	88800117 	ldw	r2,4(r17)
 201b56c:	8c802204 	addi	r18,r17,136
 201b570:	143fffc4 	addi	r16,r2,-1
 201b574:	80000916 	blt	r16,zero,201b59c <__call_exitprocs+0xa8>
 201b578:	05bfffc4 	movi	r22,-1
 201b57c:	a000151e 	bne	r20,zero,201b5d4 <__call_exitprocs+0xe0>
 201b580:	8409883a 	add	r4,r16,r16
 201b584:	2105883a 	add	r2,r4,r4
 201b588:	1485883a 	add	r2,r2,r18
 201b58c:	10c02017 	ldw	r3,128(r2)
 201b590:	a8c01126 	beq	r21,r3,201b5d8 <__call_exitprocs+0xe4>
 201b594:	843fffc4 	addi	r16,r16,-1
 201b598:	85bff81e 	bne	r16,r22,201b57c <__call_exitprocs+0x88>
 201b59c:	d8800217 	ldw	r2,8(sp)
 201b5a0:	10003126 	beq	r2,zero,201b668 <__call_exitprocs+0x174>
 201b5a4:	dfc00c17 	ldw	ra,48(sp)
 201b5a8:	df000b17 	ldw	fp,44(sp)
 201b5ac:	ddc00a17 	ldw	r23,40(sp)
 201b5b0:	dd800917 	ldw	r22,36(sp)
 201b5b4:	dd400817 	ldw	r21,32(sp)
 201b5b8:	dd000717 	ldw	r20,28(sp)
 201b5bc:	dcc00617 	ldw	r19,24(sp)
 201b5c0:	dc800517 	ldw	r18,20(sp)
 201b5c4:	dc400417 	ldw	r17,16(sp)
 201b5c8:	dc000317 	ldw	r16,12(sp)
 201b5cc:	dec00d04 	addi	sp,sp,52
 201b5d0:	f800283a 	ret
 201b5d4:	8409883a 	add	r4,r16,r16
 201b5d8:	88c00117 	ldw	r3,4(r17)
 201b5dc:	2105883a 	add	r2,r4,r4
 201b5e0:	1445883a 	add	r2,r2,r17
 201b5e4:	18ffffc4 	addi	r3,r3,-1
 201b5e8:	11800217 	ldw	r6,8(r2)
 201b5ec:	1c001526 	beq	r3,r16,201b644 <__call_exitprocs+0x150>
 201b5f0:	10000215 	stw	zero,8(r2)
 201b5f4:	303fe726 	beq	r6,zero,201b594 <__call_exitprocs+0xa0>
 201b5f8:	00c00044 	movi	r3,1
 201b5fc:	1c06983a 	sll	r3,r3,r16
 201b600:	90804017 	ldw	r2,256(r18)
 201b604:	8cc00117 	ldw	r19,4(r17)
 201b608:	1884703a 	and	r2,r3,r2
 201b60c:	10001426 	beq	r2,zero,201b660 <__call_exitprocs+0x16c>
 201b610:	90804117 	ldw	r2,260(r18)
 201b614:	1884703a 	and	r2,r3,r2
 201b618:	10000c1e 	bne	r2,zero,201b64c <__call_exitprocs+0x158>
 201b61c:	2105883a 	add	r2,r4,r4
 201b620:	1485883a 	add	r2,r2,r18
 201b624:	11400017 	ldw	r5,0(r2)
 201b628:	e009883a 	mov	r4,fp
 201b62c:	303ee83a 	callr	r6
 201b630:	88800117 	ldw	r2,4(r17)
 201b634:	98bfc81e 	bne	r19,r2,201b558 <__call_exitprocs+0x64>
 201b638:	b8800017 	ldw	r2,0(r23)
 201b63c:	147fd526 	beq	r2,r17,201b594 <__call_exitprocs+0xa0>
 201b640:	003fc506 	br	201b558 <__call_exitprocs+0x64>
 201b644:	8c000115 	stw	r16,4(r17)
 201b648:	003fea06 	br	201b5f4 <__call_exitprocs+0x100>
 201b64c:	2105883a 	add	r2,r4,r4
 201b650:	1485883a 	add	r2,r2,r18
 201b654:	11000017 	ldw	r4,0(r2)
 201b658:	303ee83a 	callr	r6
 201b65c:	003ff406 	br	201b630 <__call_exitprocs+0x13c>
 201b660:	303ee83a 	callr	r6
 201b664:	003ff206 	br	201b630 <__call_exitprocs+0x13c>
 201b668:	88800117 	ldw	r2,4(r17)
 201b66c:	1000081e 	bne	r2,zero,201b690 <__call_exitprocs+0x19c>
 201b670:	89000017 	ldw	r4,0(r17)
 201b674:	20000726 	beq	r4,zero,201b694 <__call_exitprocs+0x1a0>
 201b678:	b9000015 	stw	r4,0(r23)
 201b67c:	8809883a 	mov	r4,r17
 201b680:	200d6640 	call	200d664 <free>
 201b684:	bc400017 	ldw	r17,0(r23)
 201b688:	883fb71e 	bne	r17,zero,201b568 <__call_exitprocs+0x74>
 201b68c:	003fc506 	br	201b5a4 <__call_exitprocs+0xb0>
 201b690:	89000017 	ldw	r4,0(r17)
 201b694:	882f883a 	mov	r23,r17
 201b698:	2023883a 	mov	r17,r4
 201b69c:	883fb21e 	bne	r17,zero,201b568 <__call_exitprocs+0x74>
 201b6a0:	003fc006 	br	201b5a4 <__call_exitprocs+0xb0>
 201b6a4:	0401ffff 	0x401ffff
 201b6a8:	00010000 	call	1000 <__reset-0x1fff000>
 201b6ac:	0201ffff 	0x201ffff
 201b6b0:	ffff0000 	call	ffff000 <__alt_data_end+0xbfff000>
 201b6b4:	00000601 	jmpi	60 <__reset-0x1ffffa0>
 201b6b8:	00020001 	jmpi	2000 <__reset-0x1ffe000>
 201b6bc:	0201ffff 	0x201ffff
 201b6c0:	ffff0000 	call	ffff000 <__alt_data_end+0xbfff000>
 201b6c4:	00000201 	jmpi	20 <__reset-0x1ffffe0>
 201b6c8:	0201ffff 	0x201ffff
 201b6cc:	ffff0000 	call	ffff000 <__alt_data_end+0xbfff000>
 201b6d0:	00000201 	jmpi	20 <__reset-0x1ffffe0>
 201b6d4:	0201ffff 	0x201ffff
 201b6d8:	ffff0000 	call	ffff000 <__alt_data_end+0xbfff000>
 201b6dc:	00000201 	jmpi	20 <__reset-0x1ffffe0>
 201b6e0:	0201ffff 	0x201ffff
 201b6e4:	ffff0000 	call	ffff000 <__alt_data_end+0xbfff000>
 201b6e8:	00000201 	jmpi	20 <__reset-0x1ffffe0>
 201b6ec:	0201ffff 	0x201ffff
 201b6f0:	ffff0000 	call	ffff000 <__alt_data_end+0xbfff000>
 201b6f4:	00000201 	jmpi	20 <__reset-0x1ffffe0>
 201b6f8:	0201ffff 	0x201ffff
 201b6fc:	ffff0000 	call	ffff000 <__alt_data_end+0xbfff000>
 201b700:	00000201 	jmpi	20 <__reset-0x1ffffe0>
 201b704:	0201ffff 	0x201ffff
 201b708:	ffff0000 	call	ffff000 <__alt_data_end+0xbfff000>
 201b70c:	00000201 	jmpi	20 <__reset-0x1ffffe0>
 201b710:	0201ffff 	0x201ffff
 201b714:	ffff0000 	call	ffff000 <__alt_data_end+0xbfff000>
 201b718:	00000201 	jmpi	20 <__reset-0x1ffffe0>
 201b71c:	0201ffff 	0x201ffff
 201b720:	ffff0000 	call	ffff000 <__alt_data_end+0xbfff000>
 201b724:	00000201 	jmpi	20 <__reset-0x1ffffe0>
 201b728:	0201ffff 	0x201ffff
 201b72c:	ffff0000 	call	ffff000 <__alt_data_end+0xbfff000>
 201b730:	00000201 	jmpi	20 <__reset-0x1ffffe0>
 201b734:	0201ffff 	0x201ffff
 201b738:	ffff0000 	call	ffff000 <__alt_data_end+0xbfff000>
 201b73c:	00000201 	jmpi	20 <__reset-0x1ffffe0>
 201b740:	0201ffff 	0x201ffff
 201b744:	ffff0000 	call	ffff000 <__alt_data_end+0xbfff000>
 201b748:	00001801 	jmpi	180 <__reset-0x1fffe80>
 201b74c:	00020001 	jmpi	2000 <__reset-0x1ffe000>
 201b750:	00040003 	ldbu	zero,4096(zero)
 201b754:	00060005 	stb	zero,6144(zero)
 201b758:	00080007 	ldb	zero,8192(zero)
 201b75c:	000a0009 	0xa0009
 201b760:	ffff000b 	ldhu	ra,-1024(ra)
 201b764:	00000201 	jmpi	20 <__reset-0x1ffffe0>
 201b768:	0201ffff 	0x201ffff
 201b76c:	ffff0000 	call	ffff000 <__alt_data_end+0xbfff000>
 201b770:	00000201 	jmpi	20 <__reset-0x1ffffe0>
 201b774:	0201ffff 	0x201ffff
 201b778:	ffff0000 	call	ffff000 <__alt_data_end+0xbfff000>
 201b77c:	00000201 	jmpi	20 <__reset-0x1ffffe0>
 201b780:	0201ffff 	0x201ffff
 201b784:	ffff0000 	call	ffff000 <__alt_data_end+0xbfff000>
 201b788:	00000201 	jmpi	20 <__reset-0x1ffffe0>
 201b78c:	0201ffff 	0x201ffff
 201b790:	ffff0000 	call	ffff000 <__alt_data_end+0xbfff000>
 201b794:	00000201 	jmpi	20 <__reset-0x1ffffe0>
 201b798:	0201ffff 	0x201ffff
 201b79c:	ffff0000 	call	ffff000 <__alt_data_end+0xbfff000>
 201b7a0:	00000201 	jmpi	20 <__reset-0x1ffffe0>
 201b7a4:	0201ffff 	0x201ffff
 201b7a8:	ffff0000 	call	ffff000 <__alt_data_end+0xbfff000>
 201b7ac:	00000201 	jmpi	20 <__reset-0x1ffffe0>
 201b7b0:	0201ffff 	0x201ffff
 201b7b4:	ffff0000 	call	ffff000 <__alt_data_end+0xbfff000>
 201b7b8:	00000201 	jmpi	20 <__reset-0x1ffffe0>
 201b7bc:	0201ffff 	0x201ffff
 201b7c0:	883a0000 	call	883a000 <__alt_data_end+0x483a000>
 201b7c4:	010d0bff 	0x10d0bff
 201b7c8:	01000004 	movi	r4,0
 201b7cc:	00000101 	jmpi	10 <__reset-0x1fffff0>
 201b7d0:	00000000 	call	0 <__reset-0x2000000>
 201b7d4:	010d0bff 	0x10d0bff
 201b7d8:	01000004 	movi	r4,0
 201b7dc:	00000101 	jmpi	10 <__reset-0x1fffff0>
 201b7e0:	00000000 	call	0 <__reset-0x2000000>
 201b7e4:	010d0bff 	0x10d0bff
 201b7e8:	01000004 	movi	r4,0
 201b7ec:	00000101 	jmpi	10 <__reset-0x1fffff0>
 201b7f0:	00000000 	call	0 <__reset-0x2000000>
 201b7f4:	01090bff 	0x1090bff
 201b7f8:	7f010002 	0x7f010002
	...
 201b804:	01090bff 	0x1090bff
 201b808:	7f010002 	0x7f010002
	...
 201b814:	010d0bff 	0x10d0bff
 201b818:	7f010002 	0x7f010002
 201b81c:	00000000 	call	0 <__reset-0x2000000>
 201b820:	0201bd40 	call	201bd4 <__reset-0x1dfe42c>
 201b824:	00000001 	jmpi	0 <__reset-0x2000000>
 201b828:	0201b4f0 	cmpltui	r8,zero,1747
